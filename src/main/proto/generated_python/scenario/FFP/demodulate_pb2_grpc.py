# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from scenario.FFP import demodulate_pb2 as scenario_dot_FFP_dot_demodulate__pb2
from scenario import scenario_pb2 as scenario_dot_scenario__pb2


class DemodulationServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartAnalogDemodTask = channel.unary_unary(
                '/zb.dcts.scenario.FFP.DemodulationService/StartAnalogDemodTask',
                request_serializer=scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodRequest.SerializeToString,
                response_deserializer=scenario_dot_scenario__pb2.ScenarioReply.FromString,
                )
        self.ChangeDemodChannel = channel.unary_unary(
                '/zb.dcts.scenario.FFP.DemodulationService/ChangeDemodChannel',
                request_serializer=scenario_dot_FFP_dot_demodulate__pb2.ChangeDemodChannelRequest.SerializeToString,
                response_deserializer=scenario_dot_scenario__pb2.ScenarioReply.FromString,
                )
        self.GetAnalogDemodResult = channel.unary_stream(
                '/zb.dcts.scenario.FFP.DemodulationService/GetAnalogDemodResult',
                request_serializer=scenario_dot_scenario__pb2.ScenarioTaskId.SerializeToString,
                response_deserializer=scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodResult.FromString,
                )
        self.StopAnalogDemodTask = channel.unary_unary(
                '/zb.dcts.scenario.FFP.DemodulationService/StopAnalogDemodTask',
                request_serializer=scenario_dot_scenario__pb2.ScenarioTaskId.SerializeToString,
                response_deserializer=scenario_dot_scenario__pb2.ScenarioReply.FromString,
                )


class DemodulationServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def StartAnalogDemodTask(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeDemodChannel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalogDemodResult(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAnalogDemodTask(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DemodulationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartAnalogDemodTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StartAnalogDemodTask,
                    request_deserializer=scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodRequest.FromString,
                    response_serializer=scenario_dot_scenario__pb2.ScenarioReply.SerializeToString,
            ),
            'ChangeDemodChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeDemodChannel,
                    request_deserializer=scenario_dot_FFP_dot_demodulate__pb2.ChangeDemodChannelRequest.FromString,
                    response_serializer=scenario_dot_scenario__pb2.ScenarioReply.SerializeToString,
            ),
            'GetAnalogDemodResult': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAnalogDemodResult,
                    request_deserializer=scenario_dot_scenario__pb2.ScenarioTaskId.FromString,
                    response_serializer=scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodResult.SerializeToString,
            ),
            'StopAnalogDemodTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAnalogDemodTask,
                    request_deserializer=scenario_dot_scenario__pb2.ScenarioTaskId.FromString,
                    response_serializer=scenario_dot_scenario__pb2.ScenarioReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zb.dcts.scenario.FFP.DemodulationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DemodulationService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def StartAnalogDemodTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zb.dcts.scenario.FFP.DemodulationService/StartAnalogDemodTask',
            scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodRequest.SerializeToString,
            scenario_dot_scenario__pb2.ScenarioReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeDemodChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zb.dcts.scenario.FFP.DemodulationService/ChangeDemodChannel',
            scenario_dot_FFP_dot_demodulate__pb2.ChangeDemodChannelRequest.SerializeToString,
            scenario_dot_scenario__pb2.ScenarioReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnalogDemodResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zb.dcts.scenario.FFP.DemodulationService/GetAnalogDemodResult',
            scenario_dot_scenario__pb2.ScenarioTaskId.SerializeToString,
            scenario_dot_FFP_dot_demodulate__pb2.AnalogDemodResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopAnalogDemodTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zb.dcts.scenario.FFP.DemodulationService/StopAnalogDemodTask',
            scenario_dot_scenario__pb2.ScenarioTaskId.SerializeToString,
            scenario_dot_scenario__pb2.ScenarioReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
