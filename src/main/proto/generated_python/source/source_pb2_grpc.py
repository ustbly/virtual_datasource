# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from source import source_pb2 as source_dot_source__pb2


class SourceControlServiceStub(object):
    """源控制的API
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAllSources = channel.unary_unary(
                '/zb.dcts.source.SourceControlService/ListAllSources',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=source_dot_source__pb2.SourceSetInfo.FromString,
                )
        self.SendSourceCommand = channel.unary_unary(
                '/zb.dcts.source.SourceControlService/SendSourceCommand',
                request_serializer=source_dot_source__pb2.SourceCommand.SerializeToString,
                response_deserializer=source_dot_source__pb2.SourceCommandReply.FromString,
                )
        self.SubscribeSourceMessage = channel.unary_stream(
                '/zb.dcts.source.SourceControlService/SubscribeSourceMessage',
                request_serializer=source_dot_source__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                )


class SourceControlServiceServicer(object):
    """源控制的API
    """

    def ListAllSources(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSourceCommand(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSourceMessage(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SourceControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAllSources': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllSources,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=source_dot_source__pb2.SourceSetInfo.SerializeToString,
            ),
            'SendSourceCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSourceCommand,
                    request_deserializer=source_dot_source__pb2.SourceCommand.FromString,
                    response_serializer=source_dot_source__pb2.SourceCommandReply.SerializeToString,
            ),
            'SubscribeSourceMessage': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSourceMessage,
                    request_deserializer=source_dot_source__pb2.SubscribeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zb.dcts.source.SourceControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SourceControlService(object):
    """源控制的API
    """

    @staticmethod
    def ListAllSources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zb.dcts.source.SourceControlService/ListAllSources',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            source_dot_source__pb2.SourceSetInfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSourceCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zb.dcts.source.SourceControlService/SendSourceCommand',
            source_dot_source__pb2.SourceCommand.SerializeToString,
            source_dot_source__pb2.SourceCommandReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeSourceMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/zb.dcts.source.SourceControlService/SubscribeSourceMessage',
            source_dot_source__pb2.SubscribeRequest.SerializeToString,
            google_dot_protobuf_dot_any__pb2.Any.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
