syntax = "proto3";

package zb.dcts.scenario.spectrum;

import "dcts.proto";
import "source/source.proto";
import "scenario/scenario.proto";


//频率范围
message FrequencySpan
{
    double start_freq = 1;    //起始频率
    double stop_freq = 2;     //终止频率
}

message FrequencySegment
{
    FrequencySpan freq_span = 1;        //频率范围
    int32 points = 2;                   //点数
}

message FrequencyPos
{
    int32 segment_idx = 1;      //段索引
    int32 seg_internal_offset = 2; //段内偏移，好专业的术语
}

message FrequencyBand
{
    repeated FrequencySegment segments = 1;
}

message FrequencyRange
{
    FrequencyPos start_pos = 1;
    FrequencyPos stop_pos = 2;
}

//信号带宽
message SignalBand
{
    double center_frequency = 1;
    double band_width = 2;
}

message DDCBank
{
    double center_frequency = 1;
    double sample_rate = 2;
}

enum DataHoldType
{
    NO_HOLD = 0;
    MAX_HOLD = 1;
    MIN_HOLD = 2;
    RMS_HOLD = 3;
    AVG_HOLD = 4;
}

message DataHoldRequest
{
    ScenarioTaskId responser = 1;
    DataHoldType data_hold_type = 2;
}

message SpectrumLine
{
    repeated float spectrum_points = 1;
}

message SpectrumBlock
{
    SignalBand signal_band = 2;    //频谱的频率范围
    TimeSpan time_span = 3;                 //频谱的时间范围
    repeated SpectrumLine spectrum_lines = 4;//频谱的频谱线集合
}

//观测频谱近景的请求
message ZoomInRequest
{
    ScenarioTaskId responser = 1;
    FrequencySegment zoom_in_part = 2;           //要重点监测的近景范围
}

message View
{
    FrequencySpan freq_span = 1;             //频率范围
    map<string, SpectrumLine> traces = 2; //各类谱线 trace name string is adopted as a key, e.g. 'current', 'pos_peak', 'neg_peak', 'threshold'
}

message Header
{
    source.SourceId result_from = 1;         //数据来源
    string record_id = 2;               //记录id，仅在回放时有效
    uint32 sequence_number = 3;         //顺序号，每个任务执行者维护自身的顺序号
    uint32 sweep_count = 4;             //当前上报周期内的扫描次数
    TimeSpan time_span = 5;             //当前上报周期内的首次/末次扫描的采集时刻（由设备提供的时间）
    Position device_position = 6;       //设备位置
}

message SegmentHeader
{
    source.SourceId result_from = 1;        //结果来源
    uint64        sequence_number = 3;    //顺序号
    uint64        sweep_index = 4;        //扫描次数索引
    uint32        segment_index = 5;      //频点索引
    double      start_frequency = 6;
    double      frequency_step = 7;
    uint32      num_points = 8;
    Timestamp   time_stamp = 12;        //时间戳
    Position    position = 15;          //采集时所处的位置
}