// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/source.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_2fsource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_2fsource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_source_2fsource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace source {
class SourceCapability;
class SourceCapabilityDefaultTypeInternal;
extern SourceCapabilityDefaultTypeInternal _SourceCapability_default_instance_;
class SourceCommand;
class SourceCommandDefaultTypeInternal;
extern SourceCommandDefaultTypeInternal _SourceCommand_default_instance_;
class SourceCommandReply;
class SourceCommandReplyDefaultTypeInternal;
extern SourceCommandReplyDefaultTypeInternal _SourceCommandReply_default_instance_;
class SourceId;
class SourceIdDefaultTypeInternal;
extern SourceIdDefaultTypeInternal _SourceId_default_instance_;
class SourceInfo;
class SourceInfoDefaultTypeInternal;
extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
class SourceSetInfo;
class SourceSetInfoDefaultTypeInternal;
extern SourceSetInfoDefaultTypeInternal _SourceSetInfo_default_instance_;
class SubscribeRequest;
class SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
}  // namespace source
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::source::SourceCapability* Arena::CreateMaybeMessage<::zb::dcts::source::SourceCapability>(Arena*);
template<> ::zb::dcts::source::SourceCommand* Arena::CreateMaybeMessage<::zb::dcts::source::SourceCommand>(Arena*);
template<> ::zb::dcts::source::SourceCommandReply* Arena::CreateMaybeMessage<::zb::dcts::source::SourceCommandReply>(Arena*);
template<> ::zb::dcts::source::SourceId* Arena::CreateMaybeMessage<::zb::dcts::source::SourceId>(Arena*);
template<> ::zb::dcts::source::SourceInfo* Arena::CreateMaybeMessage<::zb::dcts::source::SourceInfo>(Arena*);
template<> ::zb::dcts::source::SourceSetInfo* Arena::CreateMaybeMessage<::zb::dcts::source::SourceSetInfo>(Arena*);
template<> ::zb::dcts::source::SubscribeRequest* Arena::CreateMaybeMessage<::zb::dcts::source::SubscribeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace source {

enum SourceCapability_Type : int {
  SourceCapability_Type_NONE = 0,
  SourceCapability_Type_SPECTRUM_SCAN = 1,
  SourceCapability_Type_IQ_STREAM = 2,
  SourceCapability_Type_DIRECTION_FINDING = 4,
  SourceCapability_Type_MULTI_CHANNEL = 8,
  SourceCapability_Type_SourceCapability_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceCapability_Type_SourceCapability_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceCapability_Type_IsValid(int value);
constexpr SourceCapability_Type SourceCapability_Type_Type_MIN = SourceCapability_Type_NONE;
constexpr SourceCapability_Type SourceCapability_Type_Type_MAX = SourceCapability_Type_MULTI_CHANNEL;
constexpr int SourceCapability_Type_Type_ARRAYSIZE = SourceCapability_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceCapability_Type_descriptor();
template<typename T>
inline const std::string& SourceCapability_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceCapability_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceCapability_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceCapability_Type_descriptor(), enum_t_value);
}
inline bool SourceCapability_Type_Parse(
    const std::string& name, SourceCapability_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceCapability_Type>(
    SourceCapability_Type_descriptor(), name, value);
}
enum SourceType : int {
  SENSOR_3900 = 0,
  FILE = 1,
  VIRTUAL = 2,
  KH_CZ_COMM = 3,
  KH_CZ_RADAR = 4,
  KH_CZ_JC = 5,
  KH_WGH_COMM = 6,
  KH_WGH_RADAR = 7,
  CZC_SM = 8,
  CZC_DF = 9,
  CZC_QJ = 10,
  RADAR_DF = 11,
  DEMO = 12,
  ZCZH = 13,
  SIMULATOR_COMM = 14,
  SourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceType_IsValid(int value);
constexpr SourceType SourceType_MIN = SENSOR_3900;
constexpr SourceType SourceType_MAX = SIMULATOR_COMM;
constexpr int SourceType_ARRAYSIZE = SourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor();
template<typename T>
inline const std::string& SourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceType_descriptor(), enum_t_value);
}
inline bool SourceType_Parse(
    const std::string& name, SourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceType>(
    SourceType_descriptor(), name, value);
}
enum SourceStatus : int {
  S_OFFLINE = 0,
  S_IDLE = 1,
  S_ENGAGED = 2,
  S_ABNORMAL = 3,
  SourceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SourceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SourceStatus_IsValid(int value);
constexpr SourceStatus SourceStatus_MIN = S_OFFLINE;
constexpr SourceStatus SourceStatus_MAX = S_ABNORMAL;
constexpr int SourceStatus_ARRAYSIZE = SourceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceStatus_descriptor();
template<typename T>
inline const std::string& SourceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceStatus_descriptor(), enum_t_value);
}
inline bool SourceStatus_Parse(
    const std::string& name, SourceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceStatus>(
    SourceStatus_descriptor(), name, value);
}
// ===================================================================

class SourceId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceId) */ {
 public:
  inline SourceId() : SourceId(nullptr) {};
  virtual ~SourceId();

  SourceId(const SourceId& from);
  SourceId(SourceId&& from) noexcept
    : SourceId() {
    *this = ::std::move(from);
  }

  inline SourceId& operator=(const SourceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceId& operator=(SourceId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceId* internal_default_instance() {
    return reinterpret_cast<const SourceId*>(
               &_SourceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SourceId& a, SourceId& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceId* New() const final {
    return CreateMaybeMessage<SourceId>(nullptr);
  }

  SourceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceId& from);
  void MergeFrom(const SourceId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceId";
  }
  protected:
  explicit SourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SourceCapability PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceCapability) */ {
 public:
  inline SourceCapability() : SourceCapability(nullptr) {};
  virtual ~SourceCapability();

  SourceCapability(const SourceCapability& from);
  SourceCapability(SourceCapability&& from) noexcept
    : SourceCapability() {
    *this = ::std::move(from);
  }

  inline SourceCapability& operator=(const SourceCapability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceCapability& operator=(SourceCapability&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceCapability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceCapability* internal_default_instance() {
    return reinterpret_cast<const SourceCapability*>(
               &_SourceCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SourceCapability& a, SourceCapability& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceCapability* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceCapability* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceCapability* New() const final {
    return CreateMaybeMessage<SourceCapability>(nullptr);
  }

  SourceCapability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceCapability>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceCapability& from);
  void MergeFrom(const SourceCapability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceCapability* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceCapability";
  }
  protected:
  explicit SourceCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SourceCapability_Type Type;
  static constexpr Type NONE =
    SourceCapability_Type_NONE;
  static constexpr Type SPECTRUM_SCAN =
    SourceCapability_Type_SPECTRUM_SCAN;
  static constexpr Type IQ_STREAM =
    SourceCapability_Type_IQ_STREAM;
  static constexpr Type DIRECTION_FINDING =
    SourceCapability_Type_DIRECTION_FINDING;
  static constexpr Type MULTI_CHANNEL =
    SourceCapability_Type_MULTI_CHANNEL;
  static inline bool Type_IsValid(int value) {
    return SourceCapability_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    SourceCapability_Type_Type_MIN;
  static constexpr Type Type_MAX =
    SourceCapability_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    SourceCapability_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return SourceCapability_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return SourceCapability_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return SourceCapability_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCapabilityFieldNumber = 1,
  };
  // uint32 capability = 1;
  void clear_capability();
  ::PROTOBUF_NAMESPACE_ID::uint32 capability() const;
  void set_capability(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capability() const;
  void _internal_set_capability(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceCapability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SourceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceInfo) */ {
 public:
  inline SourceInfo() : SourceInfo(nullptr) {};
  virtual ~SourceInfo();

  SourceInfo(const SourceInfo& from);
  SourceInfo(SourceInfo&& from) noexcept
    : SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceInfo& operator=(const SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceInfo*>(
               &_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SourceInfo& a, SourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceInfo* New() const final {
    return CreateMaybeMessage<SourceInfo>(nullptr);
  }

  SourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceInfo& from);
  void MergeFrom(const SourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceInfo";
  }
  protected:
  explicit SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 9,
    kSourceIdFieldNumber = 1,
    kCapabilityFieldNumber = 3,
    kPositionFieldNumber = 7,
    kMetricsFieldNumber = 8,
    kTypeFieldNumber = 2,
    kRemoteFieldNumber = 4,
    kStatusFieldNumber = 6,
  };
  // repeated .zb.dcts.Topic topics = 9;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::zb::dcts::Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::Topic >*
      mutable_topics();
  private:
  const ::zb::dcts::Topic& _internal_topics(int index) const;
  ::zb::dcts::Topic* _internal_add_topics();
  public:
  const ::zb::dcts::Topic& topics(int index) const;
  ::zb::dcts::Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::Topic >&
      topics() const;

  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.source.SourceCapability capability = 3;
  bool has_capability() const;
  private:
  bool _internal_has_capability() const;
  public:
  void clear_capability();
  const ::zb::dcts::source::SourceCapability& capability() const;
  ::zb::dcts::source::SourceCapability* release_capability();
  ::zb::dcts::source::SourceCapability* mutable_capability();
  void set_allocated_capability(::zb::dcts::source::SourceCapability* capability);
  private:
  const ::zb::dcts::source::SourceCapability& _internal_capability() const;
  ::zb::dcts::source::SourceCapability* _internal_mutable_capability();
  public:
  void unsafe_arena_set_allocated_capability(
      ::zb::dcts::source::SourceCapability* capability);
  ::zb::dcts::source::SourceCapability* unsafe_arena_release_capability();

  // .zb.dcts.Position position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::zb::dcts::Position& position() const;
  ::zb::dcts::Position* release_position();
  ::zb::dcts::Position* mutable_position();
  void set_allocated_position(::zb::dcts::Position* position);
  private:
  const ::zb::dcts::Position& _internal_position() const;
  ::zb::dcts::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::zb::dcts::Position* position);
  ::zb::dcts::Position* unsafe_arena_release_position();

  // .zb.dcts.Metrics metrics = 8;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::zb::dcts::Metrics& metrics() const;
  ::zb::dcts::Metrics* release_metrics();
  ::zb::dcts::Metrics* mutable_metrics();
  void set_allocated_metrics(::zb::dcts::Metrics* metrics);
  private:
  const ::zb::dcts::Metrics& _internal_metrics() const;
  ::zb::dcts::Metrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::zb::dcts::Metrics* metrics);
  ::zb::dcts::Metrics* unsafe_arena_release_metrics();

  // .zb.dcts.source.SourceType type = 2;
  void clear_type();
  ::zb::dcts::source::SourceType type() const;
  void set_type(::zb::dcts::source::SourceType value);
  private:
  ::zb::dcts::source::SourceType _internal_type() const;
  void _internal_set_type(::zb::dcts::source::SourceType value);
  public:

  // bool remote = 4;
  void clear_remote();
  bool remote() const;
  void set_remote(bool value);
  private:
  bool _internal_remote() const;
  void _internal_set_remote(bool value);
  public:

  // .zb.dcts.source.SourceStatus status = 6;
  void clear_status();
  ::zb::dcts::source::SourceStatus status() const;
  void set_status(::zb::dcts::source::SourceStatus value);
  private:
  ::zb::dcts::source::SourceStatus _internal_status() const;
  void _internal_set_status(::zb::dcts::source::SourceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::Topic > topics_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::source::SourceCapability* capability_;
  ::zb::dcts::Position* position_;
  ::zb::dcts::Metrics* metrics_;
  int type_;
  bool remote_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SourceSetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceSetInfo) */ {
 public:
  inline SourceSetInfo() : SourceSetInfo(nullptr) {};
  virtual ~SourceSetInfo();

  SourceSetInfo(const SourceSetInfo& from);
  SourceSetInfo(SourceSetInfo&& from) noexcept
    : SourceSetInfo() {
    *this = ::std::move(from);
  }

  inline SourceSetInfo& operator=(const SourceSetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceSetInfo& operator=(SourceSetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceSetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceSetInfo* internal_default_instance() {
    return reinterpret_cast<const SourceSetInfo*>(
               &_SourceSetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SourceSetInfo& a, SourceSetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceSetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceSetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceSetInfo* New() const final {
    return CreateMaybeMessage<SourceSetInfo>(nullptr);
  }

  SourceSetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceSetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceSetInfo& from);
  void MergeFrom(const SourceSetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceSetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceSetInfo";
  }
  protected:
  explicit SourceSetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceInfoFieldNumber = 1,
  };
  // repeated .zb.dcts.source.SourceInfo source_info = 1;
  int source_info_size() const;
  private:
  int _internal_source_info_size() const;
  public:
  void clear_source_info();
  ::zb::dcts::source::SourceInfo* mutable_source_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceInfo >*
      mutable_source_info();
  private:
  const ::zb::dcts::source::SourceInfo& _internal_source_info(int index) const;
  ::zb::dcts::source::SourceInfo* _internal_add_source_info();
  public:
  const ::zb::dcts::source::SourceInfo& source_info(int index) const;
  ::zb::dcts::source::SourceInfo* add_source_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceInfo >&
      source_info() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceSetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceInfo > source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {};
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return CreateMaybeMessage<SubscribeRequest>(nullptr);
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRequest& from);
  void MergeFrom(const SubscribeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SubscribeRequest";
  }
  protected:
  explicit SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTopicFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.Topic topic = 2;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::zb::dcts::Topic& topic() const;
  ::zb::dcts::Topic* release_topic();
  ::zb::dcts::Topic* mutable_topic();
  void set_allocated_topic(::zb::dcts::Topic* topic);
  private:
  const ::zb::dcts::Topic& _internal_topic() const;
  ::zb::dcts::Topic* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::zb::dcts::Topic* topic);
  ::zb::dcts::Topic* unsafe_arena_release_topic();

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::Topic* topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SourceCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceCommand) */ {
 public:
  inline SourceCommand() : SourceCommand(nullptr) {};
  virtual ~SourceCommand();

  SourceCommand(const SourceCommand& from);
  SourceCommand(SourceCommand&& from) noexcept
    : SourceCommand() {
    *this = ::std::move(from);
  }

  inline SourceCommand& operator=(const SourceCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceCommand& operator=(SourceCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceCommand* internal_default_instance() {
    return reinterpret_cast<const SourceCommand*>(
               &_SourceCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SourceCommand& a, SourceCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceCommand* New() const final {
    return CreateMaybeMessage<SourceCommand>(nullptr);
  }

  SourceCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceCommand& from);
  void MergeFrom(const SourceCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceCommand";
  }
  protected:
  explicit SourceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.Command command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::zb::dcts::Command& command() const;
  ::zb::dcts::Command* release_command();
  ::zb::dcts::Command* mutable_command();
  void set_allocated_command(::zb::dcts::Command* command);
  private:
  const ::zb::dcts::Command& _internal_command() const;
  ::zb::dcts::Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::zb::dcts::Command* command);
  ::zb::dcts::Command* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::Command* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// -------------------------------------------------------------------

class SourceCommandReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.SourceCommandReply) */ {
 public:
  inline SourceCommandReply() : SourceCommandReply(nullptr) {};
  virtual ~SourceCommandReply();

  SourceCommandReply(const SourceCommandReply& from);
  SourceCommandReply(SourceCommandReply&& from) noexcept
    : SourceCommandReply() {
    *this = ::std::move(from);
  }

  inline SourceCommandReply& operator=(const SourceCommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceCommandReply& operator=(SourceCommandReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceCommandReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceCommandReply* internal_default_instance() {
    return reinterpret_cast<const SourceCommandReply*>(
               &_SourceCommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SourceCommandReply& a, SourceCommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceCommandReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceCommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceCommandReply* New() const final {
    return CreateMaybeMessage<SourceCommandReply>(nullptr);
  }

  SourceCommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceCommandReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceCommandReply& from);
  void MergeFrom(const SourceCommandReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceCommandReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.SourceCommandReply";
  }
  protected:
  explicit SourceCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fsource_2eproto);
    return ::descriptor_table_source_2fsource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kReplyFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.CommandReply reply = 2;
  bool has_reply() const;
  private:
  bool _internal_has_reply() const;
  public:
  void clear_reply();
  const ::zb::dcts::CommandReply& reply() const;
  ::zb::dcts::CommandReply* release_reply();
  ::zb::dcts::CommandReply* mutable_reply();
  void set_allocated_reply(::zb::dcts::CommandReply* reply);
  private:
  const ::zb::dcts::CommandReply& _internal_reply() const;
  ::zb::dcts::CommandReply* _internal_mutable_reply();
  public:
  void unsafe_arena_set_allocated_reply(
      ::zb::dcts::CommandReply* reply);
  ::zb::dcts::CommandReply* unsafe_arena_release_reply();

  // @@protoc_insertion_point(class_scope:zb.dcts.source.SourceCommandReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::CommandReply* reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fsource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceId

// uint32 value = 1;
inline void SourceId::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceId::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceId::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceId.value)
  return _internal_value();
}
inline void SourceId::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void SourceId::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.SourceId.value)
}

// -------------------------------------------------------------------

// SourceCapability

// uint32 capability = 1;
inline void SourceCapability::clear_capability() {
  capability_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceCapability::_internal_capability() const {
  return capability_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SourceCapability::capability() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceCapability.capability)
  return _internal_capability();
}
inline void SourceCapability::_internal_set_capability(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  capability_ = value;
}
inline void SourceCapability::set_capability(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capability(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.SourceCapability.capability)
}

// -------------------------------------------------------------------

// SourceInfo

// .zb.dcts.source.SourceId source_id = 1;
inline bool SourceInfo::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SourceInfo::has_source_id() const {
  return _internal_has_source_id();
}
inline void SourceInfo::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::zb::dcts::source::SourceId& SourceInfo::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SourceInfo::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.source_id)
  return _internal_source_id();
}
inline void SourceInfo::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceInfo.source_id)
}
inline ::zb::dcts::source::SourceId* SourceInfo::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceInfo::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceInfo.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceInfo::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* SourceInfo::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceInfo.source_id)
  return _internal_mutable_source_id();
}
inline void SourceInfo::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceInfo.source_id)
}

// .zb.dcts.source.SourceType type = 2;
inline void SourceInfo::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::source::SourceType SourceInfo::_internal_type() const {
  return static_cast< ::zb::dcts::source::SourceType >(type_);
}
inline ::zb::dcts::source::SourceType SourceInfo::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.type)
  return _internal_type();
}
inline void SourceInfo::_internal_set_type(::zb::dcts::source::SourceType value) {
  
  type_ = value;
}
inline void SourceInfo::set_type(::zb::dcts::source::SourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.SourceInfo.type)
}

// .zb.dcts.source.SourceCapability capability = 3;
inline bool SourceInfo::_internal_has_capability() const {
  return this != internal_default_instance() && capability_ != nullptr;
}
inline bool SourceInfo::has_capability() const {
  return _internal_has_capability();
}
inline void SourceInfo::clear_capability() {
  if (GetArena() == nullptr && capability_ != nullptr) {
    delete capability_;
  }
  capability_ = nullptr;
}
inline const ::zb::dcts::source::SourceCapability& SourceInfo::_internal_capability() const {
  const ::zb::dcts::source::SourceCapability* p = capability_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceCapability*>(
      &::zb::dcts::source::_SourceCapability_default_instance_);
}
inline const ::zb::dcts::source::SourceCapability& SourceInfo::capability() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.capability)
  return _internal_capability();
}
inline void SourceInfo::unsafe_arena_set_allocated_capability(
    ::zb::dcts::source::SourceCapability* capability) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capability_);
  }
  capability_ = capability;
  if (capability) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceInfo.capability)
}
inline ::zb::dcts::source::SourceCapability* SourceInfo::release_capability() {
  auto temp = unsafe_arena_release_capability();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceCapability* SourceInfo::unsafe_arena_release_capability() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceInfo.capability)
  
  ::zb::dcts::source::SourceCapability* temp = capability_;
  capability_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceCapability* SourceInfo::_internal_mutable_capability() {
  
  if (capability_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceCapability>(GetArena());
    capability_ = p;
  }
  return capability_;
}
inline ::zb::dcts::source::SourceCapability* SourceInfo::mutable_capability() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceInfo.capability)
  return _internal_mutable_capability();
}
inline void SourceInfo::set_allocated_capability(::zb::dcts::source::SourceCapability* capability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capability_;
  }
  if (capability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capability);
    if (message_arena != submessage_arena) {
      capability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capability, submessage_arena);
    }
    
  } else {
    
  }
  capability_ = capability;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceInfo.capability)
}

// bool remote = 4;
inline void SourceInfo::clear_remote() {
  remote_ = false;
}
inline bool SourceInfo::_internal_remote() const {
  return remote_;
}
inline bool SourceInfo::remote() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.remote)
  return _internal_remote();
}
inline void SourceInfo::_internal_set_remote(bool value) {
  
  remote_ = value;
}
inline void SourceInfo::set_remote(bool value) {
  _internal_set_remote(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.SourceInfo.remote)
}

// .zb.dcts.source.SourceStatus status = 6;
inline void SourceInfo::clear_status() {
  status_ = 0;
}
inline ::zb::dcts::source::SourceStatus SourceInfo::_internal_status() const {
  return static_cast< ::zb::dcts::source::SourceStatus >(status_);
}
inline ::zb::dcts::source::SourceStatus SourceInfo::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.status)
  return _internal_status();
}
inline void SourceInfo::_internal_set_status(::zb::dcts::source::SourceStatus value) {
  
  status_ = value;
}
inline void SourceInfo::set_status(::zb::dcts::source::SourceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.SourceInfo.status)
}

// .zb.dcts.Position position = 7;
inline bool SourceInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SourceInfo::has_position() const {
  return _internal_has_position();
}
inline const ::zb::dcts::Position& SourceInfo::_internal_position() const {
  const ::zb::dcts::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& SourceInfo::position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.position)
  return _internal_position();
}
inline void SourceInfo::unsafe_arena_set_allocated_position(
    ::zb::dcts::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceInfo.position)
}
inline ::zb::dcts::Position* SourceInfo::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* SourceInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceInfo.position)
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* SourceInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::zb::dcts::Position* SourceInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceInfo.position)
  return _internal_mutable_position();
}
inline void SourceInfo::set_allocated_position(::zb::dcts::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceInfo.position)
}

// .zb.dcts.Metrics metrics = 8;
inline bool SourceInfo::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool SourceInfo::has_metrics() const {
  return _internal_has_metrics();
}
inline const ::zb::dcts::Metrics& SourceInfo::_internal_metrics() const {
  const ::zb::dcts::Metrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Metrics*>(
      &::zb::dcts::_Metrics_default_instance_);
}
inline const ::zb::dcts::Metrics& SourceInfo::metrics() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.metrics)
  return _internal_metrics();
}
inline void SourceInfo::unsafe_arena_set_allocated_metrics(
    ::zb::dcts::Metrics* metrics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceInfo.metrics)
}
inline ::zb::dcts::Metrics* SourceInfo::release_metrics() {
  auto temp = unsafe_arena_release_metrics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Metrics* SourceInfo::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceInfo.metrics)
  
  ::zb::dcts::Metrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::zb::dcts::Metrics* SourceInfo::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Metrics>(GetArena());
    metrics_ = p;
  }
  return metrics_;
}
inline ::zb::dcts::Metrics* SourceInfo::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceInfo.metrics)
  return _internal_mutable_metrics();
}
inline void SourceInfo::set_allocated_metrics(::zb::dcts::Metrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics)->GetArena();
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceInfo.metrics)
}

// repeated .zb.dcts.Topic topics = 9;
inline int SourceInfo::_internal_topics_size() const {
  return topics_.size();
}
inline int SourceInfo::topics_size() const {
  return _internal_topics_size();
}
inline ::zb::dcts::Topic* SourceInfo::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceInfo.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::Topic >*
SourceInfo::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.source.SourceInfo.topics)
  return &topics_;
}
inline const ::zb::dcts::Topic& SourceInfo::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::zb::dcts::Topic& SourceInfo::topics(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceInfo.topics)
  return _internal_topics(index);
}
inline ::zb::dcts::Topic* SourceInfo::_internal_add_topics() {
  return topics_.Add();
}
inline ::zb::dcts::Topic* SourceInfo::add_topics() {
  // @@protoc_insertion_point(field_add:zb.dcts.source.SourceInfo.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::Topic >&
SourceInfo::topics() const {
  // @@protoc_insertion_point(field_list:zb.dcts.source.SourceInfo.topics)
  return topics_;
}

// -------------------------------------------------------------------

// SourceSetInfo

// repeated .zb.dcts.source.SourceInfo source_info = 1;
inline int SourceSetInfo::_internal_source_info_size() const {
  return source_info_.size();
}
inline int SourceSetInfo::source_info_size() const {
  return _internal_source_info_size();
}
inline void SourceSetInfo::clear_source_info() {
  source_info_.Clear();
}
inline ::zb::dcts::source::SourceInfo* SourceSetInfo::mutable_source_info(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceSetInfo.source_info)
  return source_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceInfo >*
SourceSetInfo::mutable_source_info() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.source.SourceSetInfo.source_info)
  return &source_info_;
}
inline const ::zb::dcts::source::SourceInfo& SourceSetInfo::_internal_source_info(int index) const {
  return source_info_.Get(index);
}
inline const ::zb::dcts::source::SourceInfo& SourceSetInfo::source_info(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceSetInfo.source_info)
  return _internal_source_info(index);
}
inline ::zb::dcts::source::SourceInfo* SourceSetInfo::_internal_add_source_info() {
  return source_info_.Add();
}
inline ::zb::dcts::source::SourceInfo* SourceSetInfo::add_source_info() {
  // @@protoc_insertion_point(field_add:zb.dcts.source.SourceSetInfo.source_info)
  return _internal_add_source_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceInfo >&
SourceSetInfo::source_info() const {
  // @@protoc_insertion_point(field_list:zb.dcts.source.SourceSetInfo.source_info)
  return source_info_;
}

// -------------------------------------------------------------------

// SubscribeRequest

// .zb.dcts.source.SourceId source_id = 1;
inline bool SubscribeRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SubscribeRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline void SubscribeRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::zb::dcts::source::SourceId& SubscribeRequest::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SubscribeRequest::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SubscribeRequest.source_id)
  return _internal_source_id();
}
inline void SubscribeRequest::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SubscribeRequest.source_id)
}
inline ::zb::dcts::source::SourceId* SubscribeRequest::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SubscribeRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SubscribeRequest.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SubscribeRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* SubscribeRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SubscribeRequest.source_id)
  return _internal_mutable_source_id();
}
inline void SubscribeRequest::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SubscribeRequest.source_id)
}

// .zb.dcts.Topic topic = 2;
inline bool SubscribeRequest::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool SubscribeRequest::has_topic() const {
  return _internal_has_topic();
}
inline const ::zb::dcts::Topic& SubscribeRequest::_internal_topic() const {
  const ::zb::dcts::Topic* p = topic_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Topic*>(
      &::zb::dcts::_Topic_default_instance_);
}
inline const ::zb::dcts::Topic& SubscribeRequest::topic() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SubscribeRequest.topic)
  return _internal_topic();
}
inline void SubscribeRequest::unsafe_arena_set_allocated_topic(
    ::zb::dcts::Topic* topic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SubscribeRequest.topic)
}
inline ::zb::dcts::Topic* SubscribeRequest::release_topic() {
  auto temp = unsafe_arena_release_topic();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Topic* SubscribeRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SubscribeRequest.topic)
  
  ::zb::dcts::Topic* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::zb::dcts::Topic* SubscribeRequest::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Topic>(GetArena());
    topic_ = p;
  }
  return topic_;
}
inline ::zb::dcts::Topic* SubscribeRequest::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SubscribeRequest.topic)
  return _internal_mutable_topic();
}
inline void SubscribeRequest::set_allocated_topic(::zb::dcts::Topic* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic)->GetArena();
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SubscribeRequest.topic)
}

// -------------------------------------------------------------------

// SourceCommand

// .zb.dcts.source.SourceId source_id = 1;
inline bool SourceCommand::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SourceCommand::has_source_id() const {
  return _internal_has_source_id();
}
inline void SourceCommand::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::zb::dcts::source::SourceId& SourceCommand::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SourceCommand::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceCommand.source_id)
  return _internal_source_id();
}
inline void SourceCommand::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceCommand.source_id)
}
inline ::zb::dcts::source::SourceId* SourceCommand::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceCommand::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceCommand.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceCommand::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* SourceCommand::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceCommand.source_id)
  return _internal_mutable_source_id();
}
inline void SourceCommand::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceCommand.source_id)
}

// .zb.dcts.Command command = 2;
inline bool SourceCommand::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool SourceCommand::has_command() const {
  return _internal_has_command();
}
inline const ::zb::dcts::Command& SourceCommand::_internal_command() const {
  const ::zb::dcts::Command* p = command_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Command*>(
      &::zb::dcts::_Command_default_instance_);
}
inline const ::zb::dcts::Command& SourceCommand::command() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceCommand.command)
  return _internal_command();
}
inline void SourceCommand::unsafe_arena_set_allocated_command(
    ::zb::dcts::Command* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceCommand.command)
}
inline ::zb::dcts::Command* SourceCommand::release_command() {
  auto temp = unsafe_arena_release_command();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Command* SourceCommand::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceCommand.command)
  
  ::zb::dcts::Command* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::zb::dcts::Command* SourceCommand::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Command>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::zb::dcts::Command* SourceCommand::mutable_command() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceCommand.command)
  return _internal_mutable_command();
}
inline void SourceCommand::set_allocated_command(::zb::dcts::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command)->GetArena();
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceCommand.command)
}

// -------------------------------------------------------------------

// SourceCommandReply

// .zb.dcts.source.SourceId source_id = 1;
inline bool SourceCommandReply::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool SourceCommandReply::has_source_id() const {
  return _internal_has_source_id();
}
inline void SourceCommandReply::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
inline const ::zb::dcts::source::SourceId& SourceCommandReply::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SourceCommandReply::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceCommandReply.source_id)
  return _internal_source_id();
}
inline void SourceCommandReply::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceCommandReply.source_id)
}
inline ::zb::dcts::source::SourceId* SourceCommandReply::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceCommandReply::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceCommandReply.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SourceCommandReply::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* SourceCommandReply::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceCommandReply.source_id)
  return _internal_mutable_source_id();
}
inline void SourceCommandReply::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_id_;
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_id);
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceCommandReply.source_id)
}

// .zb.dcts.CommandReply reply = 2;
inline bool SourceCommandReply::_internal_has_reply() const {
  return this != internal_default_instance() && reply_ != nullptr;
}
inline bool SourceCommandReply::has_reply() const {
  return _internal_has_reply();
}
inline const ::zb::dcts::CommandReply& SourceCommandReply::_internal_reply() const {
  const ::zb::dcts::CommandReply* p = reply_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::CommandReply*>(
      &::zb::dcts::_CommandReply_default_instance_);
}
inline const ::zb::dcts::CommandReply& SourceCommandReply::reply() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.SourceCommandReply.reply)
  return _internal_reply();
}
inline void SourceCommandReply::unsafe_arena_set_allocated_reply(
    ::zb::dcts::CommandReply* reply) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  reply_ = reply;
  if (reply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.SourceCommandReply.reply)
}
inline ::zb::dcts::CommandReply* SourceCommandReply::release_reply() {
  auto temp = unsafe_arena_release_reply();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::CommandReply* SourceCommandReply::unsafe_arena_release_reply() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.SourceCommandReply.reply)
  
  ::zb::dcts::CommandReply* temp = reply_;
  reply_ = nullptr;
  return temp;
}
inline ::zb::dcts::CommandReply* SourceCommandReply::_internal_mutable_reply() {
  
  if (reply_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::CommandReply>(GetArena());
    reply_ = p;
  }
  return reply_;
}
inline ::zb::dcts::CommandReply* SourceCommandReply::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.SourceCommandReply.reply)
  return _internal_mutable_reply();
}
inline void SourceCommandReply::set_allocated_reply(::zb::dcts::CommandReply* reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_);
  }
  if (reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply)->GetArena();
    if (message_arena != submessage_arena) {
      reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply, submessage_arena);
    }
    
  } else {
    
  }
  reply_ = reply;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.SourceCommandReply.reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace source
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::source::SourceCapability_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::SourceCapability_Type>() {
  return ::zb::dcts::source::SourceCapability_Type_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::source::SourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::SourceType>() {
  return ::zb::dcts::source::SourceType_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::source::SourceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::SourceStatus>() {
  return ::zb::dcts::source::SourceStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_2fsource_2eproto
