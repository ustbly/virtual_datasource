// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/kh/Kh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_2fkh_2fKh_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_2fkh_2fKh_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKh_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_source_2fkh_2fKh_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fkh_2fKh_2eproto;
namespace zb {
namespace dcts {
namespace source {
namespace kh {
class ClusterConfig;
class ClusterConfigDefaultTypeInternal;
extern ClusterConfigDefaultTypeInternal _ClusterConfig_default_instance_;
class CmdHeader;
class CmdHeaderDefaultTypeInternal;
extern CmdHeaderDefaultTypeInternal _CmdHeader_default_instance_;
class DeviceConfig;
class DeviceConfigDefaultTypeInternal;
extern DeviceConfigDefaultTypeInternal _DeviceConfig_default_instance_;
class NodeDevice;
class NodeDeviceDefaultTypeInternal;
extern NodeDeviceDefaultTypeInternal _NodeDevice_default_instance_;
}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::source::kh::ClusterConfig* Arena::CreateMaybeMessage<::zb::dcts::source::kh::ClusterConfig>(Arena*);
template<> ::zb::dcts::source::kh::CmdHeader* Arena::CreateMaybeMessage<::zb::dcts::source::kh::CmdHeader>(Arena*);
template<> ::zb::dcts::source::kh::DeviceConfig* Arena::CreateMaybeMessage<::zb::dcts::source::kh::DeviceConfig>(Arena*);
template<> ::zb::dcts::source::kh::NodeDevice* Arena::CreateMaybeMessage<::zb::dcts::source::kh::NodeDevice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace source {
namespace kh {

enum CMTip : int {
  DEVICE_TICK = 0,
  CLUSTER_TICK = 1,
  DEVICE_REQUEST = 2,
  CLUSTER_REQUEST = 3,
  DEVICE_REPLY = 4,
  CLUSTER_REPLY = 5,
  DEVICE_SELF_TEST = 6,
  CLUSTER_SELF_TEST = 7,
  DEVICE_REBOOT = 8,
  CLUSTER_REBOOT = 9,
  DEVICE_SHUTDOWN = 10,
  CLUSTER_SHUTDOWN = 11,
  CMTip_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CMTip_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CMTip_IsValid(int value);
constexpr CMTip CMTip_MIN = DEVICE_TICK;
constexpr CMTip CMTip_MAX = CLUSTER_SHUTDOWN;
constexpr int CMTip_ARRAYSIZE = CMTip_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMTip_descriptor();
template<typename T>
inline const std::string& CMTip_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMTip>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMTip_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMTip_descriptor(), enum_t_value);
}
inline bool CMTip_Parse(
    const std::string& name, CMTip* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMTip>(
    CMTip_descriptor(), name, value);
}
enum TaskCmd : int {
  T_START = 0,
  T_STOP = 1,
  T_MODIFY = 2,
  TaskCmd_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskCmd_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskCmd_IsValid(int value);
constexpr TaskCmd TaskCmd_MIN = T_START;
constexpr TaskCmd TaskCmd_MAX = T_MODIFY;
constexpr int TaskCmd_ARRAYSIZE = TaskCmd_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskCmd_descriptor();
template<typename T>
inline const std::string& TaskCmd_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskCmd>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskCmd_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskCmd_descriptor(), enum_t_value);
}
inline bool TaskCmd_Parse(
    const std::string& name, TaskCmd* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskCmd>(
    TaskCmd_descriptor(), name, value);
}
enum SelfTestMode : int {
  STATIC = 0,
  DYNAMIC = 1,
  SelfTestMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SelfTestMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SelfTestMode_IsValid(int value);
constexpr SelfTestMode SelfTestMode_MIN = STATIC;
constexpr SelfTestMode SelfTestMode_MAX = DYNAMIC;
constexpr int SelfTestMode_ARRAYSIZE = SelfTestMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfTestMode_descriptor();
template<typename T>
inline const std::string& SelfTestMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SelfTestMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SelfTestMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SelfTestMode_descriptor(), enum_t_value);
}
inline bool SelfTestMode_Parse(
    const std::string& name, SelfTestMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SelfTestMode>(
    SelfTestMode_descriptor(), name, value);
}
// ===================================================================

class NodeDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.kh.NodeDevice) */ {
 public:
  inline NodeDevice() : NodeDevice(nullptr) {};
  virtual ~NodeDevice();

  NodeDevice(const NodeDevice& from);
  NodeDevice(NodeDevice&& from) noexcept
    : NodeDevice() {
    *this = ::std::move(from);
  }

  inline NodeDevice& operator=(const NodeDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeDevice& operator=(NodeDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeDevice* internal_default_instance() {
    return reinterpret_cast<const NodeDevice*>(
               &_NodeDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeDevice& a, NodeDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeDevice* New() const final {
    return CreateMaybeMessage<NodeDevice>(nullptr);
  }

  NodeDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeDevice& from);
  void MergeFrom(const NodeDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.kh.NodeDevice";
  }
  protected:
  explicit NodeDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fkh_2fKh_2eproto);
    return ::descriptor_table_source_2fkh_2fKh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioId node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  const ::zb::dcts::scenario::ScenarioId& node_id() const;
  ::zb::dcts::scenario::ScenarioId* release_node_id();
  ::zb::dcts::scenario::ScenarioId* mutable_node_id();
  void set_allocated_node_id(::zb::dcts::scenario::ScenarioId* node_id);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_node_id() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_node_id();
  public:
  void unsafe_arena_set_allocated_node_id(
      ::zb::dcts::scenario::ScenarioId* node_id);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_node_id();

  // .zb.dcts.source.SourceId device_id = 2;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  const ::zb::dcts::source::SourceId& device_id() const;
  ::zb::dcts::source::SourceId* release_device_id();
  ::zb::dcts::source::SourceId* mutable_device_id();
  void set_allocated_device_id(::zb::dcts::source::SourceId* device_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_device_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_device_id();
  public:
  void unsafe_arena_set_allocated_device_id(
      ::zb::dcts::source::SourceId* device_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_device_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.source.kh.NodeDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* node_id_;
  ::zb::dcts::source::SourceId* device_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fkh_2fKh_2eproto;
};
// -------------------------------------------------------------------

class DeviceConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.kh.DeviceConfig) */ {
 public:
  inline DeviceConfig() : DeviceConfig(nullptr) {};
  virtual ~DeviceConfig();

  DeviceConfig(const DeviceConfig& from);
  DeviceConfig(DeviceConfig&& from) noexcept
    : DeviceConfig() {
    *this = ::std::move(from);
  }

  inline DeviceConfig& operator=(const DeviceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceConfig& operator=(DeviceConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceConfig* internal_default_instance() {
    return reinterpret_cast<const DeviceConfig*>(
               &_DeviceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceConfig& a, DeviceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceConfig* New() const final {
    return CreateMaybeMessage<DeviceConfig>(nullptr);
  }

  DeviceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceConfig& from);
  void MergeFrom(const DeviceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.kh.DeviceConfig";
  }
  protected:
  explicit DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fkh_2fKh_2eproto);
    return ::descriptor_table_source_2fkh_2fKh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .zb.dcts.IPv4Address address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::zb::dcts::IPv4Address& address() const;
  ::zb::dcts::IPv4Address* release_address();
  ::zb::dcts::IPv4Address* mutable_address();
  void set_allocated_address(::zb::dcts::IPv4Address* address);
  private:
  const ::zb::dcts::IPv4Address& _internal_address() const;
  ::zb::dcts::IPv4Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::zb::dcts::IPv4Address* address);
  ::zb::dcts::IPv4Address* unsafe_arena_release_address();

  // .zb.dcts.source.SourceId id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // .zb.dcts.source.SourceType type = 1;
  void clear_type();
  ::zb::dcts::source::SourceType type() const;
  void set_type(::zb::dcts::source::SourceType value);
  private:
  ::zb::dcts::source::SourceType _internal_type() const;
  void _internal_set_type(::zb::dcts::source::SourceType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.source.kh.DeviceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::IPv4Address* address_;
  ::zb::dcts::source::SourceId* id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fkh_2fKh_2eproto;
};
// -------------------------------------------------------------------

class ClusterConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.kh.ClusterConfig) */ {
 public:
  inline ClusterConfig() : ClusterConfig(nullptr) {};
  virtual ~ClusterConfig();

  ClusterConfig(const ClusterConfig& from);
  ClusterConfig(ClusterConfig&& from) noexcept
    : ClusterConfig() {
    *this = ::std::move(from);
  }

  inline ClusterConfig& operator=(const ClusterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterConfig& operator=(ClusterConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterConfig* internal_default_instance() {
    return reinterpret_cast<const ClusterConfig*>(
               &_ClusterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClusterConfig& a, ClusterConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterConfig* New() const final {
    return CreateMaybeMessage<ClusterConfig>(nullptr);
  }

  ClusterConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterConfig& from);
  void MergeFrom(const ClusterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.kh.ClusterConfig";
  }
  protected:
  explicit ClusterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fkh_2fKh_2eproto);
    return ::descriptor_table_source_2fkh_2fKh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 4,
    kLinkFieldNumber = 1,
    kStreamFieldNumber = 2,
    kSelftestFieldNumber = 3,
  };
  // repeated .zb.dcts.source.kh.DeviceConfig devices = 4;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::zb::dcts::source::kh::DeviceConfig* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::DeviceConfig >*
      mutable_devices();
  private:
  const ::zb::dcts::source::kh::DeviceConfig& _internal_devices(int index) const;
  ::zb::dcts::source::kh::DeviceConfig* _internal_add_devices();
  public:
  const ::zb::dcts::source::kh::DeviceConfig& devices(int index) const;
  ::zb::dcts::source::kh::DeviceConfig* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::DeviceConfig >&
      devices() const;

  // .zb.dcts.ZeromqLinkCfg link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::zb::dcts::ZeromqLinkCfg& link() const;
  ::zb::dcts::ZeromqLinkCfg* release_link();
  ::zb::dcts::ZeromqLinkCfg* mutable_link();
  void set_allocated_link(::zb::dcts::ZeromqLinkCfg* link);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_link() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::zb::dcts::ZeromqLinkCfg* link);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_link();

  // .zb.dcts.ZeromqLinkCfg stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::zb::dcts::ZeromqLinkCfg& stream() const;
  ::zb::dcts::ZeromqLinkCfg* release_stream();
  ::zb::dcts::ZeromqLinkCfg* mutable_stream();
  void set_allocated_stream(::zb::dcts::ZeromqLinkCfg* stream);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_stream() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::zb::dcts::ZeromqLinkCfg* stream);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_stream();

  // .zb.dcts.ZeromqLinkCfg selftest = 3;
  bool has_selftest() const;
  private:
  bool _internal_has_selftest() const;
  public:
  void clear_selftest();
  const ::zb::dcts::ZeromqLinkCfg& selftest() const;
  ::zb::dcts::ZeromqLinkCfg* release_selftest();
  ::zb::dcts::ZeromqLinkCfg* mutable_selftest();
  void set_allocated_selftest(::zb::dcts::ZeromqLinkCfg* selftest);
  private:
  const ::zb::dcts::ZeromqLinkCfg& _internal_selftest() const;
  ::zb::dcts::ZeromqLinkCfg* _internal_mutable_selftest();
  public:
  void unsafe_arena_set_allocated_selftest(
      ::zb::dcts::ZeromqLinkCfg* selftest);
  ::zb::dcts::ZeromqLinkCfg* unsafe_arena_release_selftest();

  // @@protoc_insertion_point(class_scope:zb.dcts.source.kh.ClusterConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::DeviceConfig > devices_;
  ::zb::dcts::ZeromqLinkCfg* link_;
  ::zb::dcts::ZeromqLinkCfg* stream_;
  ::zb::dcts::ZeromqLinkCfg* selftest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fkh_2fKh_2eproto;
};
// -------------------------------------------------------------------

class CmdHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.source.kh.CmdHeader) */ {
 public:
  inline CmdHeader() : CmdHeader(nullptr) {};
  virtual ~CmdHeader();

  CmdHeader(const CmdHeader& from);
  CmdHeader(CmdHeader&& from) noexcept
    : CmdHeader() {
    *this = ::std::move(from);
  }

  inline CmdHeader& operator=(const CmdHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdHeader& operator=(CmdHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdHeader* internal_default_instance() {
    return reinterpret_cast<const CmdHeader*>(
               &_CmdHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CmdHeader& a, CmdHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdHeader* New() const final {
    return CreateMaybeMessage<CmdHeader>(nullptr);
  }

  CmdHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdHeader& from);
  void MergeFrom(const CmdHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.source.kh.CmdHeader";
  }
  protected:
  explicit CmdHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_source_2fkh_2fKh_2eproto);
    return ::descriptor_table_source_2fkh_2fKh_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 3,
    kTaskRunnerFieldNumber = 4,
    kSequenceNumberFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // .zb.dcts.scenario.TaskId task_id = 3;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::zb::dcts::scenario::TaskId& task_id() const;
  ::zb::dcts::scenario::TaskId* release_task_id();
  ::zb::dcts::scenario::TaskId* mutable_task_id();
  void set_allocated_task_id(::zb::dcts::scenario::TaskId* task_id);
  private:
  const ::zb::dcts::scenario::TaskId& _internal_task_id() const;
  ::zb::dcts::scenario::TaskId* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::zb::dcts::scenario::TaskId* task_id);
  ::zb::dcts::scenario::TaskId* unsafe_arena_release_task_id();

  // .zb.dcts.source.kh.NodeDevice task_runner = 4;
  bool has_task_runner() const;
  private:
  bool _internal_has_task_runner() const;
  public:
  void clear_task_runner();
  const ::zb::dcts::source::kh::NodeDevice& task_runner() const;
  ::zb::dcts::source::kh::NodeDevice* release_task_runner();
  ::zb::dcts::source::kh::NodeDevice* mutable_task_runner();
  void set_allocated_task_runner(::zb::dcts::source::kh::NodeDevice* task_runner);
  private:
  const ::zb::dcts::source::kh::NodeDevice& _internal_task_runner() const;
  ::zb::dcts::source::kh::NodeDevice* _internal_mutable_task_runner();
  public:
  void unsafe_arena_set_allocated_task_runner(
      ::zb::dcts::source::kh::NodeDevice* task_runner);
  ::zb::dcts::source::kh::NodeDevice* unsafe_arena_release_task_runner();

  // uint32 sequence_number = 1;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zb.dcts.ErrorType error_code = 2;
  void clear_error_code();
  ::zb::dcts::ErrorType error_code() const;
  void set_error_code(::zb::dcts::ErrorType value);
  private:
  ::zb::dcts::ErrorType _internal_error_code() const;
  void _internal_set_error_code(::zb::dcts::ErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.source.kh.CmdHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::TaskId* task_id_;
  ::zb::dcts::source::kh::NodeDevice* task_runner_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_2fkh_2fKh_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeDevice

// .zb.dcts.scenario.ScenarioId node_id = 1;
inline bool NodeDevice::_internal_has_node_id() const {
  return this != internal_default_instance() && node_id_ != nullptr;
}
inline bool NodeDevice::has_node_id() const {
  return _internal_has_node_id();
}
inline const ::zb::dcts::scenario::ScenarioId& NodeDevice::_internal_node_id() const {
  const ::zb::dcts::scenario::ScenarioId* p = node_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& NodeDevice::node_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.NodeDevice.node_id)
  return _internal_node_id();
}
inline void NodeDevice::unsafe_arena_set_allocated_node_id(
    ::zb::dcts::scenario::ScenarioId* node_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.NodeDevice.node_id)
}
inline ::zb::dcts::scenario::ScenarioId* NodeDevice::release_node_id() {
  auto temp = unsafe_arena_release_node_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* NodeDevice::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.NodeDevice.node_id)
  
  ::zb::dcts::scenario::ScenarioId* temp = node_id_;
  node_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* NodeDevice::_internal_mutable_node_id() {
  
  if (node_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    node_id_ = p;
  }
  return node_id_;
}
inline ::zb::dcts::scenario::ScenarioId* NodeDevice::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.NodeDevice.node_id)
  return _internal_mutable_node_id();
}
inline void NodeDevice::set_allocated_node_id(::zb::dcts::scenario::ScenarioId* node_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id_);
  }
  if (node_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_id)->GetArena();
    if (message_arena != submessage_arena) {
      node_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_id, submessage_arena);
    }
    
  } else {
    
  }
  node_id_ = node_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.NodeDevice.node_id)
}

// .zb.dcts.source.SourceId device_id = 2;
inline bool NodeDevice::_internal_has_device_id() const {
  return this != internal_default_instance() && device_id_ != nullptr;
}
inline bool NodeDevice::has_device_id() const {
  return _internal_has_device_id();
}
inline const ::zb::dcts::source::SourceId& NodeDevice::_internal_device_id() const {
  const ::zb::dcts::source::SourceId* p = device_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& NodeDevice::device_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.NodeDevice.device_id)
  return _internal_device_id();
}
inline void NodeDevice::unsafe_arena_set_allocated_device_id(
    ::zb::dcts::source::SourceId* device_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_id_);
  }
  device_id_ = device_id;
  if (device_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.NodeDevice.device_id)
}
inline ::zb::dcts::source::SourceId* NodeDevice::release_device_id() {
  auto temp = unsafe_arena_release_device_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* NodeDevice::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.NodeDevice.device_id)
  
  ::zb::dcts::source::SourceId* temp = device_id_;
  device_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* NodeDevice::_internal_mutable_device_id() {
  
  if (device_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    device_id_ = p;
  }
  return device_id_;
}
inline ::zb::dcts::source::SourceId* NodeDevice::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.NodeDevice.device_id)
  return _internal_mutable_device_id();
}
inline void NodeDevice::set_allocated_device_id(::zb::dcts::source::SourceId* device_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_id_);
  }
  if (device_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_id)->GetArena();
    if (message_arena != submessage_arena) {
      device_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_id, submessage_arena);
    }
    
  } else {
    
  }
  device_id_ = device_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.NodeDevice.device_id)
}

// -------------------------------------------------------------------

// DeviceConfig

// .zb.dcts.source.SourceType type = 1;
inline void DeviceConfig::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::source::SourceType DeviceConfig::_internal_type() const {
  return static_cast< ::zb::dcts::source::SourceType >(type_);
}
inline ::zb::dcts::source::SourceType DeviceConfig::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.DeviceConfig.type)
  return _internal_type();
}
inline void DeviceConfig::_internal_set_type(::zb::dcts::source::SourceType value) {
  
  type_ = value;
}
inline void DeviceConfig::set_type(::zb::dcts::source::SourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.kh.DeviceConfig.type)
}

// .zb.dcts.IPv4Address address = 2;
inline bool DeviceConfig::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool DeviceConfig::has_address() const {
  return _internal_has_address();
}
inline const ::zb::dcts::IPv4Address& DeviceConfig::_internal_address() const {
  const ::zb::dcts::IPv4Address* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::IPv4Address*>(
      &::zb::dcts::_IPv4Address_default_instance_);
}
inline const ::zb::dcts::IPv4Address& DeviceConfig::address() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.DeviceConfig.address)
  return _internal_address();
}
inline void DeviceConfig::unsafe_arena_set_allocated_address(
    ::zb::dcts::IPv4Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.DeviceConfig.address)
}
inline ::zb::dcts::IPv4Address* DeviceConfig::release_address() {
  auto temp = unsafe_arena_release_address();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.DeviceConfig.address)
  
  ::zb::dcts::IPv4Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::IPv4Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::zb::dcts::IPv4Address* DeviceConfig::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.DeviceConfig.address)
  return _internal_mutable_address();
}
inline void DeviceConfig::set_allocated_address(::zb::dcts::IPv4Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.DeviceConfig.address)
}

// .zb.dcts.source.SourceId id = 3;
inline bool DeviceConfig::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DeviceConfig::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& DeviceConfig::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& DeviceConfig::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.DeviceConfig.id)
  return _internal_id();
}
inline void DeviceConfig::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.DeviceConfig.id)
}
inline ::zb::dcts::source::SourceId* DeviceConfig::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* DeviceConfig::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.DeviceConfig.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* DeviceConfig::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* DeviceConfig::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.DeviceConfig.id)
  return _internal_mutable_id();
}
inline void DeviceConfig::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.DeviceConfig.id)
}

// -------------------------------------------------------------------

// ClusterConfig

// .zb.dcts.ZeromqLinkCfg link = 1;
inline bool ClusterConfig::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool ClusterConfig::has_link() const {
  return _internal_has_link();
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::_internal_link() const {
  const ::zb::dcts::ZeromqLinkCfg* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg*>(
      &::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::link() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.ClusterConfig.link)
  return _internal_link();
}
inline void ClusterConfig::unsafe_arena_set_allocated_link(
    ::zb::dcts::ZeromqLinkCfg* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.ClusterConfig.link)
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::release_link() {
  auto temp = unsafe_arena_release_link();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.ClusterConfig.link)
  
  ::zb::dcts::ZeromqLinkCfg* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::mutable_link() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.ClusterConfig.link)
  return _internal_mutable_link();
}
inline void ClusterConfig::set_allocated_link(::zb::dcts::ZeromqLinkCfg* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link)->GetArena();
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.ClusterConfig.link)
}

// .zb.dcts.ZeromqLinkCfg stream = 2;
inline bool ClusterConfig::_internal_has_stream() const {
  return this != internal_default_instance() && stream_ != nullptr;
}
inline bool ClusterConfig::has_stream() const {
  return _internal_has_stream();
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::_internal_stream() const {
  const ::zb::dcts::ZeromqLinkCfg* p = stream_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg*>(
      &::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::stream() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.ClusterConfig.stream)
  return _internal_stream();
}
inline void ClusterConfig::unsafe_arena_set_allocated_stream(
    ::zb::dcts::ZeromqLinkCfg* stream) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.ClusterConfig.stream)
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::release_stream() {
  auto temp = unsafe_arena_release_stream();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.ClusterConfig.stream)
  
  ::zb::dcts::ZeromqLinkCfg* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::_internal_mutable_stream() {
  
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    stream_ = p;
  }
  return stream_;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.ClusterConfig.stream)
  return _internal_mutable_stream();
}
inline void ClusterConfig::set_allocated_stream(::zb::dcts::ZeromqLinkCfg* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream)->GetArena();
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    
  } else {
    
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.ClusterConfig.stream)
}

// .zb.dcts.ZeromqLinkCfg selftest = 3;
inline bool ClusterConfig::_internal_has_selftest() const {
  return this != internal_default_instance() && selftest_ != nullptr;
}
inline bool ClusterConfig::has_selftest() const {
  return _internal_has_selftest();
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::_internal_selftest() const {
  const ::zb::dcts::ZeromqLinkCfg* p = selftest_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::ZeromqLinkCfg*>(
      &::zb::dcts::_ZeromqLinkCfg_default_instance_);
}
inline const ::zb::dcts::ZeromqLinkCfg& ClusterConfig::selftest() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.ClusterConfig.selftest)
  return _internal_selftest();
}
inline void ClusterConfig::unsafe_arena_set_allocated_selftest(
    ::zb::dcts::ZeromqLinkCfg* selftest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selftest_);
  }
  selftest_ = selftest;
  if (selftest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.ClusterConfig.selftest)
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::release_selftest() {
  auto temp = unsafe_arena_release_selftest();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::unsafe_arena_release_selftest() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.ClusterConfig.selftest)
  
  ::zb::dcts::ZeromqLinkCfg* temp = selftest_;
  selftest_ = nullptr;
  return temp;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::_internal_mutable_selftest() {
  
  if (selftest_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::ZeromqLinkCfg>(GetArena());
    selftest_ = p;
  }
  return selftest_;
}
inline ::zb::dcts::ZeromqLinkCfg* ClusterConfig::mutable_selftest() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.ClusterConfig.selftest)
  return _internal_mutable_selftest();
}
inline void ClusterConfig::set_allocated_selftest(::zb::dcts::ZeromqLinkCfg* selftest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selftest_);
  }
  if (selftest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selftest)->GetArena();
    if (message_arena != submessage_arena) {
      selftest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selftest, submessage_arena);
    }
    
  } else {
    
  }
  selftest_ = selftest;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.ClusterConfig.selftest)
}

// repeated .zb.dcts.source.kh.DeviceConfig devices = 4;
inline int ClusterConfig::_internal_devices_size() const {
  return devices_.size();
}
inline int ClusterConfig::devices_size() const {
  return _internal_devices_size();
}
inline void ClusterConfig::clear_devices() {
  devices_.Clear();
}
inline ::zb::dcts::source::kh::DeviceConfig* ClusterConfig::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.ClusterConfig.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::DeviceConfig >*
ClusterConfig::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.source.kh.ClusterConfig.devices)
  return &devices_;
}
inline const ::zb::dcts::source::kh::DeviceConfig& ClusterConfig::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::zb::dcts::source::kh::DeviceConfig& ClusterConfig::devices(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.ClusterConfig.devices)
  return _internal_devices(index);
}
inline ::zb::dcts::source::kh::DeviceConfig* ClusterConfig::_internal_add_devices() {
  return devices_.Add();
}
inline ::zb::dcts::source::kh::DeviceConfig* ClusterConfig::add_devices() {
  // @@protoc_insertion_point(field_add:zb.dcts.source.kh.ClusterConfig.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::DeviceConfig >&
ClusterConfig::devices() const {
  // @@protoc_insertion_point(field_list:zb.dcts.source.kh.ClusterConfig.devices)
  return devices_;
}

// -------------------------------------------------------------------

// CmdHeader

// uint32 sequence_number = 1;
inline void CmdHeader::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CmdHeader::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CmdHeader::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.CmdHeader.sequence_number)
  return _internal_sequence_number();
}
inline void CmdHeader::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void CmdHeader::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.kh.CmdHeader.sequence_number)
}

// .zb.dcts.ErrorType error_code = 2;
inline void CmdHeader::clear_error_code() {
  error_code_ = 0;
}
inline ::zb::dcts::ErrorType CmdHeader::_internal_error_code() const {
  return static_cast< ::zb::dcts::ErrorType >(error_code_);
}
inline ::zb::dcts::ErrorType CmdHeader::error_code() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.CmdHeader.error_code)
  return _internal_error_code();
}
inline void CmdHeader::_internal_set_error_code(::zb::dcts::ErrorType value) {
  
  error_code_ = value;
}
inline void CmdHeader::set_error_code(::zb::dcts::ErrorType value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:zb.dcts.source.kh.CmdHeader.error_code)
}

// .zb.dcts.scenario.TaskId task_id = 3;
inline bool CmdHeader::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool CmdHeader::has_task_id() const {
  return _internal_has_task_id();
}
inline const ::zb::dcts::scenario::TaskId& CmdHeader::_internal_task_id() const {
  const ::zb::dcts::scenario::TaskId* p = task_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::TaskId*>(
      &::zb::dcts::scenario::_TaskId_default_instance_);
}
inline const ::zb::dcts::scenario::TaskId& CmdHeader::task_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.CmdHeader.task_id)
  return _internal_task_id();
}
inline void CmdHeader::unsafe_arena_set_allocated_task_id(
    ::zb::dcts::scenario::TaskId* task_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.CmdHeader.task_id)
}
inline ::zb::dcts::scenario::TaskId* CmdHeader::release_task_id() {
  auto temp = unsafe_arena_release_task_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::TaskId* CmdHeader::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.CmdHeader.task_id)
  
  ::zb::dcts::scenario::TaskId* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::TaskId* CmdHeader::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::TaskId>(GetArena());
    task_id_ = p;
  }
  return task_id_;
}
inline ::zb::dcts::scenario::TaskId* CmdHeader::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.CmdHeader.task_id)
  return _internal_mutable_task_id();
}
inline void CmdHeader::set_allocated_task_id(::zb::dcts::scenario::TaskId* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id)->GetArena();
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.CmdHeader.task_id)
}

// .zb.dcts.source.kh.NodeDevice task_runner = 4;
inline bool CmdHeader::_internal_has_task_runner() const {
  return this != internal_default_instance() && task_runner_ != nullptr;
}
inline bool CmdHeader::has_task_runner() const {
  return _internal_has_task_runner();
}
inline void CmdHeader::clear_task_runner() {
  if (GetArena() == nullptr && task_runner_ != nullptr) {
    delete task_runner_;
  }
  task_runner_ = nullptr;
}
inline const ::zb::dcts::source::kh::NodeDevice& CmdHeader::_internal_task_runner() const {
  const ::zb::dcts::source::kh::NodeDevice* p = task_runner_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::NodeDevice*>(
      &::zb::dcts::source::kh::_NodeDevice_default_instance_);
}
inline const ::zb::dcts::source::kh::NodeDevice& CmdHeader::task_runner() const {
  // @@protoc_insertion_point(field_get:zb.dcts.source.kh.CmdHeader.task_runner)
  return _internal_task_runner();
}
inline void CmdHeader::unsafe_arena_set_allocated_task_runner(
    ::zb::dcts::source::kh::NodeDevice* task_runner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_runner_);
  }
  task_runner_ = task_runner;
  if (task_runner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.source.kh.CmdHeader.task_runner)
}
inline ::zb::dcts::source::kh::NodeDevice* CmdHeader::release_task_runner() {
  auto temp = unsafe_arena_release_task_runner();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::NodeDevice* CmdHeader::unsafe_arena_release_task_runner() {
  // @@protoc_insertion_point(field_release:zb.dcts.source.kh.CmdHeader.task_runner)
  
  ::zb::dcts::source::kh::NodeDevice* temp = task_runner_;
  task_runner_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::NodeDevice* CmdHeader::_internal_mutable_task_runner() {
  
  if (task_runner_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::NodeDevice>(GetArena());
    task_runner_ = p;
  }
  return task_runner_;
}
inline ::zb::dcts::source::kh::NodeDevice* CmdHeader::mutable_task_runner() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.source.kh.CmdHeader.task_runner)
  return _internal_mutable_task_runner();
}
inline void CmdHeader::set_allocated_task_runner(::zb::dcts::source::kh::NodeDevice* task_runner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_runner_;
  }
  if (task_runner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_runner);
    if (message_arena != submessage_arena) {
      task_runner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_runner, submessage_arena);
    }
    
  } else {
    
  }
  task_runner_ = task_runner;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.source.kh.CmdHeader.task_runner)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::source::kh::CMTip> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::kh::CMTip>() {
  return ::zb::dcts::source::kh::CMTip_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::source::kh::TaskCmd> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::kh::TaskCmd>() {
  return ::zb::dcts::source::kh::TaskCmd_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::source::kh::SelfTestMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::source::kh::SelfTestMode>() {
  return ::zb::dcts::source::kh::SelfTestMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_2fkh_2fKh_2eproto
