// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/kh/KhContext.proto

#include "source/kh/KhContext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticVal_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSource_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseSample_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto;
namespace zb {
namespace dcts {
namespace source {
namespace kh {
class StaticSelfTestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticSelfTestResult> _instance;
} _StaticSelfTestResult_default_instance_;
class WindowParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowParams> _instance;
} _WindowParams_default_instance_;
class GainControlParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GainControlParam> _instance;
} _GainControlParam_default_instance_;
class OperationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationStatus> _instance;
} _OperationStatus_default_instance_;
class TargetDirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetDirection> _instance;
} _TargetDirection_default_instance_;
class PulseSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulseSample> _instance;
} _PulseSample_default_instance_;
class PulseClusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulseCluster> _instance;
} _PulseCluster_default_instance_;
class DataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSource> _instance;
} _DataSource_default_instance_;
class PositionDataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionDataSource> _instance;
} _PositionDataSource_default_instance_;
class OnLinePositionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnLinePositionParam> _instance;
} _OnLinePositionParam_default_instance_;
class OffLinePositionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OffLinePositionParam> _instance;
} _OffLinePositionParam_default_instance_;
class StartPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPositionRequest> _instance;
} _StartPositionRequest_default_instance_;
class TargetSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetSpeed> _instance;
} _TargetSpeed_default_instance_;
class PositionTargetDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionTargetDescriptor> _instance;
} _PositionTargetDescriptor_default_instance_;
class TimeTriggerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeTriggerParam> _instance;
} _TimeTriggerParam_default_instance_;
class FreqTriggerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreqTriggerParam> _instance;
} _FreqTriggerParam_default_instance_;
class LevelTriggerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LevelTriggerParam> _instance;
} _LevelTriggerParam_default_instance_;
}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_DataSource_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_DataSource_default_instance_;
    new (ptr) ::zb::dcts::source::kh::DataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::DataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DataSource_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DataSource_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_FreqTriggerParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_FreqTriggerParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::FreqTriggerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::FreqTriggerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FreqTriggerParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FreqTriggerParam_source_2fkh_2fKhContext_2eproto}, {}};

static void InitDefaultsscc_info_GainControlParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_GainControlParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::GainControlParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::GainControlParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GainControlParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GainControlParam_source_2fkh_2fKhContext_2eproto}, {}};

static void InitDefaultsscc_info_LevelTriggerParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_LevelTriggerParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::LevelTriggerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::LevelTriggerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LevelTriggerParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LevelTriggerParam_source_2fkh_2fKhContext_2eproto}, {}};

static void InitDefaultsscc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_OffLinePositionParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::OffLinePositionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::OffLinePositionParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_OnLinePositionParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::OnLinePositionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::OnLinePositionParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_OperationStatus_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_OperationStatus_default_instance_;
    new (ptr) ::zb::dcts::source::kh::OperationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::OperationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperationStatus_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_TimeSpan_dcts_2eproto.base,}};

static void InitDefaultsscc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_PositionDataSource_default_instance_;
    new (ptr) ::zb::dcts::source::kh::PositionDataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::PositionDataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_PositionTargetDescriptor_default_instance_;
    new (ptr) ::zb::dcts::source::kh::PositionTargetDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::PositionTargetDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_Position_dcts_2eproto.base,
      &scc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_DataSource_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_PulseCluster_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_PulseCluster_default_instance_;
    new (ptr) ::zb::dcts::source::kh::PulseCluster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::PulseCluster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PulseCluster_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PulseCluster_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_StatisticVal_dcts_2eproto.base,
      &scc_info_PulseSample_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,}};

static void InitDefaultsscc_info_PulseSample_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_PulseSample_default_instance_;
    new (ptr) ::zb::dcts::source::kh::PulseSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::PulseSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseSample_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PulseSample_source_2fkh_2fKhContext_2eproto}, {}};

static void InitDefaultsscc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_StartPositionRequest_default_instance_;
    new (ptr) ::zb::dcts::source::kh::StartPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::StartPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_StaticSelfTestResult_default_instance_;
    new (ptr) ::zb::dcts::source::kh::StaticSelfTestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::StaticSelfTestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_TargetDirection_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_TargetDirection_default_instance_;
    new (ptr) ::zb::dcts::source::kh::TargetDirection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::TargetDirection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TargetDirection_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,}};

static void InitDefaultsscc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_TargetSpeed_default_instance_;
    new (ptr) ::zb::dcts::source::kh::TargetSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::TargetSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto}, {}};

static void InitDefaultsscc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_TimeTriggerParam_default_instance_;
    new (ptr) ::zb::dcts::source::kh::TimeTriggerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::TimeTriggerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,}};

static void InitDefaultsscc_info_WindowParams_source_2fkh_2fKhContext_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_WindowParams_default_instance_;
    new (ptr) ::zb::dcts::source::kh::WindowParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::WindowParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowParams_source_2fkh_2fKhContext_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WindowParams_source_2fkh_2fKhContext_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_source_2fkh_2fKhContext_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_source_2fkh_2fKhContext_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_source_2fkh_2fKhContext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StaticSelfTestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StaticSelfTestResult, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StaticSelfTestResult, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::WindowParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::WindowParams, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::WindowParams, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::GainControlParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::GainControlParam, hold_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::GainControlParam, inc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OperationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OperationStatus, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OperationStatus, total_sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OperationStatus, record_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, direction_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, confidence_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetDirection, pitch_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, carrier_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, pulse_width_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, repeat_period_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, repeat_period_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, freq_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseSample, pw_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, bw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, ampt_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, pulse_samples_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PulseCluster, time_span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DataSource, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DataSource, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DataSource, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionDataSource, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionDataSource, task_runner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OnLinePositionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OnLinePositionParam, data_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OffLinePositionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::OffLinePositionParam, data_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StartPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StartPositionRequest, online_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StartPositionRequest, offline_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StartPositionRequest, task_describe_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::StartPositionRequest, pos_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetSpeed, ln_speed_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetSpeed, lt_speed_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TargetSpeed, alt_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, target_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, target_position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, target_speed_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, confidence_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::PositionTargetDescriptor, data_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TimeTriggerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TimeTriggerParam, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TimeTriggerParam, trigger_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TimeTriggerParam, sweep_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::TimeTriggerParam, segment_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::FreqTriggerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::FreqTriggerParam, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::FreqTriggerParam, trigger_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::LevelTriggerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::LevelTriggerParam, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::LevelTriggerParam, trigger_value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::source::kh::StaticSelfTestResult)},
  { 7, -1, sizeof(::zb::dcts::source::kh::WindowParams)},
  { 14, -1, sizeof(::zb::dcts::source::kh::GainControlParam)},
  { 21, -1, sizeof(::zb::dcts::source::kh::OperationStatus)},
  { 29, -1, sizeof(::zb::dcts::source::kh::TargetDirection)},
  { 40, -1, sizeof(::zb::dcts::source::kh::PulseSample)},
  { 51, -1, sizeof(::zb::dcts::source::kh::PulseCluster)},
  { 62, -1, sizeof(::zb::dcts::source::kh::DataSource)},
  { 70, -1, sizeof(::zb::dcts::source::kh::PositionDataSource)},
  { 77, -1, sizeof(::zb::dcts::source::kh::OnLinePositionParam)},
  { 83, -1, sizeof(::zb::dcts::source::kh::OffLinePositionParam)},
  { 89, -1, sizeof(::zb::dcts::source::kh::StartPositionRequest)},
  { 98, -1, sizeof(::zb::dcts::source::kh::TargetSpeed)},
  { 106, -1, sizeof(::zb::dcts::source::kh::PositionTargetDescriptor)},
  { 117, -1, sizeof(::zb::dcts::source::kh::TimeTriggerParam)},
  { 126, -1, sizeof(::zb::dcts::source::kh::FreqTriggerParam)},
  { 133, -1, sizeof(::zb::dcts::source::kh::LevelTriggerParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_StaticSelfTestResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_WindowParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_GainControlParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_OperationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_TargetDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_PulseSample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_PulseCluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_DataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_PositionDataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_OnLinePositionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_OffLinePositionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_StartPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_TargetSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_PositionTargetDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_TimeTriggerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_FreqTriggerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_LevelTriggerParam_default_instance_),
};

const char descriptor_table_protodef_source_2fkh_2fKhContext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031source/kh/KhContext.proto\022\021zb.dcts.sou"
  "rce.kh\032\ndcts.proto\032\023source/source.proto\""
  "S\n\024StaticSelfTestResult\022+\n\tsource_id\030\001 \001"
  "(\0132\030.zb.dcts.source.SourceId\022\016\n\006status\030\002"
  " \001(\t\"J\n\014WindowParams\022+\n\004type\030\001 \001(\0162\035.zb."
  "dcts.source.kh.WindowType\022\r\n\005param\030\002 \001(\001"
  "\"2\n\020GainControlParam\022\021\n\thold_time\030\001 \001(\002\022"
  "\013\n\003inc\030\002 \001(\002\"h\n\017OperationStatus\022$\n\ttime_"
  "span\030\001 \001(\0132\021.zb.dcts.TimeSpan\022\031\n\021total_s"
  "weep_count\030\002 \001(\004\022\024\n\014record_count\030\003 \001(\004\"\242"
  "\001\n\017TargetDirection\022\030\n\020center_frequency\030\001"
  " \001(\001\022\021\n\tdirection\030\002 \001(\001\022\022\n\nconfidence\030\003 "
  "\001(\005\022\021\n\tamplitude\030\004 \001(\002\022&\n\ntime_stamp\030\005 \001"
  "(\0132\022.zb.dcts.Timestamp\022\023\n\013pitch_angle\030\006 "
  "\001(\001\"\217\001\n\013PulseSample\022\024\n\014carrier_freq\030\001 \001("
  "\001\022\023\n\013pulse_width\030\002 \001(\002\022\025\n\rrepeat_period\030"
  "\003 \001(\002\022\032\n\022repeat_period_type\030\004 \001(\r\022\021\n\tfre"
  "q_type\030\005 \001(\r\022\017\n\007pw_type\030\006 \001(\r\"\270\001\n\014PulseC"
  "luster\022\014\n\004freq\030\001 \001(\002\022\n\n\002bw\030\002 \001(\002\022\014\n\004type"
  "\030\003 \001(\r\022#\n\004ampt\030\004 \001(\0132\025.zb.dcts.Statistic"
  "Val\0225\n\rpulse_samples\030\005 \003(\0132\036.zb.dcts.sou"
  "rce.kh.PulseSample\022$\n\ttime_span\030\006 \001(\0132\021."
  "zb.dcts.TimeSpan\"o\n\nDataSource\022\017\n\007task_i"
  "d\030\001 \001(\r\022+\n\tsource_id\030\002 \001(\0132\030.zb.dcts.sou"
  "rce.SourceId\022#\n\010position\030\003 \001(\0132\021.zb.dcts"
  ".Position\"T\n\022PositionDataSource\022\017\n\007task_"
  "id\030\001 \001(\r\022-\n\013task_runner\030\002 \003(\0132\030.zb.dcts."
  "source.SourceId\"Q\n\023OnLinePositionParam\022:"
  "\n\013data_source\030\001 \001(\0132%.zb.dcts.source.kh."
  "PositionDataSource\"R\n\024OffLinePositionPar"
  "am\022:\n\013data_source\030\001 \003(\0132%.zb.dcts.source"
  ".kh.PositionDataSource\"\275\001\n\024StartPosition"
  "Request\022<\n\014online_param\030\001 \001(\0132&.zb.dcts."
  "source.kh.OnLinePositionParam\022>\n\roffline"
  "_param\030\002 \001(\0132\'.zb.dcts.source.kh.OffLine"
  "PositionParam\022\025\n\rtask_describe\030\003 \001(\t\022\020\n\010"
  "pos_freq\030\004 \001(\001\"D\n\013TargetSpeed\022\020\n\010ln_spee"
  "d\030\001 \001(\001\022\020\n\010lt_speed\030\002 \001(\001\022\021\n\talt_speed\030\003"
  " \001(\001\"\202\002\n\030PositionTargetDescriptor\022\021\n\ttar"
  "get_id\030\001 \001(\r\022*\n\017target_position\030\002 \001(\0132\021."
  "zb.dcts.Position\0224\n\014target_speed\030\003 \001(\0132\036"
  ".zb.dcts.source.kh.TargetSpeed\022\033\n\023confid"
  "ence_interval\030\004 \001(\001\022 \n\004time\030\005 \001(\0132\022.zb.d"
  "cts.Timestamp\0222\n\013data_source\030\007 \003(\0132\035.zb."
  "dcts.source.kh.DataSource\"\352\001\n\020TimeTrigge"
  "rParam\022E\n\014trigger_type\030\001 \001(\0162/.zb.dcts.s"
  "ource.kh.TimeTriggerParam.TriggerType\022(\n"
  "\014trigger_time\030\002 \001(\0132\022.zb.dcts.Timestamp\022"
  "\026\n\016sweep_interval\030\003 \001(\r\022\030\n\020segment_inter"
  "val\030\004 \001(\r\"3\n\013TriggerType\022\010\n\004NONE\020\000\022\014\n\010AB"
  "S_TIME\020\002\022\014\n\010REL_TIME\020\004\"\223\001\n\020FreqTriggerPa"
  "ram\022E\n\014trigger_type\030\001 \001(\0162/.zb.dcts.sour"
  "ce.kh.FreqTriggerParam.TriggerType\022\025\n\rtr"
  "igger_value\030\002 \001(\002\"!\n\013TriggerType\022\010\n\004NONE"
  "\020\000\022\010\n\004FREQ\020\010\"\257\001\n\021LevelTriggerParam\022F\n\014tr"
  "igger_type\030\001 \001(\01620.zb.dcts.source.kh.Lev"
  "elTriggerParam.TriggerType\022\025\n\rtrigger_va"
  "lue\030\002 \001(\002\";\n\013TriggerType\022\010\n\004NONE\020\000\022\t\n\005LE"
  "VEL\020\010\022\n\n\006RISING\020\020\022\013\n\007FALLING\020\030*\?\n\020Source"
  "ControlCmd\022\024\n\020SELT_TEST_STATIC\020\000\022\025\n\021SELT"
  "_TEST_DYNAMIC\020\001*@\n\nDetectMode\022\013\n\007MAXHOLD"
  "\020\000\022\013\n\007MINHOLD\020\001\022\013\n\007CURRENT\020\002\022\013\n\007AVERAGE\020"
  "\003*F\n\rFFTDetectMode\022\014\n\010POSITIVE\020\000\022\014\n\010NEGA"
  "TIVE\020\001\022\013\n\007SAMPLED\020\002\022\014\n\010AVERAGEF\020\003*7\n\013Cha"
  "nnelMode\022\n\n\006NORMAL\020\000\022\014\n\010LOWNOISE\020\001\022\016\n\nLO"
  "WDISTORT\020\002*\\\n\nWindowType\022\013\n\007HANNING\020\000\022\013\n"
  "\007HAMMING\020\001\022\013\n\007RECTWIN\020\002\022\013\n\007FLATTOP\020\003\022\t\n\005"
  "GAUSS\020\004\022\017\n\013BLACKHARRIS\020\005*q\n\022AntennaContr"
  "olMode\022\017\n\013ANT_INVALID\020\000\022\017\n\013ANT_THROUGH\020\001"
  "\022\021\n\rANT_1_AMPLIFY\020\002\022\021\n\rANT_2_AMPLIFY\020\003\022\023"
  "\n\017ANT_1_2_AMPLIFY\020\004*#\n\017GainControlMode\022\007"
  "\n\003AGC\020\000\022\007\n\003MGC\020\001*%\n\rThresholdMode\022\010\n\004AUT"
  "O\020\000\022\n\n\006MANUAL\020\001*$\n\010DataType\022\013\n\007cplx_16\020\000"
  "\022\013\n\007cplx_32\020\001*;\n\010LinkType\022\013\n\007UNKNOWN\020\000\022\n"
  "\n\006LINK11\020\001\022\n\n\006LINK16\020\002\022\n\n\006LINK4A\020\003b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_source_2fkh_2fKhContext_2eproto_deps[2] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_source_2fkh_2fKhContext_2eproto_sccs[17] = {
  &scc_info_DataSource_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_FreqTriggerParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_GainControlParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_LevelTriggerParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_PulseCluster_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_PulseSample_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto.base,
  &scc_info_WindowParams_source_2fkh_2fKhContext_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_source_2fkh_2fKhContext_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fkh_2fKhContext_2eproto = {
  false, false, descriptor_table_protodef_source_2fkh_2fKhContext_2eproto, "source/kh/KhContext.proto", 3002,
  &descriptor_table_source_2fkh_2fKhContext_2eproto_once, descriptor_table_source_2fkh_2fKhContext_2eproto_sccs, descriptor_table_source_2fkh_2fKhContext_2eproto_deps, 17, 2,
  schemas, file_default_instances, TableStruct_source_2fkh_2fKhContext_2eproto::offsets,
  file_level_metadata_source_2fkh_2fKhContext_2eproto, 17, file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto, file_level_service_descriptors_source_2fkh_2fKhContext_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_source_2fkh_2fKhContext_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto)), true);
namespace zb {
namespace dcts {
namespace source {
namespace kh {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeTriggerParam_TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[0];
}
bool TimeTriggerParam_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeTriggerParam_TriggerType TimeTriggerParam::NONE;
constexpr TimeTriggerParam_TriggerType TimeTriggerParam::ABS_TIME;
constexpr TimeTriggerParam_TriggerType TimeTriggerParam::REL_TIME;
constexpr TimeTriggerParam_TriggerType TimeTriggerParam::TriggerType_MIN;
constexpr TimeTriggerParam_TriggerType TimeTriggerParam::TriggerType_MAX;
constexpr int TimeTriggerParam::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FreqTriggerParam_TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[1];
}
bool FreqTriggerParam_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FreqTriggerParam_TriggerType FreqTriggerParam::NONE;
constexpr FreqTriggerParam_TriggerType FreqTriggerParam::FREQ;
constexpr FreqTriggerParam_TriggerType FreqTriggerParam::TriggerType_MIN;
constexpr FreqTriggerParam_TriggerType FreqTriggerParam::TriggerType_MAX;
constexpr int FreqTriggerParam::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelTriggerParam_TriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[2];
}
bool LevelTriggerParam_TriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::NONE;
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::LEVEL;
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::RISING;
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::FALLING;
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::TriggerType_MIN;
constexpr LevelTriggerParam_TriggerType LevelTriggerParam::TriggerType_MAX;
constexpr int LevelTriggerParam::TriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceControlCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[3];
}
bool SourceControlCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[4];
}
bool DetectMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FFTDetectMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[5];
}
bool FFTDetectMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[6];
}
bool ChannelMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[7];
}
bool WindowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AntennaControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[8];
}
bool AntennaControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GainControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[9];
}
bool GainControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThresholdMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[10];
}
bool ThresholdMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[11];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LinkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKhContext_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKhContext_2eproto[12];
}
bool LinkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StaticSelfTestResult::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_StaticSelfTestResult_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class StaticSelfTestResult::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const StaticSelfTestResult* msg);
};

const ::zb::dcts::source::SourceId&
StaticSelfTestResult::_Internal::source_id(const StaticSelfTestResult* msg) {
  return *msg->source_id_;
}
void StaticSelfTestResult::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
StaticSelfTestResult::StaticSelfTestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.StaticSelfTestResult)
}
StaticSelfTestResult::StaticSelfTestResult(const StaticSelfTestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.StaticSelfTestResult)
}

void StaticSelfTestResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_id_ = nullptr;
}

StaticSelfTestResult::~StaticSelfTestResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.StaticSelfTestResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StaticSelfTestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete source_id_;
}

void StaticSelfTestResult::ArenaDtor(void* object) {
  StaticSelfTestResult* _this = reinterpret_cast< StaticSelfTestResult* >(object);
  (void)_this;
}
void StaticSelfTestResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaticSelfTestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticSelfTestResult& StaticSelfTestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticSelfTestResult_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void StaticSelfTestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.StaticSelfTestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticSelfTestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.source.kh.StaticSelfTestResult.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticSelfTestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.StaticSelfTestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.source.kh.StaticSelfTestResult.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.StaticSelfTestResult)
  return target;
}

size_t StaticSelfTestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.StaticSelfTestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticSelfTestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.StaticSelfTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticSelfTestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticSelfTestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.StaticSelfTestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.StaticSelfTestResult)
    MergeFrom(*source);
  }
}

void StaticSelfTestResult::MergeFrom(const StaticSelfTestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.StaticSelfTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
}

void StaticSelfTestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.StaticSelfTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticSelfTestResult::CopyFrom(const StaticSelfTestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.StaticSelfTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticSelfTestResult::IsInitialized() const {
  return true;
}

void StaticSelfTestResult::InternalSwap(StaticSelfTestResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(source_id_, other->source_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticSelfTestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowParams::InitAsDefaultInstance() {
}
class WindowParams::_Internal {
 public:
};

WindowParams::WindowParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.WindowParams)
}
WindowParams::WindowParams(const WindowParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&param_, &from.param_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&param_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.WindowParams)
}

void WindowParams::SharedCtor() {
  ::memset(&param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&param_)) + sizeof(type_));
}

WindowParams::~WindowParams() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.WindowParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WindowParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WindowParams::ArenaDtor(void* object) {
  WindowParams* _this = reinterpret_cast< WindowParams* >(object);
  (void)_this;
}
void WindowParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WindowParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowParams& WindowParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowParams_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void WindowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.WindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&param_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WindowParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.WindowType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::source::kh::WindowType>(val));
        } else goto handle_unusual;
        continue;
      // double param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.WindowParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.WindowType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // double param = 2;
  if (!(this->param() <= 0 && this->param() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.WindowParams)
  return target;
}

size_t WindowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.WindowParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double param = 2;
  if (!(this->param() <= 0 && this->param() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.source.kh.WindowType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.WindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.WindowParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.WindowParams)
    MergeFrom(*source);
  }
}

void WindowParams::MergeFrom(const WindowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.WindowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.param() <= 0 && from.param() >= 0)) {
    _internal_set_param(from._internal_param());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void WindowParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.WindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowParams::CopyFrom(const WindowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.WindowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowParams::IsInitialized() const {
  return true;
}

void WindowParams::InternalSwap(WindowParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WindowParams, type_)
      + sizeof(WindowParams::type_)
      - PROTOBUF_FIELD_OFFSET(WindowParams, param_)>(
          reinterpret_cast<char*>(&param_),
          reinterpret_cast<char*>(&other->param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GainControlParam::InitAsDefaultInstance() {
}
class GainControlParam::_Internal {
 public:
};

GainControlParam::GainControlParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.GainControlParam)
}
GainControlParam::GainControlParam(const GainControlParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hold_time_, &from.hold_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&inc_) -
    reinterpret_cast<char*>(&hold_time_)) + sizeof(inc_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.GainControlParam)
}

void GainControlParam::SharedCtor() {
  ::memset(&hold_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inc_) -
      reinterpret_cast<char*>(&hold_time_)) + sizeof(inc_));
}

GainControlParam::~GainControlParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.GainControlParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GainControlParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GainControlParam::ArenaDtor(void* object) {
  GainControlParam* _this = reinterpret_cast< GainControlParam* >(object);
  (void)_this;
}
void GainControlParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GainControlParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GainControlParam& GainControlParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GainControlParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void GainControlParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.GainControlParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hold_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inc_) -
      reinterpret_cast<char*>(&hold_time_)) + sizeof(inc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GainControlParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float hold_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float inc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          inc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GainControlParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.GainControlParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float hold_time = 1;
  if (!(this->hold_time() <= 0 && this->hold_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_hold_time(), target);
  }

  // float inc = 2;
  if (!(this->inc() <= 0 && this->inc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_inc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.GainControlParam)
  return target;
}

size_t GainControlParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.GainControlParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float hold_time = 1;
  if (!(this->hold_time() <= 0 && this->hold_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float inc = 2;
  if (!(this->inc() <= 0 && this->inc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GainControlParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.GainControlParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GainControlParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GainControlParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.GainControlParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.GainControlParam)
    MergeFrom(*source);
  }
}

void GainControlParam::MergeFrom(const GainControlParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.GainControlParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.hold_time() <= 0 && from.hold_time() >= 0)) {
    _internal_set_hold_time(from._internal_hold_time());
  }
  if (!(from.inc() <= 0 && from.inc() >= 0)) {
    _internal_set_inc(from._internal_inc());
  }
}

void GainControlParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.GainControlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainControlParam::CopyFrom(const GainControlParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.GainControlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainControlParam::IsInitialized() const {
  return true;
}

void GainControlParam::InternalSwap(GainControlParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GainControlParam, inc_)
      + sizeof(GainControlParam::inc_)
      - PROTOBUF_FIELD_OFFSET(GainControlParam, hold_time_)>(
          reinterpret_cast<char*>(&hold_time_),
          reinterpret_cast<char*>(&other->hold_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GainControlParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationStatus::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_OperationStatus_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class OperationStatus::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& time_span(const OperationStatus* msg);
};

const ::zb::dcts::TimeSpan&
OperationStatus::_Internal::time_span(const OperationStatus* msg) {
  return *msg->time_span_;
}
void OperationStatus::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
OperationStatus::OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.OperationStatus)
}
OperationStatus::OperationStatus(const OperationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&total_sweep_count_, &from.total_sweep_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_count_) -
    reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.OperationStatus)
}

void OperationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&time_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&time_span_)) + sizeof(record_count_));
}

OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.OperationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_span_;
}

void OperationStatus::ArenaDtor(void* object) {
  OperationStatus* _this = reinterpret_cast< OperationStatus* >(object);
  (void)_this;
}
void OperationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationStatus& OperationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&total_sweep_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_count_) -
      reinterpret_cast<char*>(&total_sweep_count_)) + sizeof(record_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TimeSpan time_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_sweep_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 record_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          record_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.OperationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time_span(this), target, stream);
  }

  // uint64 total_sweep_count = 2;
  if (this->total_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_sweep_count(), target);
  }

  // uint64 record_count = 3;
  if (this->record_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_record_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.OperationStatus)
  return target;
}

size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.OperationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint64 total_sweep_count = 2;
  if (this->total_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_sweep_count());
  }

  // uint64 record_count = 3;
  if (this->record_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_record_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.OperationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.OperationStatus)
    MergeFrom(*source);
  }
}

void OperationStatus::MergeFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.OperationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.total_sweep_count() != 0) {
    _internal_set_total_sweep_count(from._internal_total_sweep_count());
  }
  if (from.record_count() != 0) {
    _internal_set_record_count(from._internal_record_count());
  }
}

void OperationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  return true;
}

void OperationStatus::InternalSwap(OperationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationStatus, record_count_)
      + sizeof(OperationStatus::record_count_)
      - PROTOBUF_FIELD_OFFSET(OperationStatus, time_span_)>(
          reinterpret_cast<char*>(&time_span_),
          reinterpret_cast<char*>(&other->time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetDirection::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_TargetDirection_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class TargetDirection::_Internal {
 public:
  static const ::zb::dcts::Timestamp& time_stamp(const TargetDirection* msg);
};

const ::zb::dcts::Timestamp&
TargetDirection::_Internal::time_stamp(const TargetDirection* msg) {
  return *msg->time_stamp_;
}
void TargetDirection::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
TargetDirection::TargetDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.TargetDirection)
}
TargetDirection::TargetDirection(const TargetDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_angle_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(pitch_angle_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.TargetDirection)
}

void TargetDirection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_angle_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(pitch_angle_));
}

TargetDirection::~TargetDirection() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.TargetDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_stamp_;
}

void TargetDirection::ArenaDtor(void* object) {
  TargetDirection* _this = reinterpret_cast< TargetDirection* >(object);
  (void)_this;
}
void TargetDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetDirection& TargetDirection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void TargetDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_angle_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(pitch_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pitch_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_direction(), target);
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_confidence(), target);
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_amplitude(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 5;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_stamp(this), target, stream);
  }

  // double pitch_angle = 6;
  if (!(this->pitch_angle() <= 0 && this->pitch_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pitch_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.TargetDirection)
  return target;
}

size_t TargetDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.TargetDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp time_stamp = 5;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    total_size += 1 + 4;
  }

  // double pitch_angle = 6;
  if (!(this->pitch_angle() <= 0 && this->pitch_angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.TargetDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.TargetDirection)
    MergeFrom(*source);
  }
}

void TargetDirection::MergeFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.amplitude() <= 0 && from.amplitude() >= 0)) {
    _internal_set_amplitude(from._internal_amplitude());
  }
  if (!(from.pitch_angle() <= 0 && from.pitch_angle() >= 0)) {
    _internal_set_pitch_angle(from._internal_pitch_angle());
  }
}

void TargetDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDirection::CopyFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDirection::IsInitialized() const {
  return true;
}

void TargetDirection::InternalSwap(TargetDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetDirection, pitch_angle_)
      + sizeof(TargetDirection::pitch_angle_)
      - PROTOBUF_FIELD_OFFSET(TargetDirection, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PulseSample::InitAsDefaultInstance() {
}
class PulseSample::_Internal {
 public:
};

PulseSample::PulseSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.PulseSample)
}
PulseSample::PulseSample(const PulseSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&carrier_freq_, &from.carrier_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&pw_type_) -
    reinterpret_cast<char*>(&carrier_freq_)) + sizeof(pw_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.PulseSample)
}

void PulseSample::SharedCtor() {
  ::memset(&carrier_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pw_type_) -
      reinterpret_cast<char*>(&carrier_freq_)) + sizeof(pw_type_));
}

PulseSample::~PulseSample() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.PulseSample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulseSample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PulseSample::ArenaDtor(void* object) {
  PulseSample* _this = reinterpret_cast< PulseSample* >(object);
  (void)_this;
}
void PulseSample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulseSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulseSample& PulseSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulseSample_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void PulseSample::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.PulseSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&carrier_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pw_type_) -
      reinterpret_cast<char*>(&carrier_freq_)) + sizeof(pw_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulseSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double carrier_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          carrier_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float pulse_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float repeat_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          repeat_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 repeat_period_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          repeat_period_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 freq_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          freq_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pw_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pw_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulseSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.PulseSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double carrier_freq = 1;
  if (!(this->carrier_freq() <= 0 && this->carrier_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_carrier_freq(), target);
  }

  // float pulse_width = 2;
  if (!(this->pulse_width() <= 0 && this->pulse_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pulse_width(), target);
  }

  // float repeat_period = 3;
  if (!(this->repeat_period() <= 0 && this->repeat_period() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_repeat_period(), target);
  }

  // uint32 repeat_period_type = 4;
  if (this->repeat_period_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_repeat_period_type(), target);
  }

  // uint32 freq_type = 5;
  if (this->freq_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_freq_type(), target);
  }

  // uint32 pw_type = 6;
  if (this->pw_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pw_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.PulseSample)
  return target;
}

size_t PulseSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.PulseSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double carrier_freq = 1;
  if (!(this->carrier_freq() <= 0 && this->carrier_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // float pulse_width = 2;
  if (!(this->pulse_width() <= 0 && this->pulse_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float repeat_period = 3;
  if (!(this->repeat_period() <= 0 && this->repeat_period() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 repeat_period_type = 4;
  if (this->repeat_period_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_repeat_period_type());
  }

  // uint32 freq_type = 5;
  if (this->freq_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_freq_type());
  }

  // uint32 pw_type = 6;
  if (this->pw_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pw_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulseSample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.PulseSample)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseSample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulseSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.PulseSample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.PulseSample)
    MergeFrom(*source);
  }
}

void PulseSample::MergeFrom(const PulseSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.PulseSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.carrier_freq() <= 0 && from.carrier_freq() >= 0)) {
    _internal_set_carrier_freq(from._internal_carrier_freq());
  }
  if (!(from.pulse_width() <= 0 && from.pulse_width() >= 0)) {
    _internal_set_pulse_width(from._internal_pulse_width());
  }
  if (!(from.repeat_period() <= 0 && from.repeat_period() >= 0)) {
    _internal_set_repeat_period(from._internal_repeat_period());
  }
  if (from.repeat_period_type() != 0) {
    _internal_set_repeat_period_type(from._internal_repeat_period_type());
  }
  if (from.freq_type() != 0) {
    _internal_set_freq_type(from._internal_freq_type());
  }
  if (from.pw_type() != 0) {
    _internal_set_pw_type(from._internal_pw_type());
  }
}

void PulseSample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.PulseSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseSample::CopyFrom(const PulseSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.PulseSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseSample::IsInitialized() const {
  return true;
}

void PulseSample::InternalSwap(PulseSample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulseSample, pw_type_)
      + sizeof(PulseSample::pw_type_)
      - PROTOBUF_FIELD_OFFSET(PulseSample, carrier_freq_)>(
          reinterpret_cast<char*>(&carrier_freq_),
          reinterpret_cast<char*>(&other->carrier_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulseSample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PulseCluster::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_PulseCluster_default_instance_._instance.get_mutable()->ampt_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::source::kh::_PulseCluster_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class PulseCluster::_Internal {
 public:
  static const ::zb::dcts::StatisticVal& ampt(const PulseCluster* msg);
  static const ::zb::dcts::TimeSpan& time_span(const PulseCluster* msg);
};

const ::zb::dcts::StatisticVal&
PulseCluster::_Internal::ampt(const PulseCluster* msg) {
  return *msg->ampt_;
}
const ::zb::dcts::TimeSpan&
PulseCluster::_Internal::time_span(const PulseCluster* msg) {
  return *msg->time_span_;
}
void PulseCluster::clear_ampt() {
  if (GetArena() == nullptr && ampt_ != nullptr) {
    delete ampt_;
  }
  ampt_ = nullptr;
}
void PulseCluster::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
PulseCluster::PulseCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pulse_samples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.PulseCluster)
}
PulseCluster::PulseCluster(const PulseCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pulse_samples_(from.pulse_samples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ampt()) {
    ampt_ = new ::zb::dcts::StatisticVal(*from.ampt_);
  } else {
    ampt_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  ::memcpy(&freq_, &from.freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&freq_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.PulseCluster)
}

void PulseCluster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulseCluster_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&ampt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ampt_)) + sizeof(type_));
}

PulseCluster::~PulseCluster() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.PulseCluster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulseCluster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ampt_;
  if (this != internal_default_instance()) delete time_span_;
}

void PulseCluster::ArenaDtor(void* object) {
  PulseCluster* _this = reinterpret_cast< PulseCluster* >(object);
  (void)_this;
}
void PulseCluster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulseCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulseCluster& PulseCluster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulseCluster_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void PulseCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.PulseCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pulse_samples_.Clear();
  if (GetArena() == nullptr && ampt_ != nullptr) {
    delete ampt_;
  }
  ampt_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulseCluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal ampt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ampt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.kh.PulseSample pulse_samples = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pulse_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulseCluster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.PulseCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float freq = 1;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_freq(), target);
  }

  // float bw = 2;
  if (!(this->bw() <= 0 && this->bw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bw(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // .zb.dcts.StatisticVal ampt = 4;
  if (this->has_ampt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ampt(this), target, stream);
  }

  // repeated .zb.dcts.source.kh.PulseSample pulse_samples = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pulse_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_pulse_samples(i), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 6;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::time_span(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.PulseCluster)
  return target;
}

size_t PulseCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.PulseCluster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.PulseSample pulse_samples = 5;
  total_size += 1UL * this->_internal_pulse_samples_size();
  for (const auto& msg : this->pulse_samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.StatisticVal ampt = 4;
  if (this->has_ampt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ampt_);
  }

  // .zb.dcts.TimeSpan time_span = 6;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // float freq = 1;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    total_size += 1 + 4;
  }

  // float bw = 2;
  if (!(this->bw() <= 0 && this->bw() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulseCluster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.PulseCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseCluster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulseCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.PulseCluster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.PulseCluster)
    MergeFrom(*source);
  }
}

void PulseCluster::MergeFrom(const PulseCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.PulseCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pulse_samples_.MergeFrom(from.pulse_samples_);
  if (from.has_ampt()) {
    _internal_mutable_ampt()->::zb::dcts::StatisticVal::MergeFrom(from._internal_ampt());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (!(from.freq() <= 0 && from.freq() >= 0)) {
    _internal_set_freq(from._internal_freq());
  }
  if (!(from.bw() <= 0 && from.bw() >= 0)) {
    _internal_set_bw(from._internal_bw());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PulseCluster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.PulseCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseCluster::CopyFrom(const PulseCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.PulseCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseCluster::IsInitialized() const {
  return true;
}

void PulseCluster::InternalSwap(PulseCluster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pulse_samples_.InternalSwap(&other->pulse_samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulseCluster, type_)
      + sizeof(PulseCluster::type_)
      - PROTOBUF_FIELD_OFFSET(PulseCluster, ampt_)>(
          reinterpret_cast<char*>(&ampt_),
          reinterpret_cast<char*>(&other->ampt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulseCluster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSource::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_DataSource_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::source::kh::_DataSource_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class DataSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const DataSource* msg);
  static const ::zb::dcts::Position& position(const DataSource* msg);
};

const ::zb::dcts::source::SourceId&
DataSource::_Internal::source_id(const DataSource* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::Position&
DataSource::_Internal::position(const DataSource* msg) {
  return *msg->position_;
}
void DataSource::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
void DataSource::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
DataSource::DataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.DataSource)
}

void DataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSource_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(task_id_));
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.DataSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete position_;
}

void DataSource::ArenaDtor(void* object) {
  DataSource* _this = reinterpret_cast< DataSource* >(object);
  (void)_this;
}
void DataSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSource& DataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSource_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  task_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceId source_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.DataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task_id(), target);
  }

  // .zb.dcts.source.SourceId source_id = 2;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.DataSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 2;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.DataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void DataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::InternalSwap(DataSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSource, task_id_)
      + sizeof(DataSource::task_id_)
      - PROTOBUF_FIELD_OFFSET(DataSource, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionDataSource::InitAsDefaultInstance() {
}
class PositionDataSource::_Internal {
 public:
};

void PositionDataSource::clear_task_runner() {
  task_runner_.Clear();
}
PositionDataSource::PositionDataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  task_runner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.PositionDataSource)
}
PositionDataSource::PositionDataSource(const PositionDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      task_runner_(from.task_runner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.PositionDataSource)
}

void PositionDataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto.base);
  task_id_ = 0u;
}

PositionDataSource::~PositionDataSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.PositionDataSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionDataSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PositionDataSource::ArenaDtor(void* object) {
  PositionDataSource* _this = reinterpret_cast< PositionDataSource* >(object);
  (void)_this;
}
void PositionDataSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionDataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionDataSource& PositionDataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionDataSource_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void PositionDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.PositionDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_runner_.Clear();
  task_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionDataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.SourceId task_runner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_runner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionDataSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.PositionDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task_id(), target);
  }

  // repeated .zb.dcts.source.SourceId task_runner = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_task_runner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_task_runner(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.PositionDataSource)
  return target;
}

size_t PositionDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.PositionDataSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.SourceId task_runner = 2;
  total_size += 1UL * this->_internal_task_runner_size();
  for (const auto& msg : this->task_runner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionDataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.PositionDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionDataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionDataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.PositionDataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.PositionDataSource)
    MergeFrom(*source);
  }
}

void PositionDataSource::MergeFrom(const PositionDataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.PositionDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_runner_.MergeFrom(from.task_runner_);
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void PositionDataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.PositionDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionDataSource::CopyFrom(const PositionDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.PositionDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionDataSource::IsInitialized() const {
  return true;
}

void PositionDataSource::InternalSwap(PositionDataSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_runner_.InternalSwap(&other->task_runner_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionDataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnLinePositionParam::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_OnLinePositionParam_default_instance_._instance.get_mutable()->data_source_ = const_cast< ::zb::dcts::source::kh::PositionDataSource*>(
      ::zb::dcts::source::kh::PositionDataSource::internal_default_instance());
}
class OnLinePositionParam::_Internal {
 public:
  static const ::zb::dcts::source::kh::PositionDataSource& data_source(const OnLinePositionParam* msg);
};

const ::zb::dcts::source::kh::PositionDataSource&
OnLinePositionParam::_Internal::data_source(const OnLinePositionParam* msg) {
  return *msg->data_source_;
}
OnLinePositionParam::OnLinePositionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.OnLinePositionParam)
}
OnLinePositionParam::OnLinePositionParam(const OnLinePositionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_source()) {
    data_source_ = new ::zb::dcts::source::kh::PositionDataSource(*from.data_source_);
  } else {
    data_source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.OnLinePositionParam)
}

void OnLinePositionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto.base);
  data_source_ = nullptr;
}

OnLinePositionParam::~OnLinePositionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.OnLinePositionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnLinePositionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_source_;
}

void OnLinePositionParam::ArenaDtor(void* object) {
  OnLinePositionParam* _this = reinterpret_cast< OnLinePositionParam* >(object);
  (void)_this;
}
void OnLinePositionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnLinePositionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnLinePositionParam& OnLinePositionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnLinePositionParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void OnLinePositionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.OnLinePositionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_source_ != nullptr) {
    delete data_source_;
  }
  data_source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnLinePositionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.PositionDataSource data_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnLinePositionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.OnLinePositionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.PositionDataSource data_source = 1;
  if (this->has_data_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data_source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.OnLinePositionParam)
  return target;
}

size_t OnLinePositionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.OnLinePositionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.kh.PositionDataSource data_source = 1;
  if (this->has_data_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_source_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnLinePositionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.OnLinePositionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OnLinePositionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnLinePositionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.OnLinePositionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.OnLinePositionParam)
    MergeFrom(*source);
  }
}

void OnLinePositionParam::MergeFrom(const OnLinePositionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.OnLinePositionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_source()) {
    _internal_mutable_data_source()->::zb::dcts::source::kh::PositionDataSource::MergeFrom(from._internal_data_source());
  }
}

void OnLinePositionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.OnLinePositionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnLinePositionParam::CopyFrom(const OnLinePositionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.OnLinePositionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnLinePositionParam::IsInitialized() const {
  return true;
}

void OnLinePositionParam::InternalSwap(OnLinePositionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_source_, other->data_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnLinePositionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OffLinePositionParam::InitAsDefaultInstance() {
}
class OffLinePositionParam::_Internal {
 public:
};

OffLinePositionParam::OffLinePositionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_source_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.OffLinePositionParam)
}
OffLinePositionParam::OffLinePositionParam(const OffLinePositionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_source_(from.data_source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.OffLinePositionParam)
}

void OffLinePositionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto.base);
}

OffLinePositionParam::~OffLinePositionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.OffLinePositionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OffLinePositionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OffLinePositionParam::ArenaDtor(void* object) {
  OffLinePositionParam* _this = reinterpret_cast< OffLinePositionParam* >(object);
  (void)_this;
}
void OffLinePositionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OffLinePositionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OffLinePositionParam& OffLinePositionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OffLinePositionParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void OffLinePositionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.OffLinePositionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_source_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OffLinePositionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.source.kh.PositionDataSource data_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OffLinePositionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.OffLinePositionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.PositionDataSource data_source = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_source(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.OffLinePositionParam)
  return target;
}

size_t OffLinePositionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.OffLinePositionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.PositionDataSource data_source = 1;
  total_size += 1UL * this->_internal_data_source_size();
  for (const auto& msg : this->data_source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OffLinePositionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.OffLinePositionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OffLinePositionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OffLinePositionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.OffLinePositionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.OffLinePositionParam)
    MergeFrom(*source);
  }
}

void OffLinePositionParam::MergeFrom(const OffLinePositionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.OffLinePositionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_source_.MergeFrom(from.data_source_);
}

void OffLinePositionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.OffLinePositionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OffLinePositionParam::CopyFrom(const OffLinePositionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.OffLinePositionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffLinePositionParam::IsInitialized() const {
  return true;
}

void OffLinePositionParam::InternalSwap(OffLinePositionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_source_.InternalSwap(&other->data_source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OffLinePositionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartPositionRequest::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_StartPositionRequest_default_instance_._instance.get_mutable()->online_param_ = const_cast< ::zb::dcts::source::kh::OnLinePositionParam*>(
      ::zb::dcts::source::kh::OnLinePositionParam::internal_default_instance());
  ::zb::dcts::source::kh::_StartPositionRequest_default_instance_._instance.get_mutable()->offline_param_ = const_cast< ::zb::dcts::source::kh::OffLinePositionParam*>(
      ::zb::dcts::source::kh::OffLinePositionParam::internal_default_instance());
}
class StartPositionRequest::_Internal {
 public:
  static const ::zb::dcts::source::kh::OnLinePositionParam& online_param(const StartPositionRequest* msg);
  static const ::zb::dcts::source::kh::OffLinePositionParam& offline_param(const StartPositionRequest* msg);
};

const ::zb::dcts::source::kh::OnLinePositionParam&
StartPositionRequest::_Internal::online_param(const StartPositionRequest* msg) {
  return *msg->online_param_;
}
const ::zb::dcts::source::kh::OffLinePositionParam&
StartPositionRequest::_Internal::offline_param(const StartPositionRequest* msg) {
  return *msg->offline_param_;
}
StartPositionRequest::StartPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.StartPositionRequest)
}
StartPositionRequest::StartPositionRequest(const StartPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_describe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_describe().empty()) {
    task_describe_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task_describe(),
      GetArena());
  }
  if (from._internal_has_online_param()) {
    online_param_ = new ::zb::dcts::source::kh::OnLinePositionParam(*from.online_param_);
  } else {
    online_param_ = nullptr;
  }
  if (from._internal_has_offline_param()) {
    offline_param_ = new ::zb::dcts::source::kh::OffLinePositionParam(*from.offline_param_);
  } else {
    offline_param_ = nullptr;
  }
  pos_freq_ = from.pos_freq_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.StartPositionRequest)
}

void StartPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto.base);
  task_describe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_freq_) -
      reinterpret_cast<char*>(&online_param_)) + sizeof(pos_freq_));
}

StartPositionRequest::~StartPositionRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.StartPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  task_describe_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete online_param_;
  if (this != internal_default_instance()) delete offline_param_;
}

void StartPositionRequest::ArenaDtor(void* object) {
  StartPositionRequest* _this = reinterpret_cast< StartPositionRequest* >(object);
  (void)_this;
}
void StartPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPositionRequest& StartPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPositionRequest_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void StartPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.StartPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_describe_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && online_param_ != nullptr) {
    delete online_param_;
  }
  online_param_ = nullptr;
  if (GetArena() == nullptr && offline_param_ != nullptr) {
    delete offline_param_;
  }
  offline_param_ = nullptr;
  pos_freq_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.OnLinePositionParam online_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_online_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.OffLinePositionParam offline_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_offline_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_describe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_task_describe();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.source.kh.StartPositionRequest.task_describe"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pos_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pos_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.StartPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.OnLinePositionParam online_param = 1;
  if (this->has_online_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::online_param(this), target, stream);
  }

  // .zb.dcts.source.kh.OffLinePositionParam offline_param = 2;
  if (this->has_offline_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::offline_param(this), target, stream);
  }

  // string task_describe = 3;
  if (this->task_describe().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_describe().data(), static_cast<int>(this->_internal_task_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.source.kh.StartPositionRequest.task_describe");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_task_describe(), target);
  }

  // double pos_freq = 4;
  if (!(this->pos_freq() <= 0 && this->pos_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pos_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.StartPositionRequest)
  return target;
}

size_t StartPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.StartPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_describe = 3;
  if (this->task_describe().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_describe());
  }

  // .zb.dcts.source.kh.OnLinePositionParam online_param = 1;
  if (this->has_online_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *online_param_);
  }

  // .zb.dcts.source.kh.OffLinePositionParam offline_param = 2;
  if (this->has_offline_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offline_param_);
  }

  // double pos_freq = 4;
  if (!(this->pos_freq() <= 0 && this->pos_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.StartPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.StartPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.StartPositionRequest)
    MergeFrom(*source);
  }
}

void StartPositionRequest::MergeFrom(const StartPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.StartPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_describe().size() > 0) {
    _internal_set_task_describe(from._internal_task_describe());
  }
  if (from.has_online_param()) {
    _internal_mutable_online_param()->::zb::dcts::source::kh::OnLinePositionParam::MergeFrom(from._internal_online_param());
  }
  if (from.has_offline_param()) {
    _internal_mutable_offline_param()->::zb::dcts::source::kh::OffLinePositionParam::MergeFrom(from._internal_offline_param());
  }
  if (!(from.pos_freq() <= 0 && from.pos_freq() >= 0)) {
    _internal_set_pos_freq(from._internal_pos_freq());
  }
}

void StartPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.StartPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPositionRequest::CopyFrom(const StartPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.StartPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPositionRequest::IsInitialized() const {
  return true;
}

void StartPositionRequest::InternalSwap(StartPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  task_describe_.Swap(&other->task_describe_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartPositionRequest, pos_freq_)
      + sizeof(StartPositionRequest::pos_freq_)
      - PROTOBUF_FIELD_OFFSET(StartPositionRequest, online_param_)>(
          reinterpret_cast<char*>(&online_param_),
          reinterpret_cast<char*>(&other->online_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetSpeed::InitAsDefaultInstance() {
}
class TargetSpeed::_Internal {
 public:
};

TargetSpeed::TargetSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.TargetSpeed)
}
TargetSpeed::TargetSpeed(const TargetSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ln_speed_, &from.ln_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_speed_) -
    reinterpret_cast<char*>(&ln_speed_)) + sizeof(alt_speed_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.TargetSpeed)
}

void TargetSpeed::SharedCtor() {
  ::memset(&ln_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_speed_) -
      reinterpret_cast<char*>(&ln_speed_)) + sizeof(alt_speed_));
}

TargetSpeed::~TargetSpeed() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.TargetSpeed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TargetSpeed::ArenaDtor(void* object) {
  TargetSpeed* _this = reinterpret_cast< TargetSpeed* >(object);
  (void)_this;
}
void TargetSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetSpeed& TargetSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetSpeed_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void TargetSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.TargetSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ln_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_speed_) -
      reinterpret_cast<char*>(&ln_speed_)) + sizeof(alt_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ln_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ln_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lt_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lt_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alt_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          alt_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.TargetSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ln_speed = 1;
  if (!(this->ln_speed() <= 0 && this->ln_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ln_speed(), target);
  }

  // double lt_speed = 2;
  if (!(this->lt_speed() <= 0 && this->lt_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lt_speed(), target);
  }

  // double alt_speed = 3;
  if (!(this->alt_speed() <= 0 && this->alt_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.TargetSpeed)
  return target;
}

size_t TargetSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.TargetSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ln_speed = 1;
  if (!(this->ln_speed() <= 0 && this->ln_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double lt_speed = 2;
  if (!(this->lt_speed() <= 0 && this->lt_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double alt_speed = 3;
  if (!(this->alt_speed() <= 0 && this->alt_speed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.TargetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.TargetSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.TargetSpeed)
    MergeFrom(*source);
  }
}

void TargetSpeed::MergeFrom(const TargetSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.TargetSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ln_speed() <= 0 && from.ln_speed() >= 0)) {
    _internal_set_ln_speed(from._internal_ln_speed());
  }
  if (!(from.lt_speed() <= 0 && from.lt_speed() >= 0)) {
    _internal_set_lt_speed(from._internal_lt_speed());
  }
  if (!(from.alt_speed() <= 0 && from.alt_speed() >= 0)) {
    _internal_set_alt_speed(from._internal_alt_speed());
  }
}

void TargetSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.TargetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetSpeed::CopyFrom(const TargetSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.TargetSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetSpeed::IsInitialized() const {
  return true;
}

void TargetSpeed::InternalSwap(TargetSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetSpeed, alt_speed_)
      + sizeof(TargetSpeed::alt_speed_)
      - PROTOBUF_FIELD_OFFSET(TargetSpeed, ln_speed_)>(
          reinterpret_cast<char*>(&ln_speed_),
          reinterpret_cast<char*>(&other->ln_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionTargetDescriptor::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_PositionTargetDescriptor_default_instance_._instance.get_mutable()->target_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
  ::zb::dcts::source::kh::_PositionTargetDescriptor_default_instance_._instance.get_mutable()->target_speed_ = const_cast< ::zb::dcts::source::kh::TargetSpeed*>(
      ::zb::dcts::source::kh::TargetSpeed::internal_default_instance());
  ::zb::dcts::source::kh::_PositionTargetDescriptor_default_instance_._instance.get_mutable()->time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class PositionTargetDescriptor::_Internal {
 public:
  static const ::zb::dcts::Position& target_position(const PositionTargetDescriptor* msg);
  static const ::zb::dcts::source::kh::TargetSpeed& target_speed(const PositionTargetDescriptor* msg);
  static const ::zb::dcts::Timestamp& time(const PositionTargetDescriptor* msg);
};

const ::zb::dcts::Position&
PositionTargetDescriptor::_Internal::target_position(const PositionTargetDescriptor* msg) {
  return *msg->target_position_;
}
const ::zb::dcts::source::kh::TargetSpeed&
PositionTargetDescriptor::_Internal::target_speed(const PositionTargetDescriptor* msg) {
  return *msg->target_speed_;
}
const ::zb::dcts::Timestamp&
PositionTargetDescriptor::_Internal::time(const PositionTargetDescriptor* msg) {
  return *msg->time_;
}
void PositionTargetDescriptor::clear_target_position() {
  if (GetArena() == nullptr && target_position_ != nullptr) {
    delete target_position_;
  }
  target_position_ = nullptr;
}
void PositionTargetDescriptor::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
PositionTargetDescriptor::PositionTargetDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_source_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.PositionTargetDescriptor)
}
PositionTargetDescriptor::PositionTargetDescriptor(const PositionTargetDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_source_(from.data_source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_position()) {
    target_position_ = new ::zb::dcts::Position(*from.target_position_);
  } else {
    target_position_ = nullptr;
  }
  if (from._internal_has_target_speed()) {
    target_speed_ = new ::zb::dcts::source::kh::TargetSpeed(*from.target_speed_);
  } else {
    target_speed_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::zb::dcts::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&confidence_interval_, &from.confidence_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&confidence_interval_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.PositionTargetDescriptor)
}

void PositionTargetDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&target_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&target_position_)) + sizeof(target_id_));
}

PositionTargetDescriptor::~PositionTargetDescriptor() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.PositionTargetDescriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionTargetDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_position_;
  if (this != internal_default_instance()) delete target_speed_;
  if (this != internal_default_instance()) delete time_;
}

void PositionTargetDescriptor::ArenaDtor(void* object) {
  PositionTargetDescriptor* _this = reinterpret_cast< PositionTargetDescriptor* >(object);
  (void)_this;
}
void PositionTargetDescriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionTargetDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionTargetDescriptor& PositionTargetDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionTargetDescriptor_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void PositionTargetDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.PositionTargetDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_source_.Clear();
  if (GetArena() == nullptr && target_position_ != nullptr) {
    delete target_position_;
  }
  target_position_ = nullptr;
  if (GetArena() == nullptr && target_speed_ != nullptr) {
    delete target_speed_;
  }
  target_speed_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&confidence_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&confidence_interval_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionTargetDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position target_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.TargetSpeed target_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double confidence_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          confidence_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.kh.DataSource data_source = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionTargetDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.PositionTargetDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_id(), target);
  }

  // .zb.dcts.Position target_position = 2;
  if (this->has_target_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_position(this), target, stream);
  }

  // .zb.dcts.source.kh.TargetSpeed target_speed = 3;
  if (this->has_target_speed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_speed(this), target, stream);
  }

  // double confidence_interval = 4;
  if (!(this->confidence_interval() <= 0 && this->confidence_interval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_confidence_interval(), target);
  }

  // .zb.dcts.Timestamp time = 5;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time(this), target, stream);
  }

  // repeated .zb.dcts.source.kh.DataSource data_source = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_source_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_data_source(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.PositionTargetDescriptor)
  return target;
}

size_t PositionTargetDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.PositionTargetDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.DataSource data_source = 7;
  total_size += 1UL * this->_internal_data_source_size();
  for (const auto& msg : this->data_source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.Position target_position = 2;
  if (this->has_target_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_position_);
  }

  // .zb.dcts.source.kh.TargetSpeed target_speed = 3;
  if (this->has_target_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_speed_);
  }

  // .zb.dcts.Timestamp time = 5;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // double confidence_interval = 4;
  if (!(this->confidence_interval() <= 0 && this->confidence_interval() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionTargetDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.PositionTargetDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionTargetDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionTargetDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.PositionTargetDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.PositionTargetDescriptor)
    MergeFrom(*source);
  }
}

void PositionTargetDescriptor::MergeFrom(const PositionTargetDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.PositionTargetDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_source_.MergeFrom(from.data_source_);
  if (from.has_target_position()) {
    _internal_mutable_target_position()->::zb::dcts::Position::MergeFrom(from._internal_target_position());
  }
  if (from.has_target_speed()) {
    _internal_mutable_target_speed()->::zb::dcts::source::kh::TargetSpeed::MergeFrom(from._internal_target_speed());
  }
  if (from.has_time()) {
    _internal_mutable_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_time());
  }
  if (!(from.confidence_interval() <= 0 && from.confidence_interval() >= 0)) {
    _internal_set_confidence_interval(from._internal_confidence_interval());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void PositionTargetDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.PositionTargetDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionTargetDescriptor::CopyFrom(const PositionTargetDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.PositionTargetDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionTargetDescriptor::IsInitialized() const {
  return true;
}

void PositionTargetDescriptor::InternalSwap(PositionTargetDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_source_.InternalSwap(&other->data_source_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionTargetDescriptor, target_id_)
      + sizeof(PositionTargetDescriptor::target_id_)
      - PROTOBUF_FIELD_OFFSET(PositionTargetDescriptor, target_position_)>(
          reinterpret_cast<char*>(&target_position_),
          reinterpret_cast<char*>(&other->target_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionTargetDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeTriggerParam::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_TimeTriggerParam_default_instance_._instance.get_mutable()->trigger_time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class TimeTriggerParam::_Internal {
 public:
  static const ::zb::dcts::Timestamp& trigger_time(const TimeTriggerParam* msg);
};

const ::zb::dcts::Timestamp&
TimeTriggerParam::_Internal::trigger_time(const TimeTriggerParam* msg) {
  return *msg->trigger_time_;
}
void TimeTriggerParam::clear_trigger_time() {
  if (GetArena() == nullptr && trigger_time_ != nullptr) {
    delete trigger_time_;
  }
  trigger_time_ = nullptr;
}
TimeTriggerParam::TimeTriggerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.TimeTriggerParam)
}
TimeTriggerParam::TimeTriggerParam(const TimeTriggerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trigger_time()) {
    trigger_time_ = new ::zb::dcts::Timestamp(*from.trigger_time_);
  } else {
    trigger_time_ = nullptr;
  }
  ::memcpy(&trigger_type_, &from.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_interval_) -
    reinterpret_cast<char*>(&trigger_type_)) + sizeof(segment_interval_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.TimeTriggerParam)
}

void TimeTriggerParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto.base);
  ::memset(&trigger_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_interval_) -
      reinterpret_cast<char*>(&trigger_time_)) + sizeof(segment_interval_));
}

TimeTriggerParam::~TimeTriggerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.TimeTriggerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeTriggerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trigger_time_;
}

void TimeTriggerParam::ArenaDtor(void* object) {
  TimeTriggerParam* _this = reinterpret_cast< TimeTriggerParam* >(object);
  (void)_this;
}
void TimeTriggerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeTriggerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeTriggerParam& TimeTriggerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeTriggerParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void TimeTriggerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.TimeTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trigger_time_ != nullptr) {
    delete trigger_time_;
  }
  trigger_time_ = nullptr;
  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_interval_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(segment_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTriggerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.TimeTriggerParam.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger_type(static_cast<::zb::dcts::source::kh::TimeTriggerParam_TriggerType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp trigger_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sweep_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          segment_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeTriggerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.TimeTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.TimeTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // .zb.dcts.Timestamp trigger_time = 2;
  if (this->has_trigger_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trigger_time(this), target, stream);
  }

  // uint32 sweep_interval = 3;
  if (this->sweep_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sweep_interval(), target);
  }

  // uint32 segment_interval = 4;
  if (this->segment_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_segment_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.TimeTriggerParam)
  return target;
}

size_t TimeTriggerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.TimeTriggerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp trigger_time = 2;
  if (this->has_trigger_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_time_);
  }

  // .zb.dcts.source.kh.TimeTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger_type());
  }

  // uint32 sweep_interval = 3;
  if (this->sweep_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_interval());
  }

  // uint32 segment_interval = 4;
  if (this->segment_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeTriggerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.TimeTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeTriggerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeTriggerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.TimeTriggerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.TimeTriggerParam)
    MergeFrom(*source);
  }
}

void TimeTriggerParam::MergeFrom(const TimeTriggerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.TimeTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger_time()) {
    _internal_mutable_trigger_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_trigger_time());
  }
  if (from.trigger_type() != 0) {
    _internal_set_trigger_type(from._internal_trigger_type());
  }
  if (from.sweep_interval() != 0) {
    _internal_set_sweep_interval(from._internal_sweep_interval());
  }
  if (from.segment_interval() != 0) {
    _internal_set_segment_interval(from._internal_segment_interval());
  }
}

void TimeTriggerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.TimeTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTriggerParam::CopyFrom(const TimeTriggerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.TimeTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTriggerParam::IsInitialized() const {
  return true;
}

void TimeTriggerParam::InternalSwap(TimeTriggerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTriggerParam, segment_interval_)
      + sizeof(TimeTriggerParam::segment_interval_)
      - PROTOBUF_FIELD_OFFSET(TimeTriggerParam, trigger_time_)>(
          reinterpret_cast<char*>(&trigger_time_),
          reinterpret_cast<char*>(&other->trigger_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTriggerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FreqTriggerParam::InitAsDefaultInstance() {
}
class FreqTriggerParam::_Internal {
 public:
};

FreqTriggerParam::FreqTriggerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.FreqTriggerParam)
}
FreqTriggerParam::FreqTriggerParam(const FreqTriggerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trigger_type_, &from.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_value_) -
    reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.FreqTriggerParam)
}

void FreqTriggerParam::SharedCtor() {
  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_value_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
}

FreqTriggerParam::~FreqTriggerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.FreqTriggerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreqTriggerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreqTriggerParam::ArenaDtor(void* object) {
  FreqTriggerParam* _this = reinterpret_cast< FreqTriggerParam* >(object);
  (void)_this;
}
void FreqTriggerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreqTriggerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreqTriggerParam& FreqTriggerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreqTriggerParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void FreqTriggerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.FreqTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_value_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreqTriggerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.FreqTriggerParam.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger_type(static_cast<::zb::dcts::source::kh::FreqTriggerParam_TriggerType>(val));
        } else goto handle_unusual;
        continue;
      // float trigger_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          trigger_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreqTriggerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.FreqTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.FreqTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // float trigger_value = 2;
  if (!(this->trigger_value() <= 0 && this->trigger_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_trigger_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.FreqTriggerParam)
  return target;
}

size_t FreqTriggerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.FreqTriggerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.kh.FreqTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger_type());
  }

  // float trigger_value = 2;
  if (!(this->trigger_value() <= 0 && this->trigger_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreqTriggerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.FreqTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FreqTriggerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreqTriggerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.FreqTriggerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.FreqTriggerParam)
    MergeFrom(*source);
  }
}

void FreqTriggerParam::MergeFrom(const FreqTriggerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.FreqTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trigger_type() != 0) {
    _internal_set_trigger_type(from._internal_trigger_type());
  }
  if (!(from.trigger_value() <= 0 && from.trigger_value() >= 0)) {
    _internal_set_trigger_value(from._internal_trigger_value());
  }
}

void FreqTriggerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.FreqTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreqTriggerParam::CopyFrom(const FreqTriggerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.FreqTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreqTriggerParam::IsInitialized() const {
  return true;
}

void FreqTriggerParam::InternalSwap(FreqTriggerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreqTriggerParam, trigger_value_)
      + sizeof(FreqTriggerParam::trigger_value_)
      - PROTOBUF_FIELD_OFFSET(FreqTriggerParam, trigger_type_)>(
          reinterpret_cast<char*>(&trigger_type_),
          reinterpret_cast<char*>(&other->trigger_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreqTriggerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LevelTriggerParam::InitAsDefaultInstance() {
}
class LevelTriggerParam::_Internal {
 public:
};

LevelTriggerParam::LevelTriggerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.LevelTriggerParam)
}
LevelTriggerParam::LevelTriggerParam(const LevelTriggerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trigger_type_, &from.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_value_) -
    reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.LevelTriggerParam)
}

void LevelTriggerParam::SharedCtor() {
  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_value_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
}

LevelTriggerParam::~LevelTriggerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.LevelTriggerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LevelTriggerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LevelTriggerParam::ArenaDtor(void* object) {
  LevelTriggerParam* _this = reinterpret_cast< LevelTriggerParam* >(object);
  (void)_this;
}
void LevelTriggerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LevelTriggerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LevelTriggerParam& LevelTriggerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LevelTriggerParam_source_2fkh_2fKhContext_2eproto.base);
  return *internal_default_instance();
}


void LevelTriggerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.LevelTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_value_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(trigger_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LevelTriggerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.kh.LevelTriggerParam.TriggerType trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger_type(static_cast<::zb::dcts::source::kh::LevelTriggerParam_TriggerType>(val));
        } else goto handle_unusual;
        continue;
      // float trigger_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          trigger_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LevelTriggerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.LevelTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.kh.LevelTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // float trigger_value = 2;
  if (!(this->trigger_value() <= 0 && this->trigger_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_trigger_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.LevelTriggerParam)
  return target;
}

size_t LevelTriggerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.LevelTriggerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.kh.LevelTriggerParam.TriggerType trigger_type = 1;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger_type());
  }

  // float trigger_value = 2;
  if (!(this->trigger_value() <= 0 && this->trigger_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelTriggerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.LevelTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelTriggerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LevelTriggerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.LevelTriggerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.LevelTriggerParam)
    MergeFrom(*source);
  }
}

void LevelTriggerParam::MergeFrom(const LevelTriggerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.LevelTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trigger_type() != 0) {
    _internal_set_trigger_type(from._internal_trigger_type());
  }
  if (!(from.trigger_value() <= 0 && from.trigger_value() >= 0)) {
    _internal_set_trigger_value(from._internal_trigger_value());
  }
}

void LevelTriggerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.LevelTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelTriggerParam::CopyFrom(const LevelTriggerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.LevelTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelTriggerParam::IsInitialized() const {
  return true;
}

void LevelTriggerParam::InternalSwap(LevelTriggerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LevelTriggerParam, trigger_value_)
      + sizeof(LevelTriggerParam::trigger_value_)
      - PROTOBUF_FIELD_OFFSET(LevelTriggerParam, trigger_type_)>(
          reinterpret_cast<char*>(&trigger_type_),
          reinterpret_cast<char*>(&other->trigger_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LevelTriggerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::StaticSelfTestResult* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::StaticSelfTestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::StaticSelfTestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::WindowParams* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::WindowParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::WindowParams >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::GainControlParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::GainControlParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::GainControlParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::OperationStatus* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::OperationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::OperationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::TargetDirection* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::TargetDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::TargetDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::PulseSample* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::PulseSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::PulseSample >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::PulseCluster* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::PulseCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::PulseCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::DataSource* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::DataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::DataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::PositionDataSource* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::PositionDataSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::PositionDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::OnLinePositionParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::OnLinePositionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::OnLinePositionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::OffLinePositionParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::OffLinePositionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::OffLinePositionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::StartPositionRequest* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::StartPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::StartPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::TargetSpeed* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::TargetSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::TargetSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::PositionTargetDescriptor* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::PositionTargetDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::PositionTargetDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::TimeTriggerParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::TimeTriggerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::TimeTriggerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::FreqTriggerParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::FreqTriggerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::FreqTriggerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::LevelTriggerParam* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::LevelTriggerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::LevelTriggerParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
