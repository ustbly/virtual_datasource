// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/kh/Kh.proto

#include "source/kh/Kh.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv4Address_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ZeromqLinkCfg_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceConfig_source_2fkh_2fKh_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKh_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeDevice_source_2fkh_2fKh_2eproto;
namespace zb {
namespace dcts {
namespace source {
namespace kh {
class NodeDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeDevice> _instance;
} _NodeDevice_default_instance_;
class DeviceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceConfig> _instance;
} _DeviceConfig_default_instance_;
class ClusterConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClusterConfig> _instance;
} _ClusterConfig_default_instance_;
class CmdHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdHeader> _instance;
} _CmdHeader_default_instance_;
}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ClusterConfig_source_2fkh_2fKh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_ClusterConfig_default_instance_;
    new (ptr) ::zb::dcts::source::kh::ClusterConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::ClusterConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClusterConfig_source_2fkh_2fKh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClusterConfig_source_2fkh_2fKh_2eproto}, {
      &scc_info_ZeromqLinkCfg_dcts_2eproto.base,
      &scc_info_DeviceConfig_source_2fkh_2fKh_2eproto.base,}};

static void InitDefaultsscc_info_CmdHeader_source_2fkh_2fKh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_CmdHeader_default_instance_;
    new (ptr) ::zb::dcts::source::kh::CmdHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::CmdHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CmdHeader_source_2fkh_2fKh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CmdHeader_source_2fkh_2fKh_2eproto}, {
      &scc_info_TaskId_scenario_2fscenario_2eproto.base,
      &scc_info_NodeDevice_source_2fkh_2fKh_2eproto.base,}};

static void InitDefaultsscc_info_DeviceConfig_source_2fkh_2fKh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_DeviceConfig_default_instance_;
    new (ptr) ::zb::dcts::source::kh::DeviceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::DeviceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeviceConfig_source_2fkh_2fKh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeviceConfig_source_2fkh_2fKh_2eproto}, {
      &scc_info_IPv4Address_dcts_2eproto.base,
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_NodeDevice_source_2fkh_2fKh_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::kh::_NodeDevice_default_instance_;
    new (ptr) ::zb::dcts::source::kh::NodeDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::kh::NodeDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeDevice_source_2fkh_2fKh_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NodeDevice_source_2fkh_2fKh_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_source_2fkh_2fKh_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_source_2fkh_2fKh_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_source_2fkh_2fKh_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_source_2fkh_2fKh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::NodeDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::NodeDevice, node_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::NodeDevice, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DeviceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DeviceConfig, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DeviceConfig, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::DeviceConfig, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::ClusterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::ClusterConfig, link_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::ClusterConfig, stream_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::ClusterConfig, selftest_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::ClusterConfig, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::CmdHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::CmdHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::CmdHeader, error_code_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::CmdHeader, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::kh::CmdHeader, task_runner_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::source::kh::NodeDevice)},
  { 7, -1, sizeof(::zb::dcts::source::kh::DeviceConfig)},
  { 15, -1, sizeof(::zb::dcts::source::kh::ClusterConfig)},
  { 24, -1, sizeof(::zb::dcts::source::kh::CmdHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_NodeDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_DeviceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_ClusterConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::kh::_CmdHeader_default_instance_),
};

const char descriptor_table_protodef_source_2fkh_2fKh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022source/kh/Kh.proto\022\021zb.dcts.source.kh\032"
  "\ndcts.proto\032\023source/source.proto\032\027scenar"
  "io/scenario.proto\"h\n\nNodeDevice\022-\n\007node_"
  "id\030\001 \001(\0132\034.zb.dcts.scenario.ScenarioId\022+"
  "\n\tdevice_id\030\002 \001(\0132\030.zb.dcts.source.Sourc"
  "eId\"\205\001\n\014DeviceConfig\022(\n\004type\030\001 \001(\0162\032.zb."
  "dcts.source.SourceType\022%\n\007address\030\002 \001(\0132"
  "\024.zb.dcts.IPv4Address\022$\n\002id\030\003 \001(\0132\030.zb.d"
  "cts.source.SourceId\"\271\001\n\rClusterConfig\022$\n"
  "\004link\030\001 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022&\n\006s"
  "tream\030\002 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022(\n\010s"
  "elftest\030\003 \001(\0132\026.zb.dcts.ZeromqLinkCfg\0220\n"
  "\007devices\030\004 \003(\0132\037.zb.dcts.source.kh.Devic"
  "eConfig\"\253\001\n\tCmdHeader\022\027\n\017sequence_number"
  "\030\001 \001(\r\022&\n\nerror_code\030\002 \001(\0162\022.zb.dcts.Err"
  "orType\022)\n\007task_id\030\003 \001(\0132\030.zb.dcts.scenar"
  "io.TaskId\0222\n\013task_runner\030\004 \001(\0132\035.zb.dcts"
  ".source.kh.NodeDevice*\367\001\n\005CMTip\022\017\n\013DEVIC"
  "E_TICK\020\000\022\020\n\014CLUSTER_TICK\020\001\022\022\n\016DEVICE_REQ"
  "UEST\020\002\022\023\n\017CLUSTER_REQUEST\020\003\022\020\n\014DEVICE_RE"
  "PLY\020\004\022\021\n\rCLUSTER_REPLY\020\005\022\024\n\020DEVICE_SELF_"
  "TEST\020\006\022\025\n\021CLUSTER_SELF_TEST\020\007\022\021\n\rDEVICE_"
  "REBOOT\020\010\022\022\n\016CLUSTER_REBOOT\020\t\022\023\n\017DEVICE_S"
  "HUTDOWN\020\n\022\024\n\020CLUSTER_SHUTDOWN\020\013*0\n\007TaskC"
  "md\022\013\n\007T_START\020\000\022\n\n\006T_STOP\020\001\022\014\n\010T_MODIFY\020"
  "\002*\'\n\014SelfTestMode\022\n\n\006STATIC\020\000\022\013\n\007DYNAMIC"
  "\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_source_2fkh_2fKh_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_source_2fkh_2fKh_2eproto_sccs[4] = {
  &scc_info_ClusterConfig_source_2fkh_2fKh_2eproto.base,
  &scc_info_CmdHeader_source_2fkh_2fKh_2eproto.base,
  &scc_info_DeviceConfig_source_2fkh_2fKh_2eproto.base,
  &scc_info_NodeDevice_source_2fkh_2fKh_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_source_2fkh_2fKh_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fkh_2fKh_2eproto = {
  false, false, descriptor_table_protodef_source_2fkh_2fKh_2eproto, "source/kh/Kh.proto", 1050,
  &descriptor_table_source_2fkh_2fKh_2eproto_once, descriptor_table_source_2fkh_2fKh_2eproto_sccs, descriptor_table_source_2fkh_2fKh_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_source_2fkh_2fKh_2eproto::offsets,
  file_level_metadata_source_2fkh_2fKh_2eproto, 4, file_level_enum_descriptors_source_2fkh_2fKh_2eproto, file_level_service_descriptors_source_2fkh_2fKh_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_source_2fkh_2fKh_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_source_2fkh_2fKh_2eproto)), true);
namespace zb {
namespace dcts {
namespace source {
namespace kh {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMTip_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKh_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKh_2eproto[0];
}
bool CMTip_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskCmd_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKh_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKh_2eproto[1];
}
bool TaskCmd_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SelfTestMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fkh_2fKh_2eproto);
  return file_level_enum_descriptors_source_2fkh_2fKh_2eproto[2];
}
bool SelfTestMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NodeDevice::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_NodeDevice_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::source::kh::_NodeDevice_default_instance_._instance.get_mutable()->device_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class NodeDevice::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& node_id(const NodeDevice* msg);
  static const ::zb::dcts::source::SourceId& device_id(const NodeDevice* msg);
};

const ::zb::dcts::scenario::ScenarioId&
NodeDevice::_Internal::node_id(const NodeDevice* msg) {
  return *msg->node_id_;
}
const ::zb::dcts::source::SourceId&
NodeDevice::_Internal::device_id(const NodeDevice* msg) {
  return *msg->device_id_;
}
void NodeDevice::clear_node_id() {
  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
}
void NodeDevice::clear_device_id() {
  if (GetArena() == nullptr && device_id_ != nullptr) {
    delete device_id_;
  }
  device_id_ = nullptr;
}
NodeDevice::NodeDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.NodeDevice)
}
NodeDevice::NodeDevice(const NodeDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node_id()) {
    node_id_ = new ::zb::dcts::scenario::ScenarioId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from._internal_has_device_id()) {
    device_id_ = new ::zb::dcts::source::SourceId(*from.device_id_);
  } else {
    device_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.NodeDevice)
}

void NodeDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeDevice_source_2fkh_2fKh_2eproto.base);
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_id_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(device_id_));
}

NodeDevice::~NodeDevice() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.NodeDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete device_id_;
}

void NodeDevice::ArenaDtor(void* object) {
  NodeDevice* _this = reinterpret_cast< NodeDevice* >(object);
  (void)_this;
}
void NodeDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeDevice& NodeDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeDevice_source_2fkh_2fKh_2eproto.base);
  return *internal_default_instance();
}


void NodeDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.NodeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArena() == nullptr && device_id_ != nullptr) {
    delete device_id_;
  }
  device_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceId device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.NodeDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId node_id = 1;
  if (this->has_node_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node_id(this), target, stream);
  }

  // .zb.dcts.source.SourceId device_id = 2;
  if (this->has_device_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::device_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.NodeDevice)
  return target;
}

size_t NodeDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.NodeDevice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId node_id = 1;
  if (this->has_node_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .zb.dcts.source.SourceId device_id = 2;
  if (this->has_device_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.NodeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.NodeDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.NodeDevice)
    MergeFrom(*source);
  }
}

void NodeDevice::MergeFrom(const NodeDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.NodeDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node_id()) {
    _internal_mutable_node_id()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_node_id());
  }
  if (from.has_device_id()) {
    _internal_mutable_device_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_device_id());
  }
}

void NodeDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.NodeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDevice::CopyFrom(const NodeDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.NodeDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDevice::IsInitialized() const {
  return true;
}

void NodeDevice::InternalSwap(NodeDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeDevice, device_id_)
      + sizeof(NodeDevice::device_id_)
      - PROTOBUF_FIELD_OFFSET(NodeDevice, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceConfig::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_DeviceConfig_default_instance_._instance.get_mutable()->address_ = const_cast< ::zb::dcts::IPv4Address*>(
      ::zb::dcts::IPv4Address::internal_default_instance());
  ::zb::dcts::source::kh::_DeviceConfig_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class DeviceConfig::_Internal {
 public:
  static const ::zb::dcts::IPv4Address& address(const DeviceConfig* msg);
  static const ::zb::dcts::source::SourceId& id(const DeviceConfig* msg);
};

const ::zb::dcts::IPv4Address&
DeviceConfig::_Internal::address(const DeviceConfig* msg) {
  return *msg->address_;
}
const ::zb::dcts::source::SourceId&
DeviceConfig::_Internal::id(const DeviceConfig* msg) {
  return *msg->id_;
}
void DeviceConfig::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void DeviceConfig::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DeviceConfig::DeviceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.DeviceConfig)
}
DeviceConfig::DeviceConfig(const DeviceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new ::zb::dcts::IPv4Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.DeviceConfig)
}

void DeviceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceConfig_source_2fkh_2fKh_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&address_)) + sizeof(type_));
}

DeviceConfig::~DeviceConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.DeviceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete id_;
}

void DeviceConfig::ArenaDtor(void* object) {
  DeviceConfig* _this = reinterpret_cast< DeviceConfig* >(object);
  (void)_this;
}
void DeviceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceConfig& DeviceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceConfig_source_2fkh_2fKh_2eproto.base);
  return *internal_default_instance();
}


void DeviceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.DeviceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::source::SourceType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.IPv4Address address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceId id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.DeviceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .zb.dcts.IPv4Address address = 2;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  // .zb.dcts.source.SourceId id = 3;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.DeviceConfig)
  return target;
}

size_t DeviceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.DeviceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.IPv4Address address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .zb.dcts.source.SourceId id = 3;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.source.SourceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.DeviceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.DeviceConfig)
    MergeFrom(*source);
  }
}

void DeviceConfig::MergeFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.DeviceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->::zb::dcts::IPv4Address::MergeFrom(from._internal_address());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DeviceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfig::CopyFrom(const DeviceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.DeviceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfig::IsInitialized() const {
  return true;
}

void DeviceConfig::InternalSwap(DeviceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceConfig, type_)
      + sizeof(DeviceConfig::type_)
      - PROTOBUF_FIELD_OFFSET(DeviceConfig, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClusterConfig::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_ClusterConfig_default_instance_._instance.get_mutable()->link_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::source::kh::_ClusterConfig_default_instance_._instance.get_mutable()->stream_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::source::kh::_ClusterConfig_default_instance_._instance.get_mutable()->selftest_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
}
class ClusterConfig::_Internal {
 public:
  static const ::zb::dcts::ZeromqLinkCfg& link(const ClusterConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& stream(const ClusterConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& selftest(const ClusterConfig* msg);
};

const ::zb::dcts::ZeromqLinkCfg&
ClusterConfig::_Internal::link(const ClusterConfig* msg) {
  return *msg->link_;
}
const ::zb::dcts::ZeromqLinkCfg&
ClusterConfig::_Internal::stream(const ClusterConfig* msg) {
  return *msg->stream_;
}
const ::zb::dcts::ZeromqLinkCfg&
ClusterConfig::_Internal::selftest(const ClusterConfig* msg) {
  return *msg->selftest_;
}
void ClusterConfig::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
void ClusterConfig::clear_stream() {
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
}
void ClusterConfig::clear_selftest() {
  if (GetArena() == nullptr && selftest_ != nullptr) {
    delete selftest_;
  }
  selftest_ = nullptr;
}
ClusterConfig::ClusterConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.ClusterConfig)
}
ClusterConfig::ClusterConfig(const ClusterConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::zb::dcts::ZeromqLinkCfg(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::zb::dcts::ZeromqLinkCfg(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  if (from._internal_has_selftest()) {
    selftest_ = new ::zb::dcts::ZeromqLinkCfg(*from.selftest_);
  } else {
    selftest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.ClusterConfig)
}

void ClusterConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClusterConfig_source_2fkh_2fKh_2eproto.base);
  ::memset(&link_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selftest_) -
      reinterpret_cast<char*>(&link_)) + sizeof(selftest_));
}

ClusterConfig::~ClusterConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.ClusterConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClusterConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete stream_;
  if (this != internal_default_instance()) delete selftest_;
}

void ClusterConfig::ArenaDtor(void* object) {
  ClusterConfig* _this = reinterpret_cast< ClusterConfig* >(object);
  (void)_this;
}
void ClusterConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClusterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterConfig& ClusterConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClusterConfig_source_2fkh_2fKh_2eproto.base);
  return *internal_default_instance();
}


void ClusterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.ClusterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
  if (GetArena() == nullptr && selftest_ != nullptr) {
    delete selftest_;
  }
  selftest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ZeromqLinkCfg link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg selftest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selftest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.kh.DeviceConfig devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClusterConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.ClusterConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg link = 1;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg stream = 2;
  if (this->has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg selftest = 3;
  if (this->has_selftest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::selftest(this), target, stream);
  }

  // repeated .zb.dcts.source.kh.DeviceConfig devices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_devices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.ClusterConfig)
  return target;
}

size_t ClusterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.ClusterConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.DeviceConfig devices = 4;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.ZeromqLinkCfg link = 1;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .zb.dcts.ZeromqLinkCfg stream = 2;
  if (this->has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_);
  }

  // .zb.dcts.ZeromqLinkCfg selftest = 3;
  if (this->has_selftest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selftest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.ClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClusterConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.ClusterConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.ClusterConfig)
    MergeFrom(*source);
  }
}

void ClusterConfig::MergeFrom(const ClusterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.ClusterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
  if (from.has_link()) {
    _internal_mutable_link()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_link());
  }
  if (from.has_stream()) {
    _internal_mutable_stream()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_stream());
  }
  if (from.has_selftest()) {
    _internal_mutable_selftest()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_selftest());
  }
}

void ClusterConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.ClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterConfig::CopyFrom(const ClusterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.ClusterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterConfig::IsInitialized() const {
  return true;
}

void ClusterConfig::InternalSwap(ClusterConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClusterConfig, selftest_)
      + sizeof(ClusterConfig::selftest_)
      - PROTOBUF_FIELD_OFFSET(ClusterConfig, link_)>(
          reinterpret_cast<char*>(&link_),
          reinterpret_cast<char*>(&other->link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdHeader::InitAsDefaultInstance() {
  ::zb::dcts::source::kh::_CmdHeader_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::zb::dcts::scenario::TaskId*>(
      ::zb::dcts::scenario::TaskId::internal_default_instance());
  ::zb::dcts::source::kh::_CmdHeader_default_instance_._instance.get_mutable()->task_runner_ = const_cast< ::zb::dcts::source::kh::NodeDevice*>(
      ::zb::dcts::source::kh::NodeDevice::internal_default_instance());
}
class CmdHeader::_Internal {
 public:
  static const ::zb::dcts::scenario::TaskId& task_id(const CmdHeader* msg);
  static const ::zb::dcts::source::kh::NodeDevice& task_runner(const CmdHeader* msg);
};

const ::zb::dcts::scenario::TaskId&
CmdHeader::_Internal::task_id(const CmdHeader* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::source::kh::NodeDevice&
CmdHeader::_Internal::task_runner(const CmdHeader* msg) {
  return *msg->task_runner_;
}
void CmdHeader::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
CmdHeader::CmdHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.kh.CmdHeader)
}
CmdHeader::CmdHeader(const CmdHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::scenario::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_task_runner()) {
    task_runner_ = new ::zb::dcts::source::kh::NodeDevice(*from.task_runner_);
  } else {
    task_runner_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.kh.CmdHeader)
}

void CmdHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdHeader_source_2fkh_2fKh_2eproto.base);
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(error_code_));
}

CmdHeader::~CmdHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.kh.CmdHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete task_runner_;
}

void CmdHeader::ArenaDtor(void* object) {
  CmdHeader* _this = reinterpret_cast< CmdHeader* >(object);
  (void)_this;
}
void CmdHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdHeader& CmdHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdHeader_source_2fkh_2fKh_2eproto.base);
  return *internal_default_instance();
}


void CmdHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.kh.CmdHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && task_runner_ != nullptr) {
    delete task_runner_;
  }
  task_runner_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sequence_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ErrorType error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::zb::dcts::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.TaskId task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.NodeDevice task_runner = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_runner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.kh.CmdHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_code(), target);
  }

  // .zb.dcts.scenario.TaskId task_id = 3;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_id(this), target, stream);
  }

  // .zb.dcts.source.kh.NodeDevice task_runner = 4;
  if (this->has_task_runner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::task_runner(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.kh.CmdHeader)
  return target;
}

size_t CmdHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.kh.CmdHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.TaskId task_id = 3;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.source.kh.NodeDevice task_runner = 4;
  if (this->has_task_runner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_runner_);
  }

  // uint32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // .zb.dcts.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.kh.CmdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.kh.CmdHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.kh.CmdHeader)
    MergeFrom(*source);
  }
}

void CmdHeader::MergeFrom(const CmdHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.kh.CmdHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::scenario::TaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_task_runner()) {
    _internal_mutable_task_runner()->::zb::dcts::source::kh::NodeDevice::MergeFrom(from._internal_task_runner());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void CmdHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.kh.CmdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdHeader::CopyFrom(const CmdHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.kh.CmdHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdHeader::IsInitialized() const {
  return true;
}

void CmdHeader::InternalSwap(CmdHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdHeader, error_code_)
      + sizeof(CmdHeader::error_code_)
      - PROTOBUF_FIELD_OFFSET(CmdHeader, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kh
}  // namespace source
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::NodeDevice* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::NodeDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::NodeDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::DeviceConfig* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::DeviceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::DeviceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::ClusterConfig* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::ClusterConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::ClusterConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::kh::CmdHeader* Arena::CreateMaybeMessage< ::zb::dcts::source::kh::CmdHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::kh::CmdHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
