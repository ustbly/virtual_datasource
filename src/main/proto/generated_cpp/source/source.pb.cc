// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source/source.proto

#include "source/source.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Command_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandReply_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metrics_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Topic_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceCapability_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SourceInfo_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace source {
class SourceIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceId> _instance;
} _SourceId_default_instance_;
class SourceCapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceCapability> _instance;
} _SourceCapability_default_instance_;
class SourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceInfo> _instance;
} _SourceInfo_default_instance_;
class SourceSetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceSetInfo> _instance;
} _SourceSetInfo_default_instance_;
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
class SourceCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceCommand> _instance;
} _SourceCommand_default_instance_;
class SourceCommandReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceCommandReply> _instance;
} _SourceCommandReply_default_instance_;
}  // namespace source
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_SourceCapability_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceCapability_default_instance_;
    new (ptr) ::zb::dcts::source::SourceCapability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceCapability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceCapability_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceCapability_source_2fsource_2eproto}, {}};

static void InitDefaultsscc_info_SourceCommand_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceCommand_default_instance_;
    new (ptr) ::zb::dcts::source::SourceCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SourceCommand_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SourceCommand_source_2fsource_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Command_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SourceCommandReply_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceCommandReply_default_instance_;
    new (ptr) ::zb::dcts::source::SourceCommandReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceCommandReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SourceCommandReply_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SourceCommandReply_source_2fsource_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_CommandReply_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SourceId_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceId_default_instance_;
    new (ptr) ::zb::dcts::source::SourceId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceId_source_2fsource_2eproto}, {}};

static void InitDefaultsscc_info_SourceInfo_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceInfo_default_instance_;
    new (ptr) ::zb::dcts::source::SourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SourceInfo_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SourceInfo_source_2fsource_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_SourceCapability_source_2fsource_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,
      &scc_info_Metrics_dcts_2eproto.base,
      &scc_info_Topic_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SourceSetInfo_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SourceSetInfo_default_instance_;
    new (ptr) ::zb::dcts::source::SourceSetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SourceSetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SourceSetInfo_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SourceSetInfo_source_2fsource_2eproto}, {
      &scc_info_SourceInfo_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_source_2fsource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::source::_SubscribeRequest_default_instance_;
    new (ptr) ::zb::dcts::source::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::source::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeRequest_source_2fsource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeRequest_source_2fsource_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Topic_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_source_2fsource_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_source_2fsource_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_source_2fsource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_source_2fsource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCapability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCapability, capability_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, capability_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, remote_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, metrics_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceInfo, topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceSetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceSetInfo, source_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SubscribeRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SubscribeRequest, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommand, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommandReply, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::source::SourceCommandReply, reply_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::source::SourceId)},
  { 6, -1, sizeof(::zb::dcts::source::SourceCapability)},
  { 12, -1, sizeof(::zb::dcts::source::SourceInfo)},
  { 25, -1, sizeof(::zb::dcts::source::SourceSetInfo)},
  { 31, -1, sizeof(::zb::dcts::source::SubscribeRequest)},
  { 38, -1, sizeof(::zb::dcts::source::SourceCommand)},
  { 45, -1, sizeof(::zb::dcts::source::SourceCommandReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceCapability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceSetInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::source::_SourceCommandReply_default_instance_),
};

const char descriptor_table_protodef_source_2fsource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023source/source.proto\022\016zb.dcts.source\032\nd"
  "cts.proto\032\033google/protobuf/empty.proto\032\031"
  "google/protobuf/any.proto\"\031\n\010SourceId\022\r\n"
  "\005value\030\001 \001(\r\"\204\001\n\020SourceCapability\022\022\n\ncap"
  "ability\030\001 \001(\r\"\\\n\004Type\022\010\n\004NONE\020\000\022\021\n\rSPECT"
  "RUM_SCAN\020\001\022\r\n\tIQ_STREAM\020\002\022\025\n\021DIRECTION_F"
  "INDING\020\004\022\021\n\rMULTI_CHANNEL\020\010\"\277\002\n\nSourceIn"
  "fo\022+\n\tsource_id\030\001 \001(\0132\030.zb.dcts.source.S"
  "ourceId\022(\n\004type\030\002 \001(\0162\032.zb.dcts.source.S"
  "ourceType\0224\n\ncapability\030\003 \001(\0132 .zb.dcts."
  "source.SourceCapability\022\016\n\006remote\030\004 \001(\010\022"
  ",\n\006status\030\006 \001(\0162\034.zb.dcts.source.SourceS"
  "tatus\022#\n\010position\030\007 \001(\0132\021.zb.dcts.Positi"
  "on\022!\n\007metrics\030\010 \001(\0132\020.zb.dcts.Metrics\022\036\n"
  "\006topics\030\t \003(\0132\016.zb.dcts.Topic\"@\n\rSourceS"
  "etInfo\022/\n\013source_info\030\001 \003(\0132\032.zb.dcts.so"
  "urce.SourceInfo\"^\n\020SubscribeRequest\022+\n\ts"
  "ource_id\030\001 \001(\0132\030.zb.dcts.source.SourceId"
  "\022\035\n\005topic\030\002 \001(\0132\016.zb.dcts.Topic\"_\n\rSourc"
  "eCommand\022+\n\tsource_id\030\001 \001(\0132\030.zb.dcts.so"
  "urce.SourceId\022!\n\007command\030\002 \001(\0132\020.zb.dcts"
  ".Command\"g\n\022SourceCommandReply\022+\n\tsource"
  "_id\030\001 \001(\0132\030.zb.dcts.source.SourceId\022$\n\005r"
  "eply\030\002 \001(\0132\025.zb.dcts.CommandReply*\340\001\n\nSo"
  "urceType\022\017\n\013SENSOR_3900\020\000\022\010\n\004FILE\020\001\022\013\n\007V"
  "IRTUAL\020\002\022\016\n\nKH_CZ_COMM\020\003\022\017\n\013KH_CZ_RADAR\020"
  "\004\022\014\n\010KH_CZ_JC\020\005\022\017\n\013KH_WGH_COMM\020\006\022\020\n\014KH_W"
  "GH_RADAR\020\007\022\n\n\006CZC_SM\020\010\022\n\n\006CZC_DF\020\t\022\n\n\006CZ"
  "C_QJ\020\n\022\014\n\010RADAR_DF\020\013\022\010\n\004DEMO\020\014\022\010\n\004ZCZH\020\r"
  "\022\022\n\016SIMULATOR_COMM\020\016*H\n\014SourceStatus\022\r\n\t"
  "S_OFFLINE\020\000\022\n\n\006S_IDLE\020\001\022\r\n\tS_ENGAGED\020\002\022\016"
  "\n\nS_ABNORMAL\020\0032\221\002\n\024SourceControlService\022"
  "I\n\016ListAllSources\022\026.google.protobuf.Empt"
  "y\032\035.zb.dcts.source.SourceSetInfo\"\000\022X\n\021Se"
  "ndSourceCommand\022\035.zb.dcts.source.SourceC"
  "ommand\032\".zb.dcts.source.SourceCommandRep"
  "ly\"\000\022T\n\026SubscribeSourceMessage\022 .zb.dcts"
  ".source.SubscribeRequest\032\024.google.protob"
  "uf.Any\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_source_2fsource_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_source_2fsource_2eproto_sccs[7] = {
  &scc_info_SourceCapability_source_2fsource_2eproto.base,
  &scc_info_SourceCommand_source_2fsource_2eproto.base,
  &scc_info_SourceCommandReply_source_2fsource_2eproto.base,
  &scc_info_SourceId_source_2fsource_2eproto.base,
  &scc_info_SourceInfo_source_2fsource_2eproto.base,
  &scc_info_SourceSetInfo_source_2fsource_2eproto.base,
  &scc_info_SubscribeRequest_source_2fsource_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_source_2fsource_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_source_2fsource_2eproto = {
  false, false, descriptor_table_protodef_source_2fsource_2eproto, "source/source.proto", 1538,
  &descriptor_table_source_2fsource_2eproto_once, descriptor_table_source_2fsource_2eproto_sccs, descriptor_table_source_2fsource_2eproto_deps, 7, 3,
  schemas, file_default_instances, TableStruct_source_2fsource_2eproto::offsets,
  file_level_metadata_source_2fsource_2eproto, 7, file_level_enum_descriptors_source_2fsource_2eproto, file_level_service_descriptors_source_2fsource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_source_2fsource_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_source_2fsource_2eproto)), true);
namespace zb {
namespace dcts {
namespace source {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceCapability_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fsource_2eproto);
  return file_level_enum_descriptors_source_2fsource_2eproto[0];
}
bool SourceCapability_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SourceCapability_Type SourceCapability::NONE;
constexpr SourceCapability_Type SourceCapability::SPECTRUM_SCAN;
constexpr SourceCapability_Type SourceCapability::IQ_STREAM;
constexpr SourceCapability_Type SourceCapability::DIRECTION_FINDING;
constexpr SourceCapability_Type SourceCapability::MULTI_CHANNEL;
constexpr SourceCapability_Type SourceCapability::Type_MIN;
constexpr SourceCapability_Type SourceCapability::Type_MAX;
constexpr int SourceCapability::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fsource_2eproto);
  return file_level_enum_descriptors_source_2fsource_2eproto[1];
}
bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_source_2fsource_2eproto);
  return file_level_enum_descriptors_source_2fsource_2eproto[2];
}
bool SourceStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SourceId::InitAsDefaultInstance() {
}
class SourceId::_Internal {
 public:
};

SourceId::SourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceId)
}
SourceId::SourceId(const SourceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceId)
}

void SourceId::SharedCtor() {
  value_ = 0u;
}

SourceId::~SourceId() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SourceId::ArenaDtor(void* object) {
  SourceId* _this = reinterpret_cast< SourceId* >(object);
  (void)_this;
}
void SourceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceId& SourceId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceId_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceId)
  return target;
}

size_t SourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceId)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceId)
    MergeFrom(*source);
  }
}

void SourceId::MergeFrom(const SourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SourceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceId::CopyFrom(const SourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceId::IsInitialized() const {
  return true;
}

void SourceId::InternalSwap(SourceId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceCapability::InitAsDefaultInstance() {
}
class SourceCapability::_Internal {
 public:
};

SourceCapability::SourceCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceCapability)
}
SourceCapability::SourceCapability(const SourceCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capability_ = from.capability_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceCapability)
}

void SourceCapability::SharedCtor() {
  capability_ = 0u;
}

SourceCapability::~SourceCapability() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceCapability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceCapability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SourceCapability::ArenaDtor(void* object) {
  SourceCapability* _this = reinterpret_cast< SourceCapability* >(object);
  (void)_this;
}
void SourceCapability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceCapability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceCapability& SourceCapability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceCapability_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capability_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceCapability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 capability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceCapability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceCapability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capability = 1;
  if (this->capability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceCapability)
  return target;
}

size_t SourceCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceCapability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 capability = 1;
  if (this->capability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_capability());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceCapability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceCapability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceCapability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceCapability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceCapability)
    MergeFrom(*source);
  }
}

void SourceCapability::MergeFrom(const SourceCapability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceCapability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capability() != 0) {
    _internal_set_capability(from._internal_capability());
  }
}

void SourceCapability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceCapability::CopyFrom(const SourceCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceCapability::IsInitialized() const {
  return true;
}

void SourceCapability::InternalSwap(SourceCapability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(capability_, other->capability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceCapability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceInfo::InitAsDefaultInstance() {
  ::zb::dcts::source::_SourceInfo_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::source::_SourceInfo_default_instance_._instance.get_mutable()->capability_ = const_cast< ::zb::dcts::source::SourceCapability*>(
      ::zb::dcts::source::SourceCapability::internal_default_instance());
  ::zb::dcts::source::_SourceInfo_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
  ::zb::dcts::source::_SourceInfo_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::zb::dcts::Metrics*>(
      ::zb::dcts::Metrics::internal_default_instance());
}
class SourceInfo::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const SourceInfo* msg);
  static const ::zb::dcts::source::SourceCapability& capability(const SourceInfo* msg);
  static const ::zb::dcts::Position& position(const SourceInfo* msg);
  static const ::zb::dcts::Metrics& metrics(const SourceInfo* msg);
};

const ::zb::dcts::source::SourceId&
SourceInfo::_Internal::source_id(const SourceInfo* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::source::SourceCapability&
SourceInfo::_Internal::capability(const SourceInfo* msg) {
  return *msg->capability_;
}
const ::zb::dcts::Position&
SourceInfo::_Internal::position(const SourceInfo* msg) {
  return *msg->position_;
}
const ::zb::dcts::Metrics&
SourceInfo::_Internal::metrics(const SourceInfo* msg) {
  return *msg->metrics_;
}
void SourceInfo::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void SourceInfo::clear_metrics() {
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
void SourceInfo::clear_topics() {
  topics_.Clear();
}
SourceInfo::SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceInfo)
}
SourceInfo::SourceInfo(const SourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_capability()) {
    capability_ = new ::zb::dcts::source::SourceCapability(*from.capability_);
  } else {
    capability_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::zb::dcts::Metrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceInfo)
}

void SourceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceInfo_source_2fsource_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(status_));
}

SourceInfo::~SourceInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete capability_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete metrics_;
}

void SourceInfo::ArenaDtor(void* object) {
  SourceInfo* _this = reinterpret_cast< SourceInfo* >(object);
  (void)_this;
}
void SourceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceInfo& SourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceInfo_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && capability_ != nullptr) {
    delete capability_;
  }
  capability_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::source::SourceType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceCapability capability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::zb::dcts::source::SourceStatus>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Metrics metrics = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.Topic topics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.source.SourceType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .zb.dcts.source.SourceCapability capability = 3;
  if (this->has_capability()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capability(this), target, stream);
  }

  // bool remote = 4;
  if (this->remote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_remote(), target);
  }

  // .zb.dcts.source.SourceStatus status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  // .zb.dcts.Position position = 7;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // .zb.dcts.Metrics metrics = 8;
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::metrics(this), target, stream);
  }

  // repeated .zb.dcts.Topic topics = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_topics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceInfo)
  return target;
}

size_t SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.Topic topics = 9;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.source.SourceCapability capability = 3;
  if (this->has_capability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capability_);
  }

  // .zb.dcts.Position position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .zb.dcts.Metrics metrics = 8;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .zb.dcts.source.SourceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool remote = 4;
  if (this->remote() != 0) {
    total_size += 1 + 1;
  }

  // .zb.dcts.source.SourceStatus status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceInfo)
    MergeFrom(*source);
  }
}

void SourceInfo::MergeFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_capability()) {
    _internal_mutable_capability()->::zb::dcts::source::SourceCapability::MergeFrom(from._internal_capability());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::zb::dcts::Metrics::MergeFrom(from._internal_metrics());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.remote() != 0) {
    _internal_set_remote(from._internal_remote());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceInfo::CopyFrom(const SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceInfo::IsInitialized() const {
  return true;
}

void SourceInfo::InternalSwap(SourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceInfo, status_)
      + sizeof(SourceInfo::status_)
      - PROTOBUF_FIELD_OFFSET(SourceInfo, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceSetInfo::InitAsDefaultInstance() {
}
class SourceSetInfo::_Internal {
 public:
};

SourceSetInfo::SourceSetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  source_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceSetInfo)
}
SourceSetInfo::SourceSetInfo(const SourceSetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_info_(from.source_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceSetInfo)
}

void SourceSetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceSetInfo_source_2fsource_2eproto.base);
}

SourceSetInfo::~SourceSetInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceSetInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceSetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SourceSetInfo::ArenaDtor(void* object) {
  SourceSetInfo* _this = reinterpret_cast< SourceSetInfo* >(object);
  (void)_this;
}
void SourceSetInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceSetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceSetInfo& SourceSetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceSetInfo_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceSetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceSetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.source.SourceInfo source_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceSetInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceSetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.source.SourceInfo source_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_source_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceSetInfo)
  return target;
}

size_t SourceSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceSetInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.SourceInfo source_info = 1;
  total_size += 1UL * this->_internal_source_info_size();
  for (const auto& msg : this->source_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceSetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceSetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceSetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceSetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceSetInfo)
    MergeFrom(*source);
  }
}

void SourceSetInfo::MergeFrom(const SourceSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_info_.MergeFrom(from.source_info_);
}

void SourceSetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceSetInfo::CopyFrom(const SourceSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceSetInfo::IsInitialized() const {
  return true;
}

void SourceSetInfo::InternalSwap(SourceSetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_info_.InternalSwap(&other->source_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceSetInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::zb::dcts::source::_SubscribeRequest_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::source::_SubscribeRequest_default_instance_._instance.get_mutable()->topic_ = const_cast< ::zb::dcts::Topic*>(
      ::zb::dcts::Topic::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const SubscribeRequest* msg);
  static const ::zb::dcts::Topic& topic(const SubscribeRequest* msg);
};

const ::zb::dcts::source::SourceId&
SubscribeRequest::_Internal::source_id(const SubscribeRequest* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::Topic&
SubscribeRequest::_Internal::topic(const SubscribeRequest* msg) {
  return *msg->topic_;
}
void SubscribeRequest::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_topic()) {
    topic_ = new ::zb::dcts::Topic(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_source_2fsource_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topic_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(topic_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete topic_;
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Topic topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.Topic topic = 2;
  if (this->has_topic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::topic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.Topic topic = 2;
  if (this->has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_topic()) {
    _internal_mutable_topic()->::zb::dcts::Topic::MergeFrom(from._internal_topic());
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeRequest, topic_)
      + sizeof(SubscribeRequest::topic_)
      - PROTOBUF_FIELD_OFFSET(SubscribeRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceCommand::InitAsDefaultInstance() {
  ::zb::dcts::source::_SourceCommand_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::source::_SourceCommand_default_instance_._instance.get_mutable()->command_ = const_cast< ::zb::dcts::Command*>(
      ::zb::dcts::Command::internal_default_instance());
}
class SourceCommand::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const SourceCommand* msg);
  static const ::zb::dcts::Command& command(const SourceCommand* msg);
};

const ::zb::dcts::source::SourceId&
SourceCommand::_Internal::source_id(const SourceCommand* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::Command&
SourceCommand::_Internal::command(const SourceCommand* msg) {
  return *msg->command_;
}
void SourceCommand::clear_command() {
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
SourceCommand::SourceCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceCommand)
}
SourceCommand::SourceCommand(const SourceCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::zb::dcts::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceCommand)
}

void SourceCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceCommand_source_2fsource_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(command_));
}

SourceCommand::~SourceCommand() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete command_;
}

void SourceCommand::ArenaDtor(void* object) {
  SourceCommand* _this = reinterpret_cast< SourceCommand* >(object);
  (void)_this;
}
void SourceCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceCommand& SourceCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceCommand_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.Command command = 2;
  if (this->has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceCommand)
  return target;
}

size_t SourceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.Command command = 2;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceCommand)
    MergeFrom(*source);
  }
}

void SourceCommand::MergeFrom(const SourceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_command()) {
    _internal_mutable_command()->::zb::dcts::Command::MergeFrom(from._internal_command());
  }
}

void SourceCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceCommand::CopyFrom(const SourceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceCommand::IsInitialized() const {
  return true;
}

void SourceCommand::InternalSwap(SourceCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceCommand, command_)
      + sizeof(SourceCommand::command_)
      - PROTOBUF_FIELD_OFFSET(SourceCommand, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceCommandReply::InitAsDefaultInstance() {
  ::zb::dcts::source::_SourceCommandReply_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::source::_SourceCommandReply_default_instance_._instance.get_mutable()->reply_ = const_cast< ::zb::dcts::CommandReply*>(
      ::zb::dcts::CommandReply::internal_default_instance());
}
class SourceCommandReply::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const SourceCommandReply* msg);
  static const ::zb::dcts::CommandReply& reply(const SourceCommandReply* msg);
};

const ::zb::dcts::source::SourceId&
SourceCommandReply::_Internal::source_id(const SourceCommandReply* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::CommandReply&
SourceCommandReply::_Internal::reply(const SourceCommandReply* msg) {
  return *msg->reply_;
}
void SourceCommandReply::clear_reply() {
  if (GetArena() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
}
SourceCommandReply::SourceCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.source.SourceCommandReply)
}
SourceCommandReply::SourceCommandReply(const SourceCommandReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_reply()) {
    reply_ = new ::zb::dcts::CommandReply(*from.reply_);
  } else {
    reply_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.source.SourceCommandReply)
}

void SourceCommandReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SourceCommandReply_source_2fsource_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reply_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(reply_));
}

SourceCommandReply::~SourceCommandReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.source.SourceCommandReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SourceCommandReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete reply_;
}

void SourceCommandReply::ArenaDtor(void* object) {
  SourceCommandReply* _this = reinterpret_cast< SourceCommandReply* >(object);
  (void)_this;
}
void SourceCommandReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SourceCommandReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceCommandReply& SourceCommandReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceCommandReply_source_2fsource_2eproto.base);
  return *internal_default_instance();
}


void SourceCommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.source.SourceCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && reply_ != nullptr) {
    delete reply_;
  }
  reply_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceCommandReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.CommandReply reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceCommandReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.source.SourceCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.CommandReply reply = 2;
  if (this->has_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reply(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.source.SourceCommandReply)
  return target;
}

size_t SourceCommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.source.SourceCommandReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.CommandReply reply = 2;
  if (this->has_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceCommandReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.source.SourceCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceCommandReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceCommandReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.source.SourceCommandReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.source.SourceCommandReply)
    MergeFrom(*source);
  }
}

void SourceCommandReply::MergeFrom(const SourceCommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.source.SourceCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_reply()) {
    _internal_mutable_reply()->::zb::dcts::CommandReply::MergeFrom(from._internal_reply());
  }
}

void SourceCommandReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.source.SourceCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceCommandReply::CopyFrom(const SourceCommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.source.SourceCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceCommandReply::IsInitialized() const {
  return true;
}

void SourceCommandReply::InternalSwap(SourceCommandReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceCommandReply, reply_)
      + sizeof(SourceCommandReply::reply_)
      - PROTOBUF_FIELD_OFFSET(SourceCommandReply, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceCommandReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace source
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceId* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceCapability* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceInfo* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceSetInfo* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceSetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceSetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SubscribeRequest* Arena::CreateMaybeMessage< ::zb::dcts::source::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceCommand* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::source::SourceCommandReply* Arena::CreateMaybeMessage< ::zb::dcts::source::SourceCommandReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::source::SourceCommandReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
