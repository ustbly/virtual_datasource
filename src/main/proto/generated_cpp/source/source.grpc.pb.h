// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: source/source.proto
#ifndef GRPC_source_2fsource_2eproto__INCLUDED
#define GRPC_source_2fsource_2eproto__INCLUDED

#include "source/source.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace source {

// 源控制的API
class SourceControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.source.SourceControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::source::SourceSetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>> AsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>>(AsyncListAllSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>> PrepareAsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>>(PrepareAsyncListAllSourcesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::zb::dcts::source::SourceCommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>> AsyncSendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>>(AsyncSendSourceCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>> PrepareAsyncSendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>>(PrepareAsyncSendSourceCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>> SubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>>(SubscribeSourceMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> AsyncSubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(AsyncSubscribeSourceMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> PrepareAsyncSubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(PrepareAsyncSubscribeSourceMessageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeSourceMessage(::grpc::ClientContext* context, ::zb::dcts::source::SubscribeRequest* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void SubscribeSourceMessage(::grpc::ClientContext* context, ::zb::dcts::source::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>* AsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>* PrepareAsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>* AsyncSendSourceCommandRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceCommandReply>* PrepareAsyncSendSourceCommandRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::protobuf::Any>* SubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* AsyncSubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* PrepareAsyncSubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::source::SourceSetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>> AsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>>(AsyncListAllSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>> PrepareAsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>>(PrepareAsyncListAllSourcesRaw(context, request, cq));
    }
    ::grpc::Status SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::zb::dcts::source::SourceCommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>> AsyncSendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>>(AsyncSendSourceCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>> PrepareAsyncSendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>>(PrepareAsyncSendSourceCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>> SubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>>(SubscribeSourceMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> AsyncSubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(AsyncSubscribeSourceMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> PrepareAsyncSubscribeSourceMessage(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(PrepareAsyncSubscribeSourceMessageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) override;
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, std::function<void(::grpc::Status)>) override;
      void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendSourceCommand(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendSourceCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceCommandReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeSourceMessage(::grpc::ClientContext* context, ::zb::dcts::source::SubscribeRequest* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #else
      void SubscribeSourceMessage(::grpc::ClientContext* context, ::zb::dcts::source::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* AsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* PrepareAsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>* AsyncSendSourceCommandRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceCommandReply>* PrepareAsyncSendSourceCommandRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SourceCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::protobuf::Any>* SubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* AsyncSubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* PrepareAsyncSubscribeSourceMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::source::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllSources_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSourceCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeSourceMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListAllSources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response);
    virtual ::grpc::Status SendSourceCommand(::grpc::ServerContext* context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response);
    virtual ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* context, const ::zb::dcts::source::SubscribeRequest* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllSources() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSources(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::source::SourceSetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendSourceCommand() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSourceCommand(::grpc::ServerContext* context, ::zb::dcts::source::SourceCommand* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::source::SourceCommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeSourceMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSourceMessage(::grpc::ServerContext* context, ::zb::dcts::source::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::google::protobuf::Any>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListAllSources<WithAsyncMethod_SendSourceCommand<WithAsyncMethod_SubscribeSourceMessage<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAllSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response) { return this->ListAllSources(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllSources(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllSources(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendSourceCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::source::SourceCommand, ::zb::dcts::source::SourceCommandReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::source::SourceCommand* request, ::zb::dcts::source::SourceCommandReply* response) { return this->SendSourceCommand(context, request, response); }));}
    void SetMessageAllocatorFor_SendSourceCommand(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::source::SourceCommand, ::zb::dcts::source::SourceCommandReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::source::SourceCommand, ::zb::dcts::source::SourceCommandReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendSourceCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendSourceCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeSourceMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::zb::dcts::source::SubscribeRequest, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::source::SubscribeRequest* request) { return this->SubscribeSourceMessage(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::protobuf::Any>* SubscribeSourceMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::protobuf::Any>* SubscribeSourceMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListAllSources<ExperimentalWithCallbackMethod_SendSourceCommand<ExperimentalWithCallbackMethod_SubscribeSourceMessage<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListAllSources<ExperimentalWithCallbackMethod_SendSourceCommand<ExperimentalWithCallbackMethod_SubscribeSourceMessage<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllSources() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendSourceCommand() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeSourceMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllSources() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendSourceCommand() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSourceCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeSourceMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSourceMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAllSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllSources(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllSources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendSourceCommand() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendSourceCommand(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendSourceCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendSourceCommand(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeSourceMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeSourceMessage(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSourceMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSourceMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllSources() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>(std::bind(&WithStreamedUnaryMethod_ListAllSources<BaseClass>::StreamedListAllSources, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllSources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::zb::dcts::source::SourceSetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSourceCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendSourceCommand() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::source::SourceCommand, ::zb::dcts::source::SourceCommandReply>(std::bind(&WithStreamedUnaryMethod_SendSourceCommand<BaseClass>::StreamedSendSourceCommand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendSourceCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSourceCommand(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SourceCommand* /*request*/, ::zb::dcts::source::SourceCommandReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSourceCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::source::SourceCommand,::zb::dcts::source::SourceCommandReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListAllSources<WithStreamedUnaryMethod_SendSourceCommand<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeSourceMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeSourceMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::zb::dcts::source::SubscribeRequest, ::google::protobuf::Any>(std::bind(&WithSplitStreamingMethod_SubscribeSourceMessage<BaseClass>::StreamedSubscribeSourceMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeSourceMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeSourceMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::source::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeSourceMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::source::SubscribeRequest,::google::protobuf::Any>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeSourceMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListAllSources<WithStreamedUnaryMethod_SendSourceCommand<WithSplitStreamingMethod_SubscribeSourceMessage<Service > > > StreamedService;
};

}  // namespace source
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_source_2fsource_2eproto__INCLUDED
