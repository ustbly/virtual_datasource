// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/IQ.proto

#include "scenario/IQ.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fIQ_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fIQ_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeTriggerParam_scenario_2fIQ_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDCBank_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace IQ {
class IQSource_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IQSource_ParamsEntry_DoNotUse> _instance;
} _IQSource_ParamsEntry_DoNotUse_default_instance_;
class IQSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IQSource> _instance;
} _IQSource_default_instance_;
class SimpleAcqParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleAcqParam> _instance;
} _SimpleAcqParam_default_instance_;
class TimeTriggerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeTriggerParam> _instance;
} _TimeTriggerParam_default_instance_;
class AdvancedAcqParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdvancedAcqParam> _instance;
} _AdvancedAcqParam_default_instance_;
class IQHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IQHeader> _instance;
} _IQHeader_default_instance_;
}  // namespace IQ
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AdvancedAcqParam_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_AdvancedAcqParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::AdvancedAcqParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::IQ::AdvancedAcqParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdvancedAcqParam_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AdvancedAcqParam_scenario_2fIQ_2eproto}, {
      &scc_info_DDCBank_scenario_2fspectrum_2eproto.base,
      &scc_info_TimeTriggerParam_scenario_2fIQ_2eproto.base,}};

static void InitDefaultsscc_info_IQHeader_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_IQHeader_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::IQHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::IQ::IQHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_IQHeader_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_IQHeader_scenario_2fIQ_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_IQSource_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_IQSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::IQSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::IQ::IQSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IQSource_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IQSource_scenario_2fIQ_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto.base,}};

static void InitDefaultsscc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_IQSource_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse();
  }
  ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto}, {}};

static void InitDefaultsscc_info_SimpleAcqParam_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_SimpleAcqParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::SimpleAcqParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::IQ::SimpleAcqParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleAcqParam_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleAcqParam_scenario_2fIQ_2eproto}, {
      &scc_info_DDCBank_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_TimeTriggerParam_scenario_2fIQ_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::IQ::_TimeTriggerParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::IQ::TimeTriggerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::IQ::TimeTriggerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeTriggerParam_scenario_2fIQ_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeTriggerParam_scenario_2fIQ_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fIQ_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fIQ_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fIQ_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fIQ_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQSource, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::SimpleAcqParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::SimpleAcqParam, total_samples_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::SimpleAcqParam, block_size_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::SimpleAcqParam, data_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::SimpleAcqParam, segment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::TimeTriggerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::TimeTriggerParam, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::TimeTriggerParam, trigger_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::TimeTriggerParam, sweep_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::TimeTriggerParam, segment_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, num_sweeps_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, num_samples_per_segment_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, data_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, segments_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::AdvancedAcqParam, trigger_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, sweep_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, segment_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, data_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, truncate_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, scale_to_volts_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::IQ::IQHeader, position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse)},
  { 9, -1, sizeof(::zb::dcts::scenario::IQ::IQSource)},
  { 18, -1, sizeof(::zb::dcts::scenario::IQ::SimpleAcqParam)},
  { 27, -1, sizeof(::zb::dcts::scenario::IQ::TimeTriggerParam)},
  { 36, -1, sizeof(::zb::dcts::scenario::IQ::AdvancedAcqParam)},
  { 46, -1, sizeof(::zb::dcts::scenario::IQ::IQHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_IQSource_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_IQSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_SimpleAcqParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_TimeTriggerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_AdvancedAcqParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::IQ::_IQHeader_default_instance_),
};

const char descriptor_table_protodef_scenario_2fIQ_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021scenario/IQ.proto\022\023zb.dcts.scenario.IQ"
  "\032\ndcts.proto\032\023source/source.proto\032\027scena"
  "rio/spectrum.proto\"\305\001\n\010IQSource\022$\n\002id\030\001 "
  "\001(\0132\030.zb.dcts.source.SourceId\022\030\n\020attenua"
  "tion_gain\030\004 \001(\005\022\017\n\007antenna\030\005 \001(\005\0229\n\006para"
  "ms\030\006 \003(\0132).zb.dcts.scenario.IQ.IQSource."
  "ParamsEntry\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\240\001\n\016SimpleAcqParam\022\025\n"
  "\rtotal_samples\030\001 \001(\005\022\022\n\nblock_size\030\002 \001(\005"
  "\022.\n\tdata_type\030\003 \001(\0162\033.zb.dcts.scenario.I"
  "Q.IQType\0223\n\007segment\030\004 \001(\0132\".zb.dcts.scen"
  "ario.spectrum.DDCBank\"\336\001\n\020TimeTriggerPar"
  "am\022@\n\014trigger_type\030\001 \001(\0162*.zb.dcts.scena"
  "rio.IQ.TimeTriggerParam.Type\022(\n\014trigger_"
  "time\030\002 \001(\0132\022.zb.dcts.Timestamp\022\026\n\016sweep_"
  "interval\030\003 \001(\005\022\030\n\020segment_interval\030\004 \001(\005"
  "\",\n\004Type\022\010\n\004NONE\020\000\022\014\n\010ABS_TIME\020\002\022\014\n\010REL_"
  "TIME\020\004\"\353\001\n\020AdvancedAcqParam\022\022\n\nnum_sweep"
  "s\030\001 \001(\005\022\037\n\027num_samples_per_segment\030\002 \001(\005"
  "\022.\n\tdata_type\030\003 \001(\0162\033.zb.dcts.scenario.I"
  "Q.IQType\0224\n\010segments\030\004 \003(\0132\".zb.dcts.sce"
  "nario.spectrum.DDCBank\022<\n\rtrigger_param\030"
  "\005 \001(\0132%.zb.dcts.scenario.IQ.TimeTriggerP"
  "aram\"\331\002\n\010IQHeader\022-\n\013result_from\030\001 \001(\0132\030"
  ".zb.dcts.source.SourceId\022\027\n\017sequence_num"
  "ber\030\003 \001(\004\022\023\n\013sweep_index\030\004 \001(\004\022\025\n\rsegmen"
  "t_index\030\005 \001(\r\022.\n\tdata_type\030\006 \001(\0162\033.zb.dc"
  "ts.scenario.IQ.IQType\022\025\n\rtruncate_bits\030\007"
  " \001(\r\022\030\n\020center_frequency\030\t \001(\001\022\023\n\013sample"
  "_rate\030\n \001(\001\022\026\n\016scale_to_volts\030\013 \001(\001\022&\n\nt"
  "ime_stamp\030\014 \001(\0132\022.zb.dcts.Timestamp\022#\n\010p"
  "osition\030\017 \001(\0132\021.zb.dcts.Position*\"\n\006IQTy"
  "pe\022\013\n\007cplx_16\020\000\022\013\n\007cplx_32\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fIQ_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fIQ_2eproto_sccs[6] = {
  &scc_info_AdvancedAcqParam_scenario_2fIQ_2eproto.base,
  &scc_info_IQHeader_scenario_2fIQ_2eproto.base,
  &scc_info_IQSource_scenario_2fIQ_2eproto.base,
  &scc_info_IQSource_ParamsEntry_DoNotUse_scenario_2fIQ_2eproto.base,
  &scc_info_SimpleAcqParam_scenario_2fIQ_2eproto.base,
  &scc_info_TimeTriggerParam_scenario_2fIQ_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fIQ_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fIQ_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fIQ_2eproto, "scenario/IQ.proto", 1316,
  &descriptor_table_scenario_2fIQ_2eproto_once, descriptor_table_scenario_2fIQ_2eproto_sccs, descriptor_table_scenario_2fIQ_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_scenario_2fIQ_2eproto::offsets,
  file_level_metadata_scenario_2fIQ_2eproto, 6, file_level_enum_descriptors_scenario_2fIQ_2eproto, file_level_service_descriptors_scenario_2fIQ_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fIQ_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fIQ_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace IQ {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeTriggerParam_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fIQ_2eproto);
  return file_level_enum_descriptors_scenario_2fIQ_2eproto[0];
}
bool TimeTriggerParam_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeTriggerParam_Type TimeTriggerParam::NONE;
constexpr TimeTriggerParam_Type TimeTriggerParam::ABS_TIME;
constexpr TimeTriggerParam_Type TimeTriggerParam::REL_TIME;
constexpr TimeTriggerParam_Type TimeTriggerParam::Type_MIN;
constexpr TimeTriggerParam_Type TimeTriggerParam::Type_MAX;
constexpr int TimeTriggerParam::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IQType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fIQ_2eproto);
  return file_level_enum_descriptors_scenario_2fIQ_2eproto[1];
}
bool IQType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

IQSource_ParamsEntry_DoNotUse::IQSource_ParamsEntry_DoNotUse() {}
IQSource_ParamsEntry_DoNotUse::IQSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void IQSource_ParamsEntry_DoNotUse::MergeFrom(const IQSource_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata IQSource_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void IQSource_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void IQSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::IQ::_IQSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class IQSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const IQSource* msg);
};

const ::zb::dcts::source::SourceId&
IQSource::_Internal::id(const IQSource* msg) {
  return *msg->id_;
}
void IQSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
IQSource::IQSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.IQ.IQSource)
}
IQSource::IQSource(const IQSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&attenuation_gain_, &from.attenuation_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.IQ.IQSource)
}

void IQSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IQSource_scenario_2fIQ_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&id_)) + sizeof(antenna_));
}

IQSource::~IQSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.IQ.IQSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void IQSource::ArenaDtor(void* object) {
  IQSource* _this = reinterpret_cast< IQSource* >(object);
  (void)_this;
}
void IQSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IQSource& IQSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IQSource_scenario_2fIQ_2eproto.base);
  return *internal_default_instance();
}


void IQSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.IQ.IQSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&attenuation_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.IQ.IQSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_antenna(), target);
  }

  // map<string, string> params = 6;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.IQ.IQSource.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.IQ.IQSource.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = IQSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = IQSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.IQ.IQSource)
  return target;
}

size_t IQSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.IQ.IQSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += IQSource_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.IQ.IQSource)
  GOOGLE_DCHECK_NE(&from, this);
  const IQSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.IQ.IQSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.IQ.IQSource)
    MergeFrom(*source);
  }
}

void IQSource::MergeFrom(const IQSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.IQ.IQSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
}

void IQSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.IQ.IQSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQSource::CopyFrom(const IQSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.IQ.IQSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQSource::IsInitialized() const {
  return true;
}

void IQSource::InternalSwap(IQSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IQSource, antenna_)
      + sizeof(IQSource::antenna_)
      - PROTOBUF_FIELD_OFFSET(IQSource, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IQSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleAcqParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::IQ::_SimpleAcqParam_default_instance_._instance.get_mutable()->segment_ = const_cast< ::zb::dcts::scenario::spectrum::DDCBank*>(
      ::zb::dcts::scenario::spectrum::DDCBank::internal_default_instance());
}
class SimpleAcqParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::DDCBank& segment(const SimpleAcqParam* msg);
};

const ::zb::dcts::scenario::spectrum::DDCBank&
SimpleAcqParam::_Internal::segment(const SimpleAcqParam* msg) {
  return *msg->segment_;
}
void SimpleAcqParam::clear_segment() {
  if (GetArena() == nullptr && segment_ != nullptr) {
    delete segment_;
  }
  segment_ = nullptr;
}
SimpleAcqParam::SimpleAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.IQ.SimpleAcqParam)
}
SimpleAcqParam::SimpleAcqParam(const SimpleAcqParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_segment()) {
    segment_ = new ::zb::dcts::scenario::spectrum::DDCBank(*from.segment_);
  } else {
    segment_ = nullptr;
  }
  ::memcpy(&total_samples_, &from.total_samples_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&total_samples_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.IQ.SimpleAcqParam)
}

void SimpleAcqParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleAcqParam_scenario_2fIQ_2eproto.base);
  ::memset(&segment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&segment_)) + sizeof(data_type_));
}

SimpleAcqParam::~SimpleAcqParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.IQ.SimpleAcqParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleAcqParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete segment_;
}

void SimpleAcqParam::ArenaDtor(void* object) {
  SimpleAcqParam* _this = reinterpret_cast< SimpleAcqParam* >(object);
  (void)_this;
}
void SimpleAcqParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleAcqParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleAcqParam& SimpleAcqParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleAcqParam_scenario_2fIQ_2eproto.base);
  return *internal_default_instance();
}


void SimpleAcqParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && segment_ != nullptr) {
    delete segment_;
  }
  segment_ = nullptr;
  ::memset(&total_samples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&total_samples_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleAcqParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.IQ.IQType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::zb::dcts::scenario::IQ::IQType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.DDCBank segment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleAcqParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_samples = 1;
  if (this->total_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_samples(), target);
  }

  // int32 block_size = 2;
  if (this->block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_size(), target);
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // .zb.dcts.scenario.spectrum.DDCBank segment = 4;
  if (this->has_segment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::segment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.IQ.SimpleAcqParam)
  return target;
}

size_t SimpleAcqParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.DDCBank segment = 4;
  if (this->has_segment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segment_);
  }

  // int32 total_samples = 1;
  if (this->total_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_samples());
  }

  // int32 block_size = 2;
  if (this->block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_size());
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleAcqParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleAcqParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleAcqParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.IQ.SimpleAcqParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.IQ.SimpleAcqParam)
    MergeFrom(*source);
  }
}

void SimpleAcqParam::MergeFrom(const SimpleAcqParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_segment()) {
    _internal_mutable_segment()->::zb::dcts::scenario::spectrum::DDCBank::MergeFrom(from._internal_segment());
  }
  if (from.total_samples() != 0) {
    _internal_set_total_samples(from._internal_total_samples());
  }
  if (from.block_size() != 0) {
    _internal_set_block_size(from._internal_block_size());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void SimpleAcqParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAcqParam::CopyFrom(const SimpleAcqParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.IQ.SimpleAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAcqParam::IsInitialized() const {
  return true;
}

void SimpleAcqParam::InternalSwap(SimpleAcqParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleAcqParam, data_type_)
      + sizeof(SimpleAcqParam::data_type_)
      - PROTOBUF_FIELD_OFFSET(SimpleAcqParam, segment_)>(
          reinterpret_cast<char*>(&segment_),
          reinterpret_cast<char*>(&other->segment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleAcqParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeTriggerParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::IQ::_TimeTriggerParam_default_instance_._instance.get_mutable()->trigger_time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class TimeTriggerParam::_Internal {
 public:
  static const ::zb::dcts::Timestamp& trigger_time(const TimeTriggerParam* msg);
};

const ::zb::dcts::Timestamp&
TimeTriggerParam::_Internal::trigger_time(const TimeTriggerParam* msg) {
  return *msg->trigger_time_;
}
void TimeTriggerParam::clear_trigger_time() {
  if (GetArena() == nullptr && trigger_time_ != nullptr) {
    delete trigger_time_;
  }
  trigger_time_ = nullptr;
}
TimeTriggerParam::TimeTriggerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.IQ.TimeTriggerParam)
}
TimeTriggerParam::TimeTriggerParam(const TimeTriggerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trigger_time()) {
    trigger_time_ = new ::zb::dcts::Timestamp(*from.trigger_time_);
  } else {
    trigger_time_ = nullptr;
  }
  ::memcpy(&trigger_type_, &from.trigger_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&segment_interval_) -
    reinterpret_cast<char*>(&trigger_type_)) + sizeof(segment_interval_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.IQ.TimeTriggerParam)
}

void TimeTriggerParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeTriggerParam_scenario_2fIQ_2eproto.base);
  ::memset(&trigger_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_interval_) -
      reinterpret_cast<char*>(&trigger_time_)) + sizeof(segment_interval_));
}

TimeTriggerParam::~TimeTriggerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.IQ.TimeTriggerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeTriggerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trigger_time_;
}

void TimeTriggerParam::ArenaDtor(void* object) {
  TimeTriggerParam* _this = reinterpret_cast< TimeTriggerParam* >(object);
  (void)_this;
}
void TimeTriggerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeTriggerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeTriggerParam& TimeTriggerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeTriggerParam_scenario_2fIQ_2eproto.base);
  return *internal_default_instance();
}


void TimeTriggerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trigger_time_ != nullptr) {
    delete trigger_time_;
  }
  trigger_time_ = nullptr;
  ::memset(&trigger_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&segment_interval_) -
      reinterpret_cast<char*>(&trigger_type_)) + sizeof(segment_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeTriggerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.IQ.TimeTriggerParam.Type trigger_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trigger_type(static_cast<::zb::dcts::scenario::IQ::TimeTriggerParam_Type>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp trigger_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sweep_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sweep_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 segment_interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          segment_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeTriggerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.IQ.TimeTriggerParam.Type trigger_type = 1;
  if (this->trigger_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trigger_type(), target);
  }

  // .zb.dcts.Timestamp trigger_time = 2;
  if (this->has_trigger_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trigger_time(this), target, stream);
  }

  // int32 sweep_interval = 3;
  if (this->sweep_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sweep_interval(), target);
  }

  // int32 segment_interval = 4;
  if (this->segment_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_segment_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.IQ.TimeTriggerParam)
  return target;
}

size_t TimeTriggerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp trigger_time = 2;
  if (this->has_trigger_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_time_);
  }

  // .zb.dcts.scenario.IQ.TimeTriggerParam.Type trigger_type = 1;
  if (this->trigger_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trigger_type());
  }

  // int32 sweep_interval = 3;
  if (this->sweep_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sweep_interval());
  }

  // int32 segment_interval = 4;
  if (this->segment_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeTriggerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeTriggerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeTriggerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.IQ.TimeTriggerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.IQ.TimeTriggerParam)
    MergeFrom(*source);
  }
}

void TimeTriggerParam::MergeFrom(const TimeTriggerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trigger_time()) {
    _internal_mutable_trigger_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_trigger_time());
  }
  if (from.trigger_type() != 0) {
    _internal_set_trigger_type(from._internal_trigger_type());
  }
  if (from.sweep_interval() != 0) {
    _internal_set_sweep_interval(from._internal_sweep_interval());
  }
  if (from.segment_interval() != 0) {
    _internal_set_segment_interval(from._internal_segment_interval());
  }
}

void TimeTriggerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeTriggerParam::CopyFrom(const TimeTriggerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.IQ.TimeTriggerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeTriggerParam::IsInitialized() const {
  return true;
}

void TimeTriggerParam::InternalSwap(TimeTriggerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeTriggerParam, segment_interval_)
      + sizeof(TimeTriggerParam::segment_interval_)
      - PROTOBUF_FIELD_OFFSET(TimeTriggerParam, trigger_time_)>(
          reinterpret_cast<char*>(&trigger_time_),
          reinterpret_cast<char*>(&other->trigger_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeTriggerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdvancedAcqParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::IQ::_AdvancedAcqParam_default_instance_._instance.get_mutable()->trigger_param_ = const_cast< ::zb::dcts::scenario::IQ::TimeTriggerParam*>(
      ::zb::dcts::scenario::IQ::TimeTriggerParam::internal_default_instance());
}
class AdvancedAcqParam::_Internal {
 public:
  static const ::zb::dcts::scenario::IQ::TimeTriggerParam& trigger_param(const AdvancedAcqParam* msg);
};

const ::zb::dcts::scenario::IQ::TimeTriggerParam&
AdvancedAcqParam::_Internal::trigger_param(const AdvancedAcqParam* msg) {
  return *msg->trigger_param_;
}
void AdvancedAcqParam::clear_segments() {
  segments_.Clear();
}
AdvancedAcqParam::AdvancedAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.IQ.AdvancedAcqParam)
}
AdvancedAcqParam::AdvancedAcqParam(const AdvancedAcqParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trigger_param()) {
    trigger_param_ = new ::zb::dcts::scenario::IQ::TimeTriggerParam(*from.trigger_param_);
  } else {
    trigger_param_ = nullptr;
  }
  ::memcpy(&num_sweeps_, &from.num_sweeps_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&num_sweeps_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.IQ.AdvancedAcqParam)
}

void AdvancedAcqParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdvancedAcqParam_scenario_2fIQ_2eproto.base);
  ::memset(&trigger_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&trigger_param_)) + sizeof(data_type_));
}

AdvancedAcqParam::~AdvancedAcqParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.IQ.AdvancedAcqParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdvancedAcqParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trigger_param_;
}

void AdvancedAcqParam::ArenaDtor(void* object) {
  AdvancedAcqParam* _this = reinterpret_cast< AdvancedAcqParam* >(object);
  (void)_this;
}
void AdvancedAcqParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdvancedAcqParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdvancedAcqParam& AdvancedAcqParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdvancedAcqParam_scenario_2fIQ_2eproto.base);
  return *internal_default_instance();
}


void AdvancedAcqParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  if (GetArena() == nullptr && trigger_param_ != nullptr) {
    delete trigger_param_;
  }
  trigger_param_ = nullptr;
  ::memset(&num_sweeps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&num_sweeps_)) + sizeof(data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdvancedAcqParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_sweeps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_sweeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_samples_per_segment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_samples_per_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.IQ.IQType data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::zb::dcts::scenario::IQ::IQType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.spectrum.DDCBank segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.IQ.TimeTriggerParam trigger_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trigger_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdvancedAcqParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_sweeps = 1;
  if (this->num_sweeps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_sweeps(), target);
  }

  // int32 num_samples_per_segment = 2;
  if (this->num_samples_per_segment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_samples_per_segment(), target);
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_type(), target);
  }

  // repeated .zb.dcts.scenario.spectrum.DDCBank segments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_segments(i), target, stream);
  }

  // .zb.dcts.scenario.IQ.TimeTriggerParam trigger_param = 5;
  if (this->has_trigger_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trigger_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.IQ.AdvancedAcqParam)
  return target;
}

size_t AdvancedAcqParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.DDCBank segments = 4;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.IQ.TimeTriggerParam trigger_param = 5;
  if (this->has_trigger_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_param_);
  }

  // int32 num_sweeps = 1;
  if (this->num_sweeps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_sweeps());
  }

  // int32 num_samples_per_segment = 2;
  if (this->num_samples_per_segment() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_samples_per_segment());
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdvancedAcqParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdvancedAcqParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdvancedAcqParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.IQ.AdvancedAcqParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.IQ.AdvancedAcqParam)
    MergeFrom(*source);
  }
}

void AdvancedAcqParam::MergeFrom(const AdvancedAcqParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  if (from.has_trigger_param()) {
    _internal_mutable_trigger_param()->::zb::dcts::scenario::IQ::TimeTriggerParam::MergeFrom(from._internal_trigger_param());
  }
  if (from.num_sweeps() != 0) {
    _internal_set_num_sweeps(from._internal_num_sweeps());
  }
  if (from.num_samples_per_segment() != 0) {
    _internal_set_num_samples_per_segment(from._internal_num_samples_per_segment());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void AdvancedAcqParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedAcqParam::CopyFrom(const AdvancedAcqParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.IQ.AdvancedAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedAcqParam::IsInitialized() const {
  return true;
}

void AdvancedAcqParam::InternalSwap(AdvancedAcqParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdvancedAcqParam, data_type_)
      + sizeof(AdvancedAcqParam::data_type_)
      - PROTOBUF_FIELD_OFFSET(AdvancedAcqParam, trigger_param_)>(
          reinterpret_cast<char*>(&trigger_param_),
          reinterpret_cast<char*>(&other->trigger_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdvancedAcqParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IQHeader::InitAsDefaultInstance() {
  ::zb::dcts::scenario::IQ::_IQHeader_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::IQ::_IQHeader_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::IQ::_IQHeader_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class IQHeader::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const IQHeader* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const IQHeader* msg);
  static const ::zb::dcts::Position& position(const IQHeader* msg);
};

const ::zb::dcts::source::SourceId&
IQHeader::_Internal::result_from(const IQHeader* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
IQHeader::_Internal::time_stamp(const IQHeader* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
IQHeader::_Internal::position(const IQHeader* msg) {
  return *msg->position_;
}
void IQHeader::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void IQHeader::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void IQHeader::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
IQHeader::IQHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.IQ.IQHeader)
}
IQHeader::IQHeader(const IQHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&truncate_bits_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(truncate_bits_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.IQ.IQHeader)
}

void IQHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IQHeader_scenario_2fIQ_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truncate_bits_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(truncate_bits_));
}

IQHeader::~IQHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.IQ.IQHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete position_;
}

void IQHeader::ArenaDtor(void* object) {
  IQHeader* _this = reinterpret_cast< IQHeader* >(object);
  (void)_this;
}
void IQHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IQHeader& IQHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IQHeader_scenario_2fIQ_2eproto.base);
  return *internal_default_instance();
}


void IQHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.IQ.IQHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&truncate_bits_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(truncate_bits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sweep_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.IQ.IQType data_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::zb::dcts::scenario::IQ::IQType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 truncate_bits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          truncate_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double center_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sample_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double scale_to_volts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          scale_to_volts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.IQ.IQHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sweep_index(), target);
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_segment_index(), target);
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 6;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_data_type(), target);
  }

  // uint32 truncate_bits = 7;
  if (this->truncate_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_truncate_bits(), target);
  }

  // double center_frequency = 9;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_center_frequency(), target);
  }

  // double sample_rate = 10;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sample_rate(), target);
  }

  // double scale_to_volts = 11;
  if (!(this->scale_to_volts() <= 0 && this->scale_to_volts() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_scale_to_volts(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.IQ.IQHeader)
  return target;
}

size_t IQHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.IQ.IQHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sweep_index());
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_index());
  }

  // .zb.dcts.scenario.IQ.IQType data_type = 6;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // double center_frequency = 9;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double sample_rate = 10;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double scale_to_volts = 11;
  if (!(this->scale_to_volts() <= 0 && this->scale_to_volts() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 truncate_bits = 7;
  if (this->truncate_bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_truncate_bits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.IQ.IQHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const IQHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.IQ.IQHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.IQ.IQHeader)
    MergeFrom(*source);
  }
}

void IQHeader::MergeFrom(const IQHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.IQ.IQHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_index() != 0) {
    _internal_set_sweep_index(from._internal_sweep_index());
  }
  if (from.segment_index() != 0) {
    _internal_set_segment_index(from._internal_segment_index());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  if (!(from.scale_to_volts() <= 0 && from.scale_to_volts() >= 0)) {
    _internal_set_scale_to_volts(from._internal_scale_to_volts());
  }
  if (from.truncate_bits() != 0) {
    _internal_set_truncate_bits(from._internal_truncate_bits());
  }
}

void IQHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.IQ.IQHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQHeader::CopyFrom(const IQHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.IQ.IQHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQHeader::IsInitialized() const {
  return true;
}

void IQHeader::InternalSwap(IQHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IQHeader, truncate_bits_)
      + sizeof(IQHeader::truncate_bits_)
      - PROTOBUF_FIELD_OFFSET(IQHeader, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IQHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IQ
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::IQSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::IQSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::IQSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::SimpleAcqParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::SimpleAcqParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::SimpleAcqParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::TimeTriggerParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::TimeTriggerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::TimeTriggerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::AdvancedAcqParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::AdvancedAcqParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::AdvancedAcqParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::IQ::IQHeader* Arena::CreateMaybeMessage< ::zb::dcts::scenario::IQ::IQHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::IQ::IQHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
