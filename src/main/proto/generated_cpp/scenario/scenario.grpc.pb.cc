// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/scenario.proto

#include "scenario/scenario.pb.h"
#include "scenario/scenario.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {

static const char* GeneralService_method_names[] = {
  "/zb.dcts.scenario.GeneralService/ListAllScenarios",
  "/zb.dcts.scenario.GeneralService/ListAllSources",
  "/zb.dcts.scenario.GeneralService/GetScenarioInfo",
  "/zb.dcts.scenario.GeneralService/AbortOne",
  "/zb.dcts.scenario.GeneralService/AbortAll",
  "/zb.dcts.scenario.GeneralService/PauseTask",
  "/zb.dcts.scenario.GeneralService/ResumeTask",
  "/zb.dcts.scenario.GeneralService/SubscribeScenarioMessage",
};

std::unique_ptr< GeneralService::Stub> GeneralService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GeneralService::Stub> stub(new GeneralService::Stub(channel));
  return stub;
}

GeneralService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListAllScenarios_(GeneralService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAllSources_(GeneralService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScenarioInfo_(GeneralService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AbortOne_(GeneralService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AbortAll_(GeneralService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseTask_(GeneralService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeTask_(GeneralService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeScenarioMessage_(GeneralService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GeneralService::Stub::ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::scenario::ScenariosInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAllScenarios_, context, request, response);
}

void GeneralService::Stub::experimental_async::ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAllScenarios_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAllScenarios_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAllScenarios_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAllScenarios_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>* GeneralService::Stub::AsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenariosInfo>::Create(channel_.get(), cq, rpcmethod_ListAllScenarios_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>* GeneralService::Stub::PrepareAsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenariosInfo>::Create(channel_.get(), cq, rpcmethod_ListAllScenarios_, context, request, false);
}

::grpc::Status GeneralService::Stub::ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::source::SourceSetInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAllSources_, context, request, response);
}

void GeneralService::Stub::experimental_async::ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAllSources_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAllSources_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAllSources_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAllSources_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* GeneralService::Stub::AsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::source::SourceSetInfo>::Create(channel_.get(), cq, rpcmethod_ListAllSources_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* GeneralService::Stub::PrepareAsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::source::SourceSetInfo>::Create(channel_.get(), cq, rpcmethod_ListAllSources_, context, request, false);
}

::grpc::Status GeneralService::Stub::GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetScenarioInfo_, context, request, response);
}

void GeneralService::Stub::experimental_async::GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetScenarioInfo_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetScenarioInfo_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetScenarioInfo_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetScenarioInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>* GeneralService::Stub::AsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioInfo>::Create(channel_.get(), cq, rpcmethod_GetScenarioInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>* GeneralService::Stub::PrepareAsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioInfo>::Create(channel_.get(), cq, rpcmethod_GetScenarioInfo_, context, request, false);
}

::grpc::Status GeneralService::Stub::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AbortOne_, context, request, response);
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbortOne_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AbortOne_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AbortOne_, context, request, false);
}

::grpc::Status GeneralService::Stub::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AbortAll_, context, request, response);
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbortAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AbortAll_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GeneralService::Stub::PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_AbortAll_, context, request, false);
}

::grpc::Status GeneralService::Stub::PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseTask_, context, request, response);
}

void GeneralService::Stub::experimental_async::PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseTask_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseTask_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseTask_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* GeneralService::Stub::AsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_PauseTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* GeneralService::Stub::PrepareAsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_PauseTask_, context, request, false);
}

::grpc::Status GeneralService::Stub::ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResumeTask_, context, request, response);
}

void GeneralService::Stub::experimental_async::ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResumeTask_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResumeTask_, context, request, response, std::move(f));
}

void GeneralService::Stub::experimental_async::ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResumeTask_, context, request, response, reactor);
}

void GeneralService::Stub::experimental_async::ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResumeTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* GeneralService::Stub::AsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResumeTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* GeneralService::Stub::PrepareAsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResumeTask_, context, request, false);
}

::grpc::ClientReader< ::google::protobuf::Any>* GeneralService::Stub::SubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), rpcmethod_SubscribeScenarioMessage_, context, request);
}

void GeneralService::Stub::experimental_async::SubscribeScenarioMessage(::grpc::ClientContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::google::protobuf::Any>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeScenarioMessage_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* GeneralService::Stub::AsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_SubscribeScenarioMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* GeneralService::Stub::PrepareAsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::google::protobuf::Any>::Create(channel_.get(), cq, rpcmethod_SubscribeScenarioMessage_, context, request, false, nullptr);
}

GeneralService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::zb::dcts::scenario::ScenariosInfo>(
          std::mem_fn(&GeneralService::Service::ListAllScenarios), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>(
          std::mem_fn(&GeneralService::Service::ListAllSources), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioInfo>(
          std::mem_fn(&GeneralService::Service::GetScenarioInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::scenario::ScenarioId, ::google::protobuf::Empty>(
          std::mem_fn(&GeneralService::Service::AbortOne), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&GeneralService::Service::AbortAll), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&GeneralService::Service::PauseTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GeneralService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&GeneralService::Service::ResumeTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GeneralService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GeneralService::Service, ::zb::dcts::scenario::SubscribeRequest, ::google::protobuf::Any>(
          std::mem_fn(&GeneralService::Service::SubscribeScenarioMessage), this)));
}

GeneralService::Service::~Service() {
}

::grpc::Status GeneralService::Service::ListAllScenarios(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::ListAllSources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::GetScenarioInfo(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::AbortOne(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::AbortAll(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::PauseTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::ResumeTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GeneralService::Service::SubscribeScenarioMessage(::grpc::ServerContext* context, const ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario

