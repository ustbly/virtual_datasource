// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/spectrum.proto

#include "scenario/spectrum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencyPos_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencySegment_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumLine_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace spectrum {
class FrequencySpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrequencySpan> _instance;
} _FrequencySpan_default_instance_;
class FrequencySegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrequencySegment> _instance;
} _FrequencySegment_default_instance_;
class FrequencyPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrequencyPos> _instance;
} _FrequencyPos_default_instance_;
class FrequencyBandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrequencyBand> _instance;
} _FrequencyBand_default_instance_;
class FrequencyRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrequencyRange> _instance;
} _FrequencyRange_default_instance_;
class SignalBandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalBand> _instance;
} _SignalBand_default_instance_;
class DDCBankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DDCBank> _instance;
} _DDCBank_default_instance_;
class DataHoldRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataHoldRequest> _instance;
} _DataHoldRequest_default_instance_;
class SpectrumLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumLine> _instance;
} _SpectrumLine_default_instance_;
class SpectrumBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumBlock> _instance;
} _SpectrumBlock_default_instance_;
class ZoomInRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZoomInRequest> _instance;
} _ZoomInRequest_default_instance_;
class View_TracesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<View_TracesEntry_DoNotUse> _instance;
} _View_TracesEntry_DoNotUse_default_instance_;
class ViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<View> _instance;
} _View_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class SegmentHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentHeader> _instance;
} _SegmentHeader_default_instance_;
}  // namespace spectrum
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_DDCBank_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_DDCBank_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::DDCBank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::DDCBank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDCBank_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DDCBank_scenario_2fspectrum_2eproto}, {}};

static void InitDefaultsscc_info_DataHoldRequest_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_DataHoldRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::DataHoldRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::DataHoldRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataHoldRequest_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataHoldRequest_scenario_2fspectrum_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,}};

static void InitDefaultsscc_info_FrequencyBand_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_FrequencyBand_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::FrequencyBand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::FrequencyBand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencyBand_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrequencyBand_scenario_2fspectrum_2eproto}, {
      &scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_FrequencyPos_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_FrequencyPos_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::FrequencyPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::FrequencyPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencyPos_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrequencyPos_scenario_2fspectrum_2eproto}, {}};

static void InitDefaultsscc_info_FrequencyRange_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_FrequencyRange_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::FrequencyRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::FrequencyRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencyRange_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrequencyRange_scenario_2fspectrum_2eproto}, {
      &scc_info_FrequencyPos_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_FrequencySegment_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_FrequencySegment_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::FrequencySegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::FrequencySegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencySegment_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrequencySegment_scenario_2fspectrum_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_FrequencySpan_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::FrequencySpan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::FrequencySpan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrequencySpan_scenario_2fspectrum_2eproto}, {}};

static void InitDefaultsscc_info_Header_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Header_scenario_2fspectrum_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SegmentHeader_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::SegmentHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::SegmentHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SegmentHeader_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SegmentHeader_scenario_2fspectrum_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SignalBand_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::SignalBand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::SignalBand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignalBand_scenario_2fspectrum_2eproto}, {}};

static void InitDefaultsscc_info_SpectrumBlock_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_SpectrumBlock_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::SpectrumBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::SpectrumBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpectrumBlock_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpectrumBlock_scenario_2fspectrum_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_SpectrumLine_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_SpectrumLine_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_SpectrumLine_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::SpectrumLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::SpectrumLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumLine_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpectrumLine_scenario_2fspectrum_2eproto}, {}};

static void InitDefaultsscc_info_View_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_View_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::View();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::View::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_View_scenario_2fspectrum_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
      &scc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_View_TracesEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse();
  }
  ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto}, {
      &scc_info_SpectrumLine_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_ZoomInRequest_scenario_2fspectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::spectrum::_ZoomInRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::spectrum::ZoomInRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::spectrum::ZoomInRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ZoomInRequest_scenario_2fspectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ZoomInRequest_scenario_2fspectrum_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fspectrum_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fspectrum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fspectrum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fspectrum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySpan, start_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySpan, stop_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySegment, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencySegment, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyPos, segment_idx_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyPos, seg_internal_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyBand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyBand, segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyRange, start_pos_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::FrequencyRange, stop_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SignalBand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SignalBand, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SignalBand, band_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DDCBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DDCBank, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DDCBank, sample_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DataHoldRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DataHoldRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::DataHoldRequest, data_hold_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumLine, spectrum_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumBlock, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumBlock, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SpectrumBlock, spectrum_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::ZoomInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::ZoomInRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::ZoomInRequest, zoom_in_part_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::View, traces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, record_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, sweep_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, segment_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, start_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, frequency_step_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, num_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::spectrum::SegmentHeader, position_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::spectrum::FrequencySpan)},
  { 7, -1, sizeof(::zb::dcts::scenario::spectrum::FrequencySegment)},
  { 14, -1, sizeof(::zb::dcts::scenario::spectrum::FrequencyPos)},
  { 21, -1, sizeof(::zb::dcts::scenario::spectrum::FrequencyBand)},
  { 27, -1, sizeof(::zb::dcts::scenario::spectrum::FrequencyRange)},
  { 34, -1, sizeof(::zb::dcts::scenario::spectrum::SignalBand)},
  { 41, -1, sizeof(::zb::dcts::scenario::spectrum::DDCBank)},
  { 48, -1, sizeof(::zb::dcts::scenario::spectrum::DataHoldRequest)},
  { 55, -1, sizeof(::zb::dcts::scenario::spectrum::SpectrumLine)},
  { 61, -1, sizeof(::zb::dcts::scenario::spectrum::SpectrumBlock)},
  { 69, -1, sizeof(::zb::dcts::scenario::spectrum::ZoomInRequest)},
  { 76, 83, sizeof(::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse)},
  { 85, -1, sizeof(::zb::dcts::scenario::spectrum::View)},
  { 92, -1, sizeof(::zb::dcts::scenario::spectrum::Header)},
  { 103, -1, sizeof(::zb::dcts::scenario::spectrum::SegmentHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_FrequencySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_FrequencyPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_FrequencyBand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_FrequencyRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_SignalBand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_DDCBank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_DataHoldRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_SpectrumLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_SpectrumBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_ZoomInRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_View_TracesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_View_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_),
};

const char descriptor_table_protodef_scenario_2fspectrum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027scenario/spectrum.proto\022\031zb.dcts.scena"
  "rio.spectrum\032\ndcts.proto\032\023source/source."
  "proto\032\027scenario/scenario.proto\"6\n\rFreque"
  "ncySpan\022\022\n\nstart_freq\030\001 \001(\001\022\021\n\tstop_freq"
  "\030\002 \001(\001\"_\n\020FrequencySegment\022;\n\tfreq_span\030"
  "\001 \001(\0132(.zb.dcts.scenario.spectrum.Freque"
  "ncySpan\022\016\n\006points\030\002 \001(\005\"@\n\014FrequencyPos\022"
  "\023\n\013segment_idx\030\001 \001(\005\022\033\n\023seg_internal_off"
  "set\030\002 \001(\005\"N\n\rFrequencyBand\022=\n\010segments\030\001"
  " \003(\0132+.zb.dcts.scenario.spectrum.Frequen"
  "cySegment\"\207\001\n\016FrequencyRange\022:\n\tstart_po"
  "s\030\001 \001(\0132\'.zb.dcts.scenario.spectrum.Freq"
  "uencyPos\0229\n\010stop_pos\030\002 \001(\0132\'.zb.dcts.sce"
  "nario.spectrum.FrequencyPos\":\n\nSignalBan"
  "d\022\030\n\020center_frequency\030\001 \001(\001\022\022\n\nband_widt"
  "h\030\002 \001(\001\"8\n\007DDCBank\022\030\n\020center_frequency\030\001"
  " \001(\001\022\023\n\013sample_rate\030\002 \001(\001\"\207\001\n\017DataHoldRe"
  "quest\0223\n\tresponser\030\001 \001(\0132 .zb.dcts.scena"
  "rio.ScenarioTaskId\022\?\n\016data_hold_type\030\002 \001"
  "(\0162\'.zb.dcts.scenario.spectrum.DataHoldT"
  "ype\"\'\n\014SpectrumLine\022\027\n\017spectrum_points\030\001"
  " \003(\002\"\262\001\n\rSpectrumBlock\022:\n\013signal_band\030\002 "
  "\001(\0132%.zb.dcts.scenario.spectrum.SignalBa"
  "nd\022$\n\ttime_span\030\003 \001(\0132\021.zb.dcts.TimeSpan"
  "\022\?\n\016spectrum_lines\030\004 \003(\0132\'.zb.dcts.scena"
  "rio.spectrum.SpectrumLine\"\207\001\n\rZoomInRequ"
  "est\0223\n\tresponser\030\001 \001(\0132 .zb.dcts.scenari"
  "o.ScenarioTaskId\022A\n\014zoom_in_part\030\002 \001(\0132+"
  ".zb.dcts.scenario.spectrum.FrequencySegm"
  "ent\"\330\001\n\004View\022;\n\tfreq_span\030\001 \001(\0132(.zb.dct"
  "s.scenario.spectrum.FrequencySpan\022;\n\006tra"
  "ces\030\002 \003(\0132+.zb.dcts.scenario.spectrum.Vi"
  "ew.TracesEntry\032V\n\013TracesEntry\022\013\n\003key\030\001 \001"
  "(\t\0226\n\005value\030\002 \001(\0132\'.zb.dcts.scenario.spe"
  "ctrum.SpectrumLine:\0028\001\"\312\001\n\006Header\022-\n\013res"
  "ult_from\030\001 \001(\0132\030.zb.dcts.source.SourceId"
  "\022\021\n\trecord_id\030\002 \001(\t\022\027\n\017sequence_number\030\003"
  " \001(\r\022\023\n\013sweep_count\030\004 \001(\r\022$\n\ttime_span\030\005"
  " \001(\0132\021.zb.dcts.TimeSpan\022*\n\017device_positi"
  "on\030\006 \001(\0132\021.zb.dcts.Position\"\225\002\n\rSegmentH"
  "eader\022-\n\013result_from\030\001 \001(\0132\030.zb.dcts.sou"
  "rce.SourceId\022\027\n\017sequence_number\030\003 \001(\004\022\023\n"
  "\013sweep_index\030\004 \001(\004\022\025\n\rsegment_index\030\005 \001("
  "\r\022\027\n\017start_frequency\030\006 \001(\001\022\026\n\016frequency_"
  "step\030\007 \001(\001\022\022\n\nnum_points\030\010 \001(\r\022&\n\ntime_s"
  "tamp\030\014 \001(\0132\022.zb.dcts.Timestamp\022#\n\010positi"
  "on\030\017 \001(\0132\021.zb.dcts.Position*S\n\014DataHoldT"
  "ype\022\013\n\007NO_HOLD\020\000\022\014\n\010MAX_HOLD\020\001\022\014\n\010MIN_HO"
  "LD\020\002\022\014\n\010RMS_HOLD\020\003\022\014\n\010AVG_HOLD\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fspectrum_2eproto_deps[3] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fspectrum_2eproto_sccs[15] = {
  &scc_info_DDCBank_scenario_2fspectrum_2eproto.base,
  &scc_info_DataHoldRequest_scenario_2fspectrum_2eproto.base,
  &scc_info_FrequencyBand_scenario_2fspectrum_2eproto.base,
  &scc_info_FrequencyPos_scenario_2fspectrum_2eproto.base,
  &scc_info_FrequencyRange_scenario_2fspectrum_2eproto.base,
  &scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base,
  &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
  &scc_info_Header_scenario_2fspectrum_2eproto.base,
  &scc_info_SegmentHeader_scenario_2fspectrum_2eproto.base,
  &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,
  &scc_info_SpectrumBlock_scenario_2fspectrum_2eproto.base,
  &scc_info_SpectrumLine_scenario_2fspectrum_2eproto.base,
  &scc_info_View_scenario_2fspectrum_2eproto.base,
  &scc_info_View_TracesEntry_DoNotUse_scenario_2fspectrum_2eproto.base,
  &scc_info_ZoomInRequest_scenario_2fspectrum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fspectrum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fspectrum_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fspectrum_2eproto, "scenario/spectrum.proto", 1960,
  &descriptor_table_scenario_2fspectrum_2eproto_once, descriptor_table_scenario_2fspectrum_2eproto_sccs, descriptor_table_scenario_2fspectrum_2eproto_deps, 15, 3,
  schemas, file_default_instances, TableStruct_scenario_2fspectrum_2eproto::offsets,
  file_level_metadata_scenario_2fspectrum_2eproto, 15, file_level_enum_descriptors_scenario_2fspectrum_2eproto, file_level_service_descriptors_scenario_2fspectrum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fspectrum_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fspectrum_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace spectrum {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataHoldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fspectrum_2eproto);
  return file_level_enum_descriptors_scenario_2fspectrum_2eproto[0];
}
bool DataHoldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FrequencySpan::InitAsDefaultInstance() {
}
class FrequencySpan::_Internal {
 public:
};

FrequencySpan::FrequencySpan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.FrequencySpan)
}
FrequencySpan::FrequencySpan(const FrequencySpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_freq_, &from.start_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_freq_) -
    reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.FrequencySpan)
}

void FrequencySpan::SharedCtor() {
  ::memset(&start_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_freq_) -
      reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
}

FrequencySpan::~FrequencySpan() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.FrequencySpan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencySpan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencySpan::ArenaDtor(void* object) {
  FrequencySpan* _this = reinterpret_cast< FrequencySpan* >(object);
  (void)_this;
}
void FrequencySpan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencySpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencySpan& FrequencySpan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void FrequencySpan::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.FrequencySpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_freq_) -
      reinterpret_cast<char*>(&start_freq_)) + sizeof(stop_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencySpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencySpan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.FrequencySpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_freq = 1;
  if (!(this->start_freq() <= 0 && this->start_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_freq(), target);
  }

  // double stop_freq = 2;
  if (!(this->stop_freq() <= 0 && this->stop_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.FrequencySpan)
  return target;
}

size_t FrequencySpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.FrequencySpan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start_freq = 1;
  if (!(this->start_freq() <= 0 && this->start_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_freq = 2;
  if (!(this->stop_freq() <= 0 && this->stop_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencySpan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.FrequencySpan)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencySpan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencySpan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.FrequencySpan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.FrequencySpan)
    MergeFrom(*source);
  }
}

void FrequencySpan::MergeFrom(const FrequencySpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.FrequencySpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start_freq() <= 0 && from.start_freq() >= 0)) {
    _internal_set_start_freq(from._internal_start_freq());
  }
  if (!(from.stop_freq() <= 0 && from.stop_freq() >= 0)) {
    _internal_set_stop_freq(from._internal_stop_freq());
  }
}

void FrequencySpan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.FrequencySpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencySpan::CopyFrom(const FrequencySpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.FrequencySpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencySpan::IsInitialized() const {
  return true;
}

void FrequencySpan::InternalSwap(FrequencySpan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencySpan, stop_freq_)
      + sizeof(FrequencySpan::stop_freq_)
      - PROTOBUF_FIELD_OFFSET(FrequencySpan, start_freq_)>(
          reinterpret_cast<char*>(&start_freq_),
          reinterpret_cast<char*>(&other->start_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencySpan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrequencySegment::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_FrequencySegment_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
}
class FrequencySegment::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const FrequencySegment* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
FrequencySegment::_Internal::freq_span(const FrequencySegment* msg) {
  return *msg->freq_span_;
}
FrequencySegment::FrequencySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.FrequencySegment)
}
FrequencySegment::FrequencySegment(const FrequencySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.FrequencySegment)
}

void FrequencySegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base);
  ::memset(&freq_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&points_) -
      reinterpret_cast<char*>(&freq_span_)) + sizeof(points_));
}

FrequencySegment::~FrequencySegment() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.FrequencySegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencySegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void FrequencySegment::ArenaDtor(void* object) {
  FrequencySegment* _this = reinterpret_cast< FrequencySegment* >(object);
  (void)_this;
}
void FrequencySegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencySegment& FrequencySegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void FrequencySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.FrequencySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  points_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencySegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.FrequencySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.FrequencySegment)
  return target;
}

size_t FrequencySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.FrequencySegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // int32 points = 2;
  if (this->points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.FrequencySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.FrequencySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.FrequencySegment)
    MergeFrom(*source);
  }
}

void FrequencySegment::MergeFrom(const FrequencySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.FrequencySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.points() != 0) {
    _internal_set_points(from._internal_points());
  }
}

void FrequencySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.FrequencySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencySegment::CopyFrom(const FrequencySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.FrequencySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencySegment::IsInitialized() const {
  return true;
}

void FrequencySegment::InternalSwap(FrequencySegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencySegment, points_)
      + sizeof(FrequencySegment::points_)
      - PROTOBUF_FIELD_OFFSET(FrequencySegment, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencySegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrequencyPos::InitAsDefaultInstance() {
}
class FrequencyPos::_Internal {
 public:
};

FrequencyPos::FrequencyPos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.FrequencyPos)
}
FrequencyPos::FrequencyPos(const FrequencyPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&segment_idx_, &from.segment_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&seg_internal_offset_) -
    reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.FrequencyPos)
}

void FrequencyPos::SharedCtor() {
  ::memset(&segment_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seg_internal_offset_) -
      reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
}

FrequencyPos::~FrequencyPos() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.FrequencyPos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyPos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencyPos::ArenaDtor(void* object) {
  FrequencyPos* _this = reinterpret_cast< FrequencyPos* >(object);
  (void)_this;
}
void FrequencyPos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencyPos& FrequencyPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrequencyPos_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void FrequencyPos::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.FrequencyPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&segment_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seg_internal_offset_) -
      reinterpret_cast<char*>(&segment_idx_)) + sizeof(seg_internal_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 segment_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          segment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seg_internal_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seg_internal_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.FrequencyPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 segment_idx = 1;
  if (this->segment_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_segment_idx(), target);
  }

  // int32 seg_internal_offset = 2;
  if (this->seg_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_seg_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.FrequencyPos)
  return target;
}

size_t FrequencyPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.FrequencyPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 segment_idx = 1;
  if (this->segment_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_segment_idx());
  }

  // int32 seg_internal_offset = 2;
  if (this->seg_internal_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seg_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.FrequencyPos)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.FrequencyPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.FrequencyPos)
    MergeFrom(*source);
  }
}

void FrequencyPos::MergeFrom(const FrequencyPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.FrequencyPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.segment_idx() != 0) {
    _internal_set_segment_idx(from._internal_segment_idx());
  }
  if (from.seg_internal_offset() != 0) {
    _internal_set_seg_internal_offset(from._internal_seg_internal_offset());
  }
}

void FrequencyPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.FrequencyPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyPos::CopyFrom(const FrequencyPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.FrequencyPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyPos::IsInitialized() const {
  return true;
}

void FrequencyPos::InternalSwap(FrequencyPos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencyPos, seg_internal_offset_)
      + sizeof(FrequencyPos::seg_internal_offset_)
      - PROTOBUF_FIELD_OFFSET(FrequencyPos, segment_idx_)>(
          reinterpret_cast<char*>(&segment_idx_),
          reinterpret_cast<char*>(&other->segment_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrequencyBand::InitAsDefaultInstance() {
}
class FrequencyBand::_Internal {
 public:
};

FrequencyBand::FrequencyBand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.FrequencyBand)
}
FrequencyBand::FrequencyBand(const FrequencyBand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.FrequencyBand)
}

void FrequencyBand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrequencyBand_scenario_2fspectrum_2eproto.base);
}

FrequencyBand::~FrequencyBand() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.FrequencyBand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyBand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrequencyBand::ArenaDtor(void* object) {
  FrequencyBand* _this = reinterpret_cast< FrequencyBand* >(object);
  (void)_this;
}
void FrequencyBand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyBand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencyBand& FrequencyBand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrequencyBand_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void FrequencyBand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.FrequencyBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyBand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.spectrum.FrequencySegment segments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyBand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.FrequencyBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.FrequencySegment segments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.FrequencyBand)
  return target;
}

size_t FrequencyBand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.FrequencyBand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.FrequencySegment segments = 1;
  total_size += 1UL * this->_internal_segments_size();
  for (const auto& msg : this->segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyBand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.FrequencyBand)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyBand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyBand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.FrequencyBand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.FrequencyBand)
    MergeFrom(*source);
  }
}

void FrequencyBand::MergeFrom(const FrequencyBand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.FrequencyBand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
}

void FrequencyBand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.FrequencyBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyBand::CopyFrom(const FrequencyBand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.FrequencyBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyBand::IsInitialized() const {
  return true;
}

void FrequencyBand::InternalSwap(FrequencyBand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  segments_.InternalSwap(&other->segments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyBand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrequencyRange::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_FrequencyRange_default_instance_._instance.get_mutable()->start_pos_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencyPos*>(
      ::zb::dcts::scenario::spectrum::FrequencyPos::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_FrequencyRange_default_instance_._instance.get_mutable()->stop_pos_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencyPos*>(
      ::zb::dcts::scenario::spectrum::FrequencyPos::internal_default_instance());
}
class FrequencyRange::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencyPos& start_pos(const FrequencyRange* msg);
  static const ::zb::dcts::scenario::spectrum::FrequencyPos& stop_pos(const FrequencyRange* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencyPos&
FrequencyRange::_Internal::start_pos(const FrequencyRange* msg) {
  return *msg->start_pos_;
}
const ::zb::dcts::scenario::spectrum::FrequencyPos&
FrequencyRange::_Internal::stop_pos(const FrequencyRange* msg) {
  return *msg->stop_pos_;
}
FrequencyRange::FrequencyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.FrequencyRange)
}
FrequencyRange::FrequencyRange(const FrequencyRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::zb::dcts::scenario::spectrum::FrequencyPos(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_stop_pos()) {
    stop_pos_ = new ::zb::dcts::scenario::spectrum::FrequencyPos(*from.stop_pos_);
  } else {
    stop_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.FrequencyRange)
}

void FrequencyRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrequencyRange_scenario_2fspectrum_2eproto.base);
  ::memset(&start_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_pos_) -
      reinterpret_cast<char*>(&start_pos_)) + sizeof(stop_pos_));
}

FrequencyRange::~FrequencyRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.FrequencyRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrequencyRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete stop_pos_;
}

void FrequencyRange::ArenaDtor(void* object) {
  FrequencyRange* _this = reinterpret_cast< FrequencyRange* >(object);
  (void)_this;
}
void FrequencyRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrequencyRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrequencyRange& FrequencyRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrequencyRange_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void FrequencyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.FrequencyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArena() == nullptr && stop_pos_ != nullptr) {
    delete stop_pos_;
  }
  stop_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrequencyRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencyPos start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencyPos stop_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrequencyRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.FrequencyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencyPos start_pos = 1;
  if (this->has_start_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_pos(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.FrequencyPos stop_pos = 2;
  if (this->has_stop_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stop_pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.FrequencyRange)
  return target;
}

size_t FrequencyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.FrequencyRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencyPos start_pos = 1;
  if (this->has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .zb.dcts.scenario.spectrum.FrequencyPos stop_pos = 2;
  if (this->has_stop_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_pos_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrequencyRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.FrequencyRange)
  GOOGLE_DCHECK_NE(&from, this);
  const FrequencyRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrequencyRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.FrequencyRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.FrequencyRange)
    MergeFrom(*source);
  }
}

void FrequencyRange::MergeFrom(const FrequencyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.FrequencyRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_pos()) {
    _internal_mutable_start_pos()->::zb::dcts::scenario::spectrum::FrequencyPos::MergeFrom(from._internal_start_pos());
  }
  if (from.has_stop_pos()) {
    _internal_mutable_stop_pos()->::zb::dcts::scenario::spectrum::FrequencyPos::MergeFrom(from._internal_stop_pos());
  }
}

void FrequencyRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.FrequencyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrequencyRange::CopyFrom(const FrequencyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.FrequencyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrequencyRange::IsInitialized() const {
  return true;
}

void FrequencyRange::InternalSwap(FrequencyRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrequencyRange, stop_pos_)
      + sizeof(FrequencyRange::stop_pos_)
      - PROTOBUF_FIELD_OFFSET(FrequencyRange, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrequencyRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalBand::InitAsDefaultInstance() {
}
class SignalBand::_Internal {
 public:
};

SignalBand::SignalBand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.SignalBand)
}
SignalBand::SignalBand(const SignalBand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&band_width_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.SignalBand)
}

void SignalBand::SharedCtor() {
  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_width_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
}

SignalBand::~SignalBand() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.SignalBand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalBand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalBand::ArenaDtor(void* object) {
  SignalBand* _this = reinterpret_cast< SignalBand* >(object);
  (void)_this;
}
void SignalBand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalBand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalBand& SignalBand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalBand_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void SignalBand::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.SignalBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_width_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(band_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalBand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double band_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          band_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalBand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.SignalBand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double band_width = 2;
  if (!(this->band_width() <= 0 && this->band_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_band_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.SignalBand)
  return target;
}

size_t SignalBand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.SignalBand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double band_width = 2;
  if (!(this->band_width() <= 0 && this->band_width() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalBand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.SignalBand)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalBand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalBand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.SignalBand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.SignalBand)
    MergeFrom(*source);
  }
}

void SignalBand::MergeFrom(const SignalBand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.SignalBand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.band_width() <= 0 && from.band_width() >= 0)) {
    _internal_set_band_width(from._internal_band_width());
  }
}

void SignalBand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.SignalBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalBand::CopyFrom(const SignalBand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.SignalBand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalBand::IsInitialized() const {
  return true;
}

void SignalBand::InternalSwap(SignalBand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalBand, band_width_)
      + sizeof(SignalBand::band_width_)
      - PROTOBUF_FIELD_OFFSET(SignalBand, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalBand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DDCBank::InitAsDefaultInstance() {
}
class DDCBank::_Internal {
 public:
};

DDCBank::DDCBank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.DDCBank)
}
DDCBank::DDCBank(const DDCBank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.DDCBank)
}

void DDCBank::SharedCtor() {
  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
}

DDCBank::~DDCBank() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.DDCBank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DDCBank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DDCBank::ArenaDtor(void* object) {
  DDCBank* _this = reinterpret_cast< DDCBank* >(object);
  (void)_this;
}
void DDCBank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DDCBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DDCBank& DDCBank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DDCBank_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void DDCBank::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.DDCBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DDCBank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sample_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DDCBank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.DDCBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_sample_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.DDCBank)
  return target;
}

size_t DDCBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.DDCBank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double sample_rate = 2;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DDCBank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.DDCBank)
  GOOGLE_DCHECK_NE(&from, this);
  const DDCBank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DDCBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.DDCBank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.DDCBank)
    MergeFrom(*source);
  }
}

void DDCBank::MergeFrom(const DDCBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.DDCBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
}

void DDCBank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.DDCBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDCBank::CopyFrom(const DDCBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.DDCBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDCBank::IsInitialized() const {
  return true;
}

void DDCBank::InternalSwap(DDCBank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DDCBank, sample_rate_)
      + sizeof(DDCBank::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(DDCBank, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DDCBank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataHoldRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_DataHoldRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
}
class DataHoldRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const DataHoldRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
DataHoldRequest::_Internal::responser(const DataHoldRequest* msg) {
  return *msg->responser_;
}
void DataHoldRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
DataHoldRequest::DataHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.DataHoldRequest)
}
DataHoldRequest::DataHoldRequest(const DataHoldRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  data_hold_type_ = from.data_hold_type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.DataHoldRequest)
}

void DataHoldRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataHoldRequest_scenario_2fspectrum_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_hold_type_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(data_hold_type_));
}

DataHoldRequest::~DataHoldRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.DataHoldRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataHoldRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
}

void DataHoldRequest::ArenaDtor(void* object) {
  DataHoldRequest* _this = reinterpret_cast< DataHoldRequest* >(object);
  (void)_this;
}
void DataHoldRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataHoldRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataHoldRequest& DataHoldRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataHoldRequest_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void DataHoldRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  data_hold_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataHoldRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.DataHoldType data_hold_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_hold_type(static_cast<::zb::dcts::scenario::spectrum::DataHoldType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataHoldRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.DataHoldType data_hold_type = 2;
  if (this->data_hold_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_hold_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.DataHoldRequest)
  return target;
}

size_t DataHoldRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.spectrum.DataHoldType data_hold_type = 2;
  if (this->data_hold_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_hold_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataHoldRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DataHoldRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataHoldRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.DataHoldRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.DataHoldRequest)
    MergeFrom(*source);
  }
}

void DataHoldRequest::MergeFrom(const DataHoldRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.data_hold_type() != 0) {
    _internal_set_data_hold_type(from._internal_data_hold_type());
  }
}

void DataHoldRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataHoldRequest::CopyFrom(const DataHoldRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.DataHoldRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHoldRequest::IsInitialized() const {
  return true;
}

void DataHoldRequest::InternalSwap(DataHoldRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataHoldRequest, data_hold_type_)
      + sizeof(DataHoldRequest::data_hold_type_)
      - PROTOBUF_FIELD_OFFSET(DataHoldRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataHoldRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpectrumLine::InitAsDefaultInstance() {
}
class SpectrumLine::_Internal {
 public:
};

SpectrumLine::SpectrumLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.SpectrumLine)
}
SpectrumLine::SpectrumLine(const SpectrumLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_points_(from.spectrum_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.SpectrumLine)
}

void SpectrumLine::SharedCtor() {
}

SpectrumLine::~SpectrumLine() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.SpectrumLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpectrumLine::ArenaDtor(void* object) {
  SpectrumLine* _this = reinterpret_cast< SpectrumLine* >(object);
  (void)_this;
}
void SpectrumLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpectrumLine& SpectrumLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpectrumLine_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void SpectrumLine::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.SpectrumLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float spectrum_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_spectrum_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.SpectrumLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float spectrum_points = 1;
  if (this->_internal_spectrum_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_spectrum_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.SpectrumLine)
  return target;
}

size_t SpectrumLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.SpectrumLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spectrum_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_points_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.SpectrumLine)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.SpectrumLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.SpectrumLine)
    MergeFrom(*source);
  }
}

void SpectrumLine::MergeFrom(const SpectrumLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.SpectrumLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_points_.MergeFrom(from.spectrum_points_);
}

void SpectrumLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.SpectrumLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumLine::CopyFrom(const SpectrumLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.SpectrumLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumLine::IsInitialized() const {
  return true;
}

void SpectrumLine::InternalSwap(SpectrumLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_points_.InternalSwap(&other->spectrum_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpectrumBlock::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_SpectrumBlock_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_SpectrumBlock_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class SpectrumBlock::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const SpectrumBlock* msg);
  static const ::zb::dcts::TimeSpan& time_span(const SpectrumBlock* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
SpectrumBlock::_Internal::signal_band(const SpectrumBlock* msg) {
  return *msg->signal_band_;
}
const ::zb::dcts::TimeSpan&
SpectrumBlock::_Internal::time_span(const SpectrumBlock* msg) {
  return *msg->time_span_;
}
void SpectrumBlock::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
SpectrumBlock::SpectrumBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.SpectrumBlock)
}
SpectrumBlock::SpectrumBlock(const SpectrumBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_lines_(from.spectrum_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.SpectrumBlock)
}

void SpectrumBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpectrumBlock_scenario_2fspectrum_2eproto.base);
  ::memset(&signal_band_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_span_) -
      reinterpret_cast<char*>(&signal_band_)) + sizeof(time_span_));
}

SpectrumBlock::~SpectrumBlock() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.SpectrumBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signal_band_;
  if (this != internal_default_instance()) delete time_span_;
}

void SpectrumBlock::ArenaDtor(void* object) {
  SpectrumBlock* _this = reinterpret_cast< SpectrumBlock* >(object);
  (void)_this;
}
void SpectrumBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpectrumBlock& SpectrumBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpectrumBlock_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void SpectrumBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_lines_.Clear();
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.spectrum.SpectrumLine spectrum_lines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spectrum_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // repeated .zb.dcts.scenario.spectrum.SpectrumLine spectrum_lines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spectrum_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_spectrum_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.SpectrumBlock)
  return target;
}

size_t SpectrumBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.SpectrumLine spectrum_lines = 4;
  total_size += 1UL * this->_internal_spectrum_lines_size();
  for (const auto& msg : this->spectrum_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.SpectrumBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.SpectrumBlock)
    MergeFrom(*source);
  }
}

void SpectrumBlock::MergeFrom(const SpectrumBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_lines_.MergeFrom(from.spectrum_lines_);
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
}

void SpectrumBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumBlock::CopyFrom(const SpectrumBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.SpectrumBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumBlock::IsInitialized() const {
  return true;
}

void SpectrumBlock::InternalSwap(SpectrumBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_lines_.InternalSwap(&other->spectrum_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectrumBlock, time_span_)
      + sizeof(SpectrumBlock::time_span_)
      - PROTOBUF_FIELD_OFFSET(SpectrumBlock, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZoomInRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_ZoomInRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_ZoomInRequest_default_instance_._instance.get_mutable()->zoom_in_part_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySegment*>(
      ::zb::dcts::scenario::spectrum::FrequencySegment::internal_default_instance());
}
class ZoomInRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ZoomInRequest* msg);
  static const ::zb::dcts::scenario::spectrum::FrequencySegment& zoom_in_part(const ZoomInRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ZoomInRequest::_Internal::responser(const ZoomInRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::spectrum::FrequencySegment&
ZoomInRequest::_Internal::zoom_in_part(const ZoomInRequest* msg) {
  return *msg->zoom_in_part_;
}
void ZoomInRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
ZoomInRequest::ZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.ZoomInRequest)
}
ZoomInRequest::ZoomInRequest(const ZoomInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_zoom_in_part()) {
    zoom_in_part_ = new ::zb::dcts::scenario::spectrum::FrequencySegment(*from.zoom_in_part_);
  } else {
    zoom_in_part_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.ZoomInRequest)
}

void ZoomInRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZoomInRequest_scenario_2fspectrum_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_in_part_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(zoom_in_part_));
}

ZoomInRequest::~ZoomInRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.ZoomInRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZoomInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete zoom_in_part_;
}

void ZoomInRequest::ArenaDtor(void* object) {
  ZoomInRequest* _this = reinterpret_cast< ZoomInRequest* >(object);
  (void)_this;
}
void ZoomInRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoomInRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZoomInRequest& ZoomInRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZoomInRequest_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void ZoomInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && zoom_in_part_ != nullptr) {
    delete zoom_in_part_;
  }
  zoom_in_part_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoomInRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySegment zoom_in_part = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_in_part(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoomInRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.FrequencySegment zoom_in_part = 2;
  if (this->has_zoom_in_part()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::zoom_in_part(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.ZoomInRequest)
  return target;
}

size_t ZoomInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.spectrum.FrequencySegment zoom_in_part = 2;
  if (this->has_zoom_in_part()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_in_part_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoomInRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ZoomInRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZoomInRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.ZoomInRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.ZoomInRequest)
    MergeFrom(*source);
  }
}

void ZoomInRequest::MergeFrom(const ZoomInRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_zoom_in_part()) {
    _internal_mutable_zoom_in_part()->::zb::dcts::scenario::spectrum::FrequencySegment::MergeFrom(from._internal_zoom_in_part());
  }
}

void ZoomInRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoomInRequest::CopyFrom(const ZoomInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.ZoomInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoomInRequest::IsInitialized() const {
  return true;
}

void ZoomInRequest::InternalSwap(ZoomInRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoomInRequest, zoom_in_part_)
      + sizeof(ZoomInRequest::zoom_in_part_)
      - PROTOBUF_FIELD_OFFSET(ZoomInRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoomInRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

View_TracesEntry_DoNotUse::View_TracesEntry_DoNotUse() {}
View_TracesEntry_DoNotUse::View_TracesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void View_TracesEntry_DoNotUse::MergeFrom(const View_TracesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata View_TracesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void View_TracesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void View::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_View_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
}
class View::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const View* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
View::_Internal::freq_span(const View* msg) {
  return *msg->freq_span_;
}
View::View(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.View)
}
View::View(const View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  traces_.MergeFrom(from.traces_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.View)
}

void View::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_View_scenario_2fspectrum_2eproto.base);
  freq_span_ = nullptr;
}

View::~View() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.View)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void View::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void View::ArenaDtor(void* object) {
  View* _this = reinterpret_cast< View* >(object);
  (void)_this;
}
void View::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const View& View::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_View_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void View::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traces_.Clear();
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .zb.dcts.scenario.spectrum.SpectrumLine> traces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&traces_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* View::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // map<string, .zb.dcts.scenario.spectrum.SpectrumLine> traces = 2;
  if (!this->_internal_traces().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.spectrum.View.TracesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_traces().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_traces().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >::const_iterator
          it = this->_internal_traces().begin();
          it != this->_internal_traces().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = View_TracesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >::const_iterator
          it = this->_internal_traces().begin();
          it != this->_internal_traces().end(); ++it) {
        target = View_TracesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .zb.dcts.scenario.spectrum.SpectrumLine> traces = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_traces_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >::const_iterator
      it = this->_internal_traces().begin();
      it != this->_internal_traces().end(); ++it) {
    total_size += View_TracesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
}

void View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traces_.Swap(&other->traces_);
  swap(freq_span_, other->freq_span_);
}

::PROTOBUF_NAMESPACE_ID::Metadata View::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const Header* msg);
  static const ::zb::dcts::Position& device_position(const Header* msg);
};

const ::zb::dcts::source::SourceId&
Header::_Internal::result_from(const Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
Header::_Internal::time_span(const Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
Header::_Internal::device_position(const Header* msg) {
  return *msg->device_position_;
}
void Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_id().empty()) {
    record_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_id(),
      GetArena());
  }
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_scenario_2fspectrum_2eproto.base);
  record_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sweep_count_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string record_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.spectrum.Header.record_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_record_id().data(), static_cast<int>(this->_internal_record_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.spectrum.Header.record_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_record_id(), target);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string record_id = 2;
  if (this->record_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_record_id());
  }

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.record_id().size() > 0) {
    _internal_set_record_id(from._internal_record_id());
  }
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  record_id_.Swap(&other->record_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, sweep_count_)
      + sizeof(Header::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentHeader::InitAsDefaultInstance() {
  ::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class SegmentHeader::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const SegmentHeader* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const SegmentHeader* msg);
  static const ::zb::dcts::Position& position(const SegmentHeader* msg);
};

const ::zb::dcts::source::SourceId&
SegmentHeader::_Internal::result_from(const SegmentHeader* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
SegmentHeader::_Internal::time_stamp(const SegmentHeader* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
SegmentHeader::_Internal::position(const SegmentHeader* msg) {
  return *msg->position_;
}
void SegmentHeader::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void SegmentHeader::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void SegmentHeader::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SegmentHeader::SegmentHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.spectrum.SegmentHeader)
}
SegmentHeader::SegmentHeader(const SegmentHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_step_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(frequency_step_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.spectrum.SegmentHeader)
}

void SegmentHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentHeader_scenario_2fspectrum_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_step_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(frequency_step_));
}

SegmentHeader::~SegmentHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.spectrum.SegmentHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SegmentHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete position_;
}

void SegmentHeader::ArenaDtor(void* object) {
  SegmentHeader* _this = reinterpret_cast< SegmentHeader* >(object);
  (void)_this;
}
void SegmentHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SegmentHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentHeader& SegmentHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentHeader_scenario_2fspectrum_2eproto.base);
  return *internal_default_instance();
}


void SegmentHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.spectrum.SegmentHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_step_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(frequency_step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SegmentHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sweep_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segment_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_frequency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          start_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frequency_step = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          frequency_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 num_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.spectrum.SegmentHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sweep_index(), target);
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_segment_index(), target);
  }

  // double start_frequency = 6;
  if (!(this->start_frequency() <= 0 && this->start_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_start_frequency(), target);
  }

  // double frequency_step = 7;
  if (!(this->frequency_step() <= 0 && this->frequency_step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_frequency_step(), target);
  }

  // uint32 num_points = 8;
  if (this->num_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_num_points(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.spectrum.SegmentHeader)
  return target;
}

size_t SegmentHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.spectrum.SegmentHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position position = 15;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint64 sweep_index = 4;
  if (this->sweep_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sweep_index());
  }

  // double start_frequency = 6;
  if (!(this->start_frequency() <= 0 && this->start_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 segment_index = 5;
  if (this->segment_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_segment_index());
  }

  // uint32 num_points = 8;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_points());
  }

  // double frequency_step = 7;
  if (!(this->frequency_step() <= 0 && this->frequency_step() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.spectrum.SegmentHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.spectrum.SegmentHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.spectrum.SegmentHeader)
    MergeFrom(*source);
  }
}

void SegmentHeader::MergeFrom(const SegmentHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.spectrum.SegmentHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_index() != 0) {
    _internal_set_sweep_index(from._internal_sweep_index());
  }
  if (!(from.start_frequency() <= 0 && from.start_frequency() >= 0)) {
    _internal_set_start_frequency(from._internal_start_frequency());
  }
  if (from.segment_index() != 0) {
    _internal_set_segment_index(from._internal_segment_index());
  }
  if (from.num_points() != 0) {
    _internal_set_num_points(from._internal_num_points());
  }
  if (!(from.frequency_step() <= 0 && from.frequency_step() >= 0)) {
    _internal_set_frequency_step(from._internal_frequency_step());
  }
}

void SegmentHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.spectrum.SegmentHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentHeader::CopyFrom(const SegmentHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.spectrum.SegmentHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentHeader::IsInitialized() const {
  return true;
}

void SegmentHeader::InternalSwap(SegmentHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SegmentHeader, frequency_step_)
      + sizeof(SegmentHeader::frequency_step_)
      - PROTOBUF_FIELD_OFFSET(SegmentHeader, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spectrum
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::FrequencySpan* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencySpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::FrequencySpan >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::FrequencySegment* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencySegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::FrequencySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::FrequencyPos* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencyPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::FrequencyPos >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::FrequencyBand* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencyBand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::FrequencyBand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::FrequencyRange* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencyRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::FrequencyRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::SignalBand* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::SignalBand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::SignalBand >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::DDCBank* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::DDCBank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::DDCBank >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::DataHoldRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::DataHoldRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::DataHoldRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::SpectrumLine* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::SpectrumLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::SpectrumLine >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::SpectrumBlock* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::SpectrumBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::SpectrumBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::ZoomInRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::ZoomInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::ZoomInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::View* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::View >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::View >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::spectrum::SegmentHeader* Arena::CreateMaybeMessage< ::zb::dcts::scenario::spectrum::SegmentHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::spectrum::SegmentHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
