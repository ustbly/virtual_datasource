// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/DF.proto

#include "scenario/DF.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOA_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DFSource_scenario_2fDF_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DirectionFindingSignal_scenario_2fDF_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DirectionFindingSignals_scenario_2fDF_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalDirection_scenario_2fDF_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace DF {
class DirectionFindingSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectionFindingSignal> _instance;
} _DirectionFindingSignal_default_instance_;
class DirectionFindingSignalsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectionFindingSignals> _instance;
} _DirectionFindingSignals_default_instance_;
class SignalDirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalDirection> _instance;
} _SignalDirection_default_instance_;
class DirectionFindingResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectionFindingResult> _instance;
} _DirectionFindingResult_default_instance_;
class DFSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DFSource> _instance;
} _DFSource_default_instance_;
class DirectionFindingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectionFindingRequest> _instance;
} _DirectionFindingRequest_default_instance_;
class ChangeSignalsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeSignalsRequest> _instance;
} _ChangeSignalsRequest_default_instance_;
}  // namespace DF
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ChangeSignalsRequest_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_ChangeSignalsRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::ChangeSignalsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::ChangeSignalsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeSignalsRequest_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeSignalsRequest_scenario_2fDF_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base,}};

static void InitDefaultsscc_info_DFSource_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_DFSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::DFSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::DFSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DFSource_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DFSource_scenario_2fDF_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_DirectionFindingRequest_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_DirectionFindingRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::DirectionFindingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::DirectionFindingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DirectionFindingRequest_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DirectionFindingRequest_scenario_2fDF_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_DFSource_scenario_2fDF_2eproto.base,
      &scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base,}};

static void InitDefaultsscc_info_DirectionFindingResult_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_DirectionFindingResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::DirectionFindingResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::DirectionFindingResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DirectionFindingResult_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DirectionFindingResult_scenario_2fDF_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,
      &scc_info_SignalDirection_scenario_2fDF_2eproto.base,}};

static void InitDefaultsscc_info_DirectionFindingSignal_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_DirectionFindingSignal_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::DirectionFindingSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::DirectionFindingSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DirectionFindingSignal_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DirectionFindingSignal_scenario_2fDF_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_DirectionFindingSignals_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_DirectionFindingSignals_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::DirectionFindingSignals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::DirectionFindingSignals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DirectionFindingSignals_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DirectionFindingSignals_scenario_2fDF_2eproto}, {
      &scc_info_DirectionFindingSignal_scenario_2fDF_2eproto.base,}};

static void InitDefaultsscc_info_SignalDirection_scenario_2fDF_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::DF::_SignalDirection_default_instance_;
    new (ptr) ::zb::dcts::scenario::DF::SignalDirection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::DF::SignalDirection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalDirection_scenario_2fDF_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignalDirection_scenario_2fDF_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,
      &scc_info_DOA_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fDF_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenario_2fDF_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fDF_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fDF_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingSignal, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingSignal, signal_band_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingSignals, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::SignalDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::SignalDirection, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::SignalDirection, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::SignalDirection, direction_of_arrival_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingResult, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingResult, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingResult, position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingResult, signals_direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DFSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DFSource, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingRequest, source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::DirectionFindingRequest, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::ChangeSignalsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::ChangeSignalsRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::DF::ChangeSignalsRequest, param_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::DF::DirectionFindingSignal)},
  { 7, -1, sizeof(::zb::dcts::scenario::DF::DirectionFindingSignals)},
  { 13, -1, sizeof(::zb::dcts::scenario::DF::SignalDirection)},
  { 21, -1, sizeof(::zb::dcts::scenario::DF::DirectionFindingResult)},
  { 30, -1, sizeof(::zb::dcts::scenario::DF::DFSource)},
  { 36, -1, sizeof(::zb::dcts::scenario::DF::DirectionFindingRequest)},
  { 44, -1, sizeof(::zb::dcts::scenario::DF::ChangeSignalsRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_DirectionFindingSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_DirectionFindingSignals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_SignalDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_DirectionFindingResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_DFSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_DirectionFindingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::DF::_ChangeSignalsRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fDF_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021scenario/DF.proto\022\023zb.dcts.scenario.DF"
  "\032\ndcts.proto\032\023source/source.proto\032\027scena"
  "rio/scenario.proto\032\027scenario/spectrum.pr"
  "oto\"`\n\026DirectionFindingSignal\022\n\n\002id\030\001 \001("
  "\t\022:\n\013signal_band\030\002 \001(\0132%.zb.dcts.scenari"
  "o.spectrum.SignalBand\"W\n\027DirectionFindin"
  "gSignals\022<\n\007targets\030\001 \003(\0132+.zb.dcts.scen"
  "ario.DF.DirectionFindingSignal\"\205\001\n\017Signa"
  "lDirection\022\n\n\002id\030\001 \001(\t\022:\n\013signal_band\030\002 "
  "\001(\0132%.zb.dcts.scenario.spectrum.SignalBa"
  "nd\022*\n\024direction_of_arrival\030\003 \001(\0132\014.zb.dc"
  "ts.DOA\"\325\001\n\026DirectionFindingResult\022-\n\013res"
  "ult_from\030\001 \001(\0132\030.zb.dcts.source.SourceId"
  "\022&\n\ntime_stamp\030\002 \001(\0132\022.zb.dcts.Timestamp"
  "\022#\n\010position\030\003 \001(\0132\021.zb.dcts.Position\022\?\n"
  "\021signals_direction\030\004 \003(\0132$.zb.dcts.scena"
  "rio.DF.SignalDirection\"4\n\010DFSource\022(\n\006so"
  "urce\030\001 \001(\0132\030.zb.dcts.source.SourceId\"\265\001\n"
  "\027DirectionFindingRequest\022.\n\010scenario\030\001 \001"
  "(\0132\034.zb.dcts.scenario.ScenarioId\022-\n\006sour"
  "ce\030\002 \001(\0132\035.zb.dcts.scenario.DF.DFSource\022"
  ";\n\005param\030\003 \001(\0132,.zb.dcts.scenario.DF.Dir"
  "ectionFindingSignals\"\210\001\n\024ChangeSignalsRe"
  "quest\0223\n\tresponser\030\001 \001(\0132 .zb.dcts.scena"
  "rio.ScenarioTaskId\022;\n\005param\030\002 \001(\0132,.zb.d"
  "cts.scenario.DF.DirectionFindingSignals2"
  "\217\003\n\027DirectionFindingService\022^\n\013StartDFTa"
  "sk\022,.zb.dcts.scenario.DF.DirectionFindin"
  "gRequest\032\037.zb.dcts.scenario.ScenarioRepl"
  "y\"\000\022_\n\017ChangeDFSignals\022).zb.dcts.scenari"
  "o.DF.ChangeSignalsRequest\032\037.zb.dcts.scen"
  "ario.ScenarioReply\"\000\022`\n\013GetDFResult\022 .zb"
  ".dcts.scenario.ScenarioTaskId\032+.zb.dcts."
  "scenario.DF.DirectionFindingResult\"\0000\001\022Q"
  "\n\nStopDFTask\022 .zb.dcts.scenario.Scenario"
  "TaskId\032\037.zb.dcts.scenario.ScenarioReply\""
  "\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fDF_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fDF_2eproto_sccs[7] = {
  &scc_info_ChangeSignalsRequest_scenario_2fDF_2eproto.base,
  &scc_info_DFSource_scenario_2fDF_2eproto.base,
  &scc_info_DirectionFindingRequest_scenario_2fDF_2eproto.base,
  &scc_info_DirectionFindingResult_scenario_2fDF_2eproto.base,
  &scc_info_DirectionFindingSignal_scenario_2fDF_2eproto.base,
  &scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base,
  &scc_info_SignalDirection_scenario_2fDF_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fDF_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fDF_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fDF_2eproto, "scenario/DF.proto", 1449,
  &descriptor_table_scenario_2fDF_2eproto_once, descriptor_table_scenario_2fDF_2eproto_sccs, descriptor_table_scenario_2fDF_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_scenario_2fDF_2eproto::offsets,
  file_level_metadata_scenario_2fDF_2eproto, 7, file_level_enum_descriptors_scenario_2fDF_2eproto, file_level_service_descriptors_scenario_2fDF_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fDF_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fDF_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace DF {

// ===================================================================

void DirectionFindingSignal::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_DirectionFindingSignal_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
}
class DirectionFindingSignal::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const DirectionFindingSignal* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
DirectionFindingSignal::_Internal::signal_band(const DirectionFindingSignal* msg) {
  return *msg->signal_band_;
}
void DirectionFindingSignal::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
DirectionFindingSignal::DirectionFindingSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.DirectionFindingSignal)
}
DirectionFindingSignal::DirectionFindingSignal(const DirectionFindingSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.DirectionFindingSignal)
}

void DirectionFindingSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectionFindingSignal_scenario_2fDF_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_band_ = nullptr;
}

DirectionFindingSignal::~DirectionFindingSignal() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.DirectionFindingSignal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionFindingSignal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signal_band_;
}

void DirectionFindingSignal::ArenaDtor(void* object) {
  DirectionFindingSignal* _this = reinterpret_cast< DirectionFindingSignal* >(object);
  (void)_this;
}
void DirectionFindingSignal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionFindingSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectionFindingSignal& DirectionFindingSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectionFindingSignal_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void DirectionFindingSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionFindingSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.DF.DirectionFindingSignal.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionFindingSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.DF.DirectionFindingSignal.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.DirectionFindingSignal)
  return target;
}

size_t DirectionFindingSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionFindingSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionFindingSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionFindingSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.DirectionFindingSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.DirectionFindingSignal)
    MergeFrom(*source);
  }
}

void DirectionFindingSignal::MergeFrom(const DirectionFindingSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
}

void DirectionFindingSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionFindingSignal::CopyFrom(const DirectionFindingSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.DirectionFindingSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionFindingSignal::IsInitialized() const {
  return true;
}

void DirectionFindingSignal::InternalSwap(DirectionFindingSignal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(signal_band_, other->signal_band_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionFindingSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectionFindingSignals::InitAsDefaultInstance() {
}
class DirectionFindingSignals::_Internal {
 public:
};

DirectionFindingSignals::DirectionFindingSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.DirectionFindingSignals)
}
DirectionFindingSignals::DirectionFindingSignals(const DirectionFindingSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.DirectionFindingSignals)
}

void DirectionFindingSignals::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base);
}

DirectionFindingSignals::~DirectionFindingSignals() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.DirectionFindingSignals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionFindingSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DirectionFindingSignals::ArenaDtor(void* object) {
  DirectionFindingSignals* _this = reinterpret_cast< DirectionFindingSignals* >(object);
  (void)_this;
}
void DirectionFindingSignals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionFindingSignals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectionFindingSignals& DirectionFindingSignals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void DirectionFindingSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionFindingSignals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.DF.DirectionFindingSignal targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionFindingSignals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.DF.DirectionFindingSignal targets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_targets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.DirectionFindingSignals)
  return target;
}

size_t DirectionFindingSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.DF.DirectionFindingSignal targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionFindingSignals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionFindingSignals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionFindingSignals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.DirectionFindingSignals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.DirectionFindingSignals)
    MergeFrom(*source);
  }
}

void DirectionFindingSignals::MergeFrom(const DirectionFindingSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
}

void DirectionFindingSignals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionFindingSignals::CopyFrom(const DirectionFindingSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.DirectionFindingSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionFindingSignals::IsInitialized() const {
  return true;
}

void DirectionFindingSignals::InternalSwap(DirectionFindingSignals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionFindingSignals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalDirection::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_SignalDirection_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
  ::zb::dcts::scenario::DF::_SignalDirection_default_instance_._instance.get_mutable()->direction_of_arrival_ = const_cast< ::zb::dcts::DOA*>(
      ::zb::dcts::DOA::internal_default_instance());
}
class SignalDirection::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const SignalDirection* msg);
  static const ::zb::dcts::DOA& direction_of_arrival(const SignalDirection* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
SignalDirection::_Internal::signal_band(const SignalDirection* msg) {
  return *msg->signal_band_;
}
const ::zb::dcts::DOA&
SignalDirection::_Internal::direction_of_arrival(const SignalDirection* msg) {
  return *msg->direction_of_arrival_;
}
void SignalDirection::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
void SignalDirection::clear_direction_of_arrival() {
  if (GetArena() == nullptr && direction_of_arrival_ != nullptr) {
    delete direction_of_arrival_;
  }
  direction_of_arrival_ = nullptr;
}
SignalDirection::SignalDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.SignalDirection)
}
SignalDirection::SignalDirection(const SignalDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  if (from._internal_has_direction_of_arrival()) {
    direction_of_arrival_ = new ::zb::dcts::DOA(*from.direction_of_arrival_);
  } else {
    direction_of_arrival_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.SignalDirection)
}

void SignalDirection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalDirection_scenario_2fDF_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&signal_band_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_of_arrival_) -
      reinterpret_cast<char*>(&signal_band_)) + sizeof(direction_of_arrival_));
}

SignalDirection::~SignalDirection() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.SignalDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signal_band_;
  if (this != internal_default_instance()) delete direction_of_arrival_;
}

void SignalDirection::ArenaDtor(void* object) {
  SignalDirection* _this = reinterpret_cast< SignalDirection* >(object);
  (void)_this;
}
void SignalDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalDirection& SignalDirection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalDirection_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void SignalDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.SignalDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  if (GetArena() == nullptr && direction_of_arrival_ != nullptr) {
    delete direction_of_arrival_;
  }
  direction_of_arrival_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.DF.SignalDirection.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.DOA direction_of_arrival = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction_of_arrival(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.SignalDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.DF.SignalDirection.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // .zb.dcts.DOA direction_of_arrival = 3;
  if (this->has_direction_of_arrival()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::direction_of_arrival(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.SignalDirection)
  return target;
}

size_t SignalDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.SignalDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // .zb.dcts.DOA direction_of_arrival = 3;
  if (this->has_direction_of_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_of_arrival_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.SignalDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.SignalDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.SignalDirection)
    MergeFrom(*source);
  }
}

void SignalDirection::MergeFrom(const SignalDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.SignalDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (from.has_direction_of_arrival()) {
    _internal_mutable_direction_of_arrival()->::zb::dcts::DOA::MergeFrom(from._internal_direction_of_arrival());
  }
}

void SignalDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.SignalDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalDirection::CopyFrom(const SignalDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.SignalDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalDirection::IsInitialized() const {
  return true;
}

void SignalDirection::InternalSwap(SignalDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalDirection, direction_of_arrival_)
      + sizeof(SignalDirection::direction_of_arrival_)
      - PROTOBUF_FIELD_OFFSET(SignalDirection, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectionFindingResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_DirectionFindingResult_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::DF::_DirectionFindingResult_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::DF::_DirectionFindingResult_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class DirectionFindingResult::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const DirectionFindingResult* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const DirectionFindingResult* msg);
  static const ::zb::dcts::Position& position(const DirectionFindingResult* msg);
};

const ::zb::dcts::source::SourceId&
DirectionFindingResult::_Internal::result_from(const DirectionFindingResult* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
DirectionFindingResult::_Internal::time_stamp(const DirectionFindingResult* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
DirectionFindingResult::_Internal::position(const DirectionFindingResult* msg) {
  return *msg->position_;
}
void DirectionFindingResult::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void DirectionFindingResult::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void DirectionFindingResult::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
DirectionFindingResult::DirectionFindingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signals_direction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.DirectionFindingResult)
}
DirectionFindingResult::DirectionFindingResult(const DirectionFindingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signals_direction_(from.signals_direction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.DirectionFindingResult)
}

void DirectionFindingResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectionFindingResult_scenario_2fDF_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(position_));
}

DirectionFindingResult::~DirectionFindingResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.DirectionFindingResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionFindingResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete position_;
}

void DirectionFindingResult::ArenaDtor(void* object) {
  DirectionFindingResult* _this = reinterpret_cast< DirectionFindingResult* >(object);
  (void)_this;
}
void DirectionFindingResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionFindingResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectionFindingResult& DirectionFindingResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectionFindingResult_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void DirectionFindingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.DirectionFindingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signals_direction_.Clear();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionFindingResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.DF.SignalDirection signals_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signals_direction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionFindingResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.DirectionFindingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // .zb.dcts.Timestamp time_stamp = 2;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // repeated .zb.dcts.scenario.DF.SignalDirection signals_direction = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signals_direction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_signals_direction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.DirectionFindingResult)
  return target;
}

size_t DirectionFindingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.DirectionFindingResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.DF.SignalDirection signals_direction = 4;
  total_size += 1UL * this->_internal_signals_direction_size();
  for (const auto& msg : this->signals_direction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 2;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionFindingResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.DirectionFindingResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionFindingResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionFindingResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.DirectionFindingResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.DirectionFindingResult)
    MergeFrom(*source);
  }
}

void DirectionFindingResult::MergeFrom(const DirectionFindingResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.DirectionFindingResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signals_direction_.MergeFrom(from.signals_direction_);
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
}

void DirectionFindingResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.DirectionFindingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionFindingResult::CopyFrom(const DirectionFindingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.DirectionFindingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionFindingResult::IsInitialized() const {
  return true;
}

void DirectionFindingResult::InternalSwap(DirectionFindingResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signals_direction_.InternalSwap(&other->signals_direction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionFindingResult, position_)
      + sizeof(DirectionFindingResult::position_)
      - PROTOBUF_FIELD_OFFSET(DirectionFindingResult, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionFindingResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DFSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_DFSource_default_instance_._instance.get_mutable()->source_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class DFSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source(const DFSource* msg);
};

const ::zb::dcts::source::SourceId&
DFSource::_Internal::source(const DFSource* msg) {
  return *msg->source_;
}
void DFSource::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
DFSource::DFSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.DFSource)
}
DFSource::DFSource(const DFSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::source::SourceId(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.DFSource)
}

void DFSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DFSource_scenario_2fDF_2eproto.base);
  source_ = nullptr;
}

DFSource::~DFSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.DFSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DFSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
}

void DFSource::ArenaDtor(void* object) {
  DFSource* _this = reinterpret_cast< DFSource* >(object);
  (void)_this;
}
void DFSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DFSource& DFSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DFSource_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void DFSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.DFSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.DFSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.DFSource)
  return target;
}

size_t DFSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.DFSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DFSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.DFSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DFSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DFSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.DFSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.DFSource)
    MergeFrom(*source);
  }
}

void DFSource::MergeFrom(const DFSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.DFSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source());
  }
}

void DFSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.DFSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DFSource::CopyFrom(const DFSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.DFSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFSource::IsInitialized() const {
  return true;
}

void DFSource::InternalSwap(DFSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(source_, other->source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DFSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectionFindingRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_DirectionFindingRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::DF::_DirectionFindingRequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::zb::dcts::scenario::DF::DFSource*>(
      ::zb::dcts::scenario::DF::DFSource::internal_default_instance());
  ::zb::dcts::scenario::DF::_DirectionFindingRequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      ::zb::dcts::scenario::DF::DirectionFindingSignals::internal_default_instance());
}
class DirectionFindingRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const DirectionFindingRequest* msg);
  static const ::zb::dcts::scenario::DF::DFSource& source(const DirectionFindingRequest* msg);
  static const ::zb::dcts::scenario::DF::DirectionFindingSignals& param(const DirectionFindingRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
DirectionFindingRequest::_Internal::scenario(const DirectionFindingRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::DF::DFSource&
DirectionFindingRequest::_Internal::source(const DirectionFindingRequest* msg) {
  return *msg->source_;
}
const ::zb::dcts::scenario::DF::DirectionFindingSignals&
DirectionFindingRequest::_Internal::param(const DirectionFindingRequest* msg) {
  return *msg->param_;
}
void DirectionFindingRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
DirectionFindingRequest::DirectionFindingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.DirectionFindingRequest)
}
DirectionFindingRequest::DirectionFindingRequest(const DirectionFindingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::scenario::DF::DFSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::DF::DirectionFindingSignals(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.DirectionFindingRequest)
}

void DirectionFindingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectionFindingRequest_scenario_2fDF_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(param_));
}

DirectionFindingRequest::~DirectionFindingRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.DirectionFindingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionFindingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete param_;
}

void DirectionFindingRequest::ArenaDtor(void* object) {
  DirectionFindingRequest* _this = reinterpret_cast< DirectionFindingRequest* >(object);
  (void)_this;
}
void DirectionFindingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionFindingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectionFindingRequest& DirectionFindingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectionFindingRequest_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void DirectionFindingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionFindingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.DF.DFSource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.DF.DirectionFindingSignals param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionFindingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.DF.DFSource source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 3;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.DirectionFindingRequest)
  return target;
}

size_t DirectionFindingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.DF.DFSource source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 3;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionFindingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionFindingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionFindingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.DirectionFindingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.DirectionFindingRequest)
    MergeFrom(*source);
  }
}

void DirectionFindingRequest::MergeFrom(const DirectionFindingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::scenario::DF::DFSource::MergeFrom(from._internal_source());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::DF::DirectionFindingSignals::MergeFrom(from._internal_param());
  }
}

void DirectionFindingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionFindingRequest::CopyFrom(const DirectionFindingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.DirectionFindingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionFindingRequest::IsInitialized() const {
  return true;
}

void DirectionFindingRequest::InternalSwap(DirectionFindingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionFindingRequest, param_)
      + sizeof(DirectionFindingRequest::param_)
      - PROTOBUF_FIELD_OFFSET(DirectionFindingRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionFindingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeSignalsRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::DF::_ChangeSignalsRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::DF::_ChangeSignalsRequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      ::zb::dcts::scenario::DF::DirectionFindingSignals::internal_default_instance());
}
class ChangeSignalsRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ChangeSignalsRequest* msg);
  static const ::zb::dcts::scenario::DF::DirectionFindingSignals& param(const ChangeSignalsRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ChangeSignalsRequest::_Internal::responser(const ChangeSignalsRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::DF::DirectionFindingSignals&
ChangeSignalsRequest::_Internal::param(const ChangeSignalsRequest* msg) {
  return *msg->param_;
}
void ChangeSignalsRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
ChangeSignalsRequest::ChangeSignalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.DF.ChangeSignalsRequest)
}
ChangeSignalsRequest::ChangeSignalsRequest(const ChangeSignalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::DF::DirectionFindingSignals(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.DF.ChangeSignalsRequest)
}

void ChangeSignalsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeSignalsRequest_scenario_2fDF_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(param_));
}

ChangeSignalsRequest::~ChangeSignalsRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.DF.ChangeSignalsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeSignalsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete param_;
}

void ChangeSignalsRequest::ArenaDtor(void* object) {
  ChangeSignalsRequest* _this = reinterpret_cast< ChangeSignalsRequest* >(object);
  (void)_this;
}
void ChangeSignalsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeSignalsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeSignalsRequest& ChangeSignalsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeSignalsRequest_scenario_2fDF_2eproto.base);
  return *internal_default_instance();
}


void ChangeSignalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSignalsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.DF.DirectionFindingSignals param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeSignalsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 2;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.DF.ChangeSignalsRequest)
  return target;
}

size_t ChangeSignalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 2;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeSignalsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeSignalsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeSignalsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.DF.ChangeSignalsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.DF.ChangeSignalsRequest)
    MergeFrom(*source);
  }
}

void ChangeSignalsRequest::MergeFrom(const ChangeSignalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::DF::DirectionFindingSignals::MergeFrom(from._internal_param());
  }
}

void ChangeSignalsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSignalsRequest::CopyFrom(const ChangeSignalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.DF.ChangeSignalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSignalsRequest::IsInitialized() const {
  return true;
}

void ChangeSignalsRequest::InternalSwap(ChangeSignalsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeSignalsRequest, param_)
      + sizeof(ChangeSignalsRequest::param_)
      - PROTOBUF_FIELD_OFFSET(ChangeSignalsRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSignalsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DF
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::DirectionFindingSignal* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::DirectionFindingSignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::DirectionFindingSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::DirectionFindingSignals* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::DirectionFindingSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::DirectionFindingSignals >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::SignalDirection* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::SignalDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::SignalDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::DirectionFindingResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::DirectionFindingResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::DirectionFindingResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::DFSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::DFSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::DFSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::DirectionFindingRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::DirectionFindingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::DirectionFindingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::DF::ChangeSignalsRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::DF::ChangeSignalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::DF::ChangeSignalsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
