// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/auto.proto

#include "scenario/auto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DirectionFindingSignals_scenario_2fDF_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fauto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutoWork_scenario_2fauto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fauto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoWorkChain_scenario_2fauto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fauto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkTiming_scenario_2fauto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace automatic {
class WorkTimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkTiming> _instance;
} _WorkTiming_default_instance_;
class AutoWorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoWork> _instance;
} _AutoWork_default_instance_;
class AutoWorkChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoWorkChain> _instance;
} _AutoWorkChain_default_instance_;
class CreateAutoMCPRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAutoMCPRequest> _instance;
} _CreateAutoMCPRequest_default_instance_;
class InsertDFCommandParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertDFCommandParam> _instance;
} _InsertDFCommandParam_default_instance_;
class ChangeSweepCommandParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeSweepCommandParam> _instance;
} _ChangeSweepCommandParam_default_instance_;
}  // namespace automatic
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AutoWork_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_AutoWork_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::AutoWork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::AutoWork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AutoWork_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AutoWork_scenario_2fauto_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_WorkTiming_scenario_2fauto_2eproto.base,}};

static void InitDefaultsscc_info_AutoWorkChain_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_AutoWorkChain_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::AutoWorkChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::AutoWorkChain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AutoWorkChain_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AutoWorkChain_scenario_2fauto_2eproto}, {
      &scc_info_AutoWork_scenario_2fauto_2eproto.base,}};

static void InitDefaultsscc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_ChangeSweepCommandParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::ChangeSweepCommandParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::ChangeSweepCommandParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto}, {
      &scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto.base,
      &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_CreateAutoMCPRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::CreateAutoMCPRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::CreateAutoMCPRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto}, {
      &scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto.base,
      &scc_info_AutoWorkChain_scenario_2fauto_2eproto.base,}};

static void InitDefaultsscc_info_InsertDFCommandParam_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_InsertDFCommandParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::InsertDFCommandParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::InsertDFCommandParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InsertDFCommandParam_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InsertDFCommandParam_scenario_2fauto_2eproto}, {
      &scc_info_DirectionFindingSignals_scenario_2fDF_2eproto.base,
      &scc_info_WorkTiming_scenario_2fauto_2eproto.base,}};

static void InitDefaultsscc_info_WorkTiming_scenario_2fauto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::automatic::_WorkTiming_default_instance_;
    new (ptr) ::zb::dcts::scenario::automatic::WorkTiming();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::automatic::WorkTiming::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkTiming_scenario_2fauto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkTiming_scenario_2fauto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fauto_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fauto_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fauto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fauto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::WorkTiming, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::WorkTiming, duration_in_msec_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::WorkTiming, execute_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWork, mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWork, executor_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWork, timing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWorkChain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::AutoWorkChain, works_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::CreateAutoMCPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::CreateAutoMCPRequest, mcp_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::CreateAutoMCPRequest, auto_work_chain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::InsertDFCommandParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::InsertDFCommandParam, targets_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::InsertDFCommandParam, timing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::ChangeSweepCommandParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::ChangeSweepCommandParam, pscan_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::automatic::ChangeSweepCommandParam, detection_param_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::automatic::WorkTiming)},
  { 7, -1, sizeof(::zb::dcts::scenario::automatic::AutoWork)},
  { 15, -1, sizeof(::zb::dcts::scenario::automatic::AutoWorkChain)},
  { 21, -1, sizeof(::zb::dcts::scenario::automatic::CreateAutoMCPRequest)},
  { 28, -1, sizeof(::zb::dcts::scenario::automatic::InsertDFCommandParam)},
  { 35, -1, sizeof(::zb::dcts::scenario::automatic::ChangeSweepCommandParam)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_WorkTiming_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_AutoWork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_AutoWorkChain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_CreateAutoMCPRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_InsertDFCommandParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::automatic::_ChangeSweepCommandParam_default_instance_),
};

const char descriptor_table_protodef_scenario_2fauto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023scenario/auto.proto\022\032zb.dcts.scenario."
  "automatic\032\030scenario/MCP/trunk.proto\032\021sce"
  "nario/DF.proto\032\027scenario/scenario.proto\032"
  "\030scenario/detection.proto\032\023source/source"
  ".proto\"=\n\nWorkTiming\022\030\n\020duration_in_msec"
  "\030\001 \001(\005\022\025\n\rexecute_times\030\002 \001(\005\"\350\001\n\010AutoWo"
  "rk\0227\n\004mode\030\001 \001(\0162).zb.dcts.scenario.auto"
  "matic.AutoWork.Mode\022*\n\010executor\030\002 \001(\0132\030."
  "zb.dcts.source.SourceId\0226\n\006timing\030\003 \001(\0132"
  "&.zb.dcts.scenario.automatic.WorkTiming\""
  "\?\n\004Mode\022\t\n\005NO_OP\020\000\022\r\n\tMCP_PSCAN\020\001\022\n\n\006MCP"
  "_DF\020\002\022\021\n\rPUB_SIG_TABLE\020\003\"D\n\rAutoWorkChai"
  "n\0223\n\005works\030\001 \003(\0132$.zb.dcts.scenario.auto"
  "matic.AutoWork\"\232\001\n\024CreateAutoMCPRequest\022"
  ">\n\tmcp_param\030\001 \001(\0132+.zb.dcts.scenario.MC"
  "P.CreateScenarioRequest\022B\n\017auto_work_cha"
  "in\030\002 \001(\0132).zb.dcts.scenario.automatic.Au"
  "toWorkChain\"\215\001\n\024InsertDFCommandParam\022=\n\007"
  "targets\030\001 \001(\0132,.zb.dcts.scenario.DF.Dire"
  "ctionFindingSignals\0226\n\006timing\030\002 \001(\0132&.zb"
  ".dcts.scenario.automatic.WorkTiming\"\225\001\n\027"
  "ChangeSweepCommandParam\0225\n\013pscan_param\030\001"
  " \001(\0132 .zb.dcts.scenario.MCP.PScanParam\022C"
  "\n\017detection_param\030\002 \001(\0132*.zb.dcts.scenar"
  "io.detection.DetectionParam2\331\001\n\023AutoScen"
  "arioService\022l\n\025CreateAutoMCPScenario\0220.z"
  "b.dcts.scenario.automatic.CreateAutoMCPR"
  "equest\032\037.zb.dcts.scenario.ScenarioReply\""
  "\000\022T\n\021CloseAutoScenario\022\034.zb.dcts.scenari"
  "o.ScenarioId\032\037.zb.dcts.scenario.Scenario"
  "Reply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fauto_2eproto_deps[5] = {
  &::descriptor_table_scenario_2fDF_2eproto,
  &::descriptor_table_scenario_2fMCP_2ftrunk_2eproto,
  &::descriptor_table_scenario_2fdetection_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fauto_2eproto_sccs[6] = {
  &scc_info_AutoWork_scenario_2fauto_2eproto.base,
  &scc_info_AutoWorkChain_scenario_2fauto_2eproto.base,
  &scc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto.base,
  &scc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto.base,
  &scc_info_InsertDFCommandParam_scenario_2fauto_2eproto.base,
  &scc_info_WorkTiming_scenario_2fauto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fauto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fauto_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fauto_2eproto, "scenario/auto.proto", 1215,
  &descriptor_table_scenario_2fauto_2eproto_once, descriptor_table_scenario_2fauto_2eproto_sccs, descriptor_table_scenario_2fauto_2eproto_deps, 6, 5,
  schemas, file_default_instances, TableStruct_scenario_2fauto_2eproto::offsets,
  file_level_metadata_scenario_2fauto_2eproto, 6, file_level_enum_descriptors_scenario_2fauto_2eproto, file_level_service_descriptors_scenario_2fauto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fauto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fauto_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace automatic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoWork_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fauto_2eproto);
  return file_level_enum_descriptors_scenario_2fauto_2eproto[0];
}
bool AutoWork_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AutoWork_Mode AutoWork::NO_OP;
constexpr AutoWork_Mode AutoWork::MCP_PSCAN;
constexpr AutoWork_Mode AutoWork::MCP_DF;
constexpr AutoWork_Mode AutoWork::PUB_SIG_TABLE;
constexpr AutoWork_Mode AutoWork::Mode_MIN;
constexpr AutoWork_Mode AutoWork::Mode_MAX;
constexpr int AutoWork::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WorkTiming::InitAsDefaultInstance() {
}
class WorkTiming::_Internal {
 public:
};

WorkTiming::WorkTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.WorkTiming)
}
WorkTiming::WorkTiming(const WorkTiming& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_in_msec_, &from.duration_in_msec_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_times_) -
    reinterpret_cast<char*>(&duration_in_msec_)) + sizeof(execute_times_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.WorkTiming)
}

void WorkTiming::SharedCtor() {
  ::memset(&duration_in_msec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_times_) -
      reinterpret_cast<char*>(&duration_in_msec_)) + sizeof(execute_times_));
}

WorkTiming::~WorkTiming() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.WorkTiming)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkTiming::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkTiming::ArenaDtor(void* object) {
  WorkTiming* _this = reinterpret_cast< WorkTiming* >(object);
  (void)_this;
}
void WorkTiming::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkTiming::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkTiming& WorkTiming::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkTiming_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void WorkTiming::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.WorkTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_in_msec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_times_) -
      reinterpret_cast<char*>(&duration_in_msec_)) + sizeof(execute_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkTiming::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 duration_in_msec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_in_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 execute_times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkTiming::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.WorkTiming)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration_in_msec = 1;
  if (this->duration_in_msec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration_in_msec(), target);
  }

  // int32 execute_times = 2;
  if (this->execute_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_execute_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.WorkTiming)
  return target;
}

size_t WorkTiming::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.WorkTiming)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 duration_in_msec = 1;
  if (this->duration_in_msec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration_in_msec());
  }

  // int32 execute_times = 2;
  if (this->execute_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_execute_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkTiming::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.WorkTiming)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkTiming* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkTiming>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.WorkTiming)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.WorkTiming)
    MergeFrom(*source);
  }
}

void WorkTiming::MergeFrom(const WorkTiming& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.WorkTiming)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration_in_msec() != 0) {
    _internal_set_duration_in_msec(from._internal_duration_in_msec());
  }
  if (from.execute_times() != 0) {
    _internal_set_execute_times(from._internal_execute_times());
  }
}

void WorkTiming::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.WorkTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkTiming::CopyFrom(const WorkTiming& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.WorkTiming)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkTiming::IsInitialized() const {
  return true;
}

void WorkTiming::InternalSwap(WorkTiming* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkTiming, execute_times_)
      + sizeof(WorkTiming::execute_times_)
      - PROTOBUF_FIELD_OFFSET(WorkTiming, duration_in_msec_)>(
          reinterpret_cast<char*>(&duration_in_msec_),
          reinterpret_cast<char*>(&other->duration_in_msec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkTiming::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoWork::InitAsDefaultInstance() {
  ::zb::dcts::scenario::automatic::_AutoWork_default_instance_._instance.get_mutable()->executor_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::automatic::_AutoWork_default_instance_._instance.get_mutable()->timing_ = const_cast< ::zb::dcts::scenario::automatic::WorkTiming*>(
      ::zb::dcts::scenario::automatic::WorkTiming::internal_default_instance());
}
class AutoWork::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& executor(const AutoWork* msg);
  static const ::zb::dcts::scenario::automatic::WorkTiming& timing(const AutoWork* msg);
};

const ::zb::dcts::source::SourceId&
AutoWork::_Internal::executor(const AutoWork* msg) {
  return *msg->executor_;
}
const ::zb::dcts::scenario::automatic::WorkTiming&
AutoWork::_Internal::timing(const AutoWork* msg) {
  return *msg->timing_;
}
void AutoWork::clear_executor() {
  if (GetArena() == nullptr && executor_ != nullptr) {
    delete executor_;
  }
  executor_ = nullptr;
}
AutoWork::AutoWork(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.AutoWork)
}
AutoWork::AutoWork(const AutoWork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_executor()) {
    executor_ = new ::zb::dcts::source::SourceId(*from.executor_);
  } else {
    executor_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::zb::dcts::scenario::automatic::WorkTiming(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.AutoWork)
}

void AutoWork::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoWork_scenario_2fauto_2eproto.base);
  ::memset(&executor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&executor_)) + sizeof(mode_));
}

AutoWork::~AutoWork() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.AutoWork)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoWork::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete executor_;
  if (this != internal_default_instance()) delete timing_;
}

void AutoWork::ArenaDtor(void* object) {
  AutoWork* _this = reinterpret_cast< AutoWork* >(object);
  (void)_this;
}
void AutoWork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoWork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoWork& AutoWork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoWork_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void AutoWork::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.AutoWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && executor_ != nullptr) {
    delete executor_;
  }
  executor_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoWork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.automatic.AutoWork.Mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::zb::dcts::scenario::automatic::AutoWork_Mode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceId executor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_executor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.automatic.WorkTiming timing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoWork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.AutoWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.automatic.AutoWork.Mode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // .zb.dcts.source.SourceId executor = 2;
  if (this->has_executor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::executor(this), target, stream);
  }

  // .zb.dcts.scenario.automatic.WorkTiming timing = 3;
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.AutoWork)
  return target;
}

size_t AutoWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.AutoWork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId executor = 2;
  if (this->has_executor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *executor_);
  }

  // .zb.dcts.scenario.automatic.WorkTiming timing = 3;
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  // .zb.dcts.scenario.automatic.AutoWork.Mode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoWork::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.AutoWork)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoWork* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoWork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.AutoWork)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.AutoWork)
    MergeFrom(*source);
  }
}

void AutoWork::MergeFrom(const AutoWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.AutoWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_executor()) {
    _internal_mutable_executor()->::zb::dcts::source::SourceId::MergeFrom(from._internal_executor());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::zb::dcts::scenario::automatic::WorkTiming::MergeFrom(from._internal_timing());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void AutoWork::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.AutoWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoWork::CopyFrom(const AutoWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.AutoWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoWork::IsInitialized() const {
  return true;
}

void AutoWork::InternalSwap(AutoWork* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoWork, mode_)
      + sizeof(AutoWork::mode_)
      - PROTOBUF_FIELD_OFFSET(AutoWork, executor_)>(
          reinterpret_cast<char*>(&executor_),
          reinterpret_cast<char*>(&other->executor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoWork::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoWorkChain::InitAsDefaultInstance() {
}
class AutoWorkChain::_Internal {
 public:
};

AutoWorkChain::AutoWorkChain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  works_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.AutoWorkChain)
}
AutoWorkChain::AutoWorkChain(const AutoWorkChain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      works_(from.works_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.AutoWorkChain)
}

void AutoWorkChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoWorkChain_scenario_2fauto_2eproto.base);
}

AutoWorkChain::~AutoWorkChain() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.AutoWorkChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoWorkChain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoWorkChain::ArenaDtor(void* object) {
  AutoWorkChain* _this = reinterpret_cast< AutoWorkChain* >(object);
  (void)_this;
}
void AutoWorkChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoWorkChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoWorkChain& AutoWorkChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoWorkChain_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void AutoWorkChain::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.AutoWorkChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  works_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoWorkChain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.automatic.AutoWork works = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_works(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoWorkChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.AutoWorkChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.automatic.AutoWork works = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_works_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_works(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.AutoWorkChain)
  return target;
}

size_t AutoWorkChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.AutoWorkChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.automatic.AutoWork works = 1;
  total_size += 1UL * this->_internal_works_size();
  for (const auto& msg : this->works_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoWorkChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.AutoWorkChain)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoWorkChain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoWorkChain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.AutoWorkChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.AutoWorkChain)
    MergeFrom(*source);
  }
}

void AutoWorkChain::MergeFrom(const AutoWorkChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.AutoWorkChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  works_.MergeFrom(from.works_);
}

void AutoWorkChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.AutoWorkChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoWorkChain::CopyFrom(const AutoWorkChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.AutoWorkChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoWorkChain::IsInitialized() const {
  return true;
}

void AutoWorkChain::InternalSwap(AutoWorkChain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  works_.InternalSwap(&other->works_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoWorkChain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAutoMCPRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::automatic::_CreateAutoMCPRequest_default_instance_._instance.get_mutable()->mcp_param_ = const_cast< ::zb::dcts::scenario::MCP::CreateScenarioRequest*>(
      ::zb::dcts::scenario::MCP::CreateScenarioRequest::internal_default_instance());
  ::zb::dcts::scenario::automatic::_CreateAutoMCPRequest_default_instance_._instance.get_mutable()->auto_work_chain_ = const_cast< ::zb::dcts::scenario::automatic::AutoWorkChain*>(
      ::zb::dcts::scenario::automatic::AutoWorkChain::internal_default_instance());
}
class CreateAutoMCPRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::MCP::CreateScenarioRequest& mcp_param(const CreateAutoMCPRequest* msg);
  static const ::zb::dcts::scenario::automatic::AutoWorkChain& auto_work_chain(const CreateAutoMCPRequest* msg);
};

const ::zb::dcts::scenario::MCP::CreateScenarioRequest&
CreateAutoMCPRequest::_Internal::mcp_param(const CreateAutoMCPRequest* msg) {
  return *msg->mcp_param_;
}
const ::zb::dcts::scenario::automatic::AutoWorkChain&
CreateAutoMCPRequest::_Internal::auto_work_chain(const CreateAutoMCPRequest* msg) {
  return *msg->auto_work_chain_;
}
void CreateAutoMCPRequest::clear_mcp_param() {
  if (GetArena() == nullptr && mcp_param_ != nullptr) {
    delete mcp_param_;
  }
  mcp_param_ = nullptr;
}
CreateAutoMCPRequest::CreateAutoMCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
}
CreateAutoMCPRequest::CreateAutoMCPRequest(const CreateAutoMCPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mcp_param()) {
    mcp_param_ = new ::zb::dcts::scenario::MCP::CreateScenarioRequest(*from.mcp_param_);
  } else {
    mcp_param_ = nullptr;
  }
  if (from._internal_has_auto_work_chain()) {
    auto_work_chain_ = new ::zb::dcts::scenario::automatic::AutoWorkChain(*from.auto_work_chain_);
  } else {
    auto_work_chain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
}

void CreateAutoMCPRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto.base);
  ::memset(&mcp_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_work_chain_) -
      reinterpret_cast<char*>(&mcp_param_)) + sizeof(auto_work_chain_));
}

CreateAutoMCPRequest::~CreateAutoMCPRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAutoMCPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mcp_param_;
  if (this != internal_default_instance()) delete auto_work_chain_;
}

void CreateAutoMCPRequest::ArenaDtor(void* object) {
  CreateAutoMCPRequest* _this = reinterpret_cast< CreateAutoMCPRequest* >(object);
  (void)_this;
}
void CreateAutoMCPRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAutoMCPRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAutoMCPRequest& CreateAutoMCPRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAutoMCPRequest_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void CreateAutoMCPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mcp_param_ != nullptr) {
    delete mcp_param_;
  }
  mcp_param_ = nullptr;
  if (GetArena() == nullptr && auto_work_chain_ != nullptr) {
    delete auto_work_chain_;
  }
  auto_work_chain_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAutoMCPRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.MCP.CreateScenarioRequest mcp_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mcp_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.automatic.AutoWorkChain auto_work_chain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_work_chain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAutoMCPRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.MCP.CreateScenarioRequest mcp_param = 1;
  if (this->has_mcp_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mcp_param(this), target, stream);
  }

  // .zb.dcts.scenario.automatic.AutoWorkChain auto_work_chain = 2;
  if (this->has_auto_work_chain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auto_work_chain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  return target;
}

size_t CreateAutoMCPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.MCP.CreateScenarioRequest mcp_param = 1;
  if (this->has_mcp_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mcp_param_);
  }

  // .zb.dcts.scenario.automatic.AutoWorkChain auto_work_chain = 2;
  if (this->has_auto_work_chain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_work_chain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAutoMCPRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAutoMCPRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAutoMCPRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
    MergeFrom(*source);
  }
}

void CreateAutoMCPRequest::MergeFrom(const CreateAutoMCPRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mcp_param()) {
    _internal_mutable_mcp_param()->::zb::dcts::scenario::MCP::CreateScenarioRequest::MergeFrom(from._internal_mcp_param());
  }
  if (from.has_auto_work_chain()) {
    _internal_mutable_auto_work_chain()->::zb::dcts::scenario::automatic::AutoWorkChain::MergeFrom(from._internal_auto_work_chain());
  }
}

void CreateAutoMCPRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAutoMCPRequest::CopyFrom(const CreateAutoMCPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAutoMCPRequest::IsInitialized() const {
  return true;
}

void CreateAutoMCPRequest::InternalSwap(CreateAutoMCPRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateAutoMCPRequest, auto_work_chain_)
      + sizeof(CreateAutoMCPRequest::auto_work_chain_)
      - PROTOBUF_FIELD_OFFSET(CreateAutoMCPRequest, mcp_param_)>(
          reinterpret_cast<char*>(&mcp_param_),
          reinterpret_cast<char*>(&other->mcp_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAutoMCPRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertDFCommandParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::automatic::_InsertDFCommandParam_default_instance_._instance.get_mutable()->targets_ = const_cast< ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      ::zb::dcts::scenario::DF::DirectionFindingSignals::internal_default_instance());
  ::zb::dcts::scenario::automatic::_InsertDFCommandParam_default_instance_._instance.get_mutable()->timing_ = const_cast< ::zb::dcts::scenario::automatic::WorkTiming*>(
      ::zb::dcts::scenario::automatic::WorkTiming::internal_default_instance());
}
class InsertDFCommandParam::_Internal {
 public:
  static const ::zb::dcts::scenario::DF::DirectionFindingSignals& targets(const InsertDFCommandParam* msg);
  static const ::zb::dcts::scenario::automatic::WorkTiming& timing(const InsertDFCommandParam* msg);
};

const ::zb::dcts::scenario::DF::DirectionFindingSignals&
InsertDFCommandParam::_Internal::targets(const InsertDFCommandParam* msg) {
  return *msg->targets_;
}
const ::zb::dcts::scenario::automatic::WorkTiming&
InsertDFCommandParam::_Internal::timing(const InsertDFCommandParam* msg) {
  return *msg->timing_;
}
void InsertDFCommandParam::clear_targets() {
  if (GetArena() == nullptr && targets_ != nullptr) {
    delete targets_;
  }
  targets_ = nullptr;
}
InsertDFCommandParam::InsertDFCommandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.InsertDFCommandParam)
}
InsertDFCommandParam::InsertDFCommandParam(const InsertDFCommandParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targets()) {
    targets_ = new ::zb::dcts::scenario::DF::DirectionFindingSignals(*from.targets_);
  } else {
    targets_ = nullptr;
  }
  if (from._internal_has_timing()) {
    timing_ = new ::zb::dcts::scenario::automatic::WorkTiming(*from.timing_);
  } else {
    timing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.InsertDFCommandParam)
}

void InsertDFCommandParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertDFCommandParam_scenario_2fauto_2eproto.base);
  ::memset(&targets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timing_) -
      reinterpret_cast<char*>(&targets_)) + sizeof(timing_));
}

InsertDFCommandParam::~InsertDFCommandParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.InsertDFCommandParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertDFCommandParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete targets_;
  if (this != internal_default_instance()) delete timing_;
}

void InsertDFCommandParam::ArenaDtor(void* object) {
  InsertDFCommandParam* _this = reinterpret_cast< InsertDFCommandParam* >(object);
  (void)_this;
}
void InsertDFCommandParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertDFCommandParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertDFCommandParam& InsertDFCommandParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertDFCommandParam_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void InsertDFCommandParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && targets_ != nullptr) {
    delete targets_;
  }
  targets_ = nullptr;
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertDFCommandParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.DF.DirectionFindingSignals targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.automatic.WorkTiming timing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertDFCommandParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.DF.DirectionFindingSignals targets = 1;
  if (this->has_targets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::targets(this), target, stream);
  }

  // .zb.dcts.scenario.automatic.WorkTiming timing = 2;
  if (this->has_timing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.InsertDFCommandParam)
  return target;
}

size_t InsertDFCommandParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.DF.DirectionFindingSignals targets = 1;
  if (this->has_targets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targets_);
  }

  // .zb.dcts.scenario.automatic.WorkTiming timing = 2;
  if (this->has_timing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertDFCommandParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertDFCommandParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertDFCommandParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.InsertDFCommandParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.InsertDFCommandParam)
    MergeFrom(*source);
  }
}

void InsertDFCommandParam::MergeFrom(const InsertDFCommandParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targets()) {
    _internal_mutable_targets()->::zb::dcts::scenario::DF::DirectionFindingSignals::MergeFrom(from._internal_targets());
  }
  if (from.has_timing()) {
    _internal_mutable_timing()->::zb::dcts::scenario::automatic::WorkTiming::MergeFrom(from._internal_timing());
  }
}

void InsertDFCommandParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertDFCommandParam::CopyFrom(const InsertDFCommandParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.InsertDFCommandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertDFCommandParam::IsInitialized() const {
  return true;
}

void InsertDFCommandParam::InternalSwap(InsertDFCommandParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertDFCommandParam, timing_)
      + sizeof(InsertDFCommandParam::timing_)
      - PROTOBUF_FIELD_OFFSET(InsertDFCommandParam, targets_)>(
          reinterpret_cast<char*>(&targets_),
          reinterpret_cast<char*>(&other->targets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertDFCommandParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeSweepCommandParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::automatic::_ChangeSweepCommandParam_default_instance_._instance.get_mutable()->pscan_param_ = const_cast< ::zb::dcts::scenario::MCP::PScanParam*>(
      ::zb::dcts::scenario::MCP::PScanParam::internal_default_instance());
  ::zb::dcts::scenario::automatic::_ChangeSweepCommandParam_default_instance_._instance.get_mutable()->detection_param_ = const_cast< ::zb::dcts::scenario::detection::DetectionParam*>(
      ::zb::dcts::scenario::detection::DetectionParam::internal_default_instance());
}
class ChangeSweepCommandParam::_Internal {
 public:
  static const ::zb::dcts::scenario::MCP::PScanParam& pscan_param(const ChangeSweepCommandParam* msg);
  static const ::zb::dcts::scenario::detection::DetectionParam& detection_param(const ChangeSweepCommandParam* msg);
};

const ::zb::dcts::scenario::MCP::PScanParam&
ChangeSweepCommandParam::_Internal::pscan_param(const ChangeSweepCommandParam* msg) {
  return *msg->pscan_param_;
}
const ::zb::dcts::scenario::detection::DetectionParam&
ChangeSweepCommandParam::_Internal::detection_param(const ChangeSweepCommandParam* msg) {
  return *msg->detection_param_;
}
void ChangeSweepCommandParam::clear_pscan_param() {
  if (GetArena() == nullptr && pscan_param_ != nullptr) {
    delete pscan_param_;
  }
  pscan_param_ = nullptr;
}
void ChangeSweepCommandParam::clear_detection_param() {
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
}
ChangeSweepCommandParam::ChangeSweepCommandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
}
ChangeSweepCommandParam::ChangeSweepCommandParam(const ChangeSweepCommandParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pscan_param()) {
    pscan_param_ = new ::zb::dcts::scenario::MCP::PScanParam(*from.pscan_param_);
  } else {
    pscan_param_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::scenario::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
}

void ChangeSweepCommandParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto.base);
  ::memset(&pscan_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_param_) -
      reinterpret_cast<char*>(&pscan_param_)) + sizeof(detection_param_));
}

ChangeSweepCommandParam::~ChangeSweepCommandParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeSweepCommandParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pscan_param_;
  if (this != internal_default_instance()) delete detection_param_;
}

void ChangeSweepCommandParam::ArenaDtor(void* object) {
  ChangeSweepCommandParam* _this = reinterpret_cast< ChangeSweepCommandParam* >(object);
  (void)_this;
}
void ChangeSweepCommandParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeSweepCommandParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeSweepCommandParam& ChangeSweepCommandParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeSweepCommandParam_scenario_2fauto_2eproto.base);
  return *internal_default_instance();
}


void ChangeSweepCommandParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pscan_param_ != nullptr) {
    delete pscan_param_;
  }
  pscan_param_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeSweepCommandParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.MCP.PScanParam pscan_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pscan_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeSweepCommandParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 1;
  if (this->has_pscan_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pscan_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  return target;
}

size_t ChangeSweepCommandParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 1;
  if (this->has_pscan_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pscan_param_);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeSweepCommandParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeSweepCommandParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeSweepCommandParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
    MergeFrom(*source);
  }
}

void ChangeSweepCommandParam::MergeFrom(const ChangeSweepCommandParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pscan_param()) {
    _internal_mutable_pscan_param()->::zb::dcts::scenario::MCP::PScanParam::MergeFrom(from._internal_pscan_param());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::scenario::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void ChangeSweepCommandParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSweepCommandParam::CopyFrom(const ChangeSweepCommandParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSweepCommandParam::IsInitialized() const {
  return true;
}

void ChangeSweepCommandParam::InternalSwap(ChangeSweepCommandParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeSweepCommandParam, detection_param_)
      + sizeof(ChangeSweepCommandParam::detection_param_)
      - PROTOBUF_FIELD_OFFSET(ChangeSweepCommandParam, pscan_param_)>(
          reinterpret_cast<char*>(&pscan_param_),
          reinterpret_cast<char*>(&other->pscan_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeSweepCommandParam::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace automatic
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::WorkTiming* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::WorkTiming >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::WorkTiming >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::AutoWork* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::AutoWork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::AutoWork >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::AutoWorkChain* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::AutoWorkChain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::AutoWorkChain >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::CreateAutoMCPRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::CreateAutoMCPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::CreateAutoMCPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::InsertDFCommandParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::InsertDFCommandParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::InsertDFCommandParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::automatic::ChangeSweepCommandParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::automatic::ChangeSweepCommandParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::automatic::ChangeSweepCommandParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
