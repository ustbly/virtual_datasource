// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/scenario.proto
#ifndef GRPC_scenario_2fscenario_2eproto__INCLUDED
#define GRPC_scenario_2fscenario_2eproto__INCLUDED

#include "scenario/scenario.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace scenario {

// 通用管理的API
class GeneralService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.scenario.GeneralService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::scenario::ScenariosInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>> AsyncListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>>(AsyncListAllScenariosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>> PrepareAsyncListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>>(PrepareAsyncListAllScenariosRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::source::SourceSetInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>> AsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>>(AsyncListAllSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>> PrepareAsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>>(PrepareAsyncListAllSourcesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>> AsyncGetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>>(AsyncGetScenarioInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>> PrepareAsyncGetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>>(PrepareAsyncGetScenarioInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAbortOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAbortOneRaw(context, request, cq));
    }
    virtual ::grpc::Status AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAbortAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAbortAllRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncPauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncPauseTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncPauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncPauseTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncResumeTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncResumeTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>> SubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::protobuf::Any>>(SubscribeScenarioMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> AsyncSubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(AsyncSubscribeScenarioMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>> PrepareAsyncSubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>>(PrepareAsyncSubscribeScenarioMessageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeScenarioMessage(::grpc::ClientContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #else
      virtual void SubscribeScenarioMessage(::grpc::ClientContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>* AsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenariosInfo>* PrepareAsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>* AsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::source::SourceSetInfo>* PrepareAsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>* AsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioInfo>* PrepareAsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::google::protobuf::Any>* SubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* AsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::protobuf::Any>* PrepareAsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::scenario::ScenariosInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>> AsyncListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>>(AsyncListAllScenariosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>> PrepareAsyncListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>>(PrepareAsyncListAllScenariosRaw(context, request, cq));
    }
    ::grpc::Status ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::zb::dcts::source::SourceSetInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>> AsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>>(AsyncListAllSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>> PrepareAsyncListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>>(PrepareAsyncListAllSourcesRaw(context, request, cq));
    }
    ::grpc::Status GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>> AsyncGetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>>(AsyncGetScenarioInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>> PrepareAsyncGetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>>(PrepareAsyncGetScenarioInfoRaw(context, request, cq));
    }
    ::grpc::Status AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAbortOneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAbortOneRaw(context, request, cq));
    }
    ::grpc::Status AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAbortAllRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAbortAllRaw(context, request, cq));
    }
    ::grpc::Status PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncPauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncPauseTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncPauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncPauseTaskRaw(context, request, cq));
    }
    ::grpc::Status ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncResumeTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncResumeTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>> SubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::protobuf::Any>>(SubscribeScenarioMessageRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> AsyncSubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(AsyncSubscribeScenarioMessageRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>> PrepareAsyncSubscribeScenarioMessage(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::protobuf::Any>>(PrepareAsyncSubscribeScenarioMessageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)>) override;
      void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllScenarios(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllScenarios(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenariosInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) override;
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllSources(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAllSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::source::SourceSetInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)>) override;
      void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetScenarioInfo(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetScenarioInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AbortOne(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AbortOne(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AbortAll(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AbortAll(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PauseTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PauseTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResumeTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResumeTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeScenarioMessage(::grpc::ClientContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #else
      void SubscribeScenarioMessage(::grpc::ClientContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::experimental::ClientReadReactor< ::google::protobuf::Any>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>* AsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenariosInfo>* PrepareAsyncListAllScenariosRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* AsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::source::SourceSetInfo>* PrepareAsyncListAllSourcesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>* AsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioInfo>* PrepareAsyncGetScenarioInfoRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAbortOneRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAbortAllRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncPauseTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncResumeTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::google::protobuf::Any>* SubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* AsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::protobuf::Any>* PrepareAsyncSubscribeScenarioMessageRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllScenarios_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllSources_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScenarioInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_AbortOne_;
    const ::grpc::internal::RpcMethod rpcmethod_AbortAll_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ResumeTask_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeScenarioMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListAllScenarios(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response);
    virtual ::grpc::Status ListAllSources(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response);
    virtual ::grpc::Status GetScenarioInfo(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response);
    virtual ::grpc::Status AbortOne(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status AbortAll(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status PauseTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status ResumeTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* context, const ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllScenarios() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllScenarios(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenariosInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAllSources() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSources(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::source::SourceSetInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScenarioInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScenarioInfo(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AbortOne() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortOne(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AbortAll() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortAll(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseTask() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseTask(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResumeTask() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeTask(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeScenarioMessage() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeScenarioMessage(::grpc::ServerContext* context, ::zb::dcts::scenario::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::google::protobuf::Any>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListAllScenarios<WithAsyncMethod_ListAllSources<WithAsyncMethod_GetScenarioInfo<WithAsyncMethod_AbortOne<WithAsyncMethod_AbortAll<WithAsyncMethod_PauseTask<WithAsyncMethod_ResumeTask<WithAsyncMethod_SubscribeScenarioMessage<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAllScenarios() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::scenario::ScenariosInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::zb::dcts::scenario::ScenariosInfo* response) { return this->ListAllScenarios(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllScenarios(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::zb::dcts::scenario::ScenariosInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::scenario::ScenariosInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllScenarios(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllScenarios(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAllSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::zb::dcts::source::SourceSetInfo* response) { return this->ListAllSources(context, request, response); }));}
    void SetMessageAllocatorFor_ListAllSources(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllSources(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetScenarioInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioInfo>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioInfo* response) { return this->GetScenarioInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetScenarioInfo(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioInfo>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetScenarioInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetScenarioInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AbortOne() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioId* request, ::google::protobuf::Empty* response) { return this->AbortOne(context, request, response); }));}
    void SetMessageAllocatorFor_AbortOne(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioId, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AbortOne(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AbortOne(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AbortAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->AbortAll(context, request, response); }));}
    void SetMessageAllocatorFor_AbortAll(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AbortAll(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AbortAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PauseTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->PauseTask(context, request, response); }));}
    void SetMessageAllocatorFor_PauseTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResumeTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->ResumeTask(context, request, response); }));}
    void SetMessageAllocatorFor_ResumeTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResumeTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResumeTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeScenarioMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::zb::dcts::scenario::SubscribeRequest, ::google::protobuf::Any>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::SubscribeRequest* request) { return this->SubscribeScenarioMessage(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::protobuf::Any>* SubscribeScenarioMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::protobuf::Any>* SubscribeScenarioMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListAllScenarios<ExperimentalWithCallbackMethod_ListAllSources<ExperimentalWithCallbackMethod_GetScenarioInfo<ExperimentalWithCallbackMethod_AbortOne<ExperimentalWithCallbackMethod_AbortAll<ExperimentalWithCallbackMethod_PauseTask<ExperimentalWithCallbackMethod_ResumeTask<ExperimentalWithCallbackMethod_SubscribeScenarioMessage<Service > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListAllScenarios<ExperimentalWithCallbackMethod_ListAllSources<ExperimentalWithCallbackMethod_GetScenarioInfo<ExperimentalWithCallbackMethod_AbortOne<ExperimentalWithCallbackMethod_AbortAll<ExperimentalWithCallbackMethod_PauseTask<ExperimentalWithCallbackMethod_ResumeTask<ExperimentalWithCallbackMethod_SubscribeScenarioMessage<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllScenarios() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAllSources() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScenarioInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AbortOne() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AbortAll() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseTask() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResumeTask() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeScenarioMessage() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllScenarios() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllScenarios(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAllSources() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllSources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScenarioInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScenarioInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AbortOne() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortOne(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AbortAll() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAbortAll(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseTask() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResumeTask() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeScenarioMessage() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeScenarioMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAllScenarios() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllScenarios(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllScenarios(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllScenarios(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAllSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAllSources(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAllSources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAllSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScenarioInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetScenarioInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetScenarioInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetScenarioInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AbortOne() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AbortOne(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AbortOne(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AbortOne(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AbortAll() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AbortAll(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AbortAll(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AbortAll(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PauseTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PauseTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PauseTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResumeTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResumeTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResumeTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResumeTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeScenarioMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeScenarioMessage(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeScenarioMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeScenarioMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllScenarios : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllScenarios() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::scenario::ScenariosInfo>(std::bind(&WithStreamedUnaryMethod_ListAllScenarios<BaseClass>::StreamedListAllScenarios, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAllScenarios() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllScenarios(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::scenario::ScenariosInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllScenarios(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::zb::dcts::scenario::ScenariosInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAllSources() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::zb::dcts::source::SourceSetInfo>(std::bind(&WithStreamedUnaryMethod_ListAllSources<BaseClass>::StreamedListAllSources, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAllSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllSources(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::zb::dcts::source::SourceSetInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllSources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::zb::dcts::source::SourceSetInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScenarioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetScenarioInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioInfo>(std::bind(&WithStreamedUnaryMethod_GetScenarioInfo<BaseClass>::StreamedGetScenarioInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetScenarioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScenarioInfo(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScenarioInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioId,::zb::dcts::scenario::ScenarioInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbortOne : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AbortOne() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_AbortOne<BaseClass>::StreamedAbortOne, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AbortOne() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbortOne(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbortOne(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AbortAll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AbortAll() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_AbortAll<BaseClass>::StreamedAbortAll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AbortAll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AbortAll(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAbortAll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseTask() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_PauseTask<BaseClass>::StreamedPauseTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PauseTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResumeTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResumeTask() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_ResumeTask<BaseClass>::StreamedResumeTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResumeTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResumeTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResumeTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListAllScenarios<WithStreamedUnaryMethod_ListAllSources<WithStreamedUnaryMethod_GetScenarioInfo<WithStreamedUnaryMethod_AbortOne<WithStreamedUnaryMethod_AbortAll<WithStreamedUnaryMethod_PauseTask<WithStreamedUnaryMethod_ResumeTask<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeScenarioMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeScenarioMessage() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::zb::dcts::scenario::SubscribeRequest, ::google::protobuf::Any>(std::bind(&WithSplitStreamingMethod_SubscribeScenarioMessage<BaseClass>::StreamedSubscribeScenarioMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeScenarioMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeScenarioMessage(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::google::protobuf::Any>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeScenarioMessage(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::scenario::SubscribeRequest,::google::protobuf::Any>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeScenarioMessage<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListAllScenarios<WithStreamedUnaryMethod_ListAllSources<WithStreamedUnaryMethod_GetScenarioInfo<WithStreamedUnaryMethod_AbortOne<WithStreamedUnaryMethod_AbortAll<WithStreamedUnaryMethod_PauseTask<WithStreamedUnaryMethod_ResumeTask<WithSplitStreamingMethod_SubscribeScenarioMessage<Service > > > > > > > > StreamedService;
};

}  // namespace scenario
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_scenario_2fscenario_2eproto__INCLUDED
