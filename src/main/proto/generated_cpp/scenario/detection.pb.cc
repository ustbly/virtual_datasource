// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/detection.proto

#include "scenario/detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOA_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DRange_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRange_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Integer_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticVal_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoGatheringParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixSignalList_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FreqSpanFilter_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HopSignalCluster_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalDigest_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalList_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualGatheringParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawBody_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalDetectParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalDigest_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalFeature_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalSample_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalSampleList_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalSegment_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalSegmentationParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThresholdSector_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserThresholdParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencySegment_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpectrumBlock_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumLine_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace detection {
class ThresholdSectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThresholdSector> _instance;
} _ThresholdSector_default_instance_;
class UserThresholdParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserThresholdParam> _instance;
} _UserThresholdParam_default_instance_;
class HistoryThresholdParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryThresholdParam> _instance;
} _HistoryThresholdParam_default_instance_;
class AdaptiveThresholdParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdaptiveThresholdParam> _instance;
} _AdaptiveThresholdParam_default_instance_;
class NeighborVarThresholdParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NeighborVarThresholdParam> _instance;
} _NeighborVarThresholdParam_default_instance_;
class EnergyDetectionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnergyDetectionParam> _instance;
} _EnergyDetectionParam_default_instance_;
class ThresholdTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThresholdTrace> _instance;
} _ThresholdTrace_default_instance_;
class FreqSpanFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FreqSpanFilter> _instance;
} _FreqSpanFilter_default_instance_;
class SignalSegmentationParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalSegmentationParam> _instance;
} _SignalSegmentationParam_default_instance_;
class HopSignalClusterParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopSignalClusterParam> _instance;
} _HopSignalClusterParam_default_instance_;
class HopSignalDetectionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopSignalDetectionParam> _instance;
} _HopSignalDetectionParam_default_instance_;
class SignalDetectParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalDetectParam> _instance;
} _SignalDetectParam_default_instance_;
class DetectionParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionParam> _instance;
} _DetectionParam_default_instance_;
class SignalFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalFeature> _instance;
} _SignalFeature_default_instance_;
class SignalDigestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalDigest> _instance;
} _SignalDigest_default_instance_;
class SignalSegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalSegment> _instance;
} _SignalSegment_default_instance_;
class HopSignalDigestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopSignalDigest> _instance;
} _HopSignalDigest_default_instance_;
class HopSignalClusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopSignalCluster> _instance;
} _HopSignalCluster_default_instance_;
class FixSignalListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixSignalList> _instance;
} _FixSignalList_default_instance_;
class HopSignalListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopSignalList> _instance;
} _HopSignalList_default_instance_;
class DetectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionRequest> _instance;
} _DetectionRequest_default_instance_;
class AutoGatheringParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutoGatheringParam> _instance;
} _AutoGatheringParam_default_instance_;
class ManualGatheringParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualGatheringParam> _instance;
} _ManualGatheringParam_default_instance_;
class SignalGatheringRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalGatheringRequest> _instance;
} _SignalGatheringRequest_default_instance_;
class SignalSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalSample> _instance;
} _SignalSample_default_instance_;
class SignalSampleListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalSampleList> _instance;
} _SignalSampleList_default_instance_;
class SignalTableQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalTableQueryRequest> _instance;
} _SignalTableQueryRequest_default_instance_;
class SignalTableQueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalTableQueryResponse> _instance;
} _SignalTableQueryResponse_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class RawBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawBody> _instance;
} _RawBody_default_instance_;
class RawDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawData> _instance;
} _RawData_default_instance_;
class DeviceDetectResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceDetectResult> _instance;
} _DeviceDetectResult_default_instance_;
class SignalLayerSurveyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalLayerSurvey> _instance;
} _SignalLayerSurvey_default_instance_;
}  // namespace detection
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_AdaptiveThresholdParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::AdaptiveThresholdParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::AdaptiveThresholdParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto}, {}};

static void InitDefaultsscc_info_AutoGatheringParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_AutoGatheringParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::AutoGatheringParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::AutoGatheringParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutoGatheringParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutoGatheringParam_scenario_2fdetection_2eproto}, {}};

static void InitDefaultsscc_info_DetectionParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_DetectionParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::DetectionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::DetectionParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetectionParam_scenario_2fdetection_2eproto}, {
      &scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto.base,
      &scc_info_SignalDetectParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_DetectionRequest_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_DetectionRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::DetectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::DetectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionRequest_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetectionRequest_scenario_2fdetection_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_DeviceDetectResult_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::DeviceDetectResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::DeviceDetectResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DeviceDetectResult_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DeviceDetectResult_scenario_2fdetection_2eproto}, {
      &scc_info_Header_scenario_2fdetection_2eproto.base,
      &scc_info_FixSignalList_scenario_2fdetection_2eproto.base,
      &scc_info_HopSignalList_scenario_2fdetection_2eproto.base,
      &scc_info_SignalSampleList_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_EnergyDetectionParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::EnergyDetectionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::EnergyDetectionParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_EnergyDetectionParam_scenario_2fdetection_2eproto}, {
      &scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto.base,
      &scc_info_UserThresholdParam_scenario_2fdetection_2eproto.base,
      &scc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto.base,
      &scc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_FixSignalList_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_FixSignalList_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::FixSignalList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::FixSignalList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixSignalList_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FixSignalList_scenario_2fdetection_2eproto}, {
      &scc_info_SignalSegment_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_FreqSpanFilter_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_FreqSpanFilter_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::FreqSpanFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::FreqSpanFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FreqSpanFilter_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FreqSpanFilter_scenario_2fdetection_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_Header_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Header_scenario_2fdetection_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_HistoryThresholdParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HistoryThresholdParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HistoryThresholdParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HistoryThresholdParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryThresholdParam_scenario_2fdetection_2eproto}, {
      &scc_info_TimeSpan_dcts_2eproto.base,}};

static void InitDefaultsscc_info_HopSignalCluster_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HopSignalCluster_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HopSignalCluster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HopSignalCluster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HopSignalCluster_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HopSignalCluster_scenario_2fdetection_2eproto}, {
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_HopSignalDigest_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_HopSignalClusterParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HopSignalClusterParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HopSignalClusterParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HopSignalClusterParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HopSignalClusterParam_scenario_2fdetection_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
      &scc_info_DRange_dcts_2eproto.base,}};

static void InitDefaultsscc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HopSignalDetectionParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HopSignalDetectionParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HopSignalDetectionParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto}, {
      &scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_HopSignalDigest_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HopSignalDigest_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HopSignalDigest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HopSignalDigest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalDigest_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HopSignalDigest_scenario_2fdetection_2eproto}, {
      &scc_info_StatisticVal_dcts_2eproto.base,}};

static void InitDefaultsscc_info_HopSignalList_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_HopSignalList_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::HopSignalList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::HopSignalList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HopSignalList_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HopSignalList_scenario_2fdetection_2eproto}, {
      &scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_ManualGatheringParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_ManualGatheringParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::ManualGatheringParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::ManualGatheringParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualGatheringParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ManualGatheringParam_scenario_2fdetection_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_NeighborVarThresholdParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::NeighborVarThresholdParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::NeighborVarThresholdParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto}, {}};

static void InitDefaultsscc_info_RawBody_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_RawBody_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::RawBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::RawBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawBody_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RawBody_scenario_2fdetection_2eproto}, {
      &scc_info_FrequencySegment_scenario_2fspectrum_2eproto.base,
      &scc_info_SpectrumLine_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_RawData_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_RawData_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::RawData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::RawData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RawData_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RawData_scenario_2fdetection_2eproto}, {
      &scc_info_Header_scenario_2fdetection_2eproto.base,
      &scc_info_RawBody_scenario_2fdetection_2eproto.base,
      &scc_info_IRange_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SignalDetectParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalDetectParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalDetectParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalDetectParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalDetectParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SignalDetectParam_scenario_2fdetection_2eproto}, {
      &scc_info_FreqSpanFilter_scenario_2fdetection_2eproto.base,
      &scc_info_SignalSegmentationParam_scenario_2fdetection_2eproto.base,
      &scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SignalDigest_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalDigest_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalDigest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalDigest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalDigest_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SignalDigest_scenario_2fdetection_2eproto}, {
      &scc_info_StatisticVal_dcts_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_DOA_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SignalFeature_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalFeature_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalFeature_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignalFeature_scenario_2fdetection_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,
      &scc_info_StatisticVal_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SignalGatheringRequest_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalGatheringRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalGatheringRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalGatheringRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalGatheringRequest_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SignalGatheringRequest_scenario_2fdetection_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_AutoGatheringParam_scenario_2fdetection_2eproto.base,
      &scc_info_ManualGatheringParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SignalLayerSurvey_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalLayerSurvey_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalLayerSurvey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalLayerSurvey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SignalLayerSurvey_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SignalLayerSurvey_scenario_2fdetection_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,
      &scc_info_SignalDigest_scenario_2fdetection_2eproto.base,
      &scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SignalSample_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalSample_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalSample_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignalSample_scenario_2fdetection_2eproto}, {
      &scc_info_SpectrumBlock_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_SignalSampleList_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalSampleList_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalSampleList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalSampleList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalSampleList_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignalSampleList_scenario_2fdetection_2eproto}, {
      &scc_info_SignalSample_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SignalSegment_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalSegment_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalSegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalSegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SignalSegment_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SignalSegment_scenario_2fdetection_2eproto}, {
      &scc_info_SignalDigest_scenario_2fdetection_2eproto.base,
      &scc_info_SignalFeature_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_SignalSegmentationParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalSegmentationParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalSegmentationParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalSegmentationParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalSegmentationParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignalSegmentationParam_scenario_2fdetection_2eproto}, {}};

static void InitDefaultsscc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalTableQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalTableQueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Integer_dcts_2eproto.base,
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,}};

static void InitDefaultsscc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_SignalTableQueryResponse_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::SignalTableQueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::SignalTableQueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_SignalDigest_scenario_2fdetection_2eproto.base,
      &scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_ThresholdSector_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_ThresholdSector_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::ThresholdSector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::ThresholdSector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThresholdSector_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThresholdSector_scenario_2fdetection_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_ThresholdTrace_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_ThresholdTrace_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::ThresholdTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::ThresholdTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThresholdTrace_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThresholdTrace_scenario_2fdetection_2eproto}, {}};

static void InitDefaultsscc_info_UserThresholdParam_scenario_2fdetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::detection::_UserThresholdParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::detection::UserThresholdParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::detection::UserThresholdParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserThresholdParam_scenario_2fdetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserThresholdParam_scenario_2fdetection_2eproto}, {
      &scc_info_ThresholdSector_scenario_2fdetection_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fdetection_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fdetection_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fdetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdSector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdSector, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdSector, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::UserThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::UserThresholdParam, sectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HistoryThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HistoryThresholdParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HistoryThresholdParam, max_load_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HistoryThresholdParam, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AdaptiveThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AdaptiveThresholdParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AdaptiveThresholdParam, partition_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AdaptiveThresholdParam, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, noise_variance_scale_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, noise_max_variance_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, offset_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, lookup_freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::NeighborVarThresholdParam, smooth_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, active_types_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, logic_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, history_threshold_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, user_threshold_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, adaptive_threshold_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::EnergyDetectionParam, neighbor_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdTrace, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ThresholdTrace, threshold_trace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::FreqSpanFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::FreqSpanFilter, freq_spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegmentationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegmentationParam, freq_center_jitter_tolerance_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegmentationParam, freq_border_blur_tolerance_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegmentationParam, min_rss_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegmentationParam, time_gap_tolerance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalClusterParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalClusterParam, name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalClusterParam, frequency_range_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalClusterParam, band_width_range_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalClusterParam, freq_jitter_tolerance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDetectionParam, hop_signal_clusters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDetectParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDetectParam, white_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDetectParam, signal_segmenation_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDetectParam, hop_signal_detection_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionParam, energy_detect_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionParam, signal_detect_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalFeature, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalFeature, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalFeature, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalFeature, hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, activity_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, center_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, band_width_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, emit_time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, num_features_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, dir_of_arrival_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, classification_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalDigest, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegment, digest_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSegment, feature_details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDigest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDigest, center_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDigest, band_width_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDigest, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalDigest, num_features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalCluster, name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalCluster, activity_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalCluster, emit_time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalCluster, freq_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::FixSignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::FixSignalList, fix_signals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::HopSignalList, hop_signal_clusters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DetectionRequest, detection_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AutoGatheringParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AutoGatheringParam, time_span_in_msec_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::AutoGatheringParam, signal_candidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ManualGatheringParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ManualGatheringParam, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ManualGatheringParam, time_span_in_msec_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::ManualGatheringParam, freq_span_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalGatheringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalGatheringRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalGatheringRequest, auto_gathering_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalGatheringRequest, manual_gathering_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSample, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSample, sample_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSampleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalSampleList, samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, data_source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, activiy_mask_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, freq_range_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryRequest, time_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, data_source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, num_sweeps_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, num_detects_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, num_total_signals_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, num_query_signals_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, fix_signal_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalTableQueryResponse, hop_signal_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, sweep_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawBody, freq_seg_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawBody, over_threshold_hits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawBody, raw_spectrum_lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawData, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawData, body_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::RawData, signal_segments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DeviceDetectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DeviceDetectResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DeviceDetectResult, fix_signal_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DeviceDetectResult, hop_signal_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::DeviceDetectResult, signal_sample_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, fix_signal_list_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::detection::SignalLayerSurvey, hop_signal_list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::detection::ThresholdSector)},
  { 7, -1, sizeof(::zb::dcts::scenario::detection::UserThresholdParam)},
  { 13, -1, sizeof(::zb::dcts::scenario::detection::HistoryThresholdParam)},
  { 21, -1, sizeof(::zb::dcts::scenario::detection::AdaptiveThresholdParam)},
  { 29, -1, sizeof(::zb::dcts::scenario::detection::NeighborVarThresholdParam)},
  { 39, -1, sizeof(::zb::dcts::scenario::detection::EnergyDetectionParam)},
  { 50, -1, sizeof(::zb::dcts::scenario::detection::ThresholdTrace)},
  { 57, -1, sizeof(::zb::dcts::scenario::detection::FreqSpanFilter)},
  { 63, -1, sizeof(::zb::dcts::scenario::detection::SignalSegmentationParam)},
  { 72, -1, sizeof(::zb::dcts::scenario::detection::HopSignalClusterParam)},
  { 81, -1, sizeof(::zb::dcts::scenario::detection::HopSignalDetectionParam)},
  { 87, -1, sizeof(::zb::dcts::scenario::detection::SignalDetectParam)},
  { 95, -1, sizeof(::zb::dcts::scenario::detection::DetectionParam)},
  { 103, -1, sizeof(::zb::dcts::scenario::detection::SignalFeature)},
  { 112, -1, sizeof(::zb::dcts::scenario::detection::SignalDigest)},
  { 127, -1, sizeof(::zb::dcts::scenario::detection::SignalSegment)},
  { 134, -1, sizeof(::zb::dcts::scenario::detection::HopSignalDigest)},
  { 143, -1, sizeof(::zb::dcts::scenario::detection::HopSignalCluster)},
  { 152, -1, sizeof(::zb::dcts::scenario::detection::FixSignalList)},
  { 158, -1, sizeof(::zb::dcts::scenario::detection::HopSignalList)},
  { 164, -1, sizeof(::zb::dcts::scenario::detection::DetectionRequest)},
  { 171, -1, sizeof(::zb::dcts::scenario::detection::AutoGatheringParam)},
  { 178, -1, sizeof(::zb::dcts::scenario::detection::ManualGatheringParam)},
  { 186, -1, sizeof(::zb::dcts::scenario::detection::SignalGatheringRequest)},
  { 194, -1, sizeof(::zb::dcts::scenario::detection::SignalSample)},
  { 201, -1, sizeof(::zb::dcts::scenario::detection::SignalSampleList)},
  { 207, -1, sizeof(::zb::dcts::scenario::detection::SignalTableQueryRequest)},
  { 217, -1, sizeof(::zb::dcts::scenario::detection::SignalTableQueryResponse)},
  { 229, -1, sizeof(::zb::dcts::scenario::detection::Header)},
  { 239, -1, sizeof(::zb::dcts::scenario::detection::RawBody)},
  { 247, -1, sizeof(::zb::dcts::scenario::detection::RawData)},
  { 255, -1, sizeof(::zb::dcts::scenario::detection::DeviceDetectResult)},
  { 264, -1, sizeof(::zb::dcts::scenario::detection::SignalLayerSurvey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_ThresholdSector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_UserThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HistoryThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_AdaptiveThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_NeighborVarThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_ThresholdTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_FreqSpanFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalSegmentationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HopSignalClusterParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HopSignalDetectionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalDetectParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_DetectionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalDigest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HopSignalDigest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HopSignalCluster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_FixSignalList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_HopSignalList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_DetectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_AutoGatheringParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_ManualGatheringParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalGatheringRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalSample_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalSampleList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalTableQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_RawBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_RawData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::detection::_SignalLayerSurvey_default_instance_),
};

const char descriptor_table_protodef_scenario_2fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030scenario/detection.proto\022\032zb.dcts.scen"
  "ario.detection\032\ndcts.proto\032\023source/sourc"
  "e.proto\032\027scenario/spectrum.proto\032\027scenar"
  "io/scenario.proto\"]\n\017ThresholdSector\022;\n\t"
  "freq_span\030\001 \001(\0132(.zb.dcts.scenario.spect"
  "rum.FrequencySpan\022\r\n\005level\030\002 \001(\002\"R\n\022User"
  "ThresholdParam\022<\n\007sectors\030\001 \003(\0132+.zb.dct"
  "s.scenario.detection.ThresholdSector\"`\n\025"
  "HistoryThresholdParam\022\037\n\004span\030\001 \001(\0132\021.zb"
  ".dcts.TimeSpan\022\026\n\016max_load_count\030\003 \001(\005\022\016"
  "\n\006offset\030\004 \001(\002\"\332\001\n\026AdaptiveThresholdPara"
  "m\022\025\n\raverage_count\030\001 \001(\005\022X\n\016partition_mo"
  "de\030\002 \001(\0162@.zb.dcts.scenario.detection.Ad"
  "aptiveThresholdParam.PartitionMode\022\016\n\006of"
  "fset\030\003 \001(\002\"\?\n\rPartitionMode\022\017\n\013PM_STANDA"
  "RD\020\000\022\020\n\014PM_AGGRESIVE\020\001\022\013\n\007PM_FAST\020\002\"\225\001\n\031"
  "NeighborVarThresholdParam\022\034\n\024noise_varia"
  "nce_scale\030\001 \001(\002\022\032\n\022noise_max_variance\030\002 "
  "\001(\002\022\016\n\006offset\030\003 \001(\002\022\030\n\020lookup_freq_span\030"
  "\004 \001(\001\022\024\n\014smooth_range\030\005 \001(\005\"\377\003\n\024EnergyDe"
  "tectionParam\022\?\n\014active_types\030\001 \003(\0162).zb."
  "dcts.scenario.detection.ThresholdType\022I\n"
  "\005logic\030\002 \001(\0162:.zb.dcts.scenario.detectio"
  "n.EnergyDetectionParam.LogicType\022L\n\021hist"
  "ory_threshold\030\005 \001(\01321.zb.dcts.scenario.d"
  "etection.HistoryThresholdParam\022F\n\016user_t"
  "hreshold\030\006 \001(\0132..zb.dcts.scenario.detect"
  "ion.UserThresholdParam\022N\n\022adaptive_thres"
  "hold\030\007 \001(\01322.zb.dcts.scenario.detection."
  "AdaptiveThresholdParam\022Q\n\022neighbor_thres"
  "hold\030\t \001(\01325.zb.dcts.scenario.detection."
  "NeighborVarThresholdParam\"\"\n\tLogicType\022\n"
  "\n\006LT_AND\020\000\022\t\n\005LT_OR\020\001\"b\n\016ThresholdTrace\022"
  "7\n\004type\030\001 \001(\0162).zb.dcts.scenario.detecti"
  "on.ThresholdType\022\027\n\017threshold_trace\030\002 \003("
  "\002\"N\n\016FreqSpanFilter\022<\n\nfreq_spans\030\001 \003(\0132"
  "(.zb.dcts.scenario.spectrum.FrequencySpa"
  "n\"\220\001\n\027SignalSegmentationParam\022$\n\034freq_ce"
  "nter_jitter_tolerance\030\001 \001(\002\022\"\n\032freq_bord"
  "er_blur_tolerance\030\002 \001(\002\022\017\n\007min_rss\030\003 \001(\002"
  "\022\032\n\022time_gap_tolerance\030\004 \001(\005\"\262\001\n\025HopSign"
  "alClusterParam\022\014\n\004name\030\001 \001(\t\022A\n\017frequenc"
  "y_range\030\002 \001(\0132(.zb.dcts.scenario.spectru"
  "m.FrequencySpan\022)\n\020band_width_range\030\003 \001("
  "\0132\017.zb.dcts.DRange\022\035\n\025freq_jitter_tolera"
  "nce\030\004 \001(\002\"i\n\027HopSignalDetectionParam\022N\n\023"
  "hop_signal_clusters\030\001 \003(\01321.zb.dcts.scen"
  "ario.detection.HopSignalClusterParam\"\203\002\n"
  "\021SignalDetectParam\022>\n\nwhite_list\030\001 \001(\0132*"
  ".zb.dcts.scenario.detection.FreqSpanFilt"
  "er\022U\n\030signal_segmenation_param\030\002 \001(\01323.z"
  "b.dcts.scenario.detection.SignalSegmenta"
  "tionParam\022W\n\032hop_signal_detection_param\030"
  "\003 \001(\01323.zb.dcts.scenario.detection.HopSi"
  "gnalDetectionParam\"\304\001\n\016DetectionParam\022\027\n"
  "\017result_interval\030\001 \001(\005\022M\n\023energy_detect_"
  "param\030\002 \001(\01320.zb.dcts.scenario.detection"
  ".EnergyDetectionParam\022J\n\023signal_detect_p"
  "aram\030\003 \001(\0132-.zb.dcts.scenario.detection."
  "SignalDetectParam\"\263\001\n\rSignalFeature\022\027\n\017s"
  "equence_number\030\001 \001(\005\022:\n\013signal_band\030\002 \001("
  "\0132%.zb.dcts.scenario.spectrum.SignalBand"
  "\022(\n\tamplitude\030\004 \001(\0132\025.zb.dcts.StatisticV"
  "al\022#\n\004hits\030\005 \001(\0132\025.zb.dcts.StatisticVal\""
  "\355\002\n\014SignalDigest\022\n\n\002id\030\001 \001(\t\022<\n\010activity"
  "\030\002 \001(\0162*.zb.dcts.scenario.detection.Sign"
  "alActivity\022*\n\013center_freq\030\003 \001(\0132\025.zb.dct"
  "s.StatisticVal\022)\n\nband_width\030\004 \001(\0132\025.zb."
  "dcts.StatisticVal\022(\n\tamplitude\030\005 \001(\0132\025.z"
  "b.dcts.StatisticVal\022)\n\016emit_time_span\030\006 "
  "\001(\0132\021.zb.dcts.TimeSpan\022\024\n\014num_features\030\007"
  " \001(\005\022$\n\016dir_of_arrival\030\t \001(\0132\014.zb.dcts.D"
  "OA\022\026\n\016classification\030\n \001(\t\022\023\n\013descriptio"
  "n\030\013 \001(\t\"\215\001\n\rSignalSegment\0228\n\006digest\030\001 \001("
  "\0132(.zb.dcts.scenario.detection.SignalDig"
  "est\022B\n\017feature_details\030\002 \003(\0132).zb.dcts.s"
  "cenario.detection.SignalFeature\"\250\001\n\017HopS"
  "ignalDigest\022*\n\013center_freq\030\001 \001(\0132\025.zb.dc"
  "ts.StatisticVal\022)\n\nband_width\030\002 \001(\0132\025.zb"
  ".dcts.StatisticVal\022(\n\tamplitude\030\003 \001(\0132\025."
  "zb.dcts.StatisticVal\022\024\n\014num_features\030\005 \001"
  "(\005\"\310\001\n\020HopSignalCluster\022\014\n\004name\030\001 \001(\t\022<\n"
  "\010activity\030\002 \001(\0162*.zb.dcts.scenario.detec"
  "tion.SignalActivity\022)\n\016emit_time_span\030\003 "
  "\001(\0132\021.zb.dcts.TimeSpan\022=\n\010freq_set\030\004 \003(\013"
  "2+.zb.dcts.scenario.detection.HopSignalD"
  "igest\"O\n\rFixSignalList\022>\n\013fix_signals\030\001 "
  "\003(\0132).zb.dcts.scenario.detection.SignalS"
  "egment\"Z\n\rHopSignalList\022I\n\023hop_signal_cl"
  "usters\030\001 \003(\0132,.zb.dcts.scenario.detectio"
  "n.HopSignalCluster\"\214\001\n\020DetectionRequest\022"
  "3\n\tresponser\030\001 \001(\0132 .zb.dcts.scenario.Sc"
  "enarioTaskId\022C\n\017detection_param\030\002 \001(\0132*."
  "zb.dcts.scenario.detection.DetectionPara"
  "m\"J\n\022AutoGatheringParam\022\031\n\021time_span_in_"
  "msec\030\001 \001(\005\022\031\n\021signal_candidates\030\002 \003(\t\"z\n"
  "\024ManualGatheringParam\022\n\n\002id\030\001 \001(\t\022\031\n\021tim"
  "e_span_in_msec\030\002 \001(\005\022;\n\tfreq_span\030\003 \001(\0132"
  "(.zb.dcts.scenario.spectrum.FrequencySpa"
  "n\"\355\001\n\026SignalGatheringRequest\0223\n\tresponse"
  "r\030\001 \001(\0132 .zb.dcts.scenario.ScenarioTaskI"
  "d\022L\n\024auto_gathering_param\030\002 \001(\0132..zb.dct"
  "s.scenario.detection.AutoGatheringParam\022"
  "P\n\026manual_gathering_param\030\003 \001(\01320.zb.dct"
  "s.scenario.detection.ManualGatheringPara"
  "m\"Z\n\014SignalSample\022\n\n\002id\030\001 \001(\t\022>\n\014sample_"
  "block\030\002 \001(\0132(.zb.dcts.scenario.spectrum."
  "SpectrumBlock\"M\n\020SignalSampleList\0229\n\007sam"
  "ples\030\001 \003(\0132(.zb.dcts.scenario.detection."
  "SignalSample\"\212\002\n\027SignalTableQueryRequest"
  "\0223\n\tresponser\030\001 \001(\0132 .zb.dcts.scenario.S"
  "cenarioTaskId\022-\n\013data_source\030\002 \001(\0132\030.zb."
  "dcts.source.SourceId\022&\n\014activiy_mask\030\003 \001"
  "(\0132\020.zb.dcts.Integer\022<\n\nfreq_range\030\004 \001(\013"
  "2(.zb.dcts.scenario.spectrum.FrequencySp"
  "an\022%\n\ntime_range\030\005 \001(\0132\021.zb.dcts.TimeSpa"
  "n\"\262\002\n\030SignalTableQueryResponse\022-\n\013data_s"
  "ource\030\001 \001(\0132\030.zb.dcts.source.SourceId\022\022\n"
  "\nnum_sweeps\030\002 \001(\005\022\023\n\013num_detects\030\003 \001(\005\022\031"
  "\n\021num_total_signals\030\004 \001(\005\022\031\n\021num_query_s"
  "ignals\030\005 \001(\005\022A\n\017fix_signal_list\030\007 \003(\0132(."
  "zb.dcts.scenario.detection.SignalDigest\022"
  "E\n\017hop_signal_list\030\010 \003(\0132,.zb.dcts.scena"
  "rio.detection.HopSignalCluster\"\267\001\n\006Heade"
  "r\022-\n\013result_from\030\001 \001(\0132\030.zb.dcts.source."
  "SourceId\022\027\n\017sequence_number\030\003 \001(\r\022\023\n\013swe"
  "ep_count\030\004 \001(\r\022$\n\ttime_span\030\005 \001(\0132\021.zb.d"
  "cts.TimeSpan\022*\n\017device_position\030\006 \001(\0132\021."
  "zb.dcts.Position\"\323\001\n\007RawBody\022=\n\010freq_seg"
  "\030\001 \001(\0132+.zb.dcts.scenario.spectrum.Frequ"
  "encySegment\022D\n\023over_threshold_hits\030\002 \001(\013"
  "2\'.zb.dcts.scenario.spectrum.SpectrumLin"
  "e\022C\n\022raw_spectrum_lines\030\003 \003(\0132\'.zb.dcts."
  "scenario.spectrum.SpectrumLine\"\232\001\n\007RawDa"
  "ta\0222\n\006header\030\001 \001(\0132\".zb.dcts.scenario.de"
  "tection.Header\0221\n\004body\030\002 \001(\0132#.zb.dcts.s"
  "cenario.detection.RawBody\022(\n\017signal_segm"
  "ents\030\003 \003(\0132\017.zb.dcts.IRange\"\232\002\n\022DeviceDe"
  "tectResult\0222\n\006header\030\001 \001(\0132\".zb.dcts.sce"
  "nario.detection.Header\022B\n\017fix_signal_lis"
  "t\030\003 \001(\0132).zb.dcts.scenario.detection.Fix"
  "SignalList\022B\n\017hop_signal_list\030\004 \001(\0132).zb"
  ".dcts.scenario.detection.HopSignalList\022H"
  "\n\022signal_sample_list\030\005 \001(\0132,.zb.dcts.sce"
  "nario.detection.SignalSampleList\"\231\002\n\021Sig"
  "nalLayerSurvey\022-\n\013result_from\030\001 \001(\0132\030.zb"
  ".dcts.source.SourceId\022&\n\ntime_stamp\030\002 \001("
  "\0132\022.zb.dcts.Timestamp\022#\n\010position\030\003 \001(\0132"
  "\021.zb.dcts.Position\022A\n\017fix_signal_list\030\004 "
  "\003(\0132(.zb.dcts.scenario.detection.SignalD"
  "igest\022E\n\017hop_signal_list\030\005 \003(\0132,.zb.dcts"
  ".scenario.detection.HopSignalCluster*I\n\r"
  "ThresholdType\022\013\n\007HISTORY\020\000\022\017\n\013USER_DEFIN"
  "E\020\001\022\014\n\010ADAPTIVE\020\002\022\014\n\010NEIGHBOR\020\003*Q\n\016Signa"
  "lActivity\022\013\n\007UNKNOWN\020\000\022\n\n\006ACTIVE\020\001\022\014\n\010IN"
  "ACTIVE\020\002\022\013\n\007DECAYED\020\004\022\013\n\007REMOVED\020\010b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fdetection_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fdetection_2eproto_sccs[33] = {
  &scc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto.base,
  &scc_info_AutoGatheringParam_scenario_2fdetection_2eproto.base,
  &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,
  &scc_info_DetectionRequest_scenario_2fdetection_2eproto.base,
  &scc_info_DeviceDetectResult_scenario_2fdetection_2eproto.base,
  &scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto.base,
  &scc_info_FixSignalList_scenario_2fdetection_2eproto.base,
  &scc_info_FreqSpanFilter_scenario_2fdetection_2eproto.base,
  &scc_info_Header_scenario_2fdetection_2eproto.base,
  &scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto.base,
  &scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base,
  &scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto.base,
  &scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto.base,
  &scc_info_HopSignalDigest_scenario_2fdetection_2eproto.base,
  &scc_info_HopSignalList_scenario_2fdetection_2eproto.base,
  &scc_info_ManualGatheringParam_scenario_2fdetection_2eproto.base,
  &scc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto.base,
  &scc_info_RawBody_scenario_2fdetection_2eproto.base,
  &scc_info_RawData_scenario_2fdetection_2eproto.base,
  &scc_info_SignalDetectParam_scenario_2fdetection_2eproto.base,
  &scc_info_SignalDigest_scenario_2fdetection_2eproto.base,
  &scc_info_SignalFeature_scenario_2fdetection_2eproto.base,
  &scc_info_SignalGatheringRequest_scenario_2fdetection_2eproto.base,
  &scc_info_SignalLayerSurvey_scenario_2fdetection_2eproto.base,
  &scc_info_SignalSample_scenario_2fdetection_2eproto.base,
  &scc_info_SignalSampleList_scenario_2fdetection_2eproto.base,
  &scc_info_SignalSegment_scenario_2fdetection_2eproto.base,
  &scc_info_SignalSegmentationParam_scenario_2fdetection_2eproto.base,
  &scc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto.base,
  &scc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto.base,
  &scc_info_ThresholdSector_scenario_2fdetection_2eproto.base,
  &scc_info_ThresholdTrace_scenario_2fdetection_2eproto.base,
  &scc_info_UserThresholdParam_scenario_2fdetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fdetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fdetection_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fdetection_2eproto, "scenario/detection.proto", 6242,
  &descriptor_table_scenario_2fdetection_2eproto_once, descriptor_table_scenario_2fdetection_2eproto_sccs, descriptor_table_scenario_2fdetection_2eproto_deps, 33, 4,
  schemas, file_default_instances, TableStruct_scenario_2fdetection_2eproto::offsets,
  file_level_metadata_scenario_2fdetection_2eproto, 33, file_level_enum_descriptors_scenario_2fdetection_2eproto, file_level_service_descriptors_scenario_2fdetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fdetection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fdetection_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace detection {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdaptiveThresholdParam_PartitionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fdetection_2eproto);
  return file_level_enum_descriptors_scenario_2fdetection_2eproto[0];
}
bool AdaptiveThresholdParam_PartitionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_STANDARD;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_AGGRESIVE;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PM_FAST;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PartitionMode_MIN;
constexpr AdaptiveThresholdParam_PartitionMode AdaptiveThresholdParam::PartitionMode_MAX;
constexpr int AdaptiveThresholdParam::PartitionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnergyDetectionParam_LogicType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fdetection_2eproto);
  return file_level_enum_descriptors_scenario_2fdetection_2eproto[1];
}
bool EnergyDetectionParam_LogicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LT_AND;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LT_OR;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LogicType_MIN;
constexpr EnergyDetectionParam_LogicType EnergyDetectionParam::LogicType_MAX;
constexpr int EnergyDetectionParam::LogicType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThresholdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fdetection_2eproto);
  return file_level_enum_descriptors_scenario_2fdetection_2eproto[2];
}
bool ThresholdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignalActivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fdetection_2eproto);
  return file_level_enum_descriptors_scenario_2fdetection_2eproto[3];
}
bool SignalActivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ThresholdSector::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_ThresholdSector_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
}
class ThresholdSector::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const ThresholdSector* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
ThresholdSector::_Internal::freq_span(const ThresholdSector* msg) {
  return *msg->freq_span_;
}
void ThresholdSector::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
ThresholdSector::ThresholdSector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.ThresholdSector)
}
ThresholdSector::ThresholdSector(const ThresholdSector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.ThresholdSector)
}

void ThresholdSector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThresholdSector_scenario_2fdetection_2eproto.base);
  ::memset(&freq_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&freq_span_)) + sizeof(level_));
}

ThresholdSector::~ThresholdSector() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.ThresholdSector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThresholdSector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void ThresholdSector::ArenaDtor(void* object) {
  ThresholdSector* _this = reinterpret_cast< ThresholdSector* >(object);
  (void)_this;
}
void ThresholdSector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdSector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThresholdSector& ThresholdSector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThresholdSector_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void ThresholdSector::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.ThresholdSector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdSector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdSector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.ThresholdSector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // float level = 2;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.ThresholdSector)
  return target;
}

size_t ThresholdSector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.ThresholdSector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // float level = 2;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdSector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.ThresholdSector)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdSector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdSector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.ThresholdSector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.ThresholdSector)
    MergeFrom(*source);
  }
}

void ThresholdSector::MergeFrom(const ThresholdSector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.ThresholdSector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (!(from.level() <= 0 && from.level() >= 0)) {
    _internal_set_level(from._internal_level());
  }
}

void ThresholdSector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.ThresholdSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdSector::CopyFrom(const ThresholdSector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.ThresholdSector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdSector::IsInitialized() const {
  return true;
}

void ThresholdSector::InternalSwap(ThresholdSector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThresholdSector, level_)
      + sizeof(ThresholdSector::level_)
      - PROTOBUF_FIELD_OFFSET(ThresholdSector, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdSector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserThresholdParam::InitAsDefaultInstance() {
}
class UserThresholdParam::_Internal {
 public:
};

UserThresholdParam::UserThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sectors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.UserThresholdParam)
}
UserThresholdParam::UserThresholdParam(const UserThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sectors_(from.sectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.UserThresholdParam)
}

void UserThresholdParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserThresholdParam_scenario_2fdetection_2eproto.base);
}

UserThresholdParam::~UserThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.UserThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserThresholdParam::ArenaDtor(void* object) {
  UserThresholdParam* _this = reinterpret_cast< UserThresholdParam* >(object);
  (void)_this;
}
void UserThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserThresholdParam& UserThresholdParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserThresholdParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void UserThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.UserThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sectors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.ThresholdSector sectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.UserThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.ThresholdSector sectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sectors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.UserThresholdParam)
  return target;
}

size_t UserThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.UserThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.ThresholdSector sectors = 1;
  total_size += 1UL * this->_internal_sectors_size();
  for (const auto& msg : this->sectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.UserThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const UserThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.UserThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.UserThresholdParam)
    MergeFrom(*source);
  }
}

void UserThresholdParam::MergeFrom(const UserThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.UserThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sectors_.MergeFrom(from.sectors_);
}

void UserThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.UserThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserThresholdParam::CopyFrom(const UserThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.UserThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserThresholdParam::IsInitialized() const {
  return true;
}

void UserThresholdParam::InternalSwap(UserThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sectors_.InternalSwap(&other->sectors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoryThresholdParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_HistoryThresholdParam_default_instance_._instance.get_mutable()->span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class HistoryThresholdParam::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& span(const HistoryThresholdParam* msg);
};

const ::zb::dcts::TimeSpan&
HistoryThresholdParam::_Internal::span(const HistoryThresholdParam* msg) {
  return *msg->span_;
}
void HistoryThresholdParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
HistoryThresholdParam::HistoryThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HistoryThresholdParam)
}
HistoryThresholdParam::HistoryThresholdParam(const HistoryThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::TimeSpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  ::memcpy(&max_load_count_, &from.max_load_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&max_load_count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HistoryThresholdParam)
}

void HistoryThresholdParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto.base);
  ::memset(&span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&span_)) + sizeof(offset_));
}

HistoryThresholdParam::~HistoryThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HistoryThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void HistoryThresholdParam::ArenaDtor(void* object) {
  HistoryThresholdParam* _this = reinterpret_cast< HistoryThresholdParam* >(object);
  (void)_this;
}
void HistoryThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryThresholdParam& HistoryThresholdParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryThresholdParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HistoryThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  ::memset(&max_load_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&max_load_count_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TimeSpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_load_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_load_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // int32 max_load_count = 3;
  if (this->max_load_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_load_count(), target);
  }

  // float offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HistoryThresholdParam)
  return target;
}

size_t HistoryThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // int32 max_load_count = 3;
  if (this->max_load_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_load_count());
  }

  // float offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HistoryThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HistoryThresholdParam)
    MergeFrom(*source);
  }
}

void HistoryThresholdParam::MergeFrom(const HistoryThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_span());
  }
  if (from.max_load_count() != 0) {
    _internal_set_max_load_count(from._internal_max_load_count());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
}

void HistoryThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryThresholdParam::CopyFrom(const HistoryThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HistoryThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryThresholdParam::IsInitialized() const {
  return true;
}

void HistoryThresholdParam::InternalSwap(HistoryThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryThresholdParam, offset_)
      + sizeof(HistoryThresholdParam::offset_)
      - PROTOBUF_FIELD_OFFSET(HistoryThresholdParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdaptiveThresholdParam::InitAsDefaultInstance() {
}
class AdaptiveThresholdParam::_Internal {
 public:
};

AdaptiveThresholdParam::AdaptiveThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.AdaptiveThresholdParam)
}
AdaptiveThresholdParam::AdaptiveThresholdParam(const AdaptiveThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_count_, &from.average_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.AdaptiveThresholdParam)
}

void AdaptiveThresholdParam::SharedCtor() {
  ::memset(&average_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
}

AdaptiveThresholdParam::~AdaptiveThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdaptiveThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AdaptiveThresholdParam::ArenaDtor(void* object) {
  AdaptiveThresholdParam* _this = reinterpret_cast< AdaptiveThresholdParam* >(object);
  (void)_this;
}
void AdaptiveThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdaptiveThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdaptiveThresholdParam& AdaptiveThresholdParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdaptiveThresholdParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void AdaptiveThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&average_count_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdaptiveThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 average_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_partition_mode(static_cast<::zb::dcts::scenario::detection::AdaptiveThresholdParam_PartitionMode>(val));
        } else goto handle_unusual;
        continue;
      // float offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdaptiveThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 average_count = 1;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_average_count(), target);
  }

  // .zb.dcts.scenario.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
  if (this->partition_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_partition_mode(), target);
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  return target;
}

size_t AdaptiveThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 average_count = 1;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // .zb.dcts.scenario.detection.AdaptiveThresholdParam.PartitionMode partition_mode = 2;
  if (this->partition_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_partition_mode());
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaptiveThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AdaptiveThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdaptiveThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.AdaptiveThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.AdaptiveThresholdParam)
    MergeFrom(*source);
  }
}

void AdaptiveThresholdParam::MergeFrom(const AdaptiveThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.partition_mode() != 0) {
    _internal_set_partition_mode(from._internal_partition_mode());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
}

void AdaptiveThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaptiveThresholdParam::CopyFrom(const AdaptiveThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.AdaptiveThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaptiveThresholdParam::IsInitialized() const {
  return true;
}

void AdaptiveThresholdParam::InternalSwap(AdaptiveThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdaptiveThresholdParam, offset_)
      + sizeof(AdaptiveThresholdParam::offset_)
      - PROTOBUF_FIELD_OFFSET(AdaptiveThresholdParam, average_count_)>(
          reinterpret_cast<char*>(&average_count_),
          reinterpret_cast<char*>(&other->average_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdaptiveThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NeighborVarThresholdParam::InitAsDefaultInstance() {
}
class NeighborVarThresholdParam::_Internal {
 public:
};

NeighborVarThresholdParam::NeighborVarThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.NeighborVarThresholdParam)
}
NeighborVarThresholdParam::NeighborVarThresholdParam(const NeighborVarThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&noise_variance_scale_, &from.noise_variance_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&smooth_range_) -
    reinterpret_cast<char*>(&noise_variance_scale_)) + sizeof(smooth_range_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.NeighborVarThresholdParam)
}

void NeighborVarThresholdParam::SharedCtor() {
  ::memset(&noise_variance_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smooth_range_) -
      reinterpret_cast<char*>(&noise_variance_scale_)) + sizeof(smooth_range_));
}

NeighborVarThresholdParam::~NeighborVarThresholdParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NeighborVarThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NeighborVarThresholdParam::ArenaDtor(void* object) {
  NeighborVarThresholdParam* _this = reinterpret_cast< NeighborVarThresholdParam* >(object);
  (void)_this;
}
void NeighborVarThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeighborVarThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeighborVarThresholdParam& NeighborVarThresholdParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NeighborVarThresholdParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void NeighborVarThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&noise_variance_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&smooth_range_) -
      reinterpret_cast<char*>(&noise_variance_scale_)) + sizeof(smooth_range_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighborVarThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float noise_variance_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          noise_variance_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float noise_max_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          noise_max_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double lookup_freq_span = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          lookup_freq_span_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 smooth_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          smooth_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeighborVarThresholdParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float noise_variance_scale = 1;
  if (!(this->noise_variance_scale() <= 0 && this->noise_variance_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_noise_variance_scale(), target);
  }

  // float noise_max_variance = 2;
  if (!(this->noise_max_variance() <= 0 && this->noise_max_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_noise_max_variance(), target);
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset(), target);
  }

  // double lookup_freq_span = 4;
  if (!(this->lookup_freq_span() <= 0 && this->lookup_freq_span() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_lookup_freq_span(), target);
  }

  // int32 smooth_range = 5;
  if (this->smooth_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_smooth_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  return target;
}

size_t NeighborVarThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float noise_variance_scale = 1;
  if (!(this->noise_variance_scale() <= 0 && this->noise_variance_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float noise_max_variance = 2;
  if (!(this->noise_max_variance() <= 0 && this->noise_max_variance() >= 0)) {
    total_size += 1 + 4;
  }

  // double lookup_freq_span = 4;
  if (!(this->lookup_freq_span() <= 0 && this->lookup_freq_span() >= 0)) {
    total_size += 1 + 8;
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 smooth_range = 5;
  if (this->smooth_range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_smooth_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeighborVarThresholdParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighborVarThresholdParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NeighborVarThresholdParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.NeighborVarThresholdParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.NeighborVarThresholdParam)
    MergeFrom(*source);
  }
}

void NeighborVarThresholdParam::MergeFrom(const NeighborVarThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.noise_variance_scale() <= 0 && from.noise_variance_scale() >= 0)) {
    _internal_set_noise_variance_scale(from._internal_noise_variance_scale());
  }
  if (!(from.noise_max_variance() <= 0 && from.noise_max_variance() >= 0)) {
    _internal_set_noise_max_variance(from._internal_noise_max_variance());
  }
  if (!(from.lookup_freq_span() <= 0 && from.lookup_freq_span() >= 0)) {
    _internal_set_lookup_freq_span(from._internal_lookup_freq_span());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.smooth_range() != 0) {
    _internal_set_smooth_range(from._internal_smooth_range());
  }
}

void NeighborVarThresholdParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborVarThresholdParam::CopyFrom(const NeighborVarThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.NeighborVarThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborVarThresholdParam::IsInitialized() const {
  return true;
}

void NeighborVarThresholdParam::InternalSwap(NeighborVarThresholdParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NeighborVarThresholdParam, smooth_range_)
      + sizeof(NeighborVarThresholdParam::smooth_range_)
      - PROTOBUF_FIELD_OFFSET(NeighborVarThresholdParam, noise_variance_scale_)>(
          reinterpret_cast<char*>(&noise_variance_scale_),
          reinterpret_cast<char*>(&other->noise_variance_scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighborVarThresholdParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnergyDetectionParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_._instance.get_mutable()->history_threshold_ = const_cast< ::zb::dcts::scenario::detection::HistoryThresholdParam*>(
      ::zb::dcts::scenario::detection::HistoryThresholdParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_._instance.get_mutable()->user_threshold_ = const_cast< ::zb::dcts::scenario::detection::UserThresholdParam*>(
      ::zb::dcts::scenario::detection::UserThresholdParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_._instance.get_mutable()->adaptive_threshold_ = const_cast< ::zb::dcts::scenario::detection::AdaptiveThresholdParam*>(
      ::zb::dcts::scenario::detection::AdaptiveThresholdParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_EnergyDetectionParam_default_instance_._instance.get_mutable()->neighbor_threshold_ = const_cast< ::zb::dcts::scenario::detection::NeighborVarThresholdParam*>(
      ::zb::dcts::scenario::detection::NeighborVarThresholdParam::internal_default_instance());
}
class EnergyDetectionParam::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::HistoryThresholdParam& history_threshold(const EnergyDetectionParam* msg);
  static const ::zb::dcts::scenario::detection::UserThresholdParam& user_threshold(const EnergyDetectionParam* msg);
  static const ::zb::dcts::scenario::detection::AdaptiveThresholdParam& adaptive_threshold(const EnergyDetectionParam* msg);
  static const ::zb::dcts::scenario::detection::NeighborVarThresholdParam& neighbor_threshold(const EnergyDetectionParam* msg);
};

const ::zb::dcts::scenario::detection::HistoryThresholdParam&
EnergyDetectionParam::_Internal::history_threshold(const EnergyDetectionParam* msg) {
  return *msg->history_threshold_;
}
const ::zb::dcts::scenario::detection::UserThresholdParam&
EnergyDetectionParam::_Internal::user_threshold(const EnergyDetectionParam* msg) {
  return *msg->user_threshold_;
}
const ::zb::dcts::scenario::detection::AdaptiveThresholdParam&
EnergyDetectionParam::_Internal::adaptive_threshold(const EnergyDetectionParam* msg) {
  return *msg->adaptive_threshold_;
}
const ::zb::dcts::scenario::detection::NeighborVarThresholdParam&
EnergyDetectionParam::_Internal::neighbor_threshold(const EnergyDetectionParam* msg) {
  return *msg->neighbor_threshold_;
}
EnergyDetectionParam::EnergyDetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  active_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.EnergyDetectionParam)
}
EnergyDetectionParam::EnergyDetectionParam(const EnergyDetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      active_types_(from.active_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_history_threshold()) {
    history_threshold_ = new ::zb::dcts::scenario::detection::HistoryThresholdParam(*from.history_threshold_);
  } else {
    history_threshold_ = nullptr;
  }
  if (from._internal_has_user_threshold()) {
    user_threshold_ = new ::zb::dcts::scenario::detection::UserThresholdParam(*from.user_threshold_);
  } else {
    user_threshold_ = nullptr;
  }
  if (from._internal_has_adaptive_threshold()) {
    adaptive_threshold_ = new ::zb::dcts::scenario::detection::AdaptiveThresholdParam(*from.adaptive_threshold_);
  } else {
    adaptive_threshold_ = nullptr;
  }
  if (from._internal_has_neighbor_threshold()) {
    neighbor_threshold_ = new ::zb::dcts::scenario::detection::NeighborVarThresholdParam(*from.neighbor_threshold_);
  } else {
    neighbor_threshold_ = nullptr;
  }
  logic_ = from.logic_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.EnergyDetectionParam)
}

void EnergyDetectionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto.base);
  ::memset(&history_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logic_) -
      reinterpret_cast<char*>(&history_threshold_)) + sizeof(logic_));
}

EnergyDetectionParam::~EnergyDetectionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.EnergyDetectionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnergyDetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete history_threshold_;
  if (this != internal_default_instance()) delete user_threshold_;
  if (this != internal_default_instance()) delete adaptive_threshold_;
  if (this != internal_default_instance()) delete neighbor_threshold_;
}

void EnergyDetectionParam::ArenaDtor(void* object) {
  EnergyDetectionParam* _this = reinterpret_cast< EnergyDetectionParam* >(object);
  (void)_this;
}
void EnergyDetectionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnergyDetectionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnergyDetectionParam& EnergyDetectionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnergyDetectionParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void EnergyDetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_types_.Clear();
  if (GetArena() == nullptr && history_threshold_ != nullptr) {
    delete history_threshold_;
  }
  history_threshold_ = nullptr;
  if (GetArena() == nullptr && user_threshold_ != nullptr) {
    delete user_threshold_;
  }
  user_threshold_ = nullptr;
  if (GetArena() == nullptr && adaptive_threshold_ != nullptr) {
    delete adaptive_threshold_;
  }
  adaptive_threshold_ = nullptr;
  if (GetArena() == nullptr && neighbor_threshold_ != nullptr) {
    delete neighbor_threshold_;
  }
  neighbor_threshold_ = nullptr;
  logic_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnergyDetectionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.ThresholdType active_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_active_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_active_types(static_cast<::zb::dcts::scenario::detection::ThresholdType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.EnergyDetectionParam.LogicType logic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logic(static_cast<::zb::dcts::scenario::detection::EnergyDetectionParam_LogicType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.HistoryThresholdParam history_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.UserThresholdParam user_threshold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.AdaptiveThresholdParam adaptive_threshold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adaptive_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.NeighborVarThresholdParam neighbor_threshold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbor_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnergyDetectionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.ThresholdType active_types = 1;
  {
    int byte_size = _active_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, active_types_, byte_size, target);
    }
  }

  // .zb.dcts.scenario.detection.EnergyDetectionParam.LogicType logic = 2;
  if (this->logic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_logic(), target);
  }

  // .zb.dcts.scenario.detection.HistoryThresholdParam history_threshold = 5;
  if (this->has_history_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::history_threshold(this), target, stream);
  }

  // .zb.dcts.scenario.detection.UserThresholdParam user_threshold = 6;
  if (this->has_user_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::user_threshold(this), target, stream);
  }

  // .zb.dcts.scenario.detection.AdaptiveThresholdParam adaptive_threshold = 7;
  if (this->has_adaptive_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::adaptive_threshold(this), target, stream);
  }

  // .zb.dcts.scenario.detection.NeighborVarThresholdParam neighbor_threshold = 9;
  if (this->has_neighbor_threshold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::neighbor_threshold(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.EnergyDetectionParam)
  return target;
}

size_t EnergyDetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.ThresholdType active_types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_active_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_active_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _active_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.detection.HistoryThresholdParam history_threshold = 5;
  if (this->has_history_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *history_threshold_);
  }

  // .zb.dcts.scenario.detection.UserThresholdParam user_threshold = 6;
  if (this->has_user_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_threshold_);
  }

  // .zb.dcts.scenario.detection.AdaptiveThresholdParam adaptive_threshold = 7;
  if (this->has_adaptive_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adaptive_threshold_);
  }

  // .zb.dcts.scenario.detection.NeighborVarThresholdParam neighbor_threshold = 9;
  if (this->has_neighbor_threshold()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbor_threshold_);
  }

  // .zb.dcts.scenario.detection.EnergyDetectionParam.LogicType logic = 2;
  if (this->logic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_logic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnergyDetectionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const EnergyDetectionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnergyDetectionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.EnergyDetectionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.EnergyDetectionParam)
    MergeFrom(*source);
  }
}

void EnergyDetectionParam::MergeFrom(const EnergyDetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_types_.MergeFrom(from.active_types_);
  if (from.has_history_threshold()) {
    _internal_mutable_history_threshold()->::zb::dcts::scenario::detection::HistoryThresholdParam::MergeFrom(from._internal_history_threshold());
  }
  if (from.has_user_threshold()) {
    _internal_mutable_user_threshold()->::zb::dcts::scenario::detection::UserThresholdParam::MergeFrom(from._internal_user_threshold());
  }
  if (from.has_adaptive_threshold()) {
    _internal_mutable_adaptive_threshold()->::zb::dcts::scenario::detection::AdaptiveThresholdParam::MergeFrom(from._internal_adaptive_threshold());
  }
  if (from.has_neighbor_threshold()) {
    _internal_mutable_neighbor_threshold()->::zb::dcts::scenario::detection::NeighborVarThresholdParam::MergeFrom(from._internal_neighbor_threshold());
  }
  if (from.logic() != 0) {
    _internal_set_logic(from._internal_logic());
  }
}

void EnergyDetectionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnergyDetectionParam::CopyFrom(const EnergyDetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.EnergyDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnergyDetectionParam::IsInitialized() const {
  return true;
}

void EnergyDetectionParam::InternalSwap(EnergyDetectionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  active_types_.InternalSwap(&other->active_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnergyDetectionParam, logic_)
      + sizeof(EnergyDetectionParam::logic_)
      - PROTOBUF_FIELD_OFFSET(EnergyDetectionParam, history_threshold_)>(
          reinterpret_cast<char*>(&history_threshold_),
          reinterpret_cast<char*>(&other->history_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnergyDetectionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThresholdTrace::InitAsDefaultInstance() {
}
class ThresholdTrace::_Internal {
 public:
};

ThresholdTrace::ThresholdTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  threshold_trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.ThresholdTrace)
}
ThresholdTrace::ThresholdTrace(const ThresholdTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      threshold_trace_(from.threshold_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.ThresholdTrace)
}

void ThresholdTrace::SharedCtor() {
  type_ = 0;
}

ThresholdTrace::~ThresholdTrace() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.ThresholdTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThresholdTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThresholdTrace::ArenaDtor(void* object) {
  ThresholdTrace* _this = reinterpret_cast< ThresholdTrace* >(object);
  (void)_this;
}
void ThresholdTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThresholdTrace& ThresholdTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThresholdTrace_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void ThresholdTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.ThresholdTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threshold_trace_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.detection.ThresholdType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::detection::ThresholdType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float threshold_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_threshold_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_threshold_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.ThresholdTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.ThresholdType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated float threshold_trace = 2;
  if (this->_internal_threshold_trace_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_threshold_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.ThresholdTrace)
  return target;
}

size_t ThresholdTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.ThresholdTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float threshold_trace = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_threshold_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _threshold_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.detection.ThresholdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.ThresholdTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.ThresholdTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.ThresholdTrace)
    MergeFrom(*source);
  }
}

void ThresholdTrace::MergeFrom(const ThresholdTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.ThresholdTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threshold_trace_.MergeFrom(from.threshold_trace_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ThresholdTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.ThresholdTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdTrace::CopyFrom(const ThresholdTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.ThresholdTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdTrace::IsInitialized() const {
  return true;
}

void ThresholdTrace::InternalSwap(ThresholdTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  threshold_trace_.InternalSwap(&other->threshold_trace_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FreqSpanFilter::InitAsDefaultInstance() {
}
class FreqSpanFilter::_Internal {
 public:
};

void FreqSpanFilter::clear_freq_spans() {
  freq_spans_.Clear();
}
FreqSpanFilter::FreqSpanFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freq_spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.FreqSpanFilter)
}
FreqSpanFilter::FreqSpanFilter(const FreqSpanFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freq_spans_(from.freq_spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.FreqSpanFilter)
}

void FreqSpanFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FreqSpanFilter_scenario_2fdetection_2eproto.base);
}

FreqSpanFilter::~FreqSpanFilter() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.FreqSpanFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FreqSpanFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FreqSpanFilter::ArenaDtor(void* object) {
  FreqSpanFilter* _this = reinterpret_cast< FreqSpanFilter* >(object);
  (void)_this;
}
void FreqSpanFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreqSpanFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FreqSpanFilter& FreqSpanFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FreqSpanFilter_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void FreqSpanFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.FreqSpanFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_spans_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreqSpanFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.spectrum.FrequencySpan freq_spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freq_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FreqSpanFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.FreqSpanFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.FrequencySpan freq_spans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freq_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_freq_spans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.FreqSpanFilter)
  return target;
}

size_t FreqSpanFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.FreqSpanFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.FrequencySpan freq_spans = 1;
  total_size += 1UL * this->_internal_freq_spans_size();
  for (const auto& msg : this->freq_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FreqSpanFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.FreqSpanFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const FreqSpanFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FreqSpanFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.FreqSpanFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.FreqSpanFilter)
    MergeFrom(*source);
  }
}

void FreqSpanFilter::MergeFrom(const FreqSpanFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.FreqSpanFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_spans_.MergeFrom(from.freq_spans_);
}

void FreqSpanFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.FreqSpanFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreqSpanFilter::CopyFrom(const FreqSpanFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.FreqSpanFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreqSpanFilter::IsInitialized() const {
  return true;
}

void FreqSpanFilter::InternalSwap(FreqSpanFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freq_spans_.InternalSwap(&other->freq_spans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FreqSpanFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalSegmentationParam::InitAsDefaultInstance() {
}
class SignalSegmentationParam::_Internal {
 public:
};

SignalSegmentationParam::SignalSegmentationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalSegmentationParam)
}
SignalSegmentationParam::SignalSegmentationParam(const SignalSegmentationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&freq_center_jitter_tolerance_, &from.freq_center_jitter_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_gap_tolerance_) -
    reinterpret_cast<char*>(&freq_center_jitter_tolerance_)) + sizeof(time_gap_tolerance_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalSegmentationParam)
}

void SignalSegmentationParam::SharedCtor() {
  ::memset(&freq_center_jitter_tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_gap_tolerance_) -
      reinterpret_cast<char*>(&freq_center_jitter_tolerance_)) + sizeof(time_gap_tolerance_));
}

SignalSegmentationParam::~SignalSegmentationParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalSegmentationParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSegmentationParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalSegmentationParam::ArenaDtor(void* object) {
  SignalSegmentationParam* _this = reinterpret_cast< SignalSegmentationParam* >(object);
  (void)_this;
}
void SignalSegmentationParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSegmentationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSegmentationParam& SignalSegmentationParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalSegmentationParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalSegmentationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&freq_center_jitter_tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_gap_tolerance_) -
      reinterpret_cast<char*>(&freq_center_jitter_tolerance_)) + sizeof(time_gap_tolerance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSegmentationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float freq_center_jitter_tolerance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          freq_center_jitter_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float freq_border_blur_tolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          freq_border_blur_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_rss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_rss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time_gap_tolerance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_gap_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSegmentationParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float freq_center_jitter_tolerance = 1;
  if (!(this->freq_center_jitter_tolerance() <= 0 && this->freq_center_jitter_tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_freq_center_jitter_tolerance(), target);
  }

  // float freq_border_blur_tolerance = 2;
  if (!(this->freq_border_blur_tolerance() <= 0 && this->freq_border_blur_tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_freq_border_blur_tolerance(), target);
  }

  // float min_rss = 3;
  if (!(this->min_rss() <= 0 && this->min_rss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_rss(), target);
  }

  // int32 time_gap_tolerance = 4;
  if (this->time_gap_tolerance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_gap_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalSegmentationParam)
  return target;
}

size_t SignalSegmentationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float freq_center_jitter_tolerance = 1;
  if (!(this->freq_center_jitter_tolerance() <= 0 && this->freq_center_jitter_tolerance() >= 0)) {
    total_size += 1 + 4;
  }

  // float freq_border_blur_tolerance = 2;
  if (!(this->freq_border_blur_tolerance() <= 0 && this->freq_border_blur_tolerance() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_rss = 3;
  if (!(this->min_rss() <= 0 && this->min_rss() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time_gap_tolerance = 4;
  if (this->time_gap_tolerance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_gap_tolerance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSegmentationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSegmentationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSegmentationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalSegmentationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalSegmentationParam)
    MergeFrom(*source);
  }
}

void SignalSegmentationParam::MergeFrom(const SignalSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.freq_center_jitter_tolerance() <= 0 && from.freq_center_jitter_tolerance() >= 0)) {
    _internal_set_freq_center_jitter_tolerance(from._internal_freq_center_jitter_tolerance());
  }
  if (!(from.freq_border_blur_tolerance() <= 0 && from.freq_border_blur_tolerance() >= 0)) {
    _internal_set_freq_border_blur_tolerance(from._internal_freq_border_blur_tolerance());
  }
  if (!(from.min_rss() <= 0 && from.min_rss() >= 0)) {
    _internal_set_min_rss(from._internal_min_rss());
  }
  if (from.time_gap_tolerance() != 0) {
    _internal_set_time_gap_tolerance(from._internal_time_gap_tolerance());
  }
}

void SignalSegmentationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSegmentationParam::CopyFrom(const SignalSegmentationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalSegmentationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSegmentationParam::IsInitialized() const {
  return true;
}

void SignalSegmentationParam::InternalSwap(SignalSegmentationParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalSegmentationParam, time_gap_tolerance_)
      + sizeof(SignalSegmentationParam::time_gap_tolerance_)
      - PROTOBUF_FIELD_OFFSET(SignalSegmentationParam, freq_center_jitter_tolerance_)>(
          reinterpret_cast<char*>(&freq_center_jitter_tolerance_),
          reinterpret_cast<char*>(&other->freq_center_jitter_tolerance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSegmentationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopSignalClusterParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_HopSignalClusterParam_default_instance_._instance.get_mutable()->frequency_range_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
  ::zb::dcts::scenario::detection::_HopSignalClusterParam_default_instance_._instance.get_mutable()->band_width_range_ = const_cast< ::zb::dcts::DRange*>(
      ::zb::dcts::DRange::internal_default_instance());
}
class HopSignalClusterParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& frequency_range(const HopSignalClusterParam* msg);
  static const ::zb::dcts::DRange& band_width_range(const HopSignalClusterParam* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
HopSignalClusterParam::_Internal::frequency_range(const HopSignalClusterParam* msg) {
  return *msg->frequency_range_;
}
const ::zb::dcts::DRange&
HopSignalClusterParam::_Internal::band_width_range(const HopSignalClusterParam* msg) {
  return *msg->band_width_range_;
}
void HopSignalClusterParam::clear_frequency_range() {
  if (GetArena() == nullptr && frequency_range_ != nullptr) {
    delete frequency_range_;
  }
  frequency_range_ = nullptr;
}
void HopSignalClusterParam::clear_band_width_range() {
  if (GetArena() == nullptr && band_width_range_ != nullptr) {
    delete band_width_range_;
  }
  band_width_range_ = nullptr;
}
HopSignalClusterParam::HopSignalClusterParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HopSignalClusterParam)
}
HopSignalClusterParam::HopSignalClusterParam(const HopSignalClusterParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_frequency_range()) {
    frequency_range_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.frequency_range_);
  } else {
    frequency_range_ = nullptr;
  }
  if (from._internal_has_band_width_range()) {
    band_width_range_ = new ::zb::dcts::DRange(*from.band_width_range_);
  } else {
    band_width_range_ = nullptr;
  }
  freq_jitter_tolerance_ = from.freq_jitter_tolerance_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HopSignalClusterParam)
}

void HopSignalClusterParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freq_jitter_tolerance_) -
      reinterpret_cast<char*>(&frequency_range_)) + sizeof(freq_jitter_tolerance_));
}

HopSignalClusterParam::~HopSignalClusterParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HopSignalClusterParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopSignalClusterParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frequency_range_;
  if (this != internal_default_instance()) delete band_width_range_;
}

void HopSignalClusterParam::ArenaDtor(void* object) {
  HopSignalClusterParam* _this = reinterpret_cast< HopSignalClusterParam* >(object);
  (void)_this;
}
void HopSignalClusterParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopSignalClusterParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopSignalClusterParam& HopSignalClusterParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopSignalClusterParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HopSignalClusterParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && frequency_range_ != nullptr) {
    delete frequency_range_;
  }
  frequency_range_ = nullptr;
  if (GetArena() == nullptr && band_width_range_ != nullptr) {
    delete band_width_range_;
  }
  band_width_range_ = nullptr;
  freq_jitter_tolerance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopSignalClusterParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.HopSignalClusterParam.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySpan frequency_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frequency_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.DRange band_width_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_width_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float freq_jitter_tolerance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          freq_jitter_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopSignalClusterParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.HopSignalClusterParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan frequency_range = 2;
  if (this->has_frequency_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frequency_range(this), target, stream);
  }

  // .zb.dcts.DRange band_width_range = 3;
  if (this->has_band_width_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::band_width_range(this), target, stream);
  }

  // float freq_jitter_tolerance = 4;
  if (!(this->freq_jitter_tolerance() <= 0 && this->freq_jitter_tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_freq_jitter_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HopSignalClusterParam)
  return target;
}

size_t HopSignalClusterParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan frequency_range = 2;
  if (this->has_frequency_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frequency_range_);
  }

  // .zb.dcts.DRange band_width_range = 3;
  if (this->has_band_width_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_width_range_);
  }

  // float freq_jitter_tolerance = 4;
  if (!(this->freq_jitter_tolerance() <= 0 && this->freq_jitter_tolerance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopSignalClusterParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  GOOGLE_DCHECK_NE(&from, this);
  const HopSignalClusterParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopSignalClusterParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HopSignalClusterParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HopSignalClusterParam)
    MergeFrom(*source);
  }
}

void HopSignalClusterParam::MergeFrom(const HopSignalClusterParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_frequency_range()) {
    _internal_mutable_frequency_range()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_frequency_range());
  }
  if (from.has_band_width_range()) {
    _internal_mutable_band_width_range()->::zb::dcts::DRange::MergeFrom(from._internal_band_width_range());
  }
  if (!(from.freq_jitter_tolerance() <= 0 && from.freq_jitter_tolerance() >= 0)) {
    _internal_set_freq_jitter_tolerance(from._internal_freq_jitter_tolerance());
  }
}

void HopSignalClusterParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopSignalClusterParam::CopyFrom(const HopSignalClusterParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HopSignalClusterParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopSignalClusterParam::IsInitialized() const {
  return true;
}

void HopSignalClusterParam::InternalSwap(HopSignalClusterParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HopSignalClusterParam, freq_jitter_tolerance_)
      + sizeof(HopSignalClusterParam::freq_jitter_tolerance_)
      - PROTOBUF_FIELD_OFFSET(HopSignalClusterParam, frequency_range_)>(
          reinterpret_cast<char*>(&frequency_range_),
          reinterpret_cast<char*>(&other->frequency_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HopSignalClusterParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopSignalDetectionParam::InitAsDefaultInstance() {
}
class HopSignalDetectionParam::_Internal {
 public:
};

HopSignalDetectionParam::HopSignalDetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hop_signal_clusters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HopSignalDetectionParam)
}
HopSignalDetectionParam::HopSignalDetectionParam(const HopSignalDetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hop_signal_clusters_(from.hop_signal_clusters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HopSignalDetectionParam)
}

void HopSignalDetectionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto.base);
}

HopSignalDetectionParam::~HopSignalDetectionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HopSignalDetectionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopSignalDetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HopSignalDetectionParam::ArenaDtor(void* object) {
  HopSignalDetectionParam* _this = reinterpret_cast< HopSignalDetectionParam* >(object);
  (void)_this;
}
void HopSignalDetectionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopSignalDetectionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopSignalDetectionParam& HopSignalDetectionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopSignalDetectionParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HopSignalDetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_signal_clusters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopSignalDetectionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.HopSignalClusterParam hop_signal_clusters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_signal_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopSignalDetectionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.HopSignalClusterParam hop_signal_clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_signal_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hop_signal_clusters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HopSignalDetectionParam)
  return target;
}

size_t HopSignalDetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.HopSignalClusterParam hop_signal_clusters = 1;
  total_size += 1UL * this->_internal_hop_signal_clusters_size();
  for (const auto& msg : this->hop_signal_clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopSignalDetectionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const HopSignalDetectionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopSignalDetectionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HopSignalDetectionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HopSignalDetectionParam)
    MergeFrom(*source);
  }
}

void HopSignalDetectionParam::MergeFrom(const HopSignalDetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_signal_clusters_.MergeFrom(from.hop_signal_clusters_);
}

void HopSignalDetectionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopSignalDetectionParam::CopyFrom(const HopSignalDetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HopSignalDetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopSignalDetectionParam::IsInitialized() const {
  return true;
}

void HopSignalDetectionParam::InternalSwap(HopSignalDetectionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hop_signal_clusters_.InternalSwap(&other->hop_signal_clusters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HopSignalDetectionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalDetectParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalDetectParam_default_instance_._instance.get_mutable()->white_list_ = const_cast< ::zb::dcts::scenario::detection::FreqSpanFilter*>(
      ::zb::dcts::scenario::detection::FreqSpanFilter::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDetectParam_default_instance_._instance.get_mutable()->signal_segmenation_param_ = const_cast< ::zb::dcts::scenario::detection::SignalSegmentationParam*>(
      ::zb::dcts::scenario::detection::SignalSegmentationParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDetectParam_default_instance_._instance.get_mutable()->hop_signal_detection_param_ = const_cast< ::zb::dcts::scenario::detection::HopSignalDetectionParam*>(
      ::zb::dcts::scenario::detection::HopSignalDetectionParam::internal_default_instance());
}
class SignalDetectParam::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::FreqSpanFilter& white_list(const SignalDetectParam* msg);
  static const ::zb::dcts::scenario::detection::SignalSegmentationParam& signal_segmenation_param(const SignalDetectParam* msg);
  static const ::zb::dcts::scenario::detection::HopSignalDetectionParam& hop_signal_detection_param(const SignalDetectParam* msg);
};

const ::zb::dcts::scenario::detection::FreqSpanFilter&
SignalDetectParam::_Internal::white_list(const SignalDetectParam* msg) {
  return *msg->white_list_;
}
const ::zb::dcts::scenario::detection::SignalSegmentationParam&
SignalDetectParam::_Internal::signal_segmenation_param(const SignalDetectParam* msg) {
  return *msg->signal_segmenation_param_;
}
const ::zb::dcts::scenario::detection::HopSignalDetectionParam&
SignalDetectParam::_Internal::hop_signal_detection_param(const SignalDetectParam* msg) {
  return *msg->hop_signal_detection_param_;
}
SignalDetectParam::SignalDetectParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalDetectParam)
}
SignalDetectParam::SignalDetectParam(const SignalDetectParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_white_list()) {
    white_list_ = new ::zb::dcts::scenario::detection::FreqSpanFilter(*from.white_list_);
  } else {
    white_list_ = nullptr;
  }
  if (from._internal_has_signal_segmenation_param()) {
    signal_segmenation_param_ = new ::zb::dcts::scenario::detection::SignalSegmentationParam(*from.signal_segmenation_param_);
  } else {
    signal_segmenation_param_ = nullptr;
  }
  if (from._internal_has_hop_signal_detection_param()) {
    hop_signal_detection_param_ = new ::zb::dcts::scenario::detection::HopSignalDetectionParam(*from.hop_signal_detection_param_);
  } else {
    hop_signal_detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalDetectParam)
}

void SignalDetectParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalDetectParam_scenario_2fdetection_2eproto.base);
  ::memset(&white_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_signal_detection_param_) -
      reinterpret_cast<char*>(&white_list_)) + sizeof(hop_signal_detection_param_));
}

SignalDetectParam::~SignalDetectParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalDetectParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalDetectParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete white_list_;
  if (this != internal_default_instance()) delete signal_segmenation_param_;
  if (this != internal_default_instance()) delete hop_signal_detection_param_;
}

void SignalDetectParam::ArenaDtor(void* object) {
  SignalDetectParam* _this = reinterpret_cast< SignalDetectParam* >(object);
  (void)_this;
}
void SignalDetectParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalDetectParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalDetectParam& SignalDetectParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalDetectParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalDetectParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalDetectParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && white_list_ != nullptr) {
    delete white_list_;
  }
  white_list_ = nullptr;
  if (GetArena() == nullptr && signal_segmenation_param_ != nullptr) {
    delete signal_segmenation_param_;
  }
  signal_segmenation_param_ = nullptr;
  if (GetArena() == nullptr && hop_signal_detection_param_ != nullptr) {
    delete hop_signal_detection_param_;
  }
  hop_signal_detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalDetectParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.detection.FreqSpanFilter white_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_white_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.SignalSegmentationParam signal_segmenation_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_segmenation_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.HopSignalDetectionParam hop_signal_detection_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hop_signal_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalDetectParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalDetectParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.FreqSpanFilter white_list = 1;
  if (this->has_white_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::white_list(this), target, stream);
  }

  // .zb.dcts.scenario.detection.SignalSegmentationParam signal_segmenation_param = 2;
  if (this->has_signal_segmenation_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_segmenation_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.HopSignalDetectionParam hop_signal_detection_param = 3;
  if (this->has_hop_signal_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hop_signal_detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalDetectParam)
  return target;
}

size_t SignalDetectParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalDetectParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.FreqSpanFilter white_list = 1;
  if (this->has_white_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *white_list_);
  }

  // .zb.dcts.scenario.detection.SignalSegmentationParam signal_segmenation_param = 2;
  if (this->has_signal_segmenation_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_segmenation_param_);
  }

  // .zb.dcts.scenario.detection.HopSignalDetectionParam hop_signal_detection_param = 3;
  if (this->has_hop_signal_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hop_signal_detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalDetectParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalDetectParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalDetectParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalDetectParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalDetectParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalDetectParam)
    MergeFrom(*source);
  }
}

void SignalDetectParam::MergeFrom(const SignalDetectParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalDetectParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_white_list()) {
    _internal_mutable_white_list()->::zb::dcts::scenario::detection::FreqSpanFilter::MergeFrom(from._internal_white_list());
  }
  if (from.has_signal_segmenation_param()) {
    _internal_mutable_signal_segmenation_param()->::zb::dcts::scenario::detection::SignalSegmentationParam::MergeFrom(from._internal_signal_segmenation_param());
  }
  if (from.has_hop_signal_detection_param()) {
    _internal_mutable_hop_signal_detection_param()->::zb::dcts::scenario::detection::HopSignalDetectionParam::MergeFrom(from._internal_hop_signal_detection_param());
  }
}

void SignalDetectParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalDetectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalDetectParam::CopyFrom(const SignalDetectParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalDetectParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalDetectParam::IsInitialized() const {
  return true;
}

void SignalDetectParam::InternalSwap(SignalDetectParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalDetectParam, hop_signal_detection_param_)
      + sizeof(SignalDetectParam::hop_signal_detection_param_)
      - PROTOBUF_FIELD_OFFSET(SignalDetectParam, white_list_)>(
          reinterpret_cast<char*>(&white_list_),
          reinterpret_cast<char*>(&other->white_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalDetectParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_DetectionParam_default_instance_._instance.get_mutable()->energy_detect_param_ = const_cast< ::zb::dcts::scenario::detection::EnergyDetectionParam*>(
      ::zb::dcts::scenario::detection::EnergyDetectionParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_DetectionParam_default_instance_._instance.get_mutable()->signal_detect_param_ = const_cast< ::zb::dcts::scenario::detection::SignalDetectParam*>(
      ::zb::dcts::scenario::detection::SignalDetectParam::internal_default_instance());
}
class DetectionParam::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::EnergyDetectionParam& energy_detect_param(const DetectionParam* msg);
  static const ::zb::dcts::scenario::detection::SignalDetectParam& signal_detect_param(const DetectionParam* msg);
};

const ::zb::dcts::scenario::detection::EnergyDetectionParam&
DetectionParam::_Internal::energy_detect_param(const DetectionParam* msg) {
  return *msg->energy_detect_param_;
}
const ::zb::dcts::scenario::detection::SignalDetectParam&
DetectionParam::_Internal::signal_detect_param(const DetectionParam* msg) {
  return *msg->signal_detect_param_;
}
DetectionParam::DetectionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.DetectionParam)
}
DetectionParam::DetectionParam(const DetectionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_energy_detect_param()) {
    energy_detect_param_ = new ::zb::dcts::scenario::detection::EnergyDetectionParam(*from.energy_detect_param_);
  } else {
    energy_detect_param_ = nullptr;
  }
  if (from._internal_has_signal_detect_param()) {
    signal_detect_param_ = new ::zb::dcts::scenario::detection::SignalDetectParam(*from.signal_detect_param_);
  } else {
    signal_detect_param_ = nullptr;
  }
  result_interval_ = from.result_interval_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.DetectionParam)
}

void DetectionParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionParam_scenario_2fdetection_2eproto.base);
  ::memset(&energy_detect_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_interval_) -
      reinterpret_cast<char*>(&energy_detect_param_)) + sizeof(result_interval_));
}

DetectionParam::~DetectionParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.DetectionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete energy_detect_param_;
  if (this != internal_default_instance()) delete signal_detect_param_;
}

void DetectionParam::ArenaDtor(void* object) {
  DetectionParam* _this = reinterpret_cast< DetectionParam* >(object);
  (void)_this;
}
void DetectionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionParam& DetectionParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void DetectionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.DetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && energy_detect_param_ != nullptr) {
    delete energy_detect_param_;
  }
  energy_detect_param_ = nullptr;
  if (GetArena() == nullptr && signal_detect_param_ != nullptr) {
    delete signal_detect_param_;
  }
  signal_detect_param_ = nullptr;
  result_interval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.EnergyDetectionParam energy_detect_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_energy_detect_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.SignalDetectParam signal_detect_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_detect_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.DetectionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result_interval = 1;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result_interval(), target);
  }

  // .zb.dcts.scenario.detection.EnergyDetectionParam energy_detect_param = 2;
  if (this->has_energy_detect_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::energy_detect_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.SignalDetectParam signal_detect_param = 3;
  if (this->has_signal_detect_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::signal_detect_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.DetectionParam)
  return target;
}

size_t DetectionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.DetectionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.EnergyDetectionParam energy_detect_param = 2;
  if (this->has_energy_detect_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energy_detect_param_);
  }

  // .zb.dcts.scenario.detection.SignalDetectParam signal_detect_param = 3;
  if (this->has_signal_detect_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_detect_param_);
  }

  // int32 result_interval = 1;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.DetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.DetectionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.DetectionParam)
    MergeFrom(*source);
  }
}

void DetectionParam::MergeFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.DetectionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_energy_detect_param()) {
    _internal_mutable_energy_detect_param()->::zb::dcts::scenario::detection::EnergyDetectionParam::MergeFrom(from._internal_energy_detect_param());
  }
  if (from.has_signal_detect_param()) {
    _internal_mutable_signal_detect_param()->::zb::dcts::scenario::detection::SignalDetectParam::MergeFrom(from._internal_signal_detect_param());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
}

void DetectionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.DetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionParam::CopyFrom(const DetectionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.DetectionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionParam::IsInitialized() const {
  return true;
}

void DetectionParam::InternalSwap(DetectionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionParam, result_interval_)
      + sizeof(DetectionParam::result_interval_)
      - PROTOBUF_FIELD_OFFSET(DetectionParam, energy_detect_param_)>(
          reinterpret_cast<char*>(&energy_detect_param_),
          reinterpret_cast<char*>(&other->energy_detect_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalFeature::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalFeature_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalFeature_default_instance_._instance.get_mutable()->amplitude_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalFeature_default_instance_._instance.get_mutable()->hits_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
}
class SignalFeature::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const SignalFeature* msg);
  static const ::zb::dcts::StatisticVal& amplitude(const SignalFeature* msg);
  static const ::zb::dcts::StatisticVal& hits(const SignalFeature* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
SignalFeature::_Internal::signal_band(const SignalFeature* msg) {
  return *msg->signal_band_;
}
const ::zb::dcts::StatisticVal&
SignalFeature::_Internal::amplitude(const SignalFeature* msg) {
  return *msg->amplitude_;
}
const ::zb::dcts::StatisticVal&
SignalFeature::_Internal::hits(const SignalFeature* msg) {
  return *msg->hits_;
}
void SignalFeature::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
void SignalFeature::clear_amplitude() {
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
}
void SignalFeature::clear_hits() {
  if (GetArena() == nullptr && hits_ != nullptr) {
    delete hits_;
  }
  hits_ = nullptr;
}
SignalFeature::SignalFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalFeature)
}
SignalFeature::SignalFeature(const SignalFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  if (from._internal_has_amplitude()) {
    amplitude_ = new ::zb::dcts::StatisticVal(*from.amplitude_);
  } else {
    amplitude_ = nullptr;
  }
  if (from._internal_has_hits()) {
    hits_ = new ::zb::dcts::StatisticVal(*from.hits_);
  } else {
    hits_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalFeature)
}

void SignalFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalFeature_scenario_2fdetection_2eproto.base);
  ::memset(&signal_band_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&signal_band_)) + sizeof(sequence_number_));
}

SignalFeature::~SignalFeature() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signal_band_;
  if (this != internal_default_instance()) delete amplitude_;
  if (this != internal_default_instance()) delete hits_;
}

void SignalFeature::ArenaDtor(void* object) {
  SignalFeature* _this = reinterpret_cast< SignalFeature* >(object);
  (void)_this;
}
void SignalFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalFeature& SignalFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalFeature_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
  if (GetArena() == nullptr && hits_ != nullptr) {
    delete hits_;
  }
  hits_ = nullptr;
  sequence_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sequence_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // .zb.dcts.StatisticVal amplitude = 4;
  if (this->has_amplitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::amplitude(this), target, stream);
  }

  // .zb.dcts.StatisticVal hits = 5;
  if (this->has_hits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalFeature)
  return target;
}

size_t SignalFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // .zb.dcts.StatisticVal amplitude = 4;
  if (this->has_amplitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amplitude_);
  }

  // .zb.dcts.StatisticVal hits = 5;
  if (this->has_hits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hits_);
  }

  // int32 sequence_number = 1;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalFeature)
    MergeFrom(*source);
  }
}

void SignalFeature::MergeFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (from.has_amplitude()) {
    _internal_mutable_amplitude()->::zb::dcts::StatisticVal::MergeFrom(from._internal_amplitude());
  }
  if (from.has_hits()) {
    _internal_mutable_hits()->::zb::dcts::StatisticVal::MergeFrom(from._internal_hits());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void SignalFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalFeature::CopyFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalFeature::IsInitialized() const {
  return true;
}

void SignalFeature::InternalSwap(SignalFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalFeature, sequence_number_)
      + sizeof(SignalFeature::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(SignalFeature, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalDigest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalDigest_default_instance_._instance.get_mutable()->center_freq_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDigest_default_instance_._instance.get_mutable()->band_width_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDigest_default_instance_._instance.get_mutable()->amplitude_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDigest_default_instance_._instance.get_mutable()->emit_time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalDigest_default_instance_._instance.get_mutable()->dir_of_arrival_ = const_cast< ::zb::dcts::DOA*>(
      ::zb::dcts::DOA::internal_default_instance());
}
class SignalDigest::_Internal {
 public:
  static const ::zb::dcts::StatisticVal& center_freq(const SignalDigest* msg);
  static const ::zb::dcts::StatisticVal& band_width(const SignalDigest* msg);
  static const ::zb::dcts::StatisticVal& amplitude(const SignalDigest* msg);
  static const ::zb::dcts::TimeSpan& emit_time_span(const SignalDigest* msg);
  static const ::zb::dcts::DOA& dir_of_arrival(const SignalDigest* msg);
};

const ::zb::dcts::StatisticVal&
SignalDigest::_Internal::center_freq(const SignalDigest* msg) {
  return *msg->center_freq_;
}
const ::zb::dcts::StatisticVal&
SignalDigest::_Internal::band_width(const SignalDigest* msg) {
  return *msg->band_width_;
}
const ::zb::dcts::StatisticVal&
SignalDigest::_Internal::amplitude(const SignalDigest* msg) {
  return *msg->amplitude_;
}
const ::zb::dcts::TimeSpan&
SignalDigest::_Internal::emit_time_span(const SignalDigest* msg) {
  return *msg->emit_time_span_;
}
const ::zb::dcts::DOA&
SignalDigest::_Internal::dir_of_arrival(const SignalDigest* msg) {
  return *msg->dir_of_arrival_;
}
void SignalDigest::clear_center_freq() {
  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
}
void SignalDigest::clear_band_width() {
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
}
void SignalDigest::clear_amplitude() {
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
}
void SignalDigest::clear_emit_time_span() {
  if (GetArena() == nullptr && emit_time_span_ != nullptr) {
    delete emit_time_span_;
  }
  emit_time_span_ = nullptr;
}
void SignalDigest::clear_dir_of_arrival() {
  if (GetArena() == nullptr && dir_of_arrival_ != nullptr) {
    delete dir_of_arrival_;
  }
  dir_of_arrival_ = nullptr;
}
SignalDigest::SignalDigest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalDigest)
}
SignalDigest::SignalDigest(const SignalDigest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  classification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_classification().empty()) {
    classification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_classification(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_center_freq()) {
    center_freq_ = new ::zb::dcts::StatisticVal(*from.center_freq_);
  } else {
    center_freq_ = nullptr;
  }
  if (from._internal_has_band_width()) {
    band_width_ = new ::zb::dcts::StatisticVal(*from.band_width_);
  } else {
    band_width_ = nullptr;
  }
  if (from._internal_has_amplitude()) {
    amplitude_ = new ::zb::dcts::StatisticVal(*from.amplitude_);
  } else {
    amplitude_ = nullptr;
  }
  if (from._internal_has_emit_time_span()) {
    emit_time_span_ = new ::zb::dcts::TimeSpan(*from.emit_time_span_);
  } else {
    emit_time_span_ = nullptr;
  }
  if (from._internal_has_dir_of_arrival()) {
    dir_of_arrival_ = new ::zb::dcts::DOA(*from.dir_of_arrival_);
  } else {
    dir_of_arrival_ = nullptr;
  }
  ::memcpy(&activity_, &from.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_features_) -
    reinterpret_cast<char*>(&activity_)) + sizeof(num_features_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalDigest)
}

void SignalDigest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalDigest_scenario_2fdetection_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&center_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_features_) -
      reinterpret_cast<char*>(&center_freq_)) + sizeof(num_features_));
}

SignalDigest::~SignalDigest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalDigest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalDigest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_freq_;
  if (this != internal_default_instance()) delete band_width_;
  if (this != internal_default_instance()) delete amplitude_;
  if (this != internal_default_instance()) delete emit_time_span_;
  if (this != internal_default_instance()) delete dir_of_arrival_;
}

void SignalDigest::ArenaDtor(void* object) {
  SignalDigest* _this = reinterpret_cast< SignalDigest* >(object);
  (void)_this;
}
void SignalDigest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalDigest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalDigest& SignalDigest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalDigest_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalDigest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  classification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
  if (GetArena() == nullptr && emit_time_span_ != nullptr) {
    delete emit_time_span_;
  }
  emit_time_span_ = nullptr;
  if (GetArena() == nullptr && dir_of_arrival_ != nullptr) {
    delete dir_of_arrival_;
  }
  dir_of_arrival_ = nullptr;
  ::memset(&activity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_features_) -
      reinterpret_cast<char*>(&activity_)) + sizeof(num_features_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalDigest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.SignalDigest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.SignalActivity activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activity(static_cast<::zb::dcts::scenario::detection::SignalActivity>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal center_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_freq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal band_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal amplitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan emit_time_span = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_features = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.DOA dir_of_arrival = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dir_of_arrival(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string classification = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_classification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.SignalDigest.classification"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.SignalDigest.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalDigest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalDigest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.SignalDigest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.detection.SignalActivity activity = 2;
  if (this->activity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_activity(), target);
  }

  // .zb.dcts.StatisticVal center_freq = 3;
  if (this->has_center_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::center_freq(this), target, stream);
  }

  // .zb.dcts.StatisticVal band_width = 4;
  if (this->has_band_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::band_width(this), target, stream);
  }

  // .zb.dcts.StatisticVal amplitude = 5;
  if (this->has_amplitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amplitude(this), target, stream);
  }

  // .zb.dcts.TimeSpan emit_time_span = 6;
  if (this->has_emit_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::emit_time_span(this), target, stream);
  }

  // int32 num_features = 7;
  if (this->num_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_features(), target);
  }

  // .zb.dcts.DOA dir_of_arrival = 9;
  if (this->has_dir_of_arrival()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dir_of_arrival(this), target, stream);
  }

  // string classification = 10;
  if (this->classification().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classification().data(), static_cast<int>(this->_internal_classification().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.SignalDigest.classification");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_classification(), target);
  }

  // string description = 11;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.SignalDigest.description");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalDigest)
  return target;
}

size_t SignalDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalDigest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string classification = 10;
  if (this->classification().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classification());
  }

  // string description = 11;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .zb.dcts.StatisticVal center_freq = 3;
  if (this->has_center_freq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_freq_);
  }

  // .zb.dcts.StatisticVal band_width = 4;
  if (this->has_band_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_width_);
  }

  // .zb.dcts.StatisticVal amplitude = 5;
  if (this->has_amplitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amplitude_);
  }

  // .zb.dcts.TimeSpan emit_time_span = 6;
  if (this->has_emit_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emit_time_span_);
  }

  // .zb.dcts.DOA dir_of_arrival = 9;
  if (this->has_dir_of_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dir_of_arrival_);
  }

  // .zb.dcts.scenario.detection.SignalActivity activity = 2;
  if (this->activity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity());
  }

  // int32 num_features = 7;
  if (this->num_features() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_features());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalDigest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalDigest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalDigest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalDigest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalDigest)
    MergeFrom(*source);
  }
}

void SignalDigest::MergeFrom(const SignalDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.classification().size() > 0) {
    _internal_set_classification(from._internal_classification());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_center_freq()) {
    _internal_mutable_center_freq()->::zb::dcts::StatisticVal::MergeFrom(from._internal_center_freq());
  }
  if (from.has_band_width()) {
    _internal_mutable_band_width()->::zb::dcts::StatisticVal::MergeFrom(from._internal_band_width());
  }
  if (from.has_amplitude()) {
    _internal_mutable_amplitude()->::zb::dcts::StatisticVal::MergeFrom(from._internal_amplitude());
  }
  if (from.has_emit_time_span()) {
    _internal_mutable_emit_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_emit_time_span());
  }
  if (from.has_dir_of_arrival()) {
    _internal_mutable_dir_of_arrival()->::zb::dcts::DOA::MergeFrom(from._internal_dir_of_arrival());
  }
  if (from.activity() != 0) {
    _internal_set_activity(from._internal_activity());
  }
  if (from.num_features() != 0) {
    _internal_set_num_features(from._internal_num_features());
  }
}

void SignalDigest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalDigest::CopyFrom(const SignalDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalDigest::IsInitialized() const {
  return true;
}

void SignalDigest::InternalSwap(SignalDigest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  classification_.Swap(&other->classification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalDigest, num_features_)
      + sizeof(SignalDigest::num_features_)
      - PROTOBUF_FIELD_OFFSET(SignalDigest, center_freq_)>(
          reinterpret_cast<char*>(&center_freq_),
          reinterpret_cast<char*>(&other->center_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalDigest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalSegment::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalSegment_default_instance_._instance.get_mutable()->digest_ = const_cast< ::zb::dcts::scenario::detection::SignalDigest*>(
      ::zb::dcts::scenario::detection::SignalDigest::internal_default_instance());
}
class SignalSegment::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::SignalDigest& digest(const SignalSegment* msg);
};

const ::zb::dcts::scenario::detection::SignalDigest&
SignalSegment::_Internal::digest(const SignalSegment* msg) {
  return *msg->digest_;
}
SignalSegment::SignalSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_details_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalSegment)
}
SignalSegment::SignalSegment(const SignalSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_details_(from.feature_details_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_digest()) {
    digest_ = new ::zb::dcts::scenario::detection::SignalDigest(*from.digest_);
  } else {
    digest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalSegment)
}

void SignalSegment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalSegment_scenario_2fdetection_2eproto.base);
  digest_ = nullptr;
}

SignalSegment::~SignalSegment() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete digest_;
}

void SignalSegment::ArenaDtor(void* object) {
  SignalSegment* _this = reinterpret_cast< SignalSegment* >(object);
  (void)_this;
}
void SignalSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSegment& SignalSegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalSegment_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_details_.Clear();
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.detection.SignalDigest digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_digest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.SignalFeature feature_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.SignalDigest digest = 1;
  if (this->has_digest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::digest(this), target, stream);
  }

  // repeated .zb.dcts.scenario.detection.SignalFeature feature_details = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_feature_details(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalSegment)
  return target;
}

size_t SignalSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalFeature feature_details = 2;
  total_size += 1UL * this->_internal_feature_details_size();
  for (const auto& msg : this->feature_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.detection.SignalDigest digest = 1;
  if (this->has_digest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *digest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalSegment)
    MergeFrom(*source);
  }
}

void SignalSegment::MergeFrom(const SignalSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_details_.MergeFrom(from.feature_details_);
  if (from.has_digest()) {
    _internal_mutable_digest()->::zb::dcts::scenario::detection::SignalDigest::MergeFrom(from._internal_digest());
  }
}

void SignalSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSegment::CopyFrom(const SignalSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSegment::IsInitialized() const {
  return true;
}

void SignalSegment::InternalSwap(SignalSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_details_.InternalSwap(&other->feature_details_);
  swap(digest_, other->digest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopSignalDigest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_HopSignalDigest_default_instance_._instance.get_mutable()->center_freq_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_HopSignalDigest_default_instance_._instance.get_mutable()->band_width_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
  ::zb::dcts::scenario::detection::_HopSignalDigest_default_instance_._instance.get_mutable()->amplitude_ = const_cast< ::zb::dcts::StatisticVal*>(
      ::zb::dcts::StatisticVal::internal_default_instance());
}
class HopSignalDigest::_Internal {
 public:
  static const ::zb::dcts::StatisticVal& center_freq(const HopSignalDigest* msg);
  static const ::zb::dcts::StatisticVal& band_width(const HopSignalDigest* msg);
  static const ::zb::dcts::StatisticVal& amplitude(const HopSignalDigest* msg);
};

const ::zb::dcts::StatisticVal&
HopSignalDigest::_Internal::center_freq(const HopSignalDigest* msg) {
  return *msg->center_freq_;
}
const ::zb::dcts::StatisticVal&
HopSignalDigest::_Internal::band_width(const HopSignalDigest* msg) {
  return *msg->band_width_;
}
const ::zb::dcts::StatisticVal&
HopSignalDigest::_Internal::amplitude(const HopSignalDigest* msg) {
  return *msg->amplitude_;
}
void HopSignalDigest::clear_center_freq() {
  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
}
void HopSignalDigest::clear_band_width() {
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
}
void HopSignalDigest::clear_amplitude() {
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
}
HopSignalDigest::HopSignalDigest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HopSignalDigest)
}
HopSignalDigest::HopSignalDigest(const HopSignalDigest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_freq()) {
    center_freq_ = new ::zb::dcts::StatisticVal(*from.center_freq_);
  } else {
    center_freq_ = nullptr;
  }
  if (from._internal_has_band_width()) {
    band_width_ = new ::zb::dcts::StatisticVal(*from.band_width_);
  } else {
    band_width_ = nullptr;
  }
  if (from._internal_has_amplitude()) {
    amplitude_ = new ::zb::dcts::StatisticVal(*from.amplitude_);
  } else {
    amplitude_ = nullptr;
  }
  num_features_ = from.num_features_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HopSignalDigest)
}

void HopSignalDigest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopSignalDigest_scenario_2fdetection_2eproto.base);
  ::memset(&center_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_features_) -
      reinterpret_cast<char*>(&center_freq_)) + sizeof(num_features_));
}

HopSignalDigest::~HopSignalDigest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HopSignalDigest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopSignalDigest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_freq_;
  if (this != internal_default_instance()) delete band_width_;
  if (this != internal_default_instance()) delete amplitude_;
}

void HopSignalDigest::ArenaDtor(void* object) {
  HopSignalDigest* _this = reinterpret_cast< HopSignalDigest* >(object);
  (void)_this;
}
void HopSignalDigest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopSignalDigest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopSignalDigest& HopSignalDigest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopSignalDigest_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HopSignalDigest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HopSignalDigest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_freq_ != nullptr) {
    delete center_freq_;
  }
  center_freq_ = nullptr;
  if (GetArena() == nullptr && band_width_ != nullptr) {
    delete band_width_;
  }
  band_width_ = nullptr;
  if (GetArena() == nullptr && amplitude_ != nullptr) {
    delete amplitude_;
  }
  amplitude_ = nullptr;
  num_features_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopSignalDigest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.StatisticVal center_freq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_freq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal band_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.StatisticVal amplitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amplitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopSignalDigest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HopSignalDigest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.StatisticVal center_freq = 1;
  if (this->has_center_freq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center_freq(this), target, stream);
  }

  // .zb.dcts.StatisticVal band_width = 2;
  if (this->has_band_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::band_width(this), target, stream);
  }

  // .zb.dcts.StatisticVal amplitude = 3;
  if (this->has_amplitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amplitude(this), target, stream);
  }

  // int32 num_features = 5;
  if (this->num_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_features(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HopSignalDigest)
  return target;
}

size_t HopSignalDigest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HopSignalDigest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.StatisticVal center_freq = 1;
  if (this->has_center_freq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_freq_);
  }

  // .zb.dcts.StatisticVal band_width = 2;
  if (this->has_band_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_width_);
  }

  // .zb.dcts.StatisticVal amplitude = 3;
  if (this->has_amplitude()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amplitude_);
  }

  // int32 num_features = 5;
  if (this->num_features() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_features());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopSignalDigest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HopSignalDigest)
  GOOGLE_DCHECK_NE(&from, this);
  const HopSignalDigest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopSignalDigest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HopSignalDigest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HopSignalDigest)
    MergeFrom(*source);
  }
}

void HopSignalDigest::MergeFrom(const HopSignalDigest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HopSignalDigest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_freq()) {
    _internal_mutable_center_freq()->::zb::dcts::StatisticVal::MergeFrom(from._internal_center_freq());
  }
  if (from.has_band_width()) {
    _internal_mutable_band_width()->::zb::dcts::StatisticVal::MergeFrom(from._internal_band_width());
  }
  if (from.has_amplitude()) {
    _internal_mutable_amplitude()->::zb::dcts::StatisticVal::MergeFrom(from._internal_amplitude());
  }
  if (from.num_features() != 0) {
    _internal_set_num_features(from._internal_num_features());
  }
}

void HopSignalDigest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HopSignalDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopSignalDigest::CopyFrom(const HopSignalDigest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HopSignalDigest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopSignalDigest::IsInitialized() const {
  return true;
}

void HopSignalDigest::InternalSwap(HopSignalDigest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HopSignalDigest, num_features_)
      + sizeof(HopSignalDigest::num_features_)
      - PROTOBUF_FIELD_OFFSET(HopSignalDigest, center_freq_)>(
          reinterpret_cast<char*>(&center_freq_),
          reinterpret_cast<char*>(&other->center_freq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HopSignalDigest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopSignalCluster::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_HopSignalCluster_default_instance_._instance.get_mutable()->emit_time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class HopSignalCluster::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& emit_time_span(const HopSignalCluster* msg);
};

const ::zb::dcts::TimeSpan&
HopSignalCluster::_Internal::emit_time_span(const HopSignalCluster* msg) {
  return *msg->emit_time_span_;
}
void HopSignalCluster::clear_emit_time_span() {
  if (GetArena() == nullptr && emit_time_span_ != nullptr) {
    delete emit_time_span_;
  }
  emit_time_span_ = nullptr;
}
HopSignalCluster::HopSignalCluster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freq_set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HopSignalCluster)
}
HopSignalCluster::HopSignalCluster(const HopSignalCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freq_set_(from.freq_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_emit_time_span()) {
    emit_time_span_ = new ::zb::dcts::TimeSpan(*from.emit_time_span_);
  } else {
    emit_time_span_ = nullptr;
  }
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HopSignalCluster)
}

void HopSignalCluster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&emit_time_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activity_) -
      reinterpret_cast<char*>(&emit_time_span_)) + sizeof(activity_));
}

HopSignalCluster::~HopSignalCluster() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HopSignalCluster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopSignalCluster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete emit_time_span_;
}

void HopSignalCluster::ArenaDtor(void* object) {
  HopSignalCluster* _this = reinterpret_cast< HopSignalCluster* >(object);
  (void)_this;
}
void HopSignalCluster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopSignalCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopSignalCluster& HopSignalCluster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopSignalCluster_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HopSignalCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HopSignalCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_set_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && emit_time_span_ != nullptr) {
    delete emit_time_span_;
  }
  emit_time_span_ = nullptr;
  activity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopSignalCluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.HopSignalCluster.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.SignalActivity activity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activity(static_cast<::zb::dcts::scenario::detection::SignalActivity>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan emit_time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_emit_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.HopSignalDigest freq_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_freq_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopSignalCluster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HopSignalCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.HopSignalCluster.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .zb.dcts.scenario.detection.SignalActivity activity = 2;
  if (this->activity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_activity(), target);
  }

  // .zb.dcts.TimeSpan emit_time_span = 3;
  if (this->has_emit_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::emit_time_span(this), target, stream);
  }

  // repeated .zb.dcts.scenario.detection.HopSignalDigest freq_set = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_freq_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_freq_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HopSignalCluster)
  return target;
}

size_t HopSignalCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HopSignalCluster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.HopSignalDigest freq_set = 4;
  total_size += 1UL * this->_internal_freq_set_size();
  for (const auto& msg : this->freq_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .zb.dcts.TimeSpan emit_time_span = 3;
  if (this->has_emit_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emit_time_span_);
  }

  // .zb.dcts.scenario.detection.SignalActivity activity = 2;
  if (this->activity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_activity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopSignalCluster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HopSignalCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const HopSignalCluster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopSignalCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HopSignalCluster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HopSignalCluster)
    MergeFrom(*source);
  }
}

void HopSignalCluster::MergeFrom(const HopSignalCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HopSignalCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_set_.MergeFrom(from.freq_set_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_emit_time_span()) {
    _internal_mutable_emit_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_emit_time_span());
  }
  if (from.activity() != 0) {
    _internal_set_activity(from._internal_activity());
  }
}

void HopSignalCluster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HopSignalCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopSignalCluster::CopyFrom(const HopSignalCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HopSignalCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopSignalCluster::IsInitialized() const {
  return true;
}

void HopSignalCluster::InternalSwap(HopSignalCluster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freq_set_.InternalSwap(&other->freq_set_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HopSignalCluster, activity_)
      + sizeof(HopSignalCluster::activity_)
      - PROTOBUF_FIELD_OFFSET(HopSignalCluster, emit_time_span_)>(
          reinterpret_cast<char*>(&emit_time_span_),
          reinterpret_cast<char*>(&other->emit_time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HopSignalCluster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixSignalList::InitAsDefaultInstance() {
}
class FixSignalList::_Internal {
 public:
};

FixSignalList::FixSignalList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fix_signals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.FixSignalList)
}
FixSignalList::FixSignalList(const FixSignalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fix_signals_(from.fix_signals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.FixSignalList)
}

void FixSignalList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixSignalList_scenario_2fdetection_2eproto.base);
}

FixSignalList::~FixSignalList() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.FixSignalList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixSignalList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FixSignalList::ArenaDtor(void* object) {
  FixSignalList* _this = reinterpret_cast< FixSignalList* >(object);
  (void)_this;
}
void FixSignalList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixSignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixSignalList& FixSignalList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixSignalList_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void FixSignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.FixSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fix_signals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixSignalList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.SignalSegment fix_signals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fix_signals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixSignalList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.FixSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalSegment fix_signals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fix_signals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fix_signals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.FixSignalList)
  return target;
}

size_t FixSignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.FixSignalList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalSegment fix_signals = 1;
  total_size += 1UL * this->_internal_fix_signals_size();
  for (const auto& msg : this->fix_signals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixSignalList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.FixSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const FixSignalList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixSignalList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.FixSignalList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.FixSignalList)
    MergeFrom(*source);
  }
}

void FixSignalList::MergeFrom(const FixSignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.FixSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fix_signals_.MergeFrom(from.fix_signals_);
}

void FixSignalList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.FixSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixSignalList::CopyFrom(const FixSignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.FixSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixSignalList::IsInitialized() const {
  return true;
}

void FixSignalList::InternalSwap(FixSignalList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fix_signals_.InternalSwap(&other->fix_signals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixSignalList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopSignalList::InitAsDefaultInstance() {
}
class HopSignalList::_Internal {
 public:
};

HopSignalList::HopSignalList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hop_signal_clusters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.HopSignalList)
}
HopSignalList::HopSignalList(const HopSignalList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hop_signal_clusters_(from.hop_signal_clusters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.HopSignalList)
}

void HopSignalList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopSignalList_scenario_2fdetection_2eproto.base);
}

HopSignalList::~HopSignalList() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.HopSignalList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HopSignalList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HopSignalList::ArenaDtor(void* object) {
  HopSignalList* _this = reinterpret_cast< HopSignalList* >(object);
  (void)_this;
}
void HopSignalList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HopSignalList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopSignalList& HopSignalList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopSignalList_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void HopSignalList::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.HopSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_signal_clusters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HopSignalList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_clusters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_signal_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopSignalList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.HopSignalList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_clusters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_signal_clusters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hop_signal_clusters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.HopSignalList)
  return target;
}

size_t HopSignalList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.HopSignalList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_clusters = 1;
  total_size += 1UL * this->_internal_hop_signal_clusters_size();
  for (const auto& msg : this->hop_signal_clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopSignalList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.HopSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  const HopSignalList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopSignalList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.HopSignalList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.HopSignalList)
    MergeFrom(*source);
  }
}

void HopSignalList::MergeFrom(const HopSignalList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.HopSignalList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_signal_clusters_.MergeFrom(from.hop_signal_clusters_);
}

void HopSignalList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.HopSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopSignalList::CopyFrom(const HopSignalList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.HopSignalList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopSignalList::IsInitialized() const {
  return true;
}

void HopSignalList::InternalSwap(HopSignalList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hop_signal_clusters_.InternalSwap(&other->hop_signal_clusters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HopSignalList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_DetectionRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::detection::_DetectionRequest_default_instance_._instance.get_mutable()->detection_param_ = const_cast< ::zb::dcts::scenario::detection::DetectionParam*>(
      ::zb::dcts::scenario::detection::DetectionParam::internal_default_instance());
}
class DetectionRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const DetectionRequest* msg);
  static const ::zb::dcts::scenario::detection::DetectionParam& detection_param(const DetectionRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
DetectionRequest::_Internal::responser(const DetectionRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::detection::DetectionParam&
DetectionRequest::_Internal::detection_param(const DetectionRequest* msg) {
  return *msg->detection_param_;
}
void DetectionRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
DetectionRequest::DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::scenario::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.DetectionRequest)
}

void DetectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionRequest_scenario_2fdetection_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_param_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(detection_param_));
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.DetectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete detection_param_;
}

void DetectionRequest::ArenaDtor(void* object) {
  DetectionRequest* _this = reinterpret_cast< DetectionRequest* >(object);
  (void)_this;
}
void DetectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionRequest& DetectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionRequest_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.DetectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.DetectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.DetectionRequest)
    MergeFrom(*source);
  }
}

void DetectionRequest::MergeFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::scenario::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void DetectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetectionRequest, detection_param_)
      + sizeof(DetectionRequest::detection_param_)
      - PROTOBUF_FIELD_OFFSET(DetectionRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutoGatheringParam::InitAsDefaultInstance() {
}
class AutoGatheringParam::_Internal {
 public:
};

AutoGatheringParam::AutoGatheringParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signal_candidates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.AutoGatheringParam)
}
AutoGatheringParam::AutoGatheringParam(const AutoGatheringParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signal_candidates_(from.signal_candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_span_in_msec_ = from.time_span_in_msec_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.AutoGatheringParam)
}

void AutoGatheringParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AutoGatheringParam_scenario_2fdetection_2eproto.base);
  time_span_in_msec_ = 0;
}

AutoGatheringParam::~AutoGatheringParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.AutoGatheringParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutoGatheringParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutoGatheringParam::ArenaDtor(void* object) {
  AutoGatheringParam* _this = reinterpret_cast< AutoGatheringParam* >(object);
  (void)_this;
}
void AutoGatheringParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutoGatheringParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutoGatheringParam& AutoGatheringParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutoGatheringParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void AutoGatheringParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.AutoGatheringParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_candidates_.Clear();
  time_span_in_msec_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoGatheringParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 time_span_in_msec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_span_in_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string signal_candidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signal_candidates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.AutoGatheringParam.signal_candidates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutoGatheringParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.AutoGatheringParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_span_in_msec = 1;
  if (this->time_span_in_msec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_span_in_msec(), target);
  }

  // repeated string signal_candidates = 2;
  for (int i = 0, n = this->_internal_signal_candidates_size(); i < n; i++) {
    const auto& s = this->_internal_signal_candidates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.AutoGatheringParam.signal_candidates");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.AutoGatheringParam)
  return target;
}

size_t AutoGatheringParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.AutoGatheringParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string signal_candidates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signal_candidates_.size());
  for (int i = 0, n = signal_candidates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      signal_candidates_.Get(i));
  }

  // int32 time_span_in_msec = 1;
  if (this->time_span_in_msec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_span_in_msec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutoGatheringParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.AutoGatheringParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoGatheringParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutoGatheringParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.AutoGatheringParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.AutoGatheringParam)
    MergeFrom(*source);
  }
}

void AutoGatheringParam::MergeFrom(const AutoGatheringParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.AutoGatheringParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_candidates_.MergeFrom(from.signal_candidates_);
  if (from.time_span_in_msec() != 0) {
    _internal_set_time_span_in_msec(from._internal_time_span_in_msec());
  }
}

void AutoGatheringParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.AutoGatheringParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoGatheringParam::CopyFrom(const AutoGatheringParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.AutoGatheringParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoGatheringParam::IsInitialized() const {
  return true;
}

void AutoGatheringParam::InternalSwap(AutoGatheringParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signal_candidates_.InternalSwap(&other->signal_candidates_);
  swap(time_span_in_msec_, other->time_span_in_msec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoGatheringParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualGatheringParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_ManualGatheringParam_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
}
class ManualGatheringParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const ManualGatheringParam* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
ManualGatheringParam::_Internal::freq_span(const ManualGatheringParam* msg) {
  return *msg->freq_span_;
}
void ManualGatheringParam::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
ManualGatheringParam::ManualGatheringParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.ManualGatheringParam)
}
ManualGatheringParam::ManualGatheringParam(const ManualGatheringParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  time_span_in_msec_ = from.time_span_in_msec_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.ManualGatheringParam)
}

void ManualGatheringParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualGatheringParam_scenario_2fdetection_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&freq_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_span_in_msec_) -
      reinterpret_cast<char*>(&freq_span_)) + sizeof(time_span_in_msec_));
}

ManualGatheringParam::~ManualGatheringParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.ManualGatheringParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManualGatheringParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete freq_span_;
}

void ManualGatheringParam::ArenaDtor(void* object) {
  ManualGatheringParam* _this = reinterpret_cast< ManualGatheringParam* >(object);
  (void)_this;
}
void ManualGatheringParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualGatheringParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualGatheringParam& ManualGatheringParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualGatheringParam_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void ManualGatheringParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.ManualGatheringParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  time_span_in_msec_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualGatheringParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.ManualGatheringParam.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time_span_in_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_span_in_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualGatheringParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.ManualGatheringParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.ManualGatheringParam.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 time_span_in_msec = 2;
  if (this->time_span_in_msec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_span_in_msec(), target);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 3;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::freq_span(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.ManualGatheringParam)
  return target;
}

size_t ManualGatheringParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.ManualGatheringParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 3;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // int32 time_span_in_msec = 2;
  if (this->time_span_in_msec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time_span_in_msec());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualGatheringParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.ManualGatheringParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualGatheringParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualGatheringParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.ManualGatheringParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.ManualGatheringParam)
    MergeFrom(*source);
  }
}

void ManualGatheringParam::MergeFrom(const ManualGatheringParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.ManualGatheringParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.time_span_in_msec() != 0) {
    _internal_set_time_span_in_msec(from._internal_time_span_in_msec());
  }
}

void ManualGatheringParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.ManualGatheringParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualGatheringParam::CopyFrom(const ManualGatheringParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.ManualGatheringParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualGatheringParam::IsInitialized() const {
  return true;
}

void ManualGatheringParam::InternalSwap(ManualGatheringParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualGatheringParam, time_span_in_msec_)
      + sizeof(ManualGatheringParam::time_span_in_msec_)
      - PROTOBUF_FIELD_OFFSET(ManualGatheringParam, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualGatheringParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalGatheringRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalGatheringRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalGatheringRequest_default_instance_._instance.get_mutable()->auto_gathering_param_ = const_cast< ::zb::dcts::scenario::detection::AutoGatheringParam*>(
      ::zb::dcts::scenario::detection::AutoGatheringParam::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalGatheringRequest_default_instance_._instance.get_mutable()->manual_gathering_param_ = const_cast< ::zb::dcts::scenario::detection::ManualGatheringParam*>(
      ::zb::dcts::scenario::detection::ManualGatheringParam::internal_default_instance());
}
class SignalGatheringRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const SignalGatheringRequest* msg);
  static const ::zb::dcts::scenario::detection::AutoGatheringParam& auto_gathering_param(const SignalGatheringRequest* msg);
  static const ::zb::dcts::scenario::detection::ManualGatheringParam& manual_gathering_param(const SignalGatheringRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
SignalGatheringRequest::_Internal::responser(const SignalGatheringRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::detection::AutoGatheringParam&
SignalGatheringRequest::_Internal::auto_gathering_param(const SignalGatheringRequest* msg) {
  return *msg->auto_gathering_param_;
}
const ::zb::dcts::scenario::detection::ManualGatheringParam&
SignalGatheringRequest::_Internal::manual_gathering_param(const SignalGatheringRequest* msg) {
  return *msg->manual_gathering_param_;
}
void SignalGatheringRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
SignalGatheringRequest::SignalGatheringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalGatheringRequest)
}
SignalGatheringRequest::SignalGatheringRequest(const SignalGatheringRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_auto_gathering_param()) {
    auto_gathering_param_ = new ::zb::dcts::scenario::detection::AutoGatheringParam(*from.auto_gathering_param_);
  } else {
    auto_gathering_param_ = nullptr;
  }
  if (from._internal_has_manual_gathering_param()) {
    manual_gathering_param_ = new ::zb::dcts::scenario::detection::ManualGatheringParam(*from.manual_gathering_param_);
  } else {
    manual_gathering_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalGatheringRequest)
}

void SignalGatheringRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalGatheringRequest_scenario_2fdetection_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_gathering_param_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(manual_gathering_param_));
}

SignalGatheringRequest::~SignalGatheringRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalGatheringRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalGatheringRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete auto_gathering_param_;
  if (this != internal_default_instance()) delete manual_gathering_param_;
}

void SignalGatheringRequest::ArenaDtor(void* object) {
  SignalGatheringRequest* _this = reinterpret_cast< SignalGatheringRequest* >(object);
  (void)_this;
}
void SignalGatheringRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalGatheringRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalGatheringRequest& SignalGatheringRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalGatheringRequest_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalGatheringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && auto_gathering_param_ != nullptr) {
    delete auto_gathering_param_;
  }
  auto_gathering_param_ = nullptr;
  if (GetArena() == nullptr && manual_gathering_param_ != nullptr) {
    delete manual_gathering_param_;
  }
  manual_gathering_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalGatheringRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.AutoGatheringParam auto_gathering_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_gathering_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.ManualGatheringParam manual_gathering_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual_gathering_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalGatheringRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.detection.AutoGatheringParam auto_gathering_param = 2;
  if (this->has_auto_gathering_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auto_gathering_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.ManualGatheringParam manual_gathering_param = 3;
  if (this->has_manual_gathering_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::manual_gathering_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalGatheringRequest)
  return target;
}

size_t SignalGatheringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.detection.AutoGatheringParam auto_gathering_param = 2;
  if (this->has_auto_gathering_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auto_gathering_param_);
  }

  // .zb.dcts.scenario.detection.ManualGatheringParam manual_gathering_param = 3;
  if (this->has_manual_gathering_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *manual_gathering_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalGatheringRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalGatheringRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalGatheringRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalGatheringRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalGatheringRequest)
    MergeFrom(*source);
  }
}

void SignalGatheringRequest::MergeFrom(const SignalGatheringRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_auto_gathering_param()) {
    _internal_mutable_auto_gathering_param()->::zb::dcts::scenario::detection::AutoGatheringParam::MergeFrom(from._internal_auto_gathering_param());
  }
  if (from.has_manual_gathering_param()) {
    _internal_mutable_manual_gathering_param()->::zb::dcts::scenario::detection::ManualGatheringParam::MergeFrom(from._internal_manual_gathering_param());
  }
}

void SignalGatheringRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalGatheringRequest::CopyFrom(const SignalGatheringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalGatheringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalGatheringRequest::IsInitialized() const {
  return true;
}

void SignalGatheringRequest::InternalSwap(SignalGatheringRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalGatheringRequest, manual_gathering_param_)
      + sizeof(SignalGatheringRequest::manual_gathering_param_)
      - PROTOBUF_FIELD_OFFSET(SignalGatheringRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalGatheringRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalSample::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalSample_default_instance_._instance.get_mutable()->sample_block_ = const_cast< ::zb::dcts::scenario::spectrum::SpectrumBlock*>(
      ::zb::dcts::scenario::spectrum::SpectrumBlock::internal_default_instance());
}
class SignalSample::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SpectrumBlock& sample_block(const SignalSample* msg);
};

const ::zb::dcts::scenario::spectrum::SpectrumBlock&
SignalSample::_Internal::sample_block(const SignalSample* msg) {
  return *msg->sample_block_;
}
void SignalSample::clear_sample_block() {
  if (GetArena() == nullptr && sample_block_ != nullptr) {
    delete sample_block_;
  }
  sample_block_ = nullptr;
}
SignalSample::SignalSample(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalSample)
}
SignalSample::SignalSample(const SignalSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_sample_block()) {
    sample_block_ = new ::zb::dcts::scenario::spectrum::SpectrumBlock(*from.sample_block_);
  } else {
    sample_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalSample)
}

void SignalSample::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalSample_scenario_2fdetection_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_block_ = nullptr;
}

SignalSample::~SignalSample() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalSample)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSample::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sample_block_;
}

void SignalSample::ArenaDtor(void* object) {
  SignalSample* _this = reinterpret_cast< SignalSample* >(object);
  (void)_this;
}
void SignalSample::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSample& SignalSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalSample_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalSample::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sample_block_ != nullptr) {
    delete sample_block_;
  }
  sample_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.detection.SignalSample.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SpectrumBlock sample_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSample::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.detection.SignalSample.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.spectrum.SpectrumBlock sample_block = 2;
  if (this->has_sample_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sample_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalSample)
  return target;
}

size_t SignalSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalSample)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.SpectrumBlock sample_block = 2;
  if (this->has_sample_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sample_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSample::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalSample)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSample* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSample>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalSample)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalSample)
    MergeFrom(*source);
  }
}

void SignalSample::MergeFrom(const SignalSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_sample_block()) {
    _internal_mutable_sample_block()->::zb::dcts::scenario::spectrum::SpectrumBlock::MergeFrom(from._internal_sample_block());
  }
}

void SignalSample::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSample::CopyFrom(const SignalSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSample::IsInitialized() const {
  return true;
}

void SignalSample::InternalSwap(SignalSample* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sample_block_, other->sample_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSample::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalSampleList::InitAsDefaultInstance() {
}
class SignalSampleList::_Internal {
 public:
};

SignalSampleList::SignalSampleList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  samples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalSampleList)
}
SignalSampleList::SignalSampleList(const SignalSampleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalSampleList)
}

void SignalSampleList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalSampleList_scenario_2fdetection_2eproto.base);
}

SignalSampleList::~SignalSampleList() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalSampleList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalSampleList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SignalSampleList::ArenaDtor(void* object) {
  SignalSampleList* _this = reinterpret_cast< SignalSampleList* >(object);
  (void)_this;
}
void SignalSampleList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalSampleList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalSampleList& SignalSampleList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalSampleList_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalSampleList::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalSampleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalSampleList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.detection.SignalSample samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalSampleList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalSampleList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalSample samples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_samples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalSampleList)
  return target;
}

size_t SignalSampleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalSampleList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalSample samples = 1;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalSampleList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalSampleList)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalSampleList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalSampleList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalSampleList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalSampleList)
    MergeFrom(*source);
  }
}

void SignalSampleList::MergeFrom(const SignalSampleList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalSampleList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
}

void SignalSampleList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalSampleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalSampleList::CopyFrom(const SignalSampleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalSampleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalSampleList::IsInitialized() const {
  return true;
}

void SignalSampleList::InternalSwap(SignalSampleList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  samples_.InternalSwap(&other->samples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalSampleList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalTableQueryRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_._instance.get_mutable()->data_source_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_._instance.get_mutable()->activiy_mask_ = const_cast< ::zb::dcts::Integer*>(
      ::zb::dcts::Integer::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_._instance.get_mutable()->freq_range_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalTableQueryRequest_default_instance_._instance.get_mutable()->time_range_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class SignalTableQueryRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const SignalTableQueryRequest* msg);
  static const ::zb::dcts::source::SourceId& data_source(const SignalTableQueryRequest* msg);
  static const ::zb::dcts::Integer& activiy_mask(const SignalTableQueryRequest* msg);
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_range(const SignalTableQueryRequest* msg);
  static const ::zb::dcts::TimeSpan& time_range(const SignalTableQueryRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
SignalTableQueryRequest::_Internal::responser(const SignalTableQueryRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::source::SourceId&
SignalTableQueryRequest::_Internal::data_source(const SignalTableQueryRequest* msg) {
  return *msg->data_source_;
}
const ::zb::dcts::Integer&
SignalTableQueryRequest::_Internal::activiy_mask(const SignalTableQueryRequest* msg) {
  return *msg->activiy_mask_;
}
const ::zb::dcts::scenario::spectrum::FrequencySpan&
SignalTableQueryRequest::_Internal::freq_range(const SignalTableQueryRequest* msg) {
  return *msg->freq_range_;
}
const ::zb::dcts::TimeSpan&
SignalTableQueryRequest::_Internal::time_range(const SignalTableQueryRequest* msg) {
  return *msg->time_range_;
}
void SignalTableQueryRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
void SignalTableQueryRequest::clear_data_source() {
  if (GetArena() == nullptr && data_source_ != nullptr) {
    delete data_source_;
  }
  data_source_ = nullptr;
}
void SignalTableQueryRequest::clear_activiy_mask() {
  if (GetArena() == nullptr && activiy_mask_ != nullptr) {
    delete activiy_mask_;
  }
  activiy_mask_ = nullptr;
}
void SignalTableQueryRequest::clear_freq_range() {
  if (GetArena() == nullptr && freq_range_ != nullptr) {
    delete freq_range_;
  }
  freq_range_ = nullptr;
}
void SignalTableQueryRequest::clear_time_range() {
  if (GetArena() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
}
SignalTableQueryRequest::SignalTableQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalTableQueryRequest)
}
SignalTableQueryRequest::SignalTableQueryRequest(const SignalTableQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_data_source()) {
    data_source_ = new ::zb::dcts::source::SourceId(*from.data_source_);
  } else {
    data_source_ = nullptr;
  }
  if (from._internal_has_activiy_mask()) {
    activiy_mask_ = new ::zb::dcts::Integer(*from.activiy_mask_);
  } else {
    activiy_mask_ = nullptr;
  }
  if (from._internal_has_freq_range()) {
    freq_range_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_range_);
  } else {
    freq_range_ = nullptr;
  }
  if (from._internal_has_time_range()) {
    time_range_ = new ::zb::dcts::TimeSpan(*from.time_range_);
  } else {
    time_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalTableQueryRequest)
}

void SignalTableQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_range_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(time_range_));
}

SignalTableQueryRequest::~SignalTableQueryRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalTableQueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalTableQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete data_source_;
  if (this != internal_default_instance()) delete activiy_mask_;
  if (this != internal_default_instance()) delete freq_range_;
  if (this != internal_default_instance()) delete time_range_;
}

void SignalTableQueryRequest::ArenaDtor(void* object) {
  SignalTableQueryRequest* _this = reinterpret_cast< SignalTableQueryRequest* >(object);
  (void)_this;
}
void SignalTableQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalTableQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalTableQueryRequest& SignalTableQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalTableQueryRequest_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalTableQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && data_source_ != nullptr) {
    delete data_source_;
  }
  data_source_ = nullptr;
  if (GetArena() == nullptr && activiy_mask_ != nullptr) {
    delete activiy_mask_;
  }
  activiy_mask_ = nullptr;
  if (GetArena() == nullptr && freq_range_ != nullptr) {
    delete freq_range_;
  }
  freq_range_ = nullptr;
  if (GetArena() == nullptr && time_range_ != nullptr) {
    delete time_range_;
  }
  time_range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalTableQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceId data_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Integer activiy_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_activiy_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalTableQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.source.SourceId data_source = 2;
  if (this->has_data_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_source(this), target, stream);
  }

  // .zb.dcts.Integer activiy_mask = 3;
  if (this->has_activiy_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::activiy_mask(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_range = 4;
  if (this->has_freq_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::freq_range(this), target, stream);
  }

  // .zb.dcts.TimeSpan time_range = 5;
  if (this->has_time_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalTableQueryRequest)
  return target;
}

size_t SignalTableQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.source.SourceId data_source = 2;
  if (this->has_data_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_source_);
  }

  // .zb.dcts.Integer activiy_mask = 3;
  if (this->has_activiy_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activiy_mask_);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_range = 4;
  if (this->has_freq_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_range_);
  }

  // .zb.dcts.TimeSpan time_range = 5;
  if (this->has_time_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalTableQueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalTableQueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalTableQueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalTableQueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalTableQueryRequest)
    MergeFrom(*source);
  }
}

void SignalTableQueryRequest::MergeFrom(const SignalTableQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_data_source()) {
    _internal_mutable_data_source()->::zb::dcts::source::SourceId::MergeFrom(from._internal_data_source());
  }
  if (from.has_activiy_mask()) {
    _internal_mutable_activiy_mask()->::zb::dcts::Integer::MergeFrom(from._internal_activiy_mask());
  }
  if (from.has_freq_range()) {
    _internal_mutable_freq_range()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_range());
  }
  if (from.has_time_range()) {
    _internal_mutable_time_range()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_range());
  }
}

void SignalTableQueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalTableQueryRequest::CopyFrom(const SignalTableQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalTableQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalTableQueryRequest::IsInitialized() const {
  return true;
}

void SignalTableQueryRequest::InternalSwap(SignalTableQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalTableQueryRequest, time_range_)
      + sizeof(SignalTableQueryRequest::time_range_)
      - PROTOBUF_FIELD_OFFSET(SignalTableQueryRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalTableQueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalTableQueryResponse::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalTableQueryResponse_default_instance_._instance.get_mutable()->data_source_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class SignalTableQueryResponse::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& data_source(const SignalTableQueryResponse* msg);
};

const ::zb::dcts::source::SourceId&
SignalTableQueryResponse::_Internal::data_source(const SignalTableQueryResponse* msg) {
  return *msg->data_source_;
}
void SignalTableQueryResponse::clear_data_source() {
  if (GetArena() == nullptr && data_source_ != nullptr) {
    delete data_source_;
  }
  data_source_ = nullptr;
}
SignalTableQueryResponse::SignalTableQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fix_signal_list_(arena),
  hop_signal_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalTableQueryResponse)
}
SignalTableQueryResponse::SignalTableQueryResponse(const SignalTableQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fix_signal_list_(from.fix_signal_list_),
      hop_signal_list_(from.hop_signal_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_source()) {
    data_source_ = new ::zb::dcts::source::SourceId(*from.data_source_);
  } else {
    data_source_ = nullptr;
  }
  ::memcpy(&num_sweeps_, &from.num_sweeps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_query_signals_) -
    reinterpret_cast<char*>(&num_sweeps_)) + sizeof(num_query_signals_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalTableQueryResponse)
}

void SignalTableQueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto.base);
  ::memset(&data_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_query_signals_) -
      reinterpret_cast<char*>(&data_source_)) + sizeof(num_query_signals_));
}

SignalTableQueryResponse::~SignalTableQueryResponse() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalTableQueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalTableQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_source_;
}

void SignalTableQueryResponse::ArenaDtor(void* object) {
  SignalTableQueryResponse* _this = reinterpret_cast< SignalTableQueryResponse* >(object);
  (void)_this;
}
void SignalTableQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalTableQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalTableQueryResponse& SignalTableQueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalTableQueryResponse_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalTableQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fix_signal_list_.Clear();
  hop_signal_list_.Clear();
  if (GetArena() == nullptr && data_source_ != nullptr) {
    delete data_source_;
  }
  data_source_ = nullptr;
  ::memset(&num_sweeps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_query_signals_) -
      reinterpret_cast<char*>(&num_sweeps_)) + sizeof(num_query_signals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalTableQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId data_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_sweeps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_sweeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_detects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_detects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_total_signals = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_total_signals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_query_signals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_query_signals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fix_signal_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_signal_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalTableQueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId data_source = 1;
  if (this->has_data_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data_source(this), target, stream);
  }

  // int32 num_sweeps = 2;
  if (this->num_sweeps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_sweeps(), target);
  }

  // int32 num_detects = 3;
  if (this->num_detects() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_detects(), target);
  }

  // int32 num_total_signals = 4;
  if (this->num_total_signals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_total_signals(), target);
  }

  // int32 num_query_signals = 5;
  if (this->num_query_signals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_query_signals(), target);
  }

  // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fix_signal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fix_signal_list(i), target, stream);
  }

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_signal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_hop_signal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalTableQueryResponse)
  return target;
}

size_t SignalTableQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 7;
  total_size += 1UL * this->_internal_fix_signal_list_size();
  for (const auto& msg : this->fix_signal_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 8;
  total_size += 1UL * this->_internal_hop_signal_list_size();
  for (const auto& msg : this->hop_signal_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.source.SourceId data_source = 1;
  if (this->has_data_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_source_);
  }

  // int32 num_sweeps = 2;
  if (this->num_sweeps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_sweeps());
  }

  // int32 num_detects = 3;
  if (this->num_detects() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_detects());
  }

  // int32 num_total_signals = 4;
  if (this->num_total_signals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_total_signals());
  }

  // int32 num_query_signals = 5;
  if (this->num_query_signals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_query_signals());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalTableQueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalTableQueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalTableQueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalTableQueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalTableQueryResponse)
    MergeFrom(*source);
  }
}

void SignalTableQueryResponse::MergeFrom(const SignalTableQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fix_signal_list_.MergeFrom(from.fix_signal_list_);
  hop_signal_list_.MergeFrom(from.hop_signal_list_);
  if (from.has_data_source()) {
    _internal_mutable_data_source()->::zb::dcts::source::SourceId::MergeFrom(from._internal_data_source());
  }
  if (from.num_sweeps() != 0) {
    _internal_set_num_sweeps(from._internal_num_sweeps());
  }
  if (from.num_detects() != 0) {
    _internal_set_num_detects(from._internal_num_detects());
  }
  if (from.num_total_signals() != 0) {
    _internal_set_num_total_signals(from._internal_num_total_signals());
  }
  if (from.num_query_signals() != 0) {
    _internal_set_num_query_signals(from._internal_num_query_signals());
  }
}

void SignalTableQueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalTableQueryResponse::CopyFrom(const SignalTableQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalTableQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalTableQueryResponse::IsInitialized() const {
  return true;
}

void SignalTableQueryResponse::InternalSwap(SignalTableQueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fix_signal_list_.InternalSwap(&other->fix_signal_list_);
  hop_signal_list_.InternalSwap(&other->hop_signal_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalTableQueryResponse, num_query_signals_)
      + sizeof(SignalTableQueryResponse::num_query_signals_)
      - PROTOBUF_FIELD_OFFSET(SignalTableQueryResponse, data_source_)>(
          reinterpret_cast<char*>(&data_source_),
          reinterpret_cast<char*>(&other->data_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalTableQueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::detection::_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::detection::_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const Header* msg);
  static const ::zb::dcts::Position& device_position(const Header* msg);
};

const ::zb::dcts::source::SourceId&
Header::_Internal::result_from(const Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
Header::_Internal::time_span(const Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
Header::_Internal::device_position(const Header* msg) {
  return *msg->device_position_;
}
void Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_count_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_scenario_2fdetection_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sweep_count_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_count_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sweep_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_count(), target);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 5;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 6;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 3;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  // uint32 sweep_count = 4;
  if (this->sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.sweep_count() != 0) {
    _internal_set_sweep_count(from._internal_sweep_count());
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, sweep_count_)
      + sizeof(Header::sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawBody::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_RawBody_default_instance_._instance.get_mutable()->freq_seg_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySegment*>(
      ::zb::dcts::scenario::spectrum::FrequencySegment::internal_default_instance());
  ::zb::dcts::scenario::detection::_RawBody_default_instance_._instance.get_mutable()->over_threshold_hits_ = const_cast< ::zb::dcts::scenario::spectrum::SpectrumLine*>(
      ::zb::dcts::scenario::spectrum::SpectrumLine::internal_default_instance());
}
class RawBody::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySegment& freq_seg(const RawBody* msg);
  static const ::zb::dcts::scenario::spectrum::SpectrumLine& over_threshold_hits(const RawBody* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySegment&
RawBody::_Internal::freq_seg(const RawBody* msg) {
  return *msg->freq_seg_;
}
const ::zb::dcts::scenario::spectrum::SpectrumLine&
RawBody::_Internal::over_threshold_hits(const RawBody* msg) {
  return *msg->over_threshold_hits_;
}
void RawBody::clear_freq_seg() {
  if (GetArena() == nullptr && freq_seg_ != nullptr) {
    delete freq_seg_;
  }
  freq_seg_ = nullptr;
}
void RawBody::clear_over_threshold_hits() {
  if (GetArena() == nullptr && over_threshold_hits_ != nullptr) {
    delete over_threshold_hits_;
  }
  over_threshold_hits_ = nullptr;
}
void RawBody::clear_raw_spectrum_lines() {
  raw_spectrum_lines_.Clear();
}
RawBody::RawBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_spectrum_lines_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.RawBody)
}
RawBody::RawBody(const RawBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      raw_spectrum_lines_(from.raw_spectrum_lines_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_seg()) {
    freq_seg_ = new ::zb::dcts::scenario::spectrum::FrequencySegment(*from.freq_seg_);
  } else {
    freq_seg_ = nullptr;
  }
  if (from._internal_has_over_threshold_hits()) {
    over_threshold_hits_ = new ::zb::dcts::scenario::spectrum::SpectrumLine(*from.over_threshold_hits_);
  } else {
    over_threshold_hits_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.RawBody)
}

void RawBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawBody_scenario_2fdetection_2eproto.base);
  ::memset(&freq_seg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_threshold_hits_) -
      reinterpret_cast<char*>(&freq_seg_)) + sizeof(over_threshold_hits_));
}

RawBody::~RawBody() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.RawBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_seg_;
  if (this != internal_default_instance()) delete over_threshold_hits_;
}

void RawBody::ArenaDtor(void* object) {
  RawBody* _this = reinterpret_cast< RawBody* >(object);
  (void)_this;
}
void RawBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawBody& RawBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawBody_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void RawBody::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_spectrum_lines_.Clear();
  if (GetArena() == nullptr && freq_seg_ != nullptr) {
    delete freq_seg_;
  }
  freq_seg_ = nullptr;
  if (GetArena() == nullptr && over_threshold_hits_ != nullptr) {
    delete over_threshold_hits_;
  }
  over_threshold_hits_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencySegment freq_seg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_seg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SpectrumLine over_threshold_hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_over_threshold_hits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.spectrum.SpectrumLine raw_spectrum_lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_raw_spectrum_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.RawBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySegment freq_seg = 1;
  if (this->has_freq_seg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_seg(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.SpectrumLine over_threshold_hits = 2;
  if (this->has_over_threshold_hits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::over_threshold_hits(this), target, stream);
  }

  // repeated .zb.dcts.scenario.spectrum.SpectrumLine raw_spectrum_lines = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raw_spectrum_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_raw_spectrum_lines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.RawBody)
  return target;
}

size_t RawBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.RawBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.spectrum.SpectrumLine raw_spectrum_lines = 3;
  total_size += 1UL * this->_internal_raw_spectrum_lines_size();
  for (const auto& msg : this->raw_spectrum_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.spectrum.FrequencySegment freq_seg = 1;
  if (this->has_freq_seg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_seg_);
  }

  // .zb.dcts.scenario.spectrum.SpectrumLine over_threshold_hits = 2;
  if (this->has_over_threshold_hits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *over_threshold_hits_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RawBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.RawBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.RawBody)
    MergeFrom(*source);
  }
}

void RawBody::MergeFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.RawBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_spectrum_lines_.MergeFrom(from.raw_spectrum_lines_);
  if (from.has_freq_seg()) {
    _internal_mutable_freq_seg()->::zb::dcts::scenario::spectrum::FrequencySegment::MergeFrom(from._internal_freq_seg());
  }
  if (from.has_over_threshold_hits()) {
    _internal_mutable_over_threshold_hits()->::zb::dcts::scenario::spectrum::SpectrumLine::MergeFrom(from._internal_over_threshold_hits());
  }
}

void RawBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBody::CopyFrom(const RawBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.RawBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBody::IsInitialized() const {
  return true;
}

void RawBody::InternalSwap(RawBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  raw_spectrum_lines_.InternalSwap(&other->raw_spectrum_lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawBody, over_threshold_hits_)
      + sizeof(RawBody::over_threshold_hits_)
      - PROTOBUF_FIELD_OFFSET(RawBody, freq_seg_)>(
          reinterpret_cast<char*>(&freq_seg_),
          reinterpret_cast<char*>(&other->freq_seg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawData::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_RawData_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::detection::Header*>(
      ::zb::dcts::scenario::detection::Header::internal_default_instance());
  ::zb::dcts::scenario::detection::_RawData_default_instance_._instance.get_mutable()->body_ = const_cast< ::zb::dcts::scenario::detection::RawBody*>(
      ::zb::dcts::scenario::detection::RawBody::internal_default_instance());
}
class RawData::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::Header& header(const RawData* msg);
  static const ::zb::dcts::scenario::detection::RawBody& body(const RawData* msg);
};

const ::zb::dcts::scenario::detection::Header&
RawData::_Internal::header(const RawData* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::detection::RawBody&
RawData::_Internal::body(const RawData* msg) {
  return *msg->body_;
}
void RawData::clear_signal_segments() {
  signal_segments_.Clear();
}
RawData::RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signal_segments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.RawData)
}
RawData::RawData(const RawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signal_segments_(from.signal_segments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::detection::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::zb::dcts::scenario::detection::RawBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.RawData)
}

void RawData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawData_scenario_2fdetection_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.RawData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RawData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void RawData::ArenaDtor(void* object) {
  RawData* _this = reinterpret_cast< RawData* >(object);
  (void)_this;
}
void RawData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawData& RawData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawData_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_segments_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.detection.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.RawBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.IRange signal_segments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.RawData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.detection.RawBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  // repeated .zb.dcts.IRange signal_segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signal_segments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.RawData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.IRange signal_segments = 3;
  total_size += 1UL * this->_internal_signal_segments_size();
  for (const auto& msg : this->signal_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.detection.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.detection.RawBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  const RawData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.RawData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_segments_.MergeFrom(from.signal_segments_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::detection::Header::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::zb::dcts::scenario::detection::RawBody::MergeFrom(from._internal_body());
  }
}

void RawData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::InternalSwap(RawData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signal_segments_.InternalSwap(&other->signal_segments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawData, body_)
      + sizeof(RawData::body_)
      - PROTOBUF_FIELD_OFFSET(RawData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceDetectResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::detection::Header*>(
      ::zb::dcts::scenario::detection::Header::internal_default_instance());
  ::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_._instance.get_mutable()->fix_signal_list_ = const_cast< ::zb::dcts::scenario::detection::FixSignalList*>(
      ::zb::dcts::scenario::detection::FixSignalList::internal_default_instance());
  ::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_._instance.get_mutable()->hop_signal_list_ = const_cast< ::zb::dcts::scenario::detection::HopSignalList*>(
      ::zb::dcts::scenario::detection::HopSignalList::internal_default_instance());
  ::zb::dcts::scenario::detection::_DeviceDetectResult_default_instance_._instance.get_mutable()->signal_sample_list_ = const_cast< ::zb::dcts::scenario::detection::SignalSampleList*>(
      ::zb::dcts::scenario::detection::SignalSampleList::internal_default_instance());
}
class DeviceDetectResult::_Internal {
 public:
  static const ::zb::dcts::scenario::detection::Header& header(const DeviceDetectResult* msg);
  static const ::zb::dcts::scenario::detection::FixSignalList& fix_signal_list(const DeviceDetectResult* msg);
  static const ::zb::dcts::scenario::detection::HopSignalList& hop_signal_list(const DeviceDetectResult* msg);
  static const ::zb::dcts::scenario::detection::SignalSampleList& signal_sample_list(const DeviceDetectResult* msg);
};

const ::zb::dcts::scenario::detection::Header&
DeviceDetectResult::_Internal::header(const DeviceDetectResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::detection::FixSignalList&
DeviceDetectResult::_Internal::fix_signal_list(const DeviceDetectResult* msg) {
  return *msg->fix_signal_list_;
}
const ::zb::dcts::scenario::detection::HopSignalList&
DeviceDetectResult::_Internal::hop_signal_list(const DeviceDetectResult* msg) {
  return *msg->hop_signal_list_;
}
const ::zb::dcts::scenario::detection::SignalSampleList&
DeviceDetectResult::_Internal::signal_sample_list(const DeviceDetectResult* msg) {
  return *msg->signal_sample_list_;
}
DeviceDetectResult::DeviceDetectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.DeviceDetectResult)
}
DeviceDetectResult::DeviceDetectResult(const DeviceDetectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::detection::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_fix_signal_list()) {
    fix_signal_list_ = new ::zb::dcts::scenario::detection::FixSignalList(*from.fix_signal_list_);
  } else {
    fix_signal_list_ = nullptr;
  }
  if (from._internal_has_hop_signal_list()) {
    hop_signal_list_ = new ::zb::dcts::scenario::detection::HopSignalList(*from.hop_signal_list_);
  } else {
    hop_signal_list_ = nullptr;
  }
  if (from._internal_has_signal_sample_list()) {
    signal_sample_list_ = new ::zb::dcts::scenario::detection::SignalSampleList(*from.signal_sample_list_);
  } else {
    signal_sample_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.DeviceDetectResult)
}

void DeviceDetectResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceDetectResult_scenario_2fdetection_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_sample_list_) -
      reinterpret_cast<char*>(&header_)) + sizeof(signal_sample_list_));
}

DeviceDetectResult::~DeviceDetectResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.DeviceDetectResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceDetectResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete fix_signal_list_;
  if (this != internal_default_instance()) delete hop_signal_list_;
  if (this != internal_default_instance()) delete signal_sample_list_;
}

void DeviceDetectResult::ArenaDtor(void* object) {
  DeviceDetectResult* _this = reinterpret_cast< DeviceDetectResult* >(object);
  (void)_this;
}
void DeviceDetectResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceDetectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceDetectResult& DeviceDetectResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceDetectResult_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void DeviceDetectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.DeviceDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && fix_signal_list_ != nullptr) {
    delete fix_signal_list_;
  }
  fix_signal_list_ = nullptr;
  if (GetArena() == nullptr && hop_signal_list_ != nullptr) {
    delete hop_signal_list_;
  }
  hop_signal_list_ = nullptr;
  if (GetArena() == nullptr && signal_sample_list_ != nullptr) {
    delete signal_sample_list_;
  }
  signal_sample_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceDetectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.detection.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.FixSignalList fix_signal_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fix_signal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.HopSignalList hop_signal_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hop_signal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.SignalSampleList signal_sample_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_sample_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceDetectResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.DeviceDetectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.detection.FixSignalList fix_signal_list = 3;
  if (this->has_fix_signal_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fix_signal_list(this), target, stream);
  }

  // .zb.dcts.scenario.detection.HopSignalList hop_signal_list = 4;
  if (this->has_hop_signal_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hop_signal_list(this), target, stream);
  }

  // .zb.dcts.scenario.detection.SignalSampleList signal_sample_list = 5;
  if (this->has_signal_sample_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::signal_sample_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.DeviceDetectResult)
  return target;
}

size_t DeviceDetectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.DeviceDetectResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.detection.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.detection.FixSignalList fix_signal_list = 3;
  if (this->has_fix_signal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fix_signal_list_);
  }

  // .zb.dcts.scenario.detection.HopSignalList hop_signal_list = 4;
  if (this->has_hop_signal_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hop_signal_list_);
  }

  // .zb.dcts.scenario.detection.SignalSampleList signal_sample_list = 5;
  if (this->has_signal_sample_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_sample_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceDetectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.DeviceDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceDetectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceDetectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.DeviceDetectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.DeviceDetectResult)
    MergeFrom(*source);
  }
}

void DeviceDetectResult::MergeFrom(const DeviceDetectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.DeviceDetectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::detection::Header::MergeFrom(from._internal_header());
  }
  if (from.has_fix_signal_list()) {
    _internal_mutable_fix_signal_list()->::zb::dcts::scenario::detection::FixSignalList::MergeFrom(from._internal_fix_signal_list());
  }
  if (from.has_hop_signal_list()) {
    _internal_mutable_hop_signal_list()->::zb::dcts::scenario::detection::HopSignalList::MergeFrom(from._internal_hop_signal_list());
  }
  if (from.has_signal_sample_list()) {
    _internal_mutable_signal_sample_list()->::zb::dcts::scenario::detection::SignalSampleList::MergeFrom(from._internal_signal_sample_list());
  }
}

void DeviceDetectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.DeviceDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDetectResult::CopyFrom(const DeviceDetectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.DeviceDetectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceDetectResult::IsInitialized() const {
  return true;
}

void DeviceDetectResult::InternalSwap(DeviceDetectResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceDetectResult, signal_sample_list_)
      + sizeof(DeviceDetectResult::signal_sample_list_)
      - PROTOBUF_FIELD_OFFSET(DeviceDetectResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceDetectResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalLayerSurvey::InitAsDefaultInstance() {
  ::zb::dcts::scenario::detection::_SignalLayerSurvey_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalLayerSurvey_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::detection::_SignalLayerSurvey_default_instance_._instance.get_mutable()->position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class SignalLayerSurvey::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const SignalLayerSurvey* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const SignalLayerSurvey* msg);
  static const ::zb::dcts::Position& position(const SignalLayerSurvey* msg);
};

const ::zb::dcts::source::SourceId&
SignalLayerSurvey::_Internal::result_from(const SignalLayerSurvey* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
SignalLayerSurvey::_Internal::time_stamp(const SignalLayerSurvey* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
SignalLayerSurvey::_Internal::position(const SignalLayerSurvey* msg) {
  return *msg->position_;
}
void SignalLayerSurvey::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void SignalLayerSurvey::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void SignalLayerSurvey::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SignalLayerSurvey::SignalLayerSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fix_signal_list_(arena),
  hop_signal_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.detection.SignalLayerSurvey)
}
SignalLayerSurvey::SignalLayerSurvey(const SignalLayerSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fix_signal_list_(from.fix_signal_list_),
      hop_signal_list_(from.hop_signal_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::zb::dcts::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.detection.SignalLayerSurvey)
}

void SignalLayerSurvey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalLayerSurvey_scenario_2fdetection_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(position_));
}

SignalLayerSurvey::~SignalLayerSurvey() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.detection.SignalLayerSurvey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalLayerSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete position_;
}

void SignalLayerSurvey::ArenaDtor(void* object) {
  SignalLayerSurvey* _this = reinterpret_cast< SignalLayerSurvey* >(object);
  (void)_this;
}
void SignalLayerSurvey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalLayerSurvey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalLayerSurvey& SignalLayerSurvey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalLayerSurvey_scenario_2fdetection_2eproto.base);
  return *internal_default_instance();
}


void SignalLayerSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fix_signal_list_.Clear();
  hop_signal_list_.Clear();
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalLayerSurvey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fix_signal_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_signal_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalLayerSurvey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // .zb.dcts.Timestamp time_stamp = 2;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fix_signal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fix_signal_list(i), target, stream);
  }

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_signal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_hop_signal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.detection.SignalLayerSurvey)
  return target;
}

size_t SignalLayerSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.detection.SignalDigest fix_signal_list = 4;
  total_size += 1UL * this->_internal_fix_signal_list_size();
  for (const auto& msg : this->fix_signal_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zb.dcts.scenario.detection.HopSignalCluster hop_signal_list = 5;
  total_size += 1UL * this->_internal_hop_signal_list_size();
  for (const auto& msg : this->hop_signal_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 2;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalLayerSurvey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalLayerSurvey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalLayerSurvey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.detection.SignalLayerSurvey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.detection.SignalLayerSurvey)
    MergeFrom(*source);
  }
}

void SignalLayerSurvey::MergeFrom(const SignalLayerSurvey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fix_signal_list_.MergeFrom(from.fix_signal_list_);
  hop_signal_list_.MergeFrom(from.hop_signal_list_);
  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::zb::dcts::Position::MergeFrom(from._internal_position());
  }
}

void SignalLayerSurvey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalLayerSurvey::CopyFrom(const SignalLayerSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.detection.SignalLayerSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLayerSurvey::IsInitialized() const {
  return true;
}

void SignalLayerSurvey::InternalSwap(SignalLayerSurvey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fix_signal_list_.InternalSwap(&other->fix_signal_list_);
  hop_signal_list_.InternalSwap(&other->hop_signal_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalLayerSurvey, position_)
      + sizeof(SignalLayerSurvey::position_)
      - PROTOBUF_FIELD_OFFSET(SignalLayerSurvey, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalLayerSurvey::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace detection
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::ThresholdSector* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::ThresholdSector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::ThresholdSector >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::UserThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::UserThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::UserThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HistoryThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HistoryThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HistoryThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::AdaptiveThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::AdaptiveThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::AdaptiveThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::NeighborVarThresholdParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::NeighborVarThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::NeighborVarThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::EnergyDetectionParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::EnergyDetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::EnergyDetectionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::ThresholdTrace* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::ThresholdTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::ThresholdTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::FreqSpanFilter* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::FreqSpanFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::FreqSpanFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalSegmentationParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalSegmentationParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalSegmentationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HopSignalClusterParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HopSignalClusterParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HopSignalClusterParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HopSignalDetectionParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HopSignalDetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HopSignalDetectionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalDetectParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalDetectParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalDetectParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::DetectionParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::DetectionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::DetectionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalFeature* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalDigest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalDigest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalDigest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalSegment* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HopSignalDigest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HopSignalDigest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HopSignalDigest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HopSignalCluster* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HopSignalCluster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HopSignalCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::FixSignalList* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::FixSignalList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::FixSignalList >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::HopSignalList* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::HopSignalList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::HopSignalList >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::DetectionRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::DetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::DetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::AutoGatheringParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::AutoGatheringParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::AutoGatheringParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::ManualGatheringParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::ManualGatheringParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::ManualGatheringParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalGatheringRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalGatheringRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalGatheringRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalSample* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalSample >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalSampleList* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalSampleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalSampleList >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalTableQueryRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalTableQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalTableQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalTableQueryResponse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalTableQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalTableQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::RawBody* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::RawBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::RawBody >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::RawData* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::RawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::RawData >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::DeviceDetectResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::DeviceDetectResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::DeviceDetectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::detection::SignalLayerSurvey* Arena::CreateMaybeMessage< ::zb::dcts::scenario::detection::SignalLayerSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::detection::SignalLayerSurvey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
