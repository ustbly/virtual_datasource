// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/spectrum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fspectrum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fspectrum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fspectrum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fspectrum_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace spectrum {
class DDCBank;
class DDCBankDefaultTypeInternal;
extern DDCBankDefaultTypeInternal _DDCBank_default_instance_;
class DataHoldRequest;
class DataHoldRequestDefaultTypeInternal;
extern DataHoldRequestDefaultTypeInternal _DataHoldRequest_default_instance_;
class FrequencyBand;
class FrequencyBandDefaultTypeInternal;
extern FrequencyBandDefaultTypeInternal _FrequencyBand_default_instance_;
class FrequencyPos;
class FrequencyPosDefaultTypeInternal;
extern FrequencyPosDefaultTypeInternal _FrequencyPos_default_instance_;
class FrequencyRange;
class FrequencyRangeDefaultTypeInternal;
extern FrequencyRangeDefaultTypeInternal _FrequencyRange_default_instance_;
class FrequencySegment;
class FrequencySegmentDefaultTypeInternal;
extern FrequencySegmentDefaultTypeInternal _FrequencySegment_default_instance_;
class FrequencySpan;
class FrequencySpanDefaultTypeInternal;
extern FrequencySpanDefaultTypeInternal _FrequencySpan_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class SegmentHeader;
class SegmentHeaderDefaultTypeInternal;
extern SegmentHeaderDefaultTypeInternal _SegmentHeader_default_instance_;
class SignalBand;
class SignalBandDefaultTypeInternal;
extern SignalBandDefaultTypeInternal _SignalBand_default_instance_;
class SpectrumBlock;
class SpectrumBlockDefaultTypeInternal;
extern SpectrumBlockDefaultTypeInternal _SpectrumBlock_default_instance_;
class SpectrumLine;
class SpectrumLineDefaultTypeInternal;
extern SpectrumLineDefaultTypeInternal _SpectrumLine_default_instance_;
class View;
class ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
class View_TracesEntry_DoNotUse;
class View_TracesEntry_DoNotUseDefaultTypeInternal;
extern View_TracesEntry_DoNotUseDefaultTypeInternal _View_TracesEntry_DoNotUse_default_instance_;
class ZoomInRequest;
class ZoomInRequestDefaultTypeInternal;
extern ZoomInRequestDefaultTypeInternal _ZoomInRequest_default_instance_;
}  // namespace spectrum
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::spectrum::DDCBank* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::DDCBank>(Arena*);
template<> ::zb::dcts::scenario::spectrum::DataHoldRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::DataHoldRequest>(Arena*);
template<> ::zb::dcts::scenario::spectrum::FrequencyBand* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyBand>(Arena*);
template<> ::zb::dcts::scenario::spectrum::FrequencyPos* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyPos>(Arena*);
template<> ::zb::dcts::scenario::spectrum::FrequencyRange* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyRange>(Arena*);
template<> ::zb::dcts::scenario::spectrum::FrequencySegment* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySegment>(Arena*);
template<> ::zb::dcts::scenario::spectrum::FrequencySpan* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySpan>(Arena*);
template<> ::zb::dcts::scenario::spectrum::Header* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(Arena*);
template<> ::zb::dcts::scenario::spectrum::SegmentHeader* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::SegmentHeader>(Arena*);
template<> ::zb::dcts::scenario::spectrum::SignalBand* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(Arena*);
template<> ::zb::dcts::scenario::spectrum::SpectrumBlock* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::SpectrumBlock>(Arena*);
template<> ::zb::dcts::scenario::spectrum::SpectrumLine* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::SpectrumLine>(Arena*);
template<> ::zb::dcts::scenario::spectrum::View* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(Arena*);
template<> ::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::View_TracesEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::spectrum::ZoomInRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::spectrum::ZoomInRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace spectrum {

enum DataHoldType : int {
  NO_HOLD = 0,
  MAX_HOLD = 1,
  MIN_HOLD = 2,
  RMS_HOLD = 3,
  AVG_HOLD = 4,
  DataHoldType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataHoldType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataHoldType_IsValid(int value);
constexpr DataHoldType DataHoldType_MIN = NO_HOLD;
constexpr DataHoldType DataHoldType_MAX = AVG_HOLD;
constexpr int DataHoldType_ARRAYSIZE = DataHoldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataHoldType_descriptor();
template<typename T>
inline const std::string& DataHoldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataHoldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataHoldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataHoldType_descriptor(), enum_t_value);
}
inline bool DataHoldType_Parse(
    const std::string& name, DataHoldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataHoldType>(
    DataHoldType_descriptor(), name, value);
}
// ===================================================================

class FrequencySpan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.FrequencySpan) */ {
 public:
  inline FrequencySpan() : FrequencySpan(nullptr) {};
  virtual ~FrequencySpan();

  FrequencySpan(const FrequencySpan& from);
  FrequencySpan(FrequencySpan&& from) noexcept
    : FrequencySpan() {
    *this = ::std::move(from);
  }

  inline FrequencySpan& operator=(const FrequencySpan& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencySpan& operator=(FrequencySpan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencySpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencySpan* internal_default_instance() {
    return reinterpret_cast<const FrequencySpan*>(
               &_FrequencySpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrequencySpan& a, FrequencySpan& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencySpan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencySpan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencySpan* New() const final {
    return CreateMaybeMessage<FrequencySpan>(nullptr);
  }

  FrequencySpan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencySpan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencySpan& from);
  void MergeFrom(const FrequencySpan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencySpan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.FrequencySpan";
  }
  protected:
  explicit FrequencySpan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFreqFieldNumber = 1,
    kStopFreqFieldNumber = 2,
  };
  // double start_freq = 1;
  void clear_start_freq();
  double start_freq() const;
  void set_start_freq(double value);
  private:
  double _internal_start_freq() const;
  void _internal_set_start_freq(double value);
  public:

  // double stop_freq = 2;
  void clear_stop_freq();
  double stop_freq() const;
  void set_stop_freq(double value);
  private:
  double _internal_stop_freq() const;
  void _internal_set_stop_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.FrequencySpan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double start_freq_;
  double stop_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencySegment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.FrequencySegment) */ {
 public:
  inline FrequencySegment() : FrequencySegment(nullptr) {};
  virtual ~FrequencySegment();

  FrequencySegment(const FrequencySegment& from);
  FrequencySegment(FrequencySegment&& from) noexcept
    : FrequencySegment() {
    *this = ::std::move(from);
  }

  inline FrequencySegment& operator=(const FrequencySegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencySegment& operator=(FrequencySegment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencySegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencySegment* internal_default_instance() {
    return reinterpret_cast<const FrequencySegment*>(
               &_FrequencySegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrequencySegment& a, FrequencySegment& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencySegment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencySegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencySegment* New() const final {
    return CreateMaybeMessage<FrequencySegment>(nullptr);
  }

  FrequencySegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencySegment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencySegment& from);
  void MergeFrom(const FrequencySegment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencySegment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.FrequencySegment";
  }
  protected:
  explicit FrequencySegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqSpanFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::scenario::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::scenario::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // int32 points = 2;
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::int32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.FrequencySegment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
  ::PROTOBUF_NAMESPACE_ID::int32 points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyPos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.FrequencyPos) */ {
 public:
  inline FrequencyPos() : FrequencyPos(nullptr) {};
  virtual ~FrequencyPos();

  FrequencyPos(const FrequencyPos& from);
  FrequencyPos(FrequencyPos&& from) noexcept
    : FrequencyPos() {
    *this = ::std::move(from);
  }

  inline FrequencyPos& operator=(const FrequencyPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyPos& operator=(FrequencyPos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyPos* internal_default_instance() {
    return reinterpret_cast<const FrequencyPos*>(
               &_FrequencyPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrequencyPos& a, FrequencyPos& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyPos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyPos* New() const final {
    return CreateMaybeMessage<FrequencyPos>(nullptr);
  }

  FrequencyPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyPos& from);
  void MergeFrom(const FrequencyPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.FrequencyPos";
  }
  protected:
  explicit FrequencyPos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentIdxFieldNumber = 1,
    kSegInternalOffsetFieldNumber = 2,
  };
  // int32 segment_idx = 1;
  void clear_segment_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 segment_idx() const;
  void set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segment_idx() const;
  void _internal_set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seg_internal_offset = 2;
  void clear_seg_internal_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 seg_internal_offset() const;
  void set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seg_internal_offset() const;
  void _internal_set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.FrequencyPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 segment_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 seg_internal_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyBand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.FrequencyBand) */ {
 public:
  inline FrequencyBand() : FrequencyBand(nullptr) {};
  virtual ~FrequencyBand();

  FrequencyBand(const FrequencyBand& from);
  FrequencyBand(FrequencyBand&& from) noexcept
    : FrequencyBand() {
    *this = ::std::move(from);
  }

  inline FrequencyBand& operator=(const FrequencyBand& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyBand& operator=(FrequencyBand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyBand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyBand* internal_default_instance() {
    return reinterpret_cast<const FrequencyBand*>(
               &_FrequencyBand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrequencyBand& a, FrequencyBand& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyBand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyBand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyBand* New() const final {
    return CreateMaybeMessage<FrequencyBand>(nullptr);
  }

  FrequencyBand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyBand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyBand& from);
  void MergeFrom(const FrequencyBand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyBand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.FrequencyBand";
  }
  protected:
  explicit FrequencyBand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.spectrum.FrequencySegment segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::zb::dcts::scenario::spectrum::FrequencySegment* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::FrequencySegment >*
      mutable_segments();
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySegment& _internal_segments(int index) const;
  ::zb::dcts::scenario::spectrum::FrequencySegment* _internal_add_segments();
  public:
  const ::zb::dcts::scenario::spectrum::FrequencySegment& segments(int index) const;
  ::zb::dcts::scenario::spectrum::FrequencySegment* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::FrequencySegment >&
      segments() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.FrequencyBand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::FrequencySegment > segments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class FrequencyRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.FrequencyRange) */ {
 public:
  inline FrequencyRange() : FrequencyRange(nullptr) {};
  virtual ~FrequencyRange();

  FrequencyRange(const FrequencyRange& from);
  FrequencyRange(FrequencyRange&& from) noexcept
    : FrequencyRange() {
    *this = ::std::move(from);
  }

  inline FrequencyRange& operator=(const FrequencyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrequencyRange& operator=(FrequencyRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrequencyRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrequencyRange* internal_default_instance() {
    return reinterpret_cast<const FrequencyRange*>(
               &_FrequencyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FrequencyRange& a, FrequencyRange& b) {
    a.Swap(&b);
  }
  inline void Swap(FrequencyRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrequencyRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrequencyRange* New() const final {
    return CreateMaybeMessage<FrequencyRange>(nullptr);
  }

  FrequencyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrequencyRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrequencyRange& from);
  void MergeFrom(const FrequencyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrequencyRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.FrequencyRange";
  }
  protected:
  explicit FrequencyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPosFieldNumber = 1,
    kStopPosFieldNumber = 2,
  };
  // .zb.dcts.scenario.spectrum.FrequencyPos start_pos = 1;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::zb::dcts::scenario::spectrum::FrequencyPos& start_pos() const;
  ::zb::dcts::scenario::spectrum::FrequencyPos* release_start_pos();
  ::zb::dcts::scenario::spectrum::FrequencyPos* mutable_start_pos();
  void set_allocated_start_pos(::zb::dcts::scenario::spectrum::FrequencyPos* start_pos);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencyPos& _internal_start_pos() const;
  ::zb::dcts::scenario::spectrum::FrequencyPos* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::zb::dcts::scenario::spectrum::FrequencyPos* start_pos);
  ::zb::dcts::scenario::spectrum::FrequencyPos* unsafe_arena_release_start_pos();

  // .zb.dcts.scenario.spectrum.FrequencyPos stop_pos = 2;
  bool has_stop_pos() const;
  private:
  bool _internal_has_stop_pos() const;
  public:
  void clear_stop_pos();
  const ::zb::dcts::scenario::spectrum::FrequencyPos& stop_pos() const;
  ::zb::dcts::scenario::spectrum::FrequencyPos* release_stop_pos();
  ::zb::dcts::scenario::spectrum::FrequencyPos* mutable_stop_pos();
  void set_allocated_stop_pos(::zb::dcts::scenario::spectrum::FrequencyPos* stop_pos);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencyPos& _internal_stop_pos() const;
  ::zb::dcts::scenario::spectrum::FrequencyPos* _internal_mutable_stop_pos();
  public:
  void unsafe_arena_set_allocated_stop_pos(
      ::zb::dcts::scenario::spectrum::FrequencyPos* stop_pos);
  ::zb::dcts::scenario::spectrum::FrequencyPos* unsafe_arena_release_stop_pos();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.FrequencyRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::FrequencyPos* start_pos_;
  ::zb::dcts::scenario::spectrum::FrequencyPos* stop_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class SignalBand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.SignalBand) */ {
 public:
  inline SignalBand() : SignalBand(nullptr) {};
  virtual ~SignalBand();

  SignalBand(const SignalBand& from);
  SignalBand(SignalBand&& from) noexcept
    : SignalBand() {
    *this = ::std::move(from);
  }

  inline SignalBand& operator=(const SignalBand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalBand& operator=(SignalBand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalBand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalBand* internal_default_instance() {
    return reinterpret_cast<const SignalBand*>(
               &_SignalBand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SignalBand& a, SignalBand& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalBand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalBand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalBand* New() const final {
    return CreateMaybeMessage<SignalBand>(nullptr);
  }

  SignalBand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalBand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalBand& from);
  void MergeFrom(const SignalBand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalBand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.SignalBand";
  }
  protected:
  explicit SignalBand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kBandWidthFieldNumber = 2,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double band_width = 2;
  void clear_band_width();
  double band_width() const;
  void set_band_width(double value);
  private:
  double _internal_band_width() const;
  void _internal_set_band_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.SignalBand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double band_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class DDCBank PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.DDCBank) */ {
 public:
  inline DDCBank() : DDCBank(nullptr) {};
  virtual ~DDCBank();

  DDCBank(const DDCBank& from);
  DDCBank(DDCBank&& from) noexcept
    : DDCBank() {
    *this = ::std::move(from);
  }

  inline DDCBank& operator=(const DDCBank& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDCBank& operator=(DDCBank&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDCBank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDCBank* internal_default_instance() {
    return reinterpret_cast<const DDCBank*>(
               &_DDCBank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DDCBank& a, DDCBank& b) {
    a.Swap(&b);
  }
  inline void Swap(DDCBank* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDCBank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDCBank* New() const final {
    return CreateMaybeMessage<DDCBank>(nullptr);
  }

  DDCBank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDCBank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDCBank& from);
  void MergeFrom(const DDCBank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDCBank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.DDCBank";
  }
  protected:
  explicit DDCBank(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kSampleRateFieldNumber = 2,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double sample_rate = 2;
  void clear_sample_rate();
  double sample_rate() const;
  void set_sample_rate(double value);
  private:
  double _internal_sample_rate() const;
  void _internal_set_sample_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.DDCBank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double sample_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class DataHoldRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.DataHoldRequest) */ {
 public:
  inline DataHoldRequest() : DataHoldRequest(nullptr) {};
  virtual ~DataHoldRequest();

  DataHoldRequest(const DataHoldRequest& from);
  DataHoldRequest(DataHoldRequest&& from) noexcept
    : DataHoldRequest() {
    *this = ::std::move(from);
  }

  inline DataHoldRequest& operator=(const DataHoldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataHoldRequest& operator=(DataHoldRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataHoldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataHoldRequest* internal_default_instance() {
    return reinterpret_cast<const DataHoldRequest*>(
               &_DataHoldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DataHoldRequest& a, DataHoldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataHoldRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataHoldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataHoldRequest* New() const final {
    return CreateMaybeMessage<DataHoldRequest>(nullptr);
  }

  DataHoldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataHoldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataHoldRequest& from);
  void MergeFrom(const DataHoldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataHoldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.DataHoldRequest";
  }
  protected:
  explicit DataHoldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kDataHoldTypeFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.spectrum.DataHoldType data_hold_type = 2;
  void clear_data_hold_type();
  ::zb::dcts::scenario::spectrum::DataHoldType data_hold_type() const;
  void set_data_hold_type(::zb::dcts::scenario::spectrum::DataHoldType value);
  private:
  ::zb::dcts::scenario::spectrum::DataHoldType _internal_data_hold_type() const;
  void _internal_set_data_hold_type(::zb::dcts::scenario::spectrum::DataHoldType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.DataHoldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  int data_hold_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class SpectrumLine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.SpectrumLine) */ {
 public:
  inline SpectrumLine() : SpectrumLine(nullptr) {};
  virtual ~SpectrumLine();

  SpectrumLine(const SpectrumLine& from);
  SpectrumLine(SpectrumLine&& from) noexcept
    : SpectrumLine() {
    *this = ::std::move(from);
  }

  inline SpectrumLine& operator=(const SpectrumLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumLine& operator=(SpectrumLine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectrumLine* internal_default_instance() {
    return reinterpret_cast<const SpectrumLine*>(
               &_SpectrumLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpectrumLine& a, SpectrumLine& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumLine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumLine* New() const final {
    return CreateMaybeMessage<SpectrumLine>(nullptr);
  }

  SpectrumLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumLine& from);
  void MergeFrom(const SpectrumLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.SpectrumLine";
  }
  protected:
  explicit SpectrumLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumPointsFieldNumber = 1,
  };
  // repeated float spectrum_points = 1;
  int spectrum_points_size() const;
  private:
  int _internal_spectrum_points_size() const;
  public:
  void clear_spectrum_points();
  private:
  float _internal_spectrum_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spectrum_points() const;
  void _internal_add_spectrum_points(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spectrum_points();
  public:
  float spectrum_points(int index) const;
  void set_spectrum_points(int index, float value);
  void add_spectrum_points(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spectrum_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spectrum_points();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.SpectrumLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spectrum_points_;
  mutable std::atomic<int> _spectrum_points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class SpectrumBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.SpectrumBlock) */ {
 public:
  inline SpectrumBlock() : SpectrumBlock(nullptr) {};
  virtual ~SpectrumBlock();

  SpectrumBlock(const SpectrumBlock& from);
  SpectrumBlock(SpectrumBlock&& from) noexcept
    : SpectrumBlock() {
    *this = ::std::move(from);
  }

  inline SpectrumBlock& operator=(const SpectrumBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumBlock& operator=(SpectrumBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectrumBlock* internal_default_instance() {
    return reinterpret_cast<const SpectrumBlock*>(
               &_SpectrumBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SpectrumBlock& a, SpectrumBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumBlock* New() const final {
    return CreateMaybeMessage<SpectrumBlock>(nullptr);
  }

  SpectrumBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumBlock& from);
  void MergeFrom(const SpectrumBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.SpectrumBlock";
  }
  protected:
  explicit SpectrumBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumLinesFieldNumber = 4,
    kSignalBandFieldNumber = 2,
    kTimeSpanFieldNumber = 3,
  };
  // repeated .zb.dcts.scenario.spectrum.SpectrumLine spectrum_lines = 4;
  int spectrum_lines_size() const;
  private:
  int _internal_spectrum_lines_size() const;
  public:
  void clear_spectrum_lines();
  ::zb::dcts::scenario::spectrum::SpectrumLine* mutable_spectrum_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::SpectrumLine >*
      mutable_spectrum_lines();
  private:
  const ::zb::dcts::scenario::spectrum::SpectrumLine& _internal_spectrum_lines(int index) const;
  ::zb::dcts::scenario::spectrum::SpectrumLine* _internal_add_spectrum_lines();
  public:
  const ::zb::dcts::scenario::spectrum::SpectrumLine& spectrum_lines(int index) const;
  ::zb::dcts::scenario::spectrum::SpectrumLine* add_spectrum_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::SpectrumLine >&
      spectrum_lines() const;

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::scenario::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::scenario::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::scenario::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  ::zb::dcts::scenario::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.SpectrumBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::SpectrumLine > spectrum_lines_;
  ::zb::dcts::scenario::spectrum::SignalBand* signal_band_;
  ::zb::dcts::TimeSpan* time_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class ZoomInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.ZoomInRequest) */ {
 public:
  inline ZoomInRequest() : ZoomInRequest(nullptr) {};
  virtual ~ZoomInRequest();

  ZoomInRequest(const ZoomInRequest& from);
  ZoomInRequest(ZoomInRequest&& from) noexcept
    : ZoomInRequest() {
    *this = ::std::move(from);
  }

  inline ZoomInRequest& operator=(const ZoomInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomInRequest& operator=(ZoomInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZoomInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZoomInRequest* internal_default_instance() {
    return reinterpret_cast<const ZoomInRequest*>(
               &_ZoomInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ZoomInRequest& a, ZoomInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZoomInRequest* New() const final {
    return CreateMaybeMessage<ZoomInRequest>(nullptr);
  }

  ZoomInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZoomInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZoomInRequest& from);
  void MergeFrom(const ZoomInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoomInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.ZoomInRequest";
  }
  protected:
  explicit ZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kZoomInPartFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.spectrum.FrequencySegment zoom_in_part = 2;
  bool has_zoom_in_part() const;
  private:
  bool _internal_has_zoom_in_part() const;
  public:
  void clear_zoom_in_part();
  const ::zb::dcts::scenario::spectrum::FrequencySegment& zoom_in_part() const;
  ::zb::dcts::scenario::spectrum::FrequencySegment* release_zoom_in_part();
  ::zb::dcts::scenario::spectrum::FrequencySegment* mutable_zoom_in_part();
  void set_allocated_zoom_in_part(::zb::dcts::scenario::spectrum::FrequencySegment* zoom_in_part);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySegment& _internal_zoom_in_part() const;
  ::zb::dcts::scenario::spectrum::FrequencySegment* _internal_mutable_zoom_in_part();
  public:
  void unsafe_arena_set_allocated_zoom_in_part(
      ::zb::dcts::scenario::spectrum::FrequencySegment* zoom_in_part);
  ::zb::dcts::scenario::spectrum::FrequencySegment* unsafe_arena_release_zoom_in_part();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.ZoomInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::spectrum::FrequencySegment* zoom_in_part_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class View_TracesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<View_TracesEntry_DoNotUse, 
    std::string, ::zb::dcts::scenario::spectrum::SpectrumLine,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<View_TracesEntry_DoNotUse, 
    std::string, ::zb::dcts::scenario::spectrum::SpectrumLine,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  View_TracesEntry_DoNotUse();
  View_TracesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const View_TracesEntry_DoNotUse& other);
  static const View_TracesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const View_TracesEntry_DoNotUse*>(&_View_TracesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.spectrum.View.TracesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class View PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.View) */ {
 public:
  inline View() : View(nullptr) {};
  virtual ~View();

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(View* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.View";
  }
  protected:
  explicit View(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 2,
    kFreqSpanFieldNumber = 1,
  };
  // map<string, .zb.dcts.scenario.spectrum.SpectrumLine> traces = 2;
  int traces_size() const;
  private:
  int _internal_traces_size() const;
  public:
  void clear_traces();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >&
      _internal_traces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >*
      _internal_mutable_traces();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >&
      traces() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >*
      mutable_traces();

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::scenario::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::scenario::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.View)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      View_TracesEntry_DoNotUse,
      std::string, ::zb::dcts::scenario::spectrum::SpectrumLine,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > traces_;
  ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.Header) */ {
 public:
  inline Header() : Header(nullptr) {};
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 2,
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 5,
    kDevicePositionFieldNumber = 6,
    kSequenceNumberFieldNumber = 3,
    kSweepCountFieldNumber = 4,
  };
  // string record_id = 2;
  void clear_record_id();
  const std::string& record_id() const;
  void set_record_id(const std::string& value);
  void set_record_id(std::string&& value);
  void set_record_id(const char* value);
  void set_record_id(const char* value, size_t size);
  std::string* mutable_record_id();
  std::string* release_record_id();
  void set_allocated_record_id(std::string* record_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_record_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_record_id(
      std::string* record_id);
  private:
  const std::string& _internal_record_id() const;
  void _internal_set_record_id(const std::string& value);
  std::string* _internal_mutable_record_id();
  public:

  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 5;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 6;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_count = 4;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_id_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// -------------------------------------------------------------------

class SegmentHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.spectrum.SegmentHeader) */ {
 public:
  inline SegmentHeader() : SegmentHeader(nullptr) {};
  virtual ~SegmentHeader();

  SegmentHeader(const SegmentHeader& from);
  SegmentHeader(SegmentHeader&& from) noexcept
    : SegmentHeader() {
    *this = ::std::move(from);
  }

  inline SegmentHeader& operator=(const SegmentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentHeader& operator=(SegmentHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentHeader* internal_default_instance() {
    return reinterpret_cast<const SegmentHeader*>(
               &_SegmentHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SegmentHeader& a, SegmentHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentHeader* New() const final {
    return CreateMaybeMessage<SegmentHeader>(nullptr);
  }

  SegmentHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentHeader& from);
  void MergeFrom(const SegmentHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.spectrum.SegmentHeader";
  }
  protected:
  explicit SegmentHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fspectrum_2eproto);
    return ::descriptor_table_scenario_2fspectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeStampFieldNumber = 12,
    kPositionFieldNumber = 15,
    kSequenceNumberFieldNumber = 3,
    kSweepIndexFieldNumber = 4,
    kStartFrequencyFieldNumber = 6,
    kSegmentIndexFieldNumber = 5,
    kNumPointsFieldNumber = 8,
    kFrequencyStepFieldNumber = 7,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.Timestamp time_stamp = 12;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.Position position = 15;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::zb::dcts::Position& position() const;
  ::zb::dcts::Position* release_position();
  ::zb::dcts::Position* mutable_position();
  void set_allocated_position(::zb::dcts::Position* position);
  private:
  const ::zb::dcts::Position& _internal_position() const;
  ::zb::dcts::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::zb::dcts::Position* position);
  ::zb::dcts::Position* unsafe_arena_release_position();

  // uint64 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sweep_index = 4;
  void clear_sweep_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index() const;
  void set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sweep_index() const;
  void _internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double start_frequency = 6;
  void clear_start_frequency();
  double start_frequency() const;
  void set_start_frequency(double value);
  private:
  double _internal_start_frequency() const;
  void _internal_set_start_frequency(double value);
  public:

  // uint32 segment_index = 5;
  void clear_segment_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index() const;
  void set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_index() const;
  void _internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_points = 8;
  void clear_num_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_points() const;
  void set_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_points() const;
  void _internal_set_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double frequency_step = 7;
  void clear_frequency_step();
  double frequency_step() const;
  void set_frequency_step(double value);
  private:
  double _internal_frequency_step() const;
  void _internal_set_frequency_step(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.spectrum.SegmentHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index_;
  double start_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_points_;
  double frequency_step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fspectrum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrequencySpan

// double start_freq = 1;
inline void FrequencySpan::clear_start_freq() {
  start_freq_ = 0;
}
inline double FrequencySpan::_internal_start_freq() const {
  return start_freq_;
}
inline double FrequencySpan::start_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencySpan.start_freq)
  return _internal_start_freq();
}
inline void FrequencySpan::_internal_set_start_freq(double value) {
  
  start_freq_ = value;
}
inline void FrequencySpan::set_start_freq(double value) {
  _internal_set_start_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.FrequencySpan.start_freq)
}

// double stop_freq = 2;
inline void FrequencySpan::clear_stop_freq() {
  stop_freq_ = 0;
}
inline double FrequencySpan::_internal_stop_freq() const {
  return stop_freq_;
}
inline double FrequencySpan::stop_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencySpan.stop_freq)
  return _internal_stop_freq();
}
inline void FrequencySpan::_internal_set_stop_freq(double value) {
  
  stop_freq_ = value;
}
inline void FrequencySpan::set_stop_freq(double value) {
  _internal_set_stop_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.FrequencySpan.stop_freq)
}

// -------------------------------------------------------------------

// FrequencySegment

// .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
inline bool FrequencySegment::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool FrequencySegment::has_freq_span() const {
  return _internal_has_freq_span();
}
inline void FrequencySegment::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& FrequencySegment::_internal_freq_span() const {
  const ::zb::dcts::scenario::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      &::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& FrequencySegment::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencySegment.freq_span)
  return _internal_freq_span();
}
inline void FrequencySegment::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.FrequencySegment.freq_span)
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* FrequencySegment::release_freq_span() {
  auto temp = unsafe_arena_release_freq_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* FrequencySegment::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.FrequencySegment.freq_span)
  
  ::zb::dcts::scenario::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* FrequencySegment::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* FrequencySegment::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.FrequencySegment.freq_span)
  return _internal_mutable_freq_span();
}
inline void FrequencySegment::set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete freq_span_;
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freq_span);
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.FrequencySegment.freq_span)
}

// int32 points = 2;
inline void FrequencySegment::clear_points() {
  points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencySegment::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencySegment::points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencySegment.points)
  return _internal_points();
}
inline void FrequencySegment::_internal_set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  points_ = value;
}
inline void FrequencySegment::set_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.FrequencySegment.points)
}

// -------------------------------------------------------------------

// FrequencyPos

// int32 segment_idx = 1;
inline void FrequencyPos::clear_segment_idx() {
  segment_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::_internal_segment_idx() const {
  return segment_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::segment_idx() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencyPos.segment_idx)
  return _internal_segment_idx();
}
inline void FrequencyPos::_internal_set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segment_idx_ = value;
}
inline void FrequencyPos::set_segment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segment_idx(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.FrequencyPos.segment_idx)
}

// int32 seg_internal_offset = 2;
inline void FrequencyPos::clear_seg_internal_offset() {
  seg_internal_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::_internal_seg_internal_offset() const {
  return seg_internal_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FrequencyPos::seg_internal_offset() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencyPos.seg_internal_offset)
  return _internal_seg_internal_offset();
}
inline void FrequencyPos::_internal_set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seg_internal_offset_ = value;
}
inline void FrequencyPos::set_seg_internal_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seg_internal_offset(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.FrequencyPos.seg_internal_offset)
}

// -------------------------------------------------------------------

// FrequencyBand

// repeated .zb.dcts.scenario.spectrum.FrequencySegment segments = 1;
inline int FrequencyBand::_internal_segments_size() const {
  return segments_.size();
}
inline int FrequencyBand::segments_size() const {
  return _internal_segments_size();
}
inline void FrequencyBand::clear_segments() {
  segments_.Clear();
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* FrequencyBand::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.FrequencyBand.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::FrequencySegment >*
FrequencyBand::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.spectrum.FrequencyBand.segments)
  return &segments_;
}
inline const ::zb::dcts::scenario::spectrum::FrequencySegment& FrequencyBand::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySegment& FrequencyBand::segments(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencyBand.segments)
  return _internal_segments(index);
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* FrequencyBand::_internal_add_segments() {
  return segments_.Add();
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* FrequencyBand::add_segments() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.spectrum.FrequencyBand.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::FrequencySegment >&
FrequencyBand::segments() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.spectrum.FrequencyBand.segments)
  return segments_;
}

// -------------------------------------------------------------------

// FrequencyRange

// .zb.dcts.scenario.spectrum.FrequencyPos start_pos = 1;
inline bool FrequencyRange::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool FrequencyRange::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void FrequencyRange::clear_start_pos() {
  if (GetArena() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::FrequencyPos& FrequencyRange::_internal_start_pos() const {
  const ::zb::dcts::scenario::spectrum::FrequencyPos* p = start_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencyPos*>(
      &::zb::dcts::scenario::spectrum::_FrequencyPos_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencyPos& FrequencyRange::start_pos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencyRange.start_pos)
  return _internal_start_pos();
}
inline void FrequencyRange::unsafe_arena_set_allocated_start_pos(
    ::zb::dcts::scenario::spectrum::FrequencyPos* start_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos_);
  }
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.FrequencyRange.start_pos)
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::release_start_pos() {
  auto temp = unsafe_arena_release_start_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.FrequencyRange.start_pos)
  
  ::zb::dcts::scenario::spectrum::FrequencyPos* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyPos>(GetArena());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.FrequencyRange.start_pos)
  return _internal_mutable_start_pos();
}
inline void FrequencyRange::set_allocated_start_pos(::zb::dcts::scenario::spectrum::FrequencyPos* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.FrequencyRange.start_pos)
}

// .zb.dcts.scenario.spectrum.FrequencyPos stop_pos = 2;
inline bool FrequencyRange::_internal_has_stop_pos() const {
  return this != internal_default_instance() && stop_pos_ != nullptr;
}
inline bool FrequencyRange::has_stop_pos() const {
  return _internal_has_stop_pos();
}
inline void FrequencyRange::clear_stop_pos() {
  if (GetArena() == nullptr && stop_pos_ != nullptr) {
    delete stop_pos_;
  }
  stop_pos_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::FrequencyPos& FrequencyRange::_internal_stop_pos() const {
  const ::zb::dcts::scenario::spectrum::FrequencyPos* p = stop_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencyPos*>(
      &::zb::dcts::scenario::spectrum::_FrequencyPos_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencyPos& FrequencyRange::stop_pos() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.FrequencyRange.stop_pos)
  return _internal_stop_pos();
}
inline void FrequencyRange::unsafe_arena_set_allocated_stop_pos(
    ::zb::dcts::scenario::spectrum::FrequencyPos* stop_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos_);
  }
  stop_pos_ = stop_pos;
  if (stop_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.FrequencyRange.stop_pos)
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::release_stop_pos() {
  auto temp = unsafe_arena_release_stop_pos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::unsafe_arena_release_stop_pos() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.FrequencyRange.stop_pos)
  
  ::zb::dcts::scenario::spectrum::FrequencyPos* temp = stop_pos_;
  stop_pos_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::_internal_mutable_stop_pos() {
  
  if (stop_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyPos>(GetArena());
    stop_pos_ = p;
  }
  return stop_pos_;
}
inline ::zb::dcts::scenario::spectrum::FrequencyPos* FrequencyRange::mutable_stop_pos() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.FrequencyRange.stop_pos)
  return _internal_mutable_stop_pos();
}
inline void FrequencyRange::set_allocated_stop_pos(::zb::dcts::scenario::spectrum::FrequencyPos* stop_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_pos_;
  }
  if (stop_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_pos);
    if (message_arena != submessage_arena) {
      stop_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_pos, submessage_arena);
    }
    
  } else {
    
  }
  stop_pos_ = stop_pos;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.FrequencyRange.stop_pos)
}

// -------------------------------------------------------------------

// SignalBand

// double center_frequency = 1;
inline void SignalBand::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double SignalBand::_internal_center_frequency() const {
  return center_frequency_;
}
inline double SignalBand::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SignalBand.center_frequency)
  return _internal_center_frequency();
}
inline void SignalBand::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void SignalBand::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SignalBand.center_frequency)
}

// double band_width = 2;
inline void SignalBand::clear_band_width() {
  band_width_ = 0;
}
inline double SignalBand::_internal_band_width() const {
  return band_width_;
}
inline double SignalBand::band_width() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SignalBand.band_width)
  return _internal_band_width();
}
inline void SignalBand::_internal_set_band_width(double value) {
  
  band_width_ = value;
}
inline void SignalBand::set_band_width(double value) {
  _internal_set_band_width(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SignalBand.band_width)
}

// -------------------------------------------------------------------

// DDCBank

// double center_frequency = 1;
inline void DDCBank::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double DDCBank::_internal_center_frequency() const {
  return center_frequency_;
}
inline double DDCBank::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.DDCBank.center_frequency)
  return _internal_center_frequency();
}
inline void DDCBank::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void DDCBank::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.DDCBank.center_frequency)
}

// double sample_rate = 2;
inline void DDCBank::clear_sample_rate() {
  sample_rate_ = 0;
}
inline double DDCBank::_internal_sample_rate() const {
  return sample_rate_;
}
inline double DDCBank::sample_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.DDCBank.sample_rate)
  return _internal_sample_rate();
}
inline void DDCBank::_internal_set_sample_rate(double value) {
  
  sample_rate_ = value;
}
inline void DDCBank::set_sample_rate(double value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.DDCBank.sample_rate)
}

// -------------------------------------------------------------------

// DataHoldRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool DataHoldRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool DataHoldRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& DataHoldRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& DataHoldRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.DataHoldRequest.responser)
  return _internal_responser();
}
inline void DataHoldRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.DataHoldRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* DataHoldRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DataHoldRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.DataHoldRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DataHoldRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DataHoldRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.DataHoldRequest.responser)
  return _internal_mutable_responser();
}
inline void DataHoldRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.DataHoldRequest.responser)
}

// .zb.dcts.scenario.spectrum.DataHoldType data_hold_type = 2;
inline void DataHoldRequest::clear_data_hold_type() {
  data_hold_type_ = 0;
}
inline ::zb::dcts::scenario::spectrum::DataHoldType DataHoldRequest::_internal_data_hold_type() const {
  return static_cast< ::zb::dcts::scenario::spectrum::DataHoldType >(data_hold_type_);
}
inline ::zb::dcts::scenario::spectrum::DataHoldType DataHoldRequest::data_hold_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.DataHoldRequest.data_hold_type)
  return _internal_data_hold_type();
}
inline void DataHoldRequest::_internal_set_data_hold_type(::zb::dcts::scenario::spectrum::DataHoldType value) {
  
  data_hold_type_ = value;
}
inline void DataHoldRequest::set_data_hold_type(::zb::dcts::scenario::spectrum::DataHoldType value) {
  _internal_set_data_hold_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.DataHoldRequest.data_hold_type)
}

// -------------------------------------------------------------------

// SpectrumLine

// repeated float spectrum_points = 1;
inline int SpectrumLine::_internal_spectrum_points_size() const {
  return spectrum_points_.size();
}
inline int SpectrumLine::spectrum_points_size() const {
  return _internal_spectrum_points_size();
}
inline void SpectrumLine::clear_spectrum_points() {
  spectrum_points_.Clear();
}
inline float SpectrumLine::_internal_spectrum_points(int index) const {
  return spectrum_points_.Get(index);
}
inline float SpectrumLine::spectrum_points(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SpectrumLine.spectrum_points)
  return _internal_spectrum_points(index);
}
inline void SpectrumLine::set_spectrum_points(int index, float value) {
  spectrum_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SpectrumLine.spectrum_points)
}
inline void SpectrumLine::_internal_add_spectrum_points(float value) {
  spectrum_points_.Add(value);
}
inline void SpectrumLine::add_spectrum_points(float value) {
  _internal_add_spectrum_points(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.spectrum.SpectrumLine.spectrum_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumLine::_internal_spectrum_points() const {
  return spectrum_points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumLine::spectrum_points() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.spectrum.SpectrumLine.spectrum_points)
  return _internal_spectrum_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumLine::_internal_mutable_spectrum_points() {
  return &spectrum_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumLine::mutable_spectrum_points() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.spectrum.SpectrumLine.spectrum_points)
  return _internal_mutable_spectrum_points();
}

// -------------------------------------------------------------------

// SpectrumBlock

// .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
inline bool SpectrumBlock::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool SpectrumBlock::has_signal_band() const {
  return _internal_has_signal_band();
}
inline void SpectrumBlock::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& SpectrumBlock::_internal_signal_band() const {
  const ::zb::dcts::scenario::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SignalBand*>(
      &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& SpectrumBlock::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SpectrumBlock.signal_band)
  return _internal_signal_band();
}
inline void SpectrumBlock::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.SpectrumBlock.signal_band)
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SpectrumBlock::release_signal_band() {
  auto temp = unsafe_arena_release_signal_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SpectrumBlock::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.SpectrumBlock.signal_band)
  
  ::zb::dcts::scenario::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SpectrumBlock::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SpectrumBlock::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SpectrumBlock.signal_band)
  return _internal_mutable_signal_band();
}
inline void SpectrumBlock::set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signal_band_;
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signal_band);
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.SpectrumBlock.signal_band)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool SpectrumBlock::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool SpectrumBlock::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& SpectrumBlock::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& SpectrumBlock::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SpectrumBlock.time_span)
  return _internal_time_span();
}
inline void SpectrumBlock::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.SpectrumBlock.time_span)
}
inline ::zb::dcts::TimeSpan* SpectrumBlock::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* SpectrumBlock::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.SpectrumBlock.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* SpectrumBlock::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* SpectrumBlock::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SpectrumBlock.time_span)
  return _internal_mutable_time_span();
}
inline void SpectrumBlock::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.SpectrumBlock.time_span)
}

// repeated .zb.dcts.scenario.spectrum.SpectrumLine spectrum_lines = 4;
inline int SpectrumBlock::_internal_spectrum_lines_size() const {
  return spectrum_lines_.size();
}
inline int SpectrumBlock::spectrum_lines_size() const {
  return _internal_spectrum_lines_size();
}
inline void SpectrumBlock::clear_spectrum_lines() {
  spectrum_lines_.Clear();
}
inline ::zb::dcts::scenario::spectrum::SpectrumLine* SpectrumBlock::mutable_spectrum_lines(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SpectrumBlock.spectrum_lines)
  return spectrum_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::SpectrumLine >*
SpectrumBlock::mutable_spectrum_lines() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.spectrum.SpectrumBlock.spectrum_lines)
  return &spectrum_lines_;
}
inline const ::zb::dcts::scenario::spectrum::SpectrumLine& SpectrumBlock::_internal_spectrum_lines(int index) const {
  return spectrum_lines_.Get(index);
}
inline const ::zb::dcts::scenario::spectrum::SpectrumLine& SpectrumBlock::spectrum_lines(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SpectrumBlock.spectrum_lines)
  return _internal_spectrum_lines(index);
}
inline ::zb::dcts::scenario::spectrum::SpectrumLine* SpectrumBlock::_internal_add_spectrum_lines() {
  return spectrum_lines_.Add();
}
inline ::zb::dcts::scenario::spectrum::SpectrumLine* SpectrumBlock::add_spectrum_lines() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.spectrum.SpectrumBlock.spectrum_lines)
  return _internal_add_spectrum_lines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::SpectrumLine >&
SpectrumBlock::spectrum_lines() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.spectrum.SpectrumBlock.spectrum_lines)
  return spectrum_lines_;
}

// -------------------------------------------------------------------

// ZoomInRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ZoomInRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ZoomInRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ZoomInRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ZoomInRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.ZoomInRequest.responser)
  return _internal_responser();
}
inline void ZoomInRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.ZoomInRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ZoomInRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ZoomInRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.ZoomInRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ZoomInRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ZoomInRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.ZoomInRequest.responser)
  return _internal_mutable_responser();
}
inline void ZoomInRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.ZoomInRequest.responser)
}

// .zb.dcts.scenario.spectrum.FrequencySegment zoom_in_part = 2;
inline bool ZoomInRequest::_internal_has_zoom_in_part() const {
  return this != internal_default_instance() && zoom_in_part_ != nullptr;
}
inline bool ZoomInRequest::has_zoom_in_part() const {
  return _internal_has_zoom_in_part();
}
inline void ZoomInRequest::clear_zoom_in_part() {
  if (GetArena() == nullptr && zoom_in_part_ != nullptr) {
    delete zoom_in_part_;
  }
  zoom_in_part_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::FrequencySegment& ZoomInRequest::_internal_zoom_in_part() const {
  const ::zb::dcts::scenario::spectrum::FrequencySegment* p = zoom_in_part_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencySegment*>(
      &::zb::dcts::scenario::spectrum::_FrequencySegment_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySegment& ZoomInRequest::zoom_in_part() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.ZoomInRequest.zoom_in_part)
  return _internal_zoom_in_part();
}
inline void ZoomInRequest::unsafe_arena_set_allocated_zoom_in_part(
    ::zb::dcts::scenario::spectrum::FrequencySegment* zoom_in_part) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zoom_in_part_);
  }
  zoom_in_part_ = zoom_in_part;
  if (zoom_in_part) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.ZoomInRequest.zoom_in_part)
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* ZoomInRequest::release_zoom_in_part() {
  auto temp = unsafe_arena_release_zoom_in_part();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* ZoomInRequest::unsafe_arena_release_zoom_in_part() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.ZoomInRequest.zoom_in_part)
  
  ::zb::dcts::scenario::spectrum::FrequencySegment* temp = zoom_in_part_;
  zoom_in_part_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* ZoomInRequest::_internal_mutable_zoom_in_part() {
  
  if (zoom_in_part_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySegment>(GetArena());
    zoom_in_part_ = p;
  }
  return zoom_in_part_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySegment* ZoomInRequest::mutable_zoom_in_part() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.ZoomInRequest.zoom_in_part)
  return _internal_mutable_zoom_in_part();
}
inline void ZoomInRequest::set_allocated_zoom_in_part(::zb::dcts::scenario::spectrum::FrequencySegment* zoom_in_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zoom_in_part_;
  }
  if (zoom_in_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zoom_in_part);
    if (message_arena != submessage_arena) {
      zoom_in_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zoom_in_part, submessage_arena);
    }
    
  } else {
    
  }
  zoom_in_part_ = zoom_in_part;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.ZoomInRequest.zoom_in_part)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// View

// .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
inline bool View::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool View::has_freq_span() const {
  return _internal_has_freq_span();
}
inline void View::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& View::_internal_freq_span() const {
  const ::zb::dcts::scenario::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      &::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& View::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.View.freq_span)
  return _internal_freq_span();
}
inline void View::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.View.freq_span)
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* View::release_freq_span() {
  auto temp = unsafe_arena_release_freq_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* View::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.View.freq_span)
  
  ::zb::dcts::scenario::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* View::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* View::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.View.freq_span)
  return _internal_mutable_freq_span();
}
inline void View::set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete freq_span_;
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freq_span);
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.View.freq_span)
}

// map<string, .zb.dcts.scenario.spectrum.SpectrumLine> traces = 2;
inline int View::_internal_traces_size() const {
  return traces_.size();
}
inline int View::traces_size() const {
  return _internal_traces_size();
}
inline void View::clear_traces() {
  traces_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >&
View::_internal_traces() const {
  return traces_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >&
View::traces() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.spectrum.View.traces)
  return _internal_traces();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >*
View::_internal_mutable_traces() {
  return traces_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::scenario::spectrum::SpectrumLine >*
View::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.spectrum.View.traces)
  return _internal_mutable_traces();
}

// -------------------------------------------------------------------

// Header

// .zb.dcts.source.SourceId result_from = 1;
inline bool Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& Header::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.result_from)
  return _internal_result_from();
}
inline void Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.Header.result_from)
}
inline ::zb::dcts::source::SourceId* Header::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.Header.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.Header.result_from)
  return _internal_mutable_result_from();
}
inline void Header::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.Header.result_from)
}

// string record_id = 2;
inline void Header::clear_record_id() {
  record_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::record_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.record_id)
  return _internal_record_id();
}
inline void Header::set_record_id(const std::string& value) {
  _internal_set_record_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.Header.record_id)
}
inline std::string* Header::mutable_record_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.Header.record_id)
  return _internal_mutable_record_id();
}
inline const std::string& Header::_internal_record_id() const {
  return record_id_.Get();
}
inline void Header::_internal_set_record_id(const std::string& value) {
  
  record_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_record_id(std::string&& value) {
  
  record_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.spectrum.Header.record_id)
}
inline void Header::set_record_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.spectrum.Header.record_id)
}
inline void Header::set_record_id(const char* value,
    size_t size) {
  
  record_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.spectrum.Header.record_id)
}
inline std::string* Header::_internal_mutable_record_id() {
  
  return record_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_record_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.Header.record_id)
  return record_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_record_id(std::string* record_id) {
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.Header.record_id)
}
inline std::string* Header::unsafe_arena_release_record_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.spectrum.Header.record_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return record_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_record_id(
    std::string* record_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (record_id != nullptr) {
    
  } else {
    
  }
  record_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      record_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.Header.record_id)
}

// uint32 sequence_number = 3;
inline void Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.sequence_number)
  return _internal_sequence_number();
}
inline void Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.Header.sequence_number)
}

// uint32 sweep_count = 4;
inline void Header::clear_sweep_count() {
  sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.sweep_count)
  return _internal_sweep_count();
}
inline void Header::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_count_ = value;
}
inline void Header::set_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.Header.sweep_count)
}

// .zb.dcts.TimeSpan time_span = 5;
inline bool Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.time_span)
  return _internal_time_span();
}
inline void Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.Header.time_span)
}
inline ::zb::dcts::TimeSpan* Header::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.Header.time_span)
  return _internal_mutable_time_span();
}
inline void Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.Header.time_span)
}

// .zb.dcts.Position device_position = 6;
inline bool Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.Header.device_position)
  return _internal_device_position();
}
inline void Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.Header.device_position)
}
inline ::zb::dcts::Position* Header::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.Header.device_position)
  return _internal_mutable_device_position();
}
inline void Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.Header.device_position)
}

// -------------------------------------------------------------------

// SegmentHeader

// .zb.dcts.source.SourceId result_from = 1;
inline bool SegmentHeader::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool SegmentHeader::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& SegmentHeader::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SegmentHeader::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.result_from)
  return _internal_result_from();
}
inline void SegmentHeader::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.result_from)
}
inline ::zb::dcts::source::SourceId* SegmentHeader::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SegmentHeader::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.SegmentHeader.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SegmentHeader::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* SegmentHeader::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SegmentHeader.result_from)
  return _internal_mutable_result_from();
}
inline void SegmentHeader::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.result_from)
}

// uint64 sequence_number = 3;
inline void SegmentHeader::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentHeader::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentHeader::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.sequence_number)
  return _internal_sequence_number();
}
inline void SegmentHeader::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_number_ = value;
}
inline void SegmentHeader::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.sequence_number)
}

// uint64 sweep_index = 4;
inline void SegmentHeader::clear_sweep_index() {
  sweep_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentHeader::_internal_sweep_index() const {
  return sweep_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SegmentHeader::sweep_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.sweep_index)
  return _internal_sweep_index();
}
inline void SegmentHeader::_internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sweep_index_ = value;
}
inline void SegmentHeader::set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sweep_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.sweep_index)
}

// uint32 segment_index = 5;
inline void SegmentHeader::clear_segment_index() {
  segment_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentHeader::_internal_segment_index() const {
  return segment_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentHeader::segment_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.segment_index)
  return _internal_segment_index();
}
inline void SegmentHeader::_internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segment_index_ = value;
}
inline void SegmentHeader::set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.segment_index)
}

// double start_frequency = 6;
inline void SegmentHeader::clear_start_frequency() {
  start_frequency_ = 0;
}
inline double SegmentHeader::_internal_start_frequency() const {
  return start_frequency_;
}
inline double SegmentHeader::start_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.start_frequency)
  return _internal_start_frequency();
}
inline void SegmentHeader::_internal_set_start_frequency(double value) {
  
  start_frequency_ = value;
}
inline void SegmentHeader::set_start_frequency(double value) {
  _internal_set_start_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.start_frequency)
}

// double frequency_step = 7;
inline void SegmentHeader::clear_frequency_step() {
  frequency_step_ = 0;
}
inline double SegmentHeader::_internal_frequency_step() const {
  return frequency_step_;
}
inline double SegmentHeader::frequency_step() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.frequency_step)
  return _internal_frequency_step();
}
inline void SegmentHeader::_internal_set_frequency_step(double value) {
  
  frequency_step_ = value;
}
inline void SegmentHeader::set_frequency_step(double value) {
  _internal_set_frequency_step(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.frequency_step)
}

// uint32 num_points = 8;
inline void SegmentHeader::clear_num_points() {
  num_points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentHeader::_internal_num_points() const {
  return num_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SegmentHeader::num_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.num_points)
  return _internal_num_points();
}
inline void SegmentHeader::_internal_set_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_points_ = value;
}
inline void SegmentHeader::set_num_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.spectrum.SegmentHeader.num_points)
}

// .zb.dcts.Timestamp time_stamp = 12;
inline bool SegmentHeader::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool SegmentHeader::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& SegmentHeader::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& SegmentHeader::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.time_stamp)
  return _internal_time_stamp();
}
inline void SegmentHeader::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.time_stamp)
}
inline ::zb::dcts::Timestamp* SegmentHeader::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* SegmentHeader::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.SegmentHeader.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* SegmentHeader::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* SegmentHeader::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SegmentHeader.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void SegmentHeader::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.time_stamp)
}

// .zb.dcts.Position position = 15;
inline bool SegmentHeader::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SegmentHeader::has_position() const {
  return _internal_has_position();
}
inline const ::zb::dcts::Position& SegmentHeader::_internal_position() const {
  const ::zb::dcts::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& SegmentHeader::position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.spectrum.SegmentHeader.position)
  return _internal_position();
}
inline void SegmentHeader::unsafe_arena_set_allocated_position(
    ::zb::dcts::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.position)
}
inline ::zb::dcts::Position* SegmentHeader::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* SegmentHeader::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.spectrum.SegmentHeader.position)
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* SegmentHeader::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::zb::dcts::Position* SegmentHeader::mutable_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.spectrum.SegmentHeader.position)
  return _internal_mutable_position();
}
inline void SegmentHeader::set_allocated_position(::zb::dcts::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.spectrum.SegmentHeader.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spectrum
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::spectrum::DataHoldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::spectrum::DataHoldType>() {
  return ::zb::dcts::scenario::spectrum::DataHoldType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fspectrum_2eproto
