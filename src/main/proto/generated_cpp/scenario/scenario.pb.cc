// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/scenario.proto

#include "scenario/scenario.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Topic_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScenarioInfo_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TaskSummary_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SourceSetInfo_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
class ScenarioIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioId> _instance;
} _ScenarioId_default_instance_;
class TaskIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskId> _instance;
} _TaskId_default_instance_;
class ScenarioTaskIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioTaskId> _instance;
} _ScenarioTaskId_default_instance_;
class TaskSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskSummary> _instance;
} _TaskSummary_default_instance_;
class ScenarioInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioInfo> _instance;
} _ScenarioInfo_default_instance_;
class ScenarioReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioReply> _instance;
} _ScenarioReply_default_instance_;
class ScenariosInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenariosInfo> _instance;
} _ScenariosInfo_default_instance_;
class SubscribeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRequest> _instance;
} _SubscribeRequest_default_instance_;
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ScenarioId_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_ScenarioId_default_instance_;
    new (ptr) ::zb::dcts::scenario::ScenarioId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::ScenarioId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScenarioId_scenario_2fscenario_2eproto}, {}};

static void InitDefaultsscc_info_ScenarioInfo_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_ScenarioInfo_default_instance_;
    new (ptr) ::zb::dcts::scenario::ScenarioInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::ScenarioInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ScenarioInfo_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ScenarioInfo_scenario_2fscenario_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_TaskSummary_scenario_2fscenario_2eproto.base,
      &scc_info_SourceSetInfo_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioReply_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_ScenarioReply_default_instance_;
    new (ptr) ::zb::dcts::scenario::ScenarioReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::ScenarioReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioReply_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScenarioReply_scenario_2fscenario_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioTaskId_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_ScenarioTaskId_default_instance_;
    new (ptr) ::zb::dcts::scenario::ScenarioTaskId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::ScenarioTaskId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScenarioTaskId_scenario_2fscenario_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_TaskId_scenario_2fscenario_2eproto.base,}};

static void InitDefaultsscc_info_ScenariosInfo_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_ScenariosInfo_default_instance_;
    new (ptr) ::zb::dcts::scenario::ScenariosInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::ScenariosInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenariosInfo_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScenariosInfo_scenario_2fscenario_2eproto}, {
      &scc_info_ScenarioInfo_scenario_2fscenario_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeRequest_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_SubscribeRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::SubscribeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::SubscribeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeRequest_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SubscribeRequest_scenario_2fscenario_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_Topic_dcts_2eproto.base,}};

static void InitDefaultsscc_info_TaskId_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_TaskId_default_instance_;
    new (ptr) ::zb::dcts::scenario::TaskId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::TaskId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskId_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TaskId_scenario_2fscenario_2eproto}, {}};

static void InitDefaultsscc_info_TaskSummary_scenario_2fscenario_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::_TaskSummary_default_instance_;
    new (ptr) ::zb::dcts::scenario::TaskSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::TaskSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TaskSummary_scenario_2fscenario_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TaskSummary_scenario_2fscenario_2eproto}, {
      &scc_info_TaskId_scenario_2fscenario_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Topic_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fscenario_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fscenario_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fscenario_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fscenario_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskId, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioTaskId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioTaskId, scenario_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioTaskId, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, start_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::TaskSummary, topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioInfo, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioInfo, tasks_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioInfo, using_sources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioReply, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenarioReply, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenariosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::ScenariosInfo, scenario_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::SubscribeRequest, scenario_task_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::SubscribeRequest, topic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::ScenarioId)},
  { 6, -1, sizeof(::zb::dcts::scenario::TaskId)},
  { 12, -1, sizeof(::zb::dcts::scenario::ScenarioTaskId)},
  { 19, -1, sizeof(::zb::dcts::scenario::TaskSummary)},
  { 29, -1, sizeof(::zb::dcts::scenario::ScenarioInfo)},
  { 37, -1, sizeof(::zb::dcts::scenario::ScenarioReply)},
  { 44, -1, sizeof(::zb::dcts::scenario::ScenariosInfo)},
  { 50, -1, sizeof(::zb::dcts::scenario::SubscribeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_ScenarioId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_TaskId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_ScenarioTaskId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_TaskSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_ScenarioInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_ScenarioReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_ScenariosInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::_SubscribeRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fscenario_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027scenario/scenario.proto\022\020zb.dcts.scena"
  "rio\032\ndcts.proto\032\023source/source.proto\032\033go"
  "ogle/protobuf/empty.proto\032\031google/protob"
  "uf/any.proto\"\033\n\nScenarioId\022\r\n\005value\030\001 \001("
  "\r\"\027\n\006TaskId\022\r\n\005value\030\001 \001(\r\"n\n\016ScenarioTa"
  "skId\0221\n\013scenario_id\030\001 \001(\0132\034.zb.dcts.scen"
  "ario.ScenarioId\022)\n\007task_id\030\002 \001(\0132\030.zb.dc"
  "ts.scenario.TaskId\"\323\001\n\013TaskSummary\022$\n\002id"
  "\030\001 \001(\0132\030.zb.dcts.scenario.TaskId\022(\n\004type"
  "\030\002 \001(\0162\032.zb.dcts.scenario.TaskType\022,\n\006st"
  "atus\030\004 \001(\0162\034.zb.dcts.scenario.TaskStatus"
  "\022&\n\nstart_time\030\005 \001(\0132\022.zb.dcts.Timestamp"
  "\022\036\n\006topics\030\006 \003(\0132\016.zb.dcts.Topic\"\234\001\n\014Sce"
  "narioInfo\022(\n\002id\030\001 \001(\0132\034.zb.dcts.scenario"
  ".ScenarioId\022,\n\005tasks\030\006 \003(\0132\035.zb.dcts.sce"
  "nario.TaskSummary\0224\n\rusing_sources\030\007 \001(\013"
  "2\035.zb.dcts.source.SourceSetInfo\"l\n\rScena"
  "rioReply\0223\n\tresponser\030\001 \001(\0132 .zb.dcts.sc"
  "enario.ScenarioTaskId\022&\n\nerror_code\030\002 \001("
  "\0162\022.zb.dcts.ErrorType\"F\n\rScenariosInfo\0225"
  "\n\rscenario_info\030\001 \003(\0132\036.zb.dcts.scenario"
  ".ScenarioInfo\"j\n\020SubscribeRequest\0227\n\rsce"
  "nario_task\030\001 \001(\0132 .zb.dcts.scenario.Scen"
  "arioTaskId\022\035\n\005topic\030\002 \001(\0132\016.zb.dcts.Topi"
  "c*\357\004\n\010TaskType\022\r\n\tSELF_TEST\020\000\022\010\n\004CAL1\020\001\022"
  "\010\n\004CAL2\020\002\022\013\n\007EXAMPLE\020\003\022\t\n\005PSCAN\020\020\022\013\n\007IF_"
  "SCAN\020\021\022\022\n\016PULSE_ANALYSIS\020\022\022\024\n\020PULSE_ANAL"
  "YSIS_2\020\023\022\020\n\014OSCILLOSCOPE\020\024\022\032\n\026VECTOR_SIG"
  "NAL_ANALYSIS\020\025\022\017\n\013IQ_RECORDER\020\026\022\024\n\020SIGNA"
  "L_GENERATOR\020\027\022\021\n\rPOSITION_TDOA\020 \022\031\n\025DIRE"
  "CTION_FINDING_AOA\020!\022&\n\"DIRECTION_FINDING"
  "_SPATIAL_SPECTRUM\020\"\022\025\n\021DEMODULATE_ANALOG"
  "\0200\022\025\n\021CLASSIFY_MODULATE\0208\022\023\n\017CLASSIFY_EN"
  "CODE\020:\022\025\n\021CLASSIFY_COMM_SYS\020<\022\020\n\014DECODE_"
  "ADS_B\020F\022\020\n\014DECODE_ACARS\020G\022\016\n\nDECODE_AIS\020"
  "H\022\016\n\nIQ_ACQUIRE\020I\022\017\n\013DEMO_DETECT\020P\022\020\n\014RE"
  "PLAY_PSCAN\020Q\022\027\n\023REPLAY_DECODE_ADS_B\020Z\022\027\n"
  "\023REPLAY_DECODE_ACARS\020[\022\025\n\021REPLAY_DECODE_"
  "AIS\020\\\022\r\n\tREPLAY_IQ\020]\022\017\n\013REPLAY_TDOA\020^\022\034\n"
  "\030REPLAY_DEMODULATE_ANALOG\020_*M\n\nTaskStatu"
  "s\022\013\n\007T_READY\020\000\022\t\n\005T_RUN\020\001\022\013\n\007T_ABORT\020\002\022\014"
  "\n\010T_FINISH\020\003\022\014\n\010T_PAUSED\020\0042\376\004\n\016GeneralSe"
  "rvice\022M\n\020ListAllScenarios\022\026.google.proto"
  "buf.Empty\032\037.zb.dcts.scenario.ScenariosIn"
  "fo\"\000\022I\n\016ListAllSources\022\026.google.protobuf"
  ".Empty\032\035.zb.dcts.source.SourceSetInfo\"\000\022"
  "Q\n\017GetScenarioInfo\022\034.zb.dcts.scenario.Sc"
  "enarioId\032\036.zb.dcts.scenario.ScenarioInfo"
  "\"\000\022B\n\010AbortOne\022\034.zb.dcts.scenario.Scenar"
  "ioId\032\026.google.protobuf.Empty\"\000\022<\n\010AbortA"
  "ll\022\026.google.protobuf.Empty\032\026.google.prot"
  "obuf.Empty\"\000\022P\n\tPauseTask\022 .zb.dcts.scen"
  "ario.ScenarioTaskId\032\037.zb.dcts.scenario.S"
  "cenarioReply\"\000\022Q\n\nResumeTask\022 .zb.dcts.s"
  "cenario.ScenarioTaskId\032\037.zb.dcts.scenari"
  "o.ScenarioReply\"\000\022X\n\030SubscribeScenarioMe"
  "ssage\022\".zb.dcts.scenario.SubscribeReques"
  "t\032\024.google.protobuf.Any\"\0000\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fscenario_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fscenario_2eproto_sccs[8] = {
  &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
  &scc_info_ScenarioInfo_scenario_2fscenario_2eproto.base,
  &scc_info_ScenarioReply_scenario_2fscenario_2eproto.base,
  &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
  &scc_info_ScenariosInfo_scenario_2fscenario_2eproto.base,
  &scc_info_SubscribeRequest_scenario_2fscenario_2eproto.base,
  &scc_info_TaskId_scenario_2fscenario_2eproto.base,
  &scc_info_TaskSummary_scenario_2fscenario_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fscenario_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fscenario_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fscenario_2eproto, "scenario/scenario.proto", 2315,
  &descriptor_table_scenario_2fscenario_2eproto_once, descriptor_table_scenario_2fscenario_2eproto_sccs, descriptor_table_scenario_2fscenario_2eproto_deps, 8, 4,
  schemas, file_default_instances, TableStruct_scenario_2fscenario_2eproto::offsets,
  file_level_metadata_scenario_2fscenario_2eproto, 8, file_level_enum_descriptors_scenario_2fscenario_2eproto, file_level_service_descriptors_scenario_2fscenario_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fscenario_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fscenario_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fscenario_2eproto);
  return file_level_enum_descriptors_scenario_2fscenario_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 32:
    case 33:
    case 34:
    case 48:
    case 56:
    case 58:
    case 60:
    case 70:
    case 71:
    case 72:
    case 73:
    case 80:
    case 81:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fscenario_2eproto);
  return file_level_enum_descriptors_scenario_2fscenario_2eproto[1];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ScenarioId::InitAsDefaultInstance() {
}
class ScenarioId::_Internal {
 public:
};

ScenarioId::ScenarioId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.ScenarioId)
}
ScenarioId::ScenarioId(const ScenarioId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.ScenarioId)
}

void ScenarioId::SharedCtor() {
  value_ = 0u;
}

ScenarioId::~ScenarioId() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.ScenarioId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScenarioId::ArenaDtor(void* object) {
  ScenarioId* _this = reinterpret_cast< ScenarioId* >(object);
  (void)_this;
}
void ScenarioId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioId& ScenarioId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioId_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.ScenarioId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.ScenarioId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.ScenarioId)
  return target;
}

size_t ScenarioId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.ScenarioId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.ScenarioId)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.ScenarioId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.ScenarioId)
    MergeFrom(*source);
  }
}

void ScenarioId::MergeFrom(const ScenarioId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.ScenarioId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ScenarioId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.ScenarioId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioId::CopyFrom(const ScenarioId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.ScenarioId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioId::IsInitialized() const {
  return true;
}

void ScenarioId::InternalSwap(ScenarioId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskId::InitAsDefaultInstance() {
}
class TaskId::_Internal {
 public:
};

TaskId::TaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.TaskId)
}
TaskId::TaskId(const TaskId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.TaskId)
}

void TaskId::SharedCtor() {
  value_ = 0u;
}

TaskId::~TaskId() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.TaskId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskId::ArenaDtor(void* object) {
  TaskId* _this = reinterpret_cast< TaskId* >(object);
  (void)_this;
}
void TaskId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskId& TaskId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskId_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void TaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.TaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.TaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.TaskId)
  return target;
}

size_t TaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.TaskId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.TaskId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.TaskId)
    MergeFrom(*source);
  }
}

void TaskId::MergeFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.TaskId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void TaskId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskId::CopyFrom(const TaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.TaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskId::IsInitialized() const {
  return true;
}

void TaskId::InternalSwap(TaskId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioTaskId::InitAsDefaultInstance() {
  ::zb::dcts::scenario::_ScenarioTaskId_default_instance_._instance.get_mutable()->scenario_id_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::_ScenarioTaskId_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::zb::dcts::scenario::TaskId*>(
      ::zb::dcts::scenario::TaskId::internal_default_instance());
}
class ScenarioTaskId::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario_id(const ScenarioTaskId* msg);
  static const ::zb::dcts::scenario::TaskId& task_id(const ScenarioTaskId* msg);
};

const ::zb::dcts::scenario::ScenarioId&
ScenarioTaskId::_Internal::scenario_id(const ScenarioTaskId* msg) {
  return *msg->scenario_id_;
}
const ::zb::dcts::scenario::TaskId&
ScenarioTaskId::_Internal::task_id(const ScenarioTaskId* msg) {
  return *msg->task_id_;
}
ScenarioTaskId::ScenarioTaskId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.ScenarioTaskId)
}
ScenarioTaskId::ScenarioTaskId(const ScenarioTaskId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario_id()) {
    scenario_id_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_id_);
  } else {
    scenario_id_ = nullptr;
  }
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::scenario::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.ScenarioTaskId)
}

void ScenarioTaskId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base);
  ::memset(&scenario_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&scenario_id_)) + sizeof(task_id_));
}

ScenarioTaskId::~ScenarioTaskId() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.ScenarioTaskId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioTaskId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_id_;
  if (this != internal_default_instance()) delete task_id_;
}

void ScenarioTaskId::ArenaDtor(void* object) {
  ScenarioTaskId* _this = reinterpret_cast< ScenarioTaskId* >(object);
  (void)_this;
}
void ScenarioTaskId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioTaskId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioTaskId& ScenarioTaskId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioTaskId::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.ScenarioTaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_id_ != nullptr) {
    delete scenario_id_;
  }
  scenario_id_ = nullptr;
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioTaskId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.TaskId task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioTaskId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.ScenarioTaskId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario_id = 1;
  if (this->has_scenario_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario_id(this), target, stream);
  }

  // .zb.dcts.scenario.TaskId task_id = 2;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::task_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.ScenarioTaskId)
  return target;
}

size_t ScenarioTaskId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.ScenarioTaskId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario_id = 1;
  if (this->has_scenario_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_id_);
  }

  // .zb.dcts.scenario.TaskId task_id = 2;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTaskId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.ScenarioTaskId)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTaskId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioTaskId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.ScenarioTaskId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.ScenarioTaskId)
    MergeFrom(*source);
  }
}

void ScenarioTaskId::MergeFrom(const ScenarioTaskId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.ScenarioTaskId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario_id()) {
    _internal_mutable_scenario_id()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario_id());
  }
  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::scenario::TaskId::MergeFrom(from._internal_task_id());
  }
}

void ScenarioTaskId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.ScenarioTaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTaskId::CopyFrom(const ScenarioTaskId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.ScenarioTaskId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTaskId::IsInitialized() const {
  return true;
}

void ScenarioTaskId::InternalSwap(ScenarioTaskId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioTaskId, task_id_)
      + sizeof(ScenarioTaskId::task_id_)
      - PROTOBUF_FIELD_OFFSET(ScenarioTaskId, scenario_id_)>(
          reinterpret_cast<char*>(&scenario_id_),
          reinterpret_cast<char*>(&other->scenario_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTaskId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskSummary::InitAsDefaultInstance() {
  ::zb::dcts::scenario::_TaskSummary_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::scenario::TaskId*>(
      ::zb::dcts::scenario::TaskId::internal_default_instance());
  ::zb::dcts::scenario::_TaskSummary_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class TaskSummary::_Internal {
 public:
  static const ::zb::dcts::scenario::TaskId& id(const TaskSummary* msg);
  static const ::zb::dcts::Timestamp& start_time(const TaskSummary* msg);
};

const ::zb::dcts::scenario::TaskId&
TaskSummary::_Internal::id(const TaskSummary* msg) {
  return *msg->id_;
}
const ::zb::dcts::Timestamp&
TaskSummary::_Internal::start_time(const TaskSummary* msg) {
  return *msg->start_time_;
}
void TaskSummary::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void TaskSummary::clear_topics() {
  topics_.Clear();
}
TaskSummary::TaskSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.TaskSummary)
}
TaskSummary::TaskSummary(const TaskSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::scenario::TaskId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_start_time()) {
    start_time_ = new ::zb::dcts::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.TaskSummary)
}

void TaskSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskSummary_scenario_2fscenario_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

TaskSummary::~TaskSummary() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.TaskSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete start_time_;
}

void TaskSummary::ArenaDtor(void* object) {
  TaskSummary* _this = reinterpret_cast< TaskSummary* >(object);
  (void)_this;
}
void TaskSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskSummary& TaskSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskSummary_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void TaskSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.TaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.TaskId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.TaskType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::TaskType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.TaskStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::zb::dcts::scenario::TaskStatus>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.Topic topics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.TaskSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.TaskId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .zb.dcts.scenario.TaskType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .zb.dcts.scenario.TaskStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .zb.dcts.Timestamp start_time = 5;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::start_time(this), target, stream);
  }

  // repeated .zb.dcts.Topic topics = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_topics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.TaskSummary)
  return target;
}

size_t TaskSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.TaskSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.Topic topics = 6;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.TaskId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.Timestamp start_time = 5;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .zb.dcts.scenario.TaskType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .zb.dcts.scenario.TaskStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.TaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.TaskSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.TaskSummary)
    MergeFrom(*source);
  }
}

void TaskSummary::MergeFrom(const TaskSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.TaskSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::scenario::TaskId::MergeFrom(from._internal_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TaskSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.TaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSummary::CopyFrom(const TaskSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.TaskSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSummary::IsInitialized() const {
  return true;
}

void TaskSummary::InternalSwap(TaskSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskSummary, status_)
      + sizeof(TaskSummary::status_)
      - PROTOBUF_FIELD_OFFSET(TaskSummary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioInfo::InitAsDefaultInstance() {
  ::zb::dcts::scenario::_ScenarioInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::_ScenarioInfo_default_instance_._instance.get_mutable()->using_sources_ = const_cast< ::zb::dcts::source::SourceSetInfo*>(
      ::zb::dcts::source::SourceSetInfo::internal_default_instance());
}
class ScenarioInfo::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& id(const ScenarioInfo* msg);
  static const ::zb::dcts::source::SourceSetInfo& using_sources(const ScenarioInfo* msg);
};

const ::zb::dcts::scenario::ScenarioId&
ScenarioInfo::_Internal::id(const ScenarioInfo* msg) {
  return *msg->id_;
}
const ::zb::dcts::source::SourceSetInfo&
ScenarioInfo::_Internal::using_sources(const ScenarioInfo* msg) {
  return *msg->using_sources_;
}
void ScenarioInfo::clear_using_sources() {
  if (GetArena() == nullptr && using_sources_ != nullptr) {
    delete using_sources_;
  }
  using_sources_ = nullptr;
}
ScenarioInfo::ScenarioInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.ScenarioInfo)
}
ScenarioInfo::ScenarioInfo(const ScenarioInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::scenario::ScenarioId(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_using_sources()) {
    using_sources_ = new ::zb::dcts::source::SourceSetInfo(*from.using_sources_);
  } else {
    using_sources_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.ScenarioInfo)
}

void ScenarioInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioInfo_scenario_2fscenario_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_sources_) -
      reinterpret_cast<char*>(&id_)) + sizeof(using_sources_));
}

ScenarioInfo::~ScenarioInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.ScenarioInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete using_sources_;
}

void ScenarioInfo::ArenaDtor(void* object) {
  ScenarioInfo* _this = reinterpret_cast< ScenarioInfo* >(object);
  (void)_this;
}
void ScenarioInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioInfo& ScenarioInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioInfo_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.ScenarioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArena() == nullptr && using_sources_ != nullptr) {
    delete using_sources_;
  }
  using_sources_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.TaskSummary tasks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.SourceSetInfo using_sources = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_using_sources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.ScenarioInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // repeated .zb.dcts.scenario.TaskSummary tasks = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tasks(i), target, stream);
  }

  // .zb.dcts.source.SourceSetInfo using_sources = 7;
  if (this->has_using_sources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::using_sources(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.ScenarioInfo)
  return target;
}

size_t ScenarioInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.ScenarioInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.TaskSummary tasks = 6;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.ScenarioId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .zb.dcts.source.SourceSetInfo using_sources = 7;
  if (this->has_using_sources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *using_sources_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.ScenarioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.ScenarioInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.ScenarioInfo)
    MergeFrom(*source);
  }
}

void ScenarioInfo::MergeFrom(const ScenarioInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.ScenarioInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_id());
  }
  if (from.has_using_sources()) {
    _internal_mutable_using_sources()->::zb::dcts::source::SourceSetInfo::MergeFrom(from._internal_using_sources());
  }
}

void ScenarioInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.ScenarioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioInfo::CopyFrom(const ScenarioInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.ScenarioInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioInfo::IsInitialized() const {
  return true;
}

void ScenarioInfo::InternalSwap(ScenarioInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioInfo, using_sources_)
      + sizeof(ScenarioInfo::using_sources_)
      - PROTOBUF_FIELD_OFFSET(ScenarioInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioReply::InitAsDefaultInstance() {
  ::zb::dcts::scenario::_ScenarioReply_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
}
class ScenarioReply::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ScenarioReply* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ScenarioReply::_Internal::responser(const ScenarioReply* msg) {
  return *msg->responser_;
}
ScenarioReply::ScenarioReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.ScenarioReply)
}
ScenarioReply::ScenarioReply(const ScenarioReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.ScenarioReply)
}

void ScenarioReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioReply_scenario_2fscenario_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(error_code_));
}

ScenarioReply::~ScenarioReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.ScenarioReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenarioReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
}

void ScenarioReply::ArenaDtor(void* object) {
  ScenarioReply* _this = reinterpret_cast< ScenarioReply* >(object);
  (void)_this;
}
void ScenarioReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenarioReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioReply& ScenarioReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioReply_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void ScenarioReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.ScenarioReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ErrorType error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::zb::dcts::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.ScenarioReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.ScenarioReply)
  return target;
}

size_t ScenarioReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.ScenarioReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.ErrorType error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.ScenarioReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.ScenarioReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.ScenarioReply)
    MergeFrom(*source);
  }
}

void ScenarioReply::MergeFrom(const ScenarioReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.ScenarioReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void ScenarioReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.ScenarioReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioReply::CopyFrom(const ScenarioReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.ScenarioReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioReply::IsInitialized() const {
  return true;
}

void ScenarioReply::InternalSwap(ScenarioReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScenarioReply, error_code_)
      + sizeof(ScenarioReply::error_code_)
      - PROTOBUF_FIELD_OFFSET(ScenarioReply, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenariosInfo::InitAsDefaultInstance() {
}
class ScenariosInfo::_Internal {
 public:
};

ScenariosInfo::ScenariosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scenario_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.ScenariosInfo)
}
ScenariosInfo::ScenariosInfo(const ScenariosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scenario_info_(from.scenario_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.ScenariosInfo)
}

void ScenariosInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenariosInfo_scenario_2fscenario_2eproto.base);
}

ScenariosInfo::~ScenariosInfo() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.ScenariosInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScenariosInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScenariosInfo::ArenaDtor(void* object) {
  ScenariosInfo* _this = reinterpret_cast< ScenariosInfo* >(object);
  (void)_this;
}
void ScenariosInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenariosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenariosInfo& ScenariosInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenariosInfo_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void ScenariosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.ScenariosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenario_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenariosInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.scenario.ScenarioInfo scenario_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scenario_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenariosInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.ScenariosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.ScenarioInfo scenario_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scenario_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scenario_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.ScenariosInfo)
  return target;
}

size_t ScenariosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.ScenariosInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.ScenarioInfo scenario_info = 1;
  total_size += 1UL * this->_internal_scenario_info_size();
  for (const auto& msg : this->scenario_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenariosInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.ScenariosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenariosInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenariosInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.ScenariosInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.ScenariosInfo)
    MergeFrom(*source);
  }
}

void ScenariosInfo::MergeFrom(const ScenariosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.ScenariosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenario_info_.MergeFrom(from.scenario_info_);
}

void ScenariosInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.ScenariosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenariosInfo::CopyFrom(const ScenariosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.ScenariosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenariosInfo::IsInitialized() const {
  return true;
}

void ScenariosInfo::InternalSwap(ScenariosInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scenario_info_.InternalSwap(&other->scenario_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenariosInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::_SubscribeRequest_default_instance_._instance.get_mutable()->scenario_task_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::_SubscribeRequest_default_instance_._instance.get_mutable()->topic_ = const_cast< ::zb::dcts::Topic*>(
      ::zb::dcts::Topic::internal_default_instance());
}
class SubscribeRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& scenario_task(const SubscribeRequest* msg);
  static const ::zb::dcts::Topic& topic(const SubscribeRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
SubscribeRequest::_Internal::scenario_task(const SubscribeRequest* msg) {
  return *msg->scenario_task_;
}
const ::zb::dcts::Topic&
SubscribeRequest::_Internal::topic(const SubscribeRequest* msg) {
  return *msg->topic_;
}
void SubscribeRequest::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario_task()) {
    scenario_task_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.scenario_task_);
  } else {
    scenario_task_ = nullptr;
  }
  if (from._internal_has_topic()) {
    topic_ = new ::zb::dcts::Topic(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeRequest_scenario_2fscenario_2eproto.base);
  ::memset(&scenario_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topic_) -
      reinterpret_cast<char*>(&scenario_task_)) + sizeof(topic_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.SubscribeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_task_;
  if (this != internal_default_instance()) delete topic_;
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRequest& SubscribeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRequest_scenario_2fscenario_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_task_ != nullptr) {
    delete scenario_task_;
  }
  scenario_task_ = nullptr;
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId scenario_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Topic topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId scenario_task = 1;
  if (this->has_scenario_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario_task(this), target, stream);
  }

  // .zb.dcts.Topic topic = 2;
  if (this->has_topic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::topic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId scenario_task = 1;
  if (this->has_scenario_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_task_);
  }

  // .zb.dcts.Topic topic = 2;
  if (this->has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.SubscribeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.SubscribeRequest)
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario_task()) {
    _internal_mutable_scenario_task()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_scenario_task());
  }
  if (from.has_topic()) {
    _internal_mutable_topic()->::zb::dcts::Topic::MergeFrom(from._internal_topic());
  }
}

void SubscribeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeRequest, topic_)
      + sizeof(SubscribeRequest::topic_)
      - PROTOBUF_FIELD_OFFSET(SubscribeRequest, scenario_task_)>(
          reinterpret_cast<char*>(&scenario_task_),
          reinterpret_cast<char*>(&other->scenario_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::ScenarioId* Arena::CreateMaybeMessage< ::zb::dcts::scenario::ScenarioId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::ScenarioId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::TaskId* Arena::CreateMaybeMessage< ::zb::dcts::scenario::TaskId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::TaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::ScenarioTaskId* Arena::CreateMaybeMessage< ::zb::dcts::scenario::ScenarioTaskId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::ScenarioTaskId >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::TaskSummary* Arena::CreateMaybeMessage< ::zb::dcts::scenario::TaskSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::TaskSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::ScenarioInfo* Arena::CreateMaybeMessage< ::zb::dcts::scenario::ScenarioInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::ScenarioInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::ScenarioReply* Arena::CreateMaybeMessage< ::zb::dcts::scenario::ScenarioReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::ScenarioReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::ScenariosInfo* Arena::CreateMaybeMessage< ::zb::dcts::scenario::ScenariosInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::ScenariosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::SubscribeRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::SubscribeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
