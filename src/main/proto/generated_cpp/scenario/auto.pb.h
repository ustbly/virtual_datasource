// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/auto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fauto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fauto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scenario/MCP/trunk.pb.h"
#include "scenario/DF.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/detection.pb.h"
#include "source/source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fauto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fauto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fauto_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace automatic {
class AutoWork;
class AutoWorkDefaultTypeInternal;
extern AutoWorkDefaultTypeInternal _AutoWork_default_instance_;
class AutoWorkChain;
class AutoWorkChainDefaultTypeInternal;
extern AutoWorkChainDefaultTypeInternal _AutoWorkChain_default_instance_;
class ChangeSweepCommandParam;
class ChangeSweepCommandParamDefaultTypeInternal;
extern ChangeSweepCommandParamDefaultTypeInternal _ChangeSweepCommandParam_default_instance_;
class CreateAutoMCPRequest;
class CreateAutoMCPRequestDefaultTypeInternal;
extern CreateAutoMCPRequestDefaultTypeInternal _CreateAutoMCPRequest_default_instance_;
class InsertDFCommandParam;
class InsertDFCommandParamDefaultTypeInternal;
extern InsertDFCommandParamDefaultTypeInternal _InsertDFCommandParam_default_instance_;
class WorkTiming;
class WorkTimingDefaultTypeInternal;
extern WorkTimingDefaultTypeInternal _WorkTiming_default_instance_;
}  // namespace automatic
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::automatic::AutoWork* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::AutoWork>(Arena*);
template<> ::zb::dcts::scenario::automatic::AutoWorkChain* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::AutoWorkChain>(Arena*);
template<> ::zb::dcts::scenario::automatic::ChangeSweepCommandParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::ChangeSweepCommandParam>(Arena*);
template<> ::zb::dcts::scenario::automatic::CreateAutoMCPRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::CreateAutoMCPRequest>(Arena*);
template<> ::zb::dcts::scenario::automatic::InsertDFCommandParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::InsertDFCommandParam>(Arena*);
template<> ::zb::dcts::scenario::automatic::WorkTiming* Arena::CreateMaybeMessage<::zb::dcts::scenario::automatic::WorkTiming>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace automatic {

enum AutoWork_Mode : int {
  AutoWork_Mode_NO_OP = 0,
  AutoWork_Mode_MCP_PSCAN = 1,
  AutoWork_Mode_MCP_DF = 2,
  AutoWork_Mode_PUB_SIG_TABLE = 3,
  AutoWork_Mode_AutoWork_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AutoWork_Mode_AutoWork_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AutoWork_Mode_IsValid(int value);
constexpr AutoWork_Mode AutoWork_Mode_Mode_MIN = AutoWork_Mode_NO_OP;
constexpr AutoWork_Mode AutoWork_Mode_Mode_MAX = AutoWork_Mode_PUB_SIG_TABLE;
constexpr int AutoWork_Mode_Mode_ARRAYSIZE = AutoWork_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoWork_Mode_descriptor();
template<typename T>
inline const std::string& AutoWork_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AutoWork_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AutoWork_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AutoWork_Mode_descriptor(), enum_t_value);
}
inline bool AutoWork_Mode_Parse(
    const std::string& name, AutoWork_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AutoWork_Mode>(
    AutoWork_Mode_descriptor(), name, value);
}
// ===================================================================

class WorkTiming PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.WorkTiming) */ {
 public:
  inline WorkTiming() : WorkTiming(nullptr) {};
  virtual ~WorkTiming();

  WorkTiming(const WorkTiming& from);
  WorkTiming(WorkTiming&& from) noexcept
    : WorkTiming() {
    *this = ::std::move(from);
  }

  inline WorkTiming& operator=(const WorkTiming& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkTiming& operator=(WorkTiming&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkTiming* internal_default_instance() {
    return reinterpret_cast<const WorkTiming*>(
               &_WorkTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkTiming& a, WorkTiming& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkTiming* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkTiming* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkTiming* New() const final {
    return CreateMaybeMessage<WorkTiming>(nullptr);
  }

  WorkTiming* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkTiming>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkTiming& from);
  void MergeFrom(const WorkTiming& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkTiming* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.WorkTiming";
  }
  protected:
  explicit WorkTiming(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationInMsecFieldNumber = 1,
    kExecuteTimesFieldNumber = 2,
  };
  // int32 duration_in_msec = 1;
  void clear_duration_in_msec();
  ::PROTOBUF_NAMESPACE_ID::int32 duration_in_msec() const;
  void set_duration_in_msec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration_in_msec() const;
  void _internal_set_duration_in_msec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 execute_times = 2;
  void clear_execute_times();
  ::PROTOBUF_NAMESPACE_ID::int32 execute_times() const;
  void set_execute_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_execute_times() const;
  void _internal_set_execute_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.WorkTiming)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_in_msec_;
  ::PROTOBUF_NAMESPACE_ID::int32 execute_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// -------------------------------------------------------------------

class AutoWork PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.AutoWork) */ {
 public:
  inline AutoWork() : AutoWork(nullptr) {};
  virtual ~AutoWork();

  AutoWork(const AutoWork& from);
  AutoWork(AutoWork&& from) noexcept
    : AutoWork() {
    *this = ::std::move(from);
  }

  inline AutoWork& operator=(const AutoWork& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoWork& operator=(AutoWork&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoWork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoWork* internal_default_instance() {
    return reinterpret_cast<const AutoWork*>(
               &_AutoWork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutoWork& a, AutoWork& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoWork* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoWork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoWork* New() const final {
    return CreateMaybeMessage<AutoWork>(nullptr);
  }

  AutoWork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoWork>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoWork& from);
  void MergeFrom(const AutoWork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoWork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.AutoWork";
  }
  protected:
  explicit AutoWork(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AutoWork_Mode Mode;
  static constexpr Mode NO_OP =
    AutoWork_Mode_NO_OP;
  static constexpr Mode MCP_PSCAN =
    AutoWork_Mode_MCP_PSCAN;
  static constexpr Mode MCP_DF =
    AutoWork_Mode_MCP_DF;
  static constexpr Mode PUB_SIG_TABLE =
    AutoWork_Mode_PUB_SIG_TABLE;
  static inline bool Mode_IsValid(int value) {
    return AutoWork_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    AutoWork_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    AutoWork_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    AutoWork_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return AutoWork_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return AutoWork_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return AutoWork_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExecutorFieldNumber = 2,
    kTimingFieldNumber = 3,
    kModeFieldNumber = 1,
  };
  // .zb.dcts.source.SourceId executor = 2;
  bool has_executor() const;
  private:
  bool _internal_has_executor() const;
  public:
  void clear_executor();
  const ::zb::dcts::source::SourceId& executor() const;
  ::zb::dcts::source::SourceId* release_executor();
  ::zb::dcts::source::SourceId* mutable_executor();
  void set_allocated_executor(::zb::dcts::source::SourceId* executor);
  private:
  const ::zb::dcts::source::SourceId& _internal_executor() const;
  ::zb::dcts::source::SourceId* _internal_mutable_executor();
  public:
  void unsafe_arena_set_allocated_executor(
      ::zb::dcts::source::SourceId* executor);
  ::zb::dcts::source::SourceId* unsafe_arena_release_executor();

  // .zb.dcts.scenario.automatic.WorkTiming timing = 3;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::zb::dcts::scenario::automatic::WorkTiming& timing() const;
  ::zb::dcts::scenario::automatic::WorkTiming* release_timing();
  ::zb::dcts::scenario::automatic::WorkTiming* mutable_timing();
  void set_allocated_timing(::zb::dcts::scenario::automatic::WorkTiming* timing);
  private:
  const ::zb::dcts::scenario::automatic::WorkTiming& _internal_timing() const;
  ::zb::dcts::scenario::automatic::WorkTiming* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::zb::dcts::scenario::automatic::WorkTiming* timing);
  ::zb::dcts::scenario::automatic::WorkTiming* unsafe_arena_release_timing();

  // .zb.dcts.scenario.automatic.AutoWork.Mode mode = 1;
  void clear_mode();
  ::zb::dcts::scenario::automatic::AutoWork_Mode mode() const;
  void set_mode(::zb::dcts::scenario::automatic::AutoWork_Mode value);
  private:
  ::zb::dcts::scenario::automatic::AutoWork_Mode _internal_mode() const;
  void _internal_set_mode(::zb::dcts::scenario::automatic::AutoWork_Mode value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.AutoWork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* executor_;
  ::zb::dcts::scenario::automatic::WorkTiming* timing_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// -------------------------------------------------------------------

class AutoWorkChain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.AutoWorkChain) */ {
 public:
  inline AutoWorkChain() : AutoWorkChain(nullptr) {};
  virtual ~AutoWorkChain();

  AutoWorkChain(const AutoWorkChain& from);
  AutoWorkChain(AutoWorkChain&& from) noexcept
    : AutoWorkChain() {
    *this = ::std::move(from);
  }

  inline AutoWorkChain& operator=(const AutoWorkChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoWorkChain& operator=(AutoWorkChain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AutoWorkChain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoWorkChain* internal_default_instance() {
    return reinterpret_cast<const AutoWorkChain*>(
               &_AutoWorkChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutoWorkChain& a, AutoWorkChain& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoWorkChain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoWorkChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AutoWorkChain* New() const final {
    return CreateMaybeMessage<AutoWorkChain>(nullptr);
  }

  AutoWorkChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AutoWorkChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AutoWorkChain& from);
  void MergeFrom(const AutoWorkChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoWorkChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.AutoWorkChain";
  }
  protected:
  explicit AutoWorkChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorksFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.automatic.AutoWork works = 1;
  int works_size() const;
  private:
  int _internal_works_size() const;
  public:
  void clear_works();
  ::zb::dcts::scenario::automatic::AutoWork* mutable_works(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::automatic::AutoWork >*
      mutable_works();
  private:
  const ::zb::dcts::scenario::automatic::AutoWork& _internal_works(int index) const;
  ::zb::dcts::scenario::automatic::AutoWork* _internal_add_works();
  public:
  const ::zb::dcts::scenario::automatic::AutoWork& works(int index) const;
  ::zb::dcts::scenario::automatic::AutoWork* add_works();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::automatic::AutoWork >&
      works() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.AutoWorkChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::automatic::AutoWork > works_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// -------------------------------------------------------------------

class CreateAutoMCPRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.CreateAutoMCPRequest) */ {
 public:
  inline CreateAutoMCPRequest() : CreateAutoMCPRequest(nullptr) {};
  virtual ~CreateAutoMCPRequest();

  CreateAutoMCPRequest(const CreateAutoMCPRequest& from);
  CreateAutoMCPRequest(CreateAutoMCPRequest&& from) noexcept
    : CreateAutoMCPRequest() {
    *this = ::std::move(from);
  }

  inline CreateAutoMCPRequest& operator=(const CreateAutoMCPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAutoMCPRequest& operator=(CreateAutoMCPRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAutoMCPRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAutoMCPRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAutoMCPRequest*>(
               &_CreateAutoMCPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateAutoMCPRequest& a, CreateAutoMCPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAutoMCPRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAutoMCPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAutoMCPRequest* New() const final {
    return CreateMaybeMessage<CreateAutoMCPRequest>(nullptr);
  }

  CreateAutoMCPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAutoMCPRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAutoMCPRequest& from);
  void MergeFrom(const CreateAutoMCPRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAutoMCPRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.CreateAutoMCPRequest";
  }
  protected:
  explicit CreateAutoMCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMcpParamFieldNumber = 1,
    kAutoWorkChainFieldNumber = 2,
  };
  // .zb.dcts.scenario.MCP.CreateScenarioRequest mcp_param = 1;
  bool has_mcp_param() const;
  private:
  bool _internal_has_mcp_param() const;
  public:
  void clear_mcp_param();
  const ::zb::dcts::scenario::MCP::CreateScenarioRequest& mcp_param() const;
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* release_mcp_param();
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* mutable_mcp_param();
  void set_allocated_mcp_param(::zb::dcts::scenario::MCP::CreateScenarioRequest* mcp_param);
  private:
  const ::zb::dcts::scenario::MCP::CreateScenarioRequest& _internal_mcp_param() const;
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* _internal_mutable_mcp_param();
  public:
  void unsafe_arena_set_allocated_mcp_param(
      ::zb::dcts::scenario::MCP::CreateScenarioRequest* mcp_param);
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* unsafe_arena_release_mcp_param();

  // .zb.dcts.scenario.automatic.AutoWorkChain auto_work_chain = 2;
  bool has_auto_work_chain() const;
  private:
  bool _internal_has_auto_work_chain() const;
  public:
  void clear_auto_work_chain();
  const ::zb::dcts::scenario::automatic::AutoWorkChain& auto_work_chain() const;
  ::zb::dcts::scenario::automatic::AutoWorkChain* release_auto_work_chain();
  ::zb::dcts::scenario::automatic::AutoWorkChain* mutable_auto_work_chain();
  void set_allocated_auto_work_chain(::zb::dcts::scenario::automatic::AutoWorkChain* auto_work_chain);
  private:
  const ::zb::dcts::scenario::automatic::AutoWorkChain& _internal_auto_work_chain() const;
  ::zb::dcts::scenario::automatic::AutoWorkChain* _internal_mutable_auto_work_chain();
  public:
  void unsafe_arena_set_allocated_auto_work_chain(
      ::zb::dcts::scenario::automatic::AutoWorkChain* auto_work_chain);
  ::zb::dcts::scenario::automatic::AutoWorkChain* unsafe_arena_release_auto_work_chain();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.CreateAutoMCPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* mcp_param_;
  ::zb::dcts::scenario::automatic::AutoWorkChain* auto_work_chain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// -------------------------------------------------------------------

class InsertDFCommandParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.InsertDFCommandParam) */ {
 public:
  inline InsertDFCommandParam() : InsertDFCommandParam(nullptr) {};
  virtual ~InsertDFCommandParam();

  InsertDFCommandParam(const InsertDFCommandParam& from);
  InsertDFCommandParam(InsertDFCommandParam&& from) noexcept
    : InsertDFCommandParam() {
    *this = ::std::move(from);
  }

  inline InsertDFCommandParam& operator=(const InsertDFCommandParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertDFCommandParam& operator=(InsertDFCommandParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertDFCommandParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertDFCommandParam* internal_default_instance() {
    return reinterpret_cast<const InsertDFCommandParam*>(
               &_InsertDFCommandParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InsertDFCommandParam& a, InsertDFCommandParam& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertDFCommandParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertDFCommandParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertDFCommandParam* New() const final {
    return CreateMaybeMessage<InsertDFCommandParam>(nullptr);
  }

  InsertDFCommandParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertDFCommandParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertDFCommandParam& from);
  void MergeFrom(const InsertDFCommandParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertDFCommandParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.InsertDFCommandParam";
  }
  protected:
  explicit InsertDFCommandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
    kTimingFieldNumber = 2,
  };
  // .zb.dcts.scenario.DF.DirectionFindingSignals targets = 1;
  bool has_targets() const;
  private:
  bool _internal_has_targets() const;
  public:
  void clear_targets();
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& targets() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* release_targets();
  ::zb::dcts::scenario::DF::DirectionFindingSignals* mutable_targets();
  void set_allocated_targets(::zb::dcts::scenario::DF::DirectionFindingSignals* targets);
  private:
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& _internal_targets() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* _internal_mutable_targets();
  public:
  void unsafe_arena_set_allocated_targets(
      ::zb::dcts::scenario::DF::DirectionFindingSignals* targets);
  ::zb::dcts::scenario::DF::DirectionFindingSignals* unsafe_arena_release_targets();

  // .zb.dcts.scenario.automatic.WorkTiming timing = 2;
  bool has_timing() const;
  private:
  bool _internal_has_timing() const;
  public:
  void clear_timing();
  const ::zb::dcts::scenario::automatic::WorkTiming& timing() const;
  ::zb::dcts::scenario::automatic::WorkTiming* release_timing();
  ::zb::dcts::scenario::automatic::WorkTiming* mutable_timing();
  void set_allocated_timing(::zb::dcts::scenario::automatic::WorkTiming* timing);
  private:
  const ::zb::dcts::scenario::automatic::WorkTiming& _internal_timing() const;
  ::zb::dcts::scenario::automatic::WorkTiming* _internal_mutable_timing();
  public:
  void unsafe_arena_set_allocated_timing(
      ::zb::dcts::scenario::automatic::WorkTiming* timing);
  ::zb::dcts::scenario::automatic::WorkTiming* unsafe_arena_release_timing();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.InsertDFCommandParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* targets_;
  ::zb::dcts::scenario::automatic::WorkTiming* timing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// -------------------------------------------------------------------

class ChangeSweepCommandParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.automatic.ChangeSweepCommandParam) */ {
 public:
  inline ChangeSweepCommandParam() : ChangeSweepCommandParam(nullptr) {};
  virtual ~ChangeSweepCommandParam();

  ChangeSweepCommandParam(const ChangeSweepCommandParam& from);
  ChangeSweepCommandParam(ChangeSweepCommandParam&& from) noexcept
    : ChangeSweepCommandParam() {
    *this = ::std::move(from);
  }

  inline ChangeSweepCommandParam& operator=(const ChangeSweepCommandParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeSweepCommandParam& operator=(ChangeSweepCommandParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeSweepCommandParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeSweepCommandParam* internal_default_instance() {
    return reinterpret_cast<const ChangeSweepCommandParam*>(
               &_ChangeSweepCommandParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangeSweepCommandParam& a, ChangeSweepCommandParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeSweepCommandParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeSweepCommandParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeSweepCommandParam* New() const final {
    return CreateMaybeMessage<ChangeSweepCommandParam>(nullptr);
  }

  ChangeSweepCommandParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeSweepCommandParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeSweepCommandParam& from);
  void MergeFrom(const ChangeSweepCommandParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeSweepCommandParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.automatic.ChangeSweepCommandParam";
  }
  protected:
  explicit ChangeSweepCommandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fauto_2eproto);
    return ::descriptor_table_scenario_2fauto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPscanParamFieldNumber = 1,
    kDetectionParamFieldNumber = 2,
  };
  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 1;
  bool has_pscan_param() const;
  private:
  bool _internal_has_pscan_param() const;
  public:
  void clear_pscan_param();
  const ::zb::dcts::scenario::MCP::PScanParam& pscan_param() const;
  ::zb::dcts::scenario::MCP::PScanParam* release_pscan_param();
  ::zb::dcts::scenario::MCP::PScanParam* mutable_pscan_param();
  void set_allocated_pscan_param(::zb::dcts::scenario::MCP::PScanParam* pscan_param);
  private:
  const ::zb::dcts::scenario::MCP::PScanParam& _internal_pscan_param() const;
  ::zb::dcts::scenario::MCP::PScanParam* _internal_mutable_pscan_param();
  public:
  void unsafe_arena_set_allocated_pscan_param(
      ::zb::dcts::scenario::MCP::PScanParam* pscan_param);
  ::zb::dcts::scenario::MCP::PScanParam* unsafe_arena_release_pscan_param();

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
  bool has_detection_param() const;
  private:
  bool _internal_has_detection_param() const;
  public:
  void clear_detection_param();
  const ::zb::dcts::scenario::detection::DetectionParam& detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* release_detection_param();
  ::zb::dcts::scenario::detection::DetectionParam* mutable_detection_param();
  void set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param);
  private:
  const ::zb::dcts::scenario::detection::DetectionParam& _internal_detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* _internal_mutable_detection_param();
  public:
  void unsafe_arena_set_allocated_detection_param(
      ::zb::dcts::scenario::detection::DetectionParam* detection_param);
  ::zb::dcts::scenario::detection::DetectionParam* unsafe_arena_release_detection_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.automatic.ChangeSweepCommandParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::MCP::PScanParam* pscan_param_;
  ::zb::dcts::scenario::detection::DetectionParam* detection_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fauto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkTiming

// int32 duration_in_msec = 1;
inline void WorkTiming::clear_duration_in_msec() {
  duration_in_msec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkTiming::_internal_duration_in_msec() const {
  return duration_in_msec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkTiming::duration_in_msec() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.WorkTiming.duration_in_msec)
  return _internal_duration_in_msec();
}
inline void WorkTiming::_internal_set_duration_in_msec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_in_msec_ = value;
}
inline void WorkTiming::set_duration_in_msec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration_in_msec(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.automatic.WorkTiming.duration_in_msec)
}

// int32 execute_times = 2;
inline void WorkTiming::clear_execute_times() {
  execute_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkTiming::_internal_execute_times() const {
  return execute_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkTiming::execute_times() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.WorkTiming.execute_times)
  return _internal_execute_times();
}
inline void WorkTiming::_internal_set_execute_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  execute_times_ = value;
}
inline void WorkTiming::set_execute_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_execute_times(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.automatic.WorkTiming.execute_times)
}

// -------------------------------------------------------------------

// AutoWork

// .zb.dcts.scenario.automatic.AutoWork.Mode mode = 1;
inline void AutoWork::clear_mode() {
  mode_ = 0;
}
inline ::zb::dcts::scenario::automatic::AutoWork_Mode AutoWork::_internal_mode() const {
  return static_cast< ::zb::dcts::scenario::automatic::AutoWork_Mode >(mode_);
}
inline ::zb::dcts::scenario::automatic::AutoWork_Mode AutoWork::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.AutoWork.mode)
  return _internal_mode();
}
inline void AutoWork::_internal_set_mode(::zb::dcts::scenario::automatic::AutoWork_Mode value) {
  
  mode_ = value;
}
inline void AutoWork::set_mode(::zb::dcts::scenario::automatic::AutoWork_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.automatic.AutoWork.mode)
}

// .zb.dcts.source.SourceId executor = 2;
inline bool AutoWork::_internal_has_executor() const {
  return this != internal_default_instance() && executor_ != nullptr;
}
inline bool AutoWork::has_executor() const {
  return _internal_has_executor();
}
inline const ::zb::dcts::source::SourceId& AutoWork::_internal_executor() const {
  const ::zb::dcts::source::SourceId* p = executor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& AutoWork::executor() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.AutoWork.executor)
  return _internal_executor();
}
inline void AutoWork::unsafe_arena_set_allocated_executor(
    ::zb::dcts::source::SourceId* executor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executor_);
  }
  executor_ = executor;
  if (executor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.AutoWork.executor)
}
inline ::zb::dcts::source::SourceId* AutoWork::release_executor() {
  auto temp = unsafe_arena_release_executor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* AutoWork::unsafe_arena_release_executor() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.AutoWork.executor)
  
  ::zb::dcts::source::SourceId* temp = executor_;
  executor_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* AutoWork::_internal_mutable_executor() {
  
  if (executor_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    executor_ = p;
  }
  return executor_;
}
inline ::zb::dcts::source::SourceId* AutoWork::mutable_executor() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.AutoWork.executor)
  return _internal_mutable_executor();
}
inline void AutoWork::set_allocated_executor(::zb::dcts::source::SourceId* executor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(executor_);
  }
  if (executor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(executor)->GetArena();
    if (message_arena != submessage_arena) {
      executor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executor, submessage_arena);
    }
    
  } else {
    
  }
  executor_ = executor;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.AutoWork.executor)
}

// .zb.dcts.scenario.automatic.WorkTiming timing = 3;
inline bool AutoWork::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool AutoWork::has_timing() const {
  return _internal_has_timing();
}
inline void AutoWork::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
inline const ::zb::dcts::scenario::automatic::WorkTiming& AutoWork::_internal_timing() const {
  const ::zb::dcts::scenario::automatic::WorkTiming* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::automatic::WorkTiming*>(
      &::zb::dcts::scenario::automatic::_WorkTiming_default_instance_);
}
inline const ::zb::dcts::scenario::automatic::WorkTiming& AutoWork::timing() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.AutoWork.timing)
  return _internal_timing();
}
inline void AutoWork::unsafe_arena_set_allocated_timing(
    ::zb::dcts::scenario::automatic::WorkTiming* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.AutoWork.timing)
}
inline ::zb::dcts::scenario::automatic::WorkTiming* AutoWork::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* AutoWork::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.AutoWork.timing)
  
  ::zb::dcts::scenario::automatic::WorkTiming* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* AutoWork::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::automatic::WorkTiming>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* AutoWork::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.AutoWork.timing)
  return _internal_mutable_timing();
}
inline void AutoWork::set_allocated_timing(::zb::dcts::scenario::automatic::WorkTiming* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.AutoWork.timing)
}

// -------------------------------------------------------------------

// AutoWorkChain

// repeated .zb.dcts.scenario.automatic.AutoWork works = 1;
inline int AutoWorkChain::_internal_works_size() const {
  return works_.size();
}
inline int AutoWorkChain::works_size() const {
  return _internal_works_size();
}
inline void AutoWorkChain::clear_works() {
  works_.Clear();
}
inline ::zb::dcts::scenario::automatic::AutoWork* AutoWorkChain::mutable_works(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.AutoWorkChain.works)
  return works_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::automatic::AutoWork >*
AutoWorkChain::mutable_works() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.automatic.AutoWorkChain.works)
  return &works_;
}
inline const ::zb::dcts::scenario::automatic::AutoWork& AutoWorkChain::_internal_works(int index) const {
  return works_.Get(index);
}
inline const ::zb::dcts::scenario::automatic::AutoWork& AutoWorkChain::works(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.AutoWorkChain.works)
  return _internal_works(index);
}
inline ::zb::dcts::scenario::automatic::AutoWork* AutoWorkChain::_internal_add_works() {
  return works_.Add();
}
inline ::zb::dcts::scenario::automatic::AutoWork* AutoWorkChain::add_works() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.automatic.AutoWorkChain.works)
  return _internal_add_works();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::automatic::AutoWork >&
AutoWorkChain::works() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.automatic.AutoWorkChain.works)
  return works_;
}

// -------------------------------------------------------------------

// CreateAutoMCPRequest

// .zb.dcts.scenario.MCP.CreateScenarioRequest mcp_param = 1;
inline bool CreateAutoMCPRequest::_internal_has_mcp_param() const {
  return this != internal_default_instance() && mcp_param_ != nullptr;
}
inline bool CreateAutoMCPRequest::has_mcp_param() const {
  return _internal_has_mcp_param();
}
inline const ::zb::dcts::scenario::MCP::CreateScenarioRequest& CreateAutoMCPRequest::_internal_mcp_param() const {
  const ::zb::dcts::scenario::MCP::CreateScenarioRequest* p = mcp_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::MCP::CreateScenarioRequest*>(
      &::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_);
}
inline const ::zb::dcts::scenario::MCP::CreateScenarioRequest& CreateAutoMCPRequest::mcp_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.CreateAutoMCPRequest.mcp_param)
  return _internal_mcp_param();
}
inline void CreateAutoMCPRequest::unsafe_arena_set_allocated_mcp_param(
    ::zb::dcts::scenario::MCP::CreateScenarioRequest* mcp_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mcp_param_);
  }
  mcp_param_ = mcp_param;
  if (mcp_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.CreateAutoMCPRequest.mcp_param)
}
inline ::zb::dcts::scenario::MCP::CreateScenarioRequest* CreateAutoMCPRequest::release_mcp_param() {
  auto temp = unsafe_arena_release_mcp_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::MCP::CreateScenarioRequest* CreateAutoMCPRequest::unsafe_arena_release_mcp_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.CreateAutoMCPRequest.mcp_param)
  
  ::zb::dcts::scenario::MCP::CreateScenarioRequest* temp = mcp_param_;
  mcp_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::MCP::CreateScenarioRequest* CreateAutoMCPRequest::_internal_mutable_mcp_param() {
  
  if (mcp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::MCP::CreateScenarioRequest>(GetArena());
    mcp_param_ = p;
  }
  return mcp_param_;
}
inline ::zb::dcts::scenario::MCP::CreateScenarioRequest* CreateAutoMCPRequest::mutable_mcp_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.CreateAutoMCPRequest.mcp_param)
  return _internal_mutable_mcp_param();
}
inline void CreateAutoMCPRequest::set_allocated_mcp_param(::zb::dcts::scenario::MCP::CreateScenarioRequest* mcp_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mcp_param_);
  }
  if (mcp_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mcp_param)->GetArena();
    if (message_arena != submessage_arena) {
      mcp_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mcp_param, submessage_arena);
    }
    
  } else {
    
  }
  mcp_param_ = mcp_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.CreateAutoMCPRequest.mcp_param)
}

// .zb.dcts.scenario.automatic.AutoWorkChain auto_work_chain = 2;
inline bool CreateAutoMCPRequest::_internal_has_auto_work_chain() const {
  return this != internal_default_instance() && auto_work_chain_ != nullptr;
}
inline bool CreateAutoMCPRequest::has_auto_work_chain() const {
  return _internal_has_auto_work_chain();
}
inline void CreateAutoMCPRequest::clear_auto_work_chain() {
  if (GetArena() == nullptr && auto_work_chain_ != nullptr) {
    delete auto_work_chain_;
  }
  auto_work_chain_ = nullptr;
}
inline const ::zb::dcts::scenario::automatic::AutoWorkChain& CreateAutoMCPRequest::_internal_auto_work_chain() const {
  const ::zb::dcts::scenario::automatic::AutoWorkChain* p = auto_work_chain_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::automatic::AutoWorkChain*>(
      &::zb::dcts::scenario::automatic::_AutoWorkChain_default_instance_);
}
inline const ::zb::dcts::scenario::automatic::AutoWorkChain& CreateAutoMCPRequest::auto_work_chain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.CreateAutoMCPRequest.auto_work_chain)
  return _internal_auto_work_chain();
}
inline void CreateAutoMCPRequest::unsafe_arena_set_allocated_auto_work_chain(
    ::zb::dcts::scenario::automatic::AutoWorkChain* auto_work_chain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_work_chain_);
  }
  auto_work_chain_ = auto_work_chain;
  if (auto_work_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.CreateAutoMCPRequest.auto_work_chain)
}
inline ::zb::dcts::scenario::automatic::AutoWorkChain* CreateAutoMCPRequest::release_auto_work_chain() {
  auto temp = unsafe_arena_release_auto_work_chain();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::automatic::AutoWorkChain* CreateAutoMCPRequest::unsafe_arena_release_auto_work_chain() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.CreateAutoMCPRequest.auto_work_chain)
  
  ::zb::dcts::scenario::automatic::AutoWorkChain* temp = auto_work_chain_;
  auto_work_chain_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::automatic::AutoWorkChain* CreateAutoMCPRequest::_internal_mutable_auto_work_chain() {
  
  if (auto_work_chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::automatic::AutoWorkChain>(GetArena());
    auto_work_chain_ = p;
  }
  return auto_work_chain_;
}
inline ::zb::dcts::scenario::automatic::AutoWorkChain* CreateAutoMCPRequest::mutable_auto_work_chain() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.CreateAutoMCPRequest.auto_work_chain)
  return _internal_mutable_auto_work_chain();
}
inline void CreateAutoMCPRequest::set_allocated_auto_work_chain(::zb::dcts::scenario::automatic::AutoWorkChain* auto_work_chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auto_work_chain_;
  }
  if (auto_work_chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auto_work_chain);
    if (message_arena != submessage_arena) {
      auto_work_chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_work_chain, submessage_arena);
    }
    
  } else {
    
  }
  auto_work_chain_ = auto_work_chain;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.CreateAutoMCPRequest.auto_work_chain)
}

// -------------------------------------------------------------------

// InsertDFCommandParam

// .zb.dcts.scenario.DF.DirectionFindingSignals targets = 1;
inline bool InsertDFCommandParam::_internal_has_targets() const {
  return this != internal_default_instance() && targets_ != nullptr;
}
inline bool InsertDFCommandParam::has_targets() const {
  return _internal_has_targets();
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& InsertDFCommandParam::_internal_targets() const {
  const ::zb::dcts::scenario::DF::DirectionFindingSignals* p = targets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      &::zb::dcts::scenario::DF::_DirectionFindingSignals_default_instance_);
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& InsertDFCommandParam::targets() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.InsertDFCommandParam.targets)
  return _internal_targets();
}
inline void InsertDFCommandParam::unsafe_arena_set_allocated_targets(
    ::zb::dcts::scenario::DF::DirectionFindingSignals* targets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targets_);
  }
  targets_ = targets;
  if (targets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.InsertDFCommandParam.targets)
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* InsertDFCommandParam::release_targets() {
  auto temp = unsafe_arena_release_targets();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* InsertDFCommandParam::unsafe_arena_release_targets() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.InsertDFCommandParam.targets)
  
  ::zb::dcts::scenario::DF::DirectionFindingSignals* temp = targets_;
  targets_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* InsertDFCommandParam::_internal_mutable_targets() {
  
  if (targets_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingSignals>(GetArena());
    targets_ = p;
  }
  return targets_;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* InsertDFCommandParam::mutable_targets() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.InsertDFCommandParam.targets)
  return _internal_mutable_targets();
}
inline void InsertDFCommandParam::set_allocated_targets(::zb::dcts::scenario::DF::DirectionFindingSignals* targets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targets_);
  }
  if (targets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targets)->GetArena();
    if (message_arena != submessage_arena) {
      targets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targets, submessage_arena);
    }
    
  } else {
    
  }
  targets_ = targets;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.InsertDFCommandParam.targets)
}

// .zb.dcts.scenario.automatic.WorkTiming timing = 2;
inline bool InsertDFCommandParam::_internal_has_timing() const {
  return this != internal_default_instance() && timing_ != nullptr;
}
inline bool InsertDFCommandParam::has_timing() const {
  return _internal_has_timing();
}
inline void InsertDFCommandParam::clear_timing() {
  if (GetArena() == nullptr && timing_ != nullptr) {
    delete timing_;
  }
  timing_ = nullptr;
}
inline const ::zb::dcts::scenario::automatic::WorkTiming& InsertDFCommandParam::_internal_timing() const {
  const ::zb::dcts::scenario::automatic::WorkTiming* p = timing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::automatic::WorkTiming*>(
      &::zb::dcts::scenario::automatic::_WorkTiming_default_instance_);
}
inline const ::zb::dcts::scenario::automatic::WorkTiming& InsertDFCommandParam::timing() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.InsertDFCommandParam.timing)
  return _internal_timing();
}
inline void InsertDFCommandParam::unsafe_arena_set_allocated_timing(
    ::zb::dcts::scenario::automatic::WorkTiming* timing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timing_);
  }
  timing_ = timing;
  if (timing) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.InsertDFCommandParam.timing)
}
inline ::zb::dcts::scenario::automatic::WorkTiming* InsertDFCommandParam::release_timing() {
  auto temp = unsafe_arena_release_timing();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* InsertDFCommandParam::unsafe_arena_release_timing() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.InsertDFCommandParam.timing)
  
  ::zb::dcts::scenario::automatic::WorkTiming* temp = timing_;
  timing_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* InsertDFCommandParam::_internal_mutable_timing() {
  
  if (timing_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::automatic::WorkTiming>(GetArena());
    timing_ = p;
  }
  return timing_;
}
inline ::zb::dcts::scenario::automatic::WorkTiming* InsertDFCommandParam::mutable_timing() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.InsertDFCommandParam.timing)
  return _internal_mutable_timing();
}
inline void InsertDFCommandParam::set_allocated_timing(::zb::dcts::scenario::automatic::WorkTiming* timing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timing_;
  }
  if (timing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timing);
    if (message_arena != submessage_arena) {
      timing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.InsertDFCommandParam.timing)
}

// -------------------------------------------------------------------

// ChangeSweepCommandParam

// .zb.dcts.scenario.MCP.PScanParam pscan_param = 1;
inline bool ChangeSweepCommandParam::_internal_has_pscan_param() const {
  return this != internal_default_instance() && pscan_param_ != nullptr;
}
inline bool ChangeSweepCommandParam::has_pscan_param() const {
  return _internal_has_pscan_param();
}
inline const ::zb::dcts::scenario::MCP::PScanParam& ChangeSweepCommandParam::_internal_pscan_param() const {
  const ::zb::dcts::scenario::MCP::PScanParam* p = pscan_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::MCP::PScanParam*>(
      &::zb::dcts::scenario::MCP::_PScanParam_default_instance_);
}
inline const ::zb::dcts::scenario::MCP::PScanParam& ChangeSweepCommandParam::pscan_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.ChangeSweepCommandParam.pscan_param)
  return _internal_pscan_param();
}
inline void ChangeSweepCommandParam::unsafe_arena_set_allocated_pscan_param(
    ::zb::dcts::scenario::MCP::PScanParam* pscan_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pscan_param_);
  }
  pscan_param_ = pscan_param;
  if (pscan_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.ChangeSweepCommandParam.pscan_param)
}
inline ::zb::dcts::scenario::MCP::PScanParam* ChangeSweepCommandParam::release_pscan_param() {
  auto temp = unsafe_arena_release_pscan_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanParam* ChangeSweepCommandParam::unsafe_arena_release_pscan_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.ChangeSweepCommandParam.pscan_param)
  
  ::zb::dcts::scenario::MCP::PScanParam* temp = pscan_param_;
  pscan_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanParam* ChangeSweepCommandParam::_internal_mutable_pscan_param() {
  
  if (pscan_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanParam>(GetArena());
    pscan_param_ = p;
  }
  return pscan_param_;
}
inline ::zb::dcts::scenario::MCP::PScanParam* ChangeSweepCommandParam::mutable_pscan_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.ChangeSweepCommandParam.pscan_param)
  return _internal_mutable_pscan_param();
}
inline void ChangeSweepCommandParam::set_allocated_pscan_param(::zb::dcts::scenario::MCP::PScanParam* pscan_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pscan_param_);
  }
  if (pscan_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pscan_param)->GetArena();
    if (message_arena != submessage_arena) {
      pscan_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pscan_param, submessage_arena);
    }
    
  } else {
    
  }
  pscan_param_ = pscan_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.ChangeSweepCommandParam.pscan_param)
}

// .zb.dcts.scenario.detection.DetectionParam detection_param = 2;
inline bool ChangeSweepCommandParam::_internal_has_detection_param() const {
  return this != internal_default_instance() && detection_param_ != nullptr;
}
inline bool ChangeSweepCommandParam::has_detection_param() const {
  return _internal_has_detection_param();
}
inline const ::zb::dcts::scenario::detection::DetectionParam& ChangeSweepCommandParam::_internal_detection_param() const {
  const ::zb::dcts::scenario::detection::DetectionParam* p = detection_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::detection::DetectionParam*>(
      &::zb::dcts::scenario::detection::_DetectionParam_default_instance_);
}
inline const ::zb::dcts::scenario::detection::DetectionParam& ChangeSweepCommandParam::detection_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.automatic.ChangeSweepCommandParam.detection_param)
  return _internal_detection_param();
}
inline void ChangeSweepCommandParam::unsafe_arena_set_allocated_detection_param(
    ::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  detection_param_ = detection_param;
  if (detection_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.automatic.ChangeSweepCommandParam.detection_param)
}
inline ::zb::dcts::scenario::detection::DetectionParam* ChangeSweepCommandParam::release_detection_param() {
  auto temp = unsafe_arena_release_detection_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* ChangeSweepCommandParam::unsafe_arena_release_detection_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.automatic.ChangeSweepCommandParam.detection_param)
  
  ::zb::dcts::scenario::detection::DetectionParam* temp = detection_param_;
  detection_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* ChangeSweepCommandParam::_internal_mutable_detection_param() {
  
  if (detection_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::detection::DetectionParam>(GetArena());
    detection_param_ = p;
  }
  return detection_param_;
}
inline ::zb::dcts::scenario::detection::DetectionParam* ChangeSweepCommandParam::mutable_detection_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.automatic.ChangeSweepCommandParam.detection_param)
  return _internal_mutable_detection_param();
}
inline void ChangeSweepCommandParam::set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  if (detection_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param)->GetArena();
    if (message_arena != submessage_arena) {
      detection_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_param, submessage_arena);
    }
    
  } else {
    
  }
  detection_param_ = detection_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.automatic.ChangeSweepCommandParam.detection_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace automatic
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::automatic::AutoWork_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::automatic::AutoWork_Mode>() {
  return ::zb::dcts::scenario::automatic::AutoWork_Mode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fauto_2eproto
