// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/FFP/VSA.proto

#include "scenario/FFP/VSA.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IQData_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDCBank_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
class VSASourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSASource> _instance;
} _VSASource_default_instance_;
class ChannelizerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelizerParam> _instance;
} _ChannelizerParam_default_instance_;
class PulseShapingFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulseShapingFilter> _instance;
} _PulseShapingFilter_default_instance_;
class BaseParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseParam> _instance;
} _BaseParam_default_instance_;
class OOKParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OOKParam> _instance;
} _OOKParam_default_instance_;
class FSKParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FSKParam> _instance;
} _FSKParam_default_instance_;
class PSKParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PSKParam> _instance;
} _PSKParam_default_instance_;
class IQDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IQData> _instance;
} _IQData_default_instance_;
class VSAParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSAParam> _instance;
} _VSAParam_default_instance_;
class VSARequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSARequest> _instance;
} _VSARequest_default_instance_;
class VSAResult_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSAResult_Header> _instance;
} _VSAResult_Header_default_instance_;
class VSAResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VSAResult> _instance;
} _VSAResult_default_instance_;
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_BaseParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::BaseParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::BaseParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ChannelizerParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ChannelizerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ChannelizerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto}, {}};

static void InitDefaultsscc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_FSKParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::FSKParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::FSKParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_IQData_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_IQData_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::IQData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::IQData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IQData_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IQData_scenario_2fFFP_2fVSA_2eproto}, {}};

static void InitDefaultsscc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_OOKParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::OOKParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::OOKParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_PSKParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::PSKParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::PSKParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_PulseShapingFilter_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::PulseShapingFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::PulseShapingFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto}, {}};

static void InitDefaultsscc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_VSAParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::VSAParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::VSAParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_DDCBank_scenario_2fspectrum_2eproto.base,
      &scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_VSARequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::VSARequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::VSARequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_VSAResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::VSAResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::VSAResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_IQData_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_VSAResult_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::VSAResult_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::VSAResult_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_VSASource_scenario_2fFFP_2fVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_VSASource_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::VSASource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::VSASource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VSASource_scenario_2fFFP_2fVSA_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fFFP_2fVSA_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fFFP_2fVSA_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fFFP_2fVSA_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fFFP_2fVSA_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSASource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSASource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSASource, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSASource, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSASource, antenna_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, banksamplerate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, chfrequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, chsamplerate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, chbandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelizerParam, decimation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::PulseShapingFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::PulseShapingFilter, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::PulseShapingFilter, exceedbw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, datatype_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, chparam_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, filter_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, samplespersymbol_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::BaseParam, minoutputsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::OOKParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::OOKParam, baseparam_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::OOKParam, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::FSKParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::FSKParam, baseparam_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::FSKParam, maxdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::PSKParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::PSKParam, baseparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::IQData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::IQData, data_i_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::IQData, data_q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, bank_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, ook_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, fsk_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAParam, psk_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSARequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSARequest, source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSARequest, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult_Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult_Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult_Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult_Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult, demod_result_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::VSAResult, symbols_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::FFP::VSASource)},
  { 9, -1, sizeof(::zb::dcts::scenario::FFP::ChannelizerParam)},
  { 19, -1, sizeof(::zb::dcts::scenario::FFP::PulseShapingFilter)},
  { 26, -1, sizeof(::zb::dcts::scenario::FFP::BaseParam)},
  { 36, -1, sizeof(::zb::dcts::scenario::FFP::OOKParam)},
  { 43, -1, sizeof(::zb::dcts::scenario::FFP::FSKParam)},
  { 50, -1, sizeof(::zb::dcts::scenario::FFP::PSKParam)},
  { 56, -1, sizeof(::zb::dcts::scenario::FFP::IQData)},
  { 63, -1, sizeof(::zb::dcts::scenario::FFP::VSAParam)},
  { 73, -1, sizeof(::zb::dcts::scenario::FFP::VSARequest)},
  { 81, -1, sizeof(::zb::dcts::scenario::FFP::VSAResult_Header)},
  { 90, -1, sizeof(::zb::dcts::scenario::FFP::VSAResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_VSASource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ChannelizerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_PulseShapingFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_BaseParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_OOKParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_FSKParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_PSKParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_IQData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_VSAParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_VSARequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_VSAResult_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_VSAResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fFFP_2fVSA_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026scenario/FFP/VSA.proto\022\024zb.dcts.scenar"
  "io.FFP\032\ndcts.proto\032\023source/source.proto\032"
  "\027scenario/scenario.proto\032\027scenario/spect"
  "rum.proto\"m\n\tVSASource\022$\n\002id\030\001 \001(\0132\030.zb."
  "dcts.source.SourceId\022\017\n\007address\030\002 \001(\t\022\030\n"
  "\020attenuation_gain\030\003 \001(\005\022\017\n\007antenna\030\004 \001(\005"
  "\"~\n\020ChannelizerParam\022\026\n\016bankSampleRate\030\001"
  " \001(\001\022\023\n\013chFrequency\030\002 \001(\001\022\024\n\014chSampleRat"
  "e\030\003 \001(\001\022\023\n\013chBandwidth\030\004 \001(\001\022\022\n\ndecimati"
  "on\030\005 \001(\r\"~\n\022PulseShapingFilter\022;\n\004type\030\001"
  " \001(\0162-.zb.dcts.scenario.FFP.PulseShaping"
  "Filter.Type\022\020\n\010exceedBw\030\002 \001(\002\"\031\n\004Type\022\010\n"
  "\004NONE\020\000\022\007\n\003RRC\020\001\"\341\001\n\tBaseParam\0220\n\010dataTy"
  "pe\030\002 \001(\0162\036.zb.dcts.scenario.FFP.DataType"
  "\0227\n\007chParam\030\003 \001(\0132&.zb.dcts.scenario.FFP"
  ".ChannelizerParam\0228\n\006filter\030\004 \001(\0132(.zb.d"
  "cts.scenario.FFP.PulseShapingFilter\022\030\n\020s"
  "amplesPerSymbol\030\005 \001(\002\022\025\n\rminOutputSize\030\006"
  " \001(\r\"Q\n\010OOKParam\0222\n\tbaseParam\030\001 \001(\0132\037.zb"
  ".dcts.scenario.FFP.BaseParam\022\021\n\tthreshol"
  "d\030\002 \001(\002\"N\n\010FSKParam\0222\n\tbaseParam\030\001 \001(\0132\037"
  ".zb.dcts.scenario.FFP.BaseParam\022\016\n\006maxDe"
  "v\030\002 \001(\002\">\n\010PSKParam\0222\n\tbaseParam\030\001 \001(\0132\037"
  ".zb.dcts.scenario.FFP.BaseParam\"(\n\006IQDat"
  "a\022\016\n\006data_i\030\001 \003(\002\022\016\n\006data_q\030\002 \003(\002\"\213\002\n\010VS"
  "AParam\0220\n\004bank\030\001 \001(\0132\".zb.dcts.scenario."
  "spectrum.DDCBank\0224\n\004type\030\002 \001(\0162&.zb.dcts"
  ".scenario.FFP.DigitalDemodType\0221\n\took_pa"
  "ram\030\003 \001(\0132\036.zb.dcts.scenario.FFP.OOKPara"
  "m\0221\n\tfsk_param\030\004 \001(\0132\036.zb.dcts.scenario."
  "FFP.FSKParam\0221\n\tpsk_param\030\005 \001(\0132\036.zb.dct"
  "s.scenario.FFP.PSKParam\"\234\001\n\nVSARequest\022."
  "\n\010scenario\030\001 \001(\0132\034.zb.dcts.scenario.Scen"
  "arioId\022/\n\006source\030\002 \001(\0132\037.zb.dcts.scenari"
  "o.FFP.VSASource\022-\n\005param\030\003 \001(\0132\036.zb.dcts"
  ".scenario.FFP.VSAParam\"\255\002\n\tVSAResult\0226\n\006"
  "header\030\001 \001(\0132&.zb.dcts.scenario.FFP.VSAR"
  "esult.Header\0222\n\014demod_result\030\002 \001(\0132\034.zb."
  "dcts.scenario.FFP.IQData\022\017\n\007symbols\030\003 \001("
  "\014\032\242\001\n\006Header\022-\n\013result_from\030\001 \001(\0132\030.zb.d"
  "cts.source.SourceId\022\027\n\017sequence_number\030\002"
  " \001(\r\022$\n\ttime_span\030\003 \001(\0132\021.zb.dcts.TimeSp"
  "an\022*\n\017device_position\030\004 \001(\0132\021.zb.dcts.Po"
  "sition*\332\001\n\020DigitalDemodType\022\007\n\003OOK\020\000\022\010\n\004"
  "FSK2\020\001\022\010\n\004FSK4\020\002\022\010\n\004FSK8\020\003\022\t\n\005FSK16\020\004\022\007\n"
  "\003MSK\020\005\022\010\n\004BPSK\020\006\022\010\n\004QPSK\020\007\022\t\n\005CQPSK\020\010\022\010\n"
  "\004PSK8\020\t\022\t\n\005PSK16\020\n\022\013\n\007PI4QPSK\020\013\022\014\n\010PI4DQ"
  "PSK\020\014\022\t\n\005QAM16\020\020\022\t\n\005QAM32\020\021\022\t\n\005QAM64\020\022\022\007"
  "\n\003ASK\020\025\022\010\n\004ASK2\020\026\022\010\n\004ASK4\020\027*Y\n\010DataType\022"
  "\017\n\013COMPLEX_F32\020\000\022\017\n\013COMPLEX_I32\020\001\022\017\n\013COM"
  "PLEX_I16\020\002\022\014\n\010REAL_I16\020\003\022\014\n\010REAL_F32\020\0042\265"
  "\001\n\nVSAService\022S\n\014StartVSATask\022 .zb.dcts."
  "scenario.FFP.VSARequest\032\037.zb.dcts.scenar"
  "io.ScenarioReply\"\000\022R\n\013StopVSATask\022 .zb.d"
  "cts.scenario.ScenarioTaskId\032\037.zb.dcts.sc"
  "enario.ScenarioReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fFFP_2fVSA_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fFFP_2fVSA_2eproto_sccs[12] = {
  &scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_IQData_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto.base,
  &scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fFFP_2fVSA_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fFFP_2fVSA_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fFFP_2fVSA_2eproto, "scenario/FFP/VSA.proto", 2230,
  &descriptor_table_scenario_2fFFP_2fVSA_2eproto_once, descriptor_table_scenario_2fFFP_2fVSA_2eproto_sccs, descriptor_table_scenario_2fFFP_2fVSA_2eproto_deps, 12, 4,
  schemas, file_default_instances, TableStruct_scenario_2fFFP_2fVSA_2eproto::offsets,
  file_level_metadata_scenario_2fFFP_2fVSA_2eproto, 12, file_level_enum_descriptors_scenario_2fFFP_2fVSA_2eproto, file_level_service_descriptors_scenario_2fFFP_2fVSA_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fFFP_2fVSA_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fFFP_2fVSA_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PulseShapingFilter_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fFFP_2fVSA_2eproto);
  return file_level_enum_descriptors_scenario_2fFFP_2fVSA_2eproto[0];
}
bool PulseShapingFilter_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PulseShapingFilter_Type PulseShapingFilter::NONE;
constexpr PulseShapingFilter_Type PulseShapingFilter::RRC;
constexpr PulseShapingFilter_Type PulseShapingFilter::Type_MIN;
constexpr PulseShapingFilter_Type PulseShapingFilter::Type_MAX;
constexpr int PulseShapingFilter::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DigitalDemodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fFFP_2fVSA_2eproto);
  return file_level_enum_descriptors_scenario_2fFFP_2fVSA_2eproto[1];
}
bool DigitalDemodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fFFP_2fVSA_2eproto);
  return file_level_enum_descriptors_scenario_2fFFP_2fVSA_2eproto[2];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VSASource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_VSASource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class VSASource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const VSASource* msg);
};

const ::zb::dcts::source::SourceId&
VSASource::_Internal::id(const VSASource* msg) {
  return *msg->id_;
}
void VSASource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
VSASource::VSASource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.VSASource)
}
VSASource::VSASource(const VSASource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&attenuation_gain_, &from.attenuation_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.VSASource)
}

void VSASource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&id_)) + sizeof(antenna_));
}

VSASource::~VSASource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.VSASource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSASource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void VSASource::ArenaDtor(void* object) {
  VSASource* _this = reinterpret_cast< VSASource* >(object);
  (void)_this;
}
void VSASource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSASource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSASource& VSASource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSASource_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void VSASource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.VSASource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&attenuation_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSASource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.FFP.VSASource.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSASource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.VSASource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.FFP.VSASource.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_antenna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.VSASource)
  return target;
}

size_t VSASource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.VSASource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSASource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.VSASource)
  GOOGLE_DCHECK_NE(&from, this);
  const VSASource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSASource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.VSASource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.VSASource)
    MergeFrom(*source);
  }
}

void VSASource::MergeFrom(const VSASource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.VSASource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
}

void VSASource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.VSASource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSASource::CopyFrom(const VSASource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.VSASource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSASource::IsInitialized() const {
  return true;
}

void VSASource::InternalSwap(VSASource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSASource, antenna_)
      + sizeof(VSASource::antenna_)
      - PROTOBUF_FIELD_OFFSET(VSASource, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSASource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelizerParam::InitAsDefaultInstance() {
}
class ChannelizerParam::_Internal {
 public:
};

ChannelizerParam::ChannelizerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ChannelizerParam)
}
ChannelizerParam::ChannelizerParam(const ChannelizerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&banksamplerate_, &from.banksamplerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimation_) -
    reinterpret_cast<char*>(&banksamplerate_)) + sizeof(decimation_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ChannelizerParam)
}

void ChannelizerParam::SharedCtor() {
  ::memset(&banksamplerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimation_) -
      reinterpret_cast<char*>(&banksamplerate_)) + sizeof(decimation_));
}

ChannelizerParam::~ChannelizerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ChannelizerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelizerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChannelizerParam::ArenaDtor(void* object) {
  ChannelizerParam* _this = reinterpret_cast< ChannelizerParam* >(object);
  (void)_this;
}
void ChannelizerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelizerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelizerParam& ChannelizerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelizerParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void ChannelizerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ChannelizerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&banksamplerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decimation_) -
      reinterpret_cast<char*>(&banksamplerate_)) + sizeof(decimation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelizerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double bankSampleRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          banksamplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double chFrequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          chfrequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double chSampleRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          chsamplerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double chBandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          chbandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 decimation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          decimation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelizerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ChannelizerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double bankSampleRate = 1;
  if (!(this->banksamplerate() <= 0 && this->banksamplerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_banksamplerate(), target);
  }

  // double chFrequency = 2;
  if (!(this->chfrequency() <= 0 && this->chfrequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_chfrequency(), target);
  }

  // double chSampleRate = 3;
  if (!(this->chsamplerate() <= 0 && this->chsamplerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_chsamplerate(), target);
  }

  // double chBandwidth = 4;
  if (!(this->chbandwidth() <= 0 && this->chbandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_chbandwidth(), target);
  }

  // uint32 decimation = 5;
  if (this->decimation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_decimation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ChannelizerParam)
  return target;
}

size_t ChannelizerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ChannelizerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bankSampleRate = 1;
  if (!(this->banksamplerate() <= 0 && this->banksamplerate() >= 0)) {
    total_size += 1 + 8;
  }

  // double chFrequency = 2;
  if (!(this->chfrequency() <= 0 && this->chfrequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double chSampleRate = 3;
  if (!(this->chsamplerate() <= 0 && this->chsamplerate() >= 0)) {
    total_size += 1 + 8;
  }

  // double chBandwidth = 4;
  if (!(this->chbandwidth() <= 0 && this->chbandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 decimation = 5;
  if (this->decimation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelizerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ChannelizerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelizerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelizerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ChannelizerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ChannelizerParam)
    MergeFrom(*source);
  }
}

void ChannelizerParam::MergeFrom(const ChannelizerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ChannelizerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.banksamplerate() <= 0 && from.banksamplerate() >= 0)) {
    _internal_set_banksamplerate(from._internal_banksamplerate());
  }
  if (!(from.chfrequency() <= 0 && from.chfrequency() >= 0)) {
    _internal_set_chfrequency(from._internal_chfrequency());
  }
  if (!(from.chsamplerate() <= 0 && from.chsamplerate() >= 0)) {
    _internal_set_chsamplerate(from._internal_chsamplerate());
  }
  if (!(from.chbandwidth() <= 0 && from.chbandwidth() >= 0)) {
    _internal_set_chbandwidth(from._internal_chbandwidth());
  }
  if (from.decimation() != 0) {
    _internal_set_decimation(from._internal_decimation());
  }
}

void ChannelizerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ChannelizerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelizerParam::CopyFrom(const ChannelizerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ChannelizerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelizerParam::IsInitialized() const {
  return true;
}

void ChannelizerParam::InternalSwap(ChannelizerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelizerParam, decimation_)
      + sizeof(ChannelizerParam::decimation_)
      - PROTOBUF_FIELD_OFFSET(ChannelizerParam, banksamplerate_)>(
          reinterpret_cast<char*>(&banksamplerate_),
          reinterpret_cast<char*>(&other->banksamplerate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelizerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PulseShapingFilter::InitAsDefaultInstance() {
}
class PulseShapingFilter::_Internal {
 public:
};

PulseShapingFilter::PulseShapingFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.PulseShapingFilter)
}
PulseShapingFilter::PulseShapingFilter(const PulseShapingFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&exceedbw_) -
    reinterpret_cast<char*>(&type_)) + sizeof(exceedbw_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.PulseShapingFilter)
}

void PulseShapingFilter::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exceedbw_) -
      reinterpret_cast<char*>(&type_)) + sizeof(exceedbw_));
}

PulseShapingFilter::~PulseShapingFilter() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.PulseShapingFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulseShapingFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PulseShapingFilter::ArenaDtor(void* object) {
  PulseShapingFilter* _this = reinterpret_cast< PulseShapingFilter* >(object);
  (void)_this;
}
void PulseShapingFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulseShapingFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulseShapingFilter& PulseShapingFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulseShapingFilter_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void PulseShapingFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exceedbw_) -
      reinterpret_cast<char*>(&type_)) + sizeof(exceedbw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulseShapingFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.PulseShapingFilter.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::FFP::PulseShapingFilter_Type>(val));
        } else goto handle_unusual;
        continue;
      // float exceedBw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          exceedbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulseShapingFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.PulseShapingFilter.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // float exceedBw = 2;
  if (!(this->exceedbw() <= 0 && this->exceedbw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_exceedbw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.PulseShapingFilter)
  return target;
}

size_t PulseShapingFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.PulseShapingFilter.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float exceedBw = 2;
  if (!(this->exceedbw() <= 0 && this->exceedbw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulseShapingFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseShapingFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulseShapingFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.PulseShapingFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.PulseShapingFilter)
    MergeFrom(*source);
  }
}

void PulseShapingFilter::MergeFrom(const PulseShapingFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.exceedbw() <= 0 && from.exceedbw() >= 0)) {
    _internal_set_exceedbw(from._internal_exceedbw());
  }
}

void PulseShapingFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseShapingFilter::CopyFrom(const PulseShapingFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.PulseShapingFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseShapingFilter::IsInitialized() const {
  return true;
}

void PulseShapingFilter::InternalSwap(PulseShapingFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulseShapingFilter, exceedbw_)
      + sizeof(PulseShapingFilter::exceedbw_)
      - PROTOBUF_FIELD_OFFSET(PulseShapingFilter, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulseShapingFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_BaseParam_default_instance_._instance.get_mutable()->chparam_ = const_cast< ::zb::dcts::scenario::FFP::ChannelizerParam*>(
      ::zb::dcts::scenario::FFP::ChannelizerParam::internal_default_instance());
  ::zb::dcts::scenario::FFP::_BaseParam_default_instance_._instance.get_mutable()->filter_ = const_cast< ::zb::dcts::scenario::FFP::PulseShapingFilter*>(
      ::zb::dcts::scenario::FFP::PulseShapingFilter::internal_default_instance());
}
class BaseParam::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::ChannelizerParam& chparam(const BaseParam* msg);
  static const ::zb::dcts::scenario::FFP::PulseShapingFilter& filter(const BaseParam* msg);
};

const ::zb::dcts::scenario::FFP::ChannelizerParam&
BaseParam::_Internal::chparam(const BaseParam* msg) {
  return *msg->chparam_;
}
const ::zb::dcts::scenario::FFP::PulseShapingFilter&
BaseParam::_Internal::filter(const BaseParam* msg) {
  return *msg->filter_;
}
BaseParam::BaseParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.BaseParam)
}
BaseParam::BaseParam(const BaseParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chparam()) {
    chparam_ = new ::zb::dcts::scenario::FFP::ChannelizerParam(*from.chparam_);
  } else {
    chparam_ = nullptr;
  }
  if (from._internal_has_filter()) {
    filter_ = new ::zb::dcts::scenario::FFP::PulseShapingFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  ::memcpy(&datatype_, &from.datatype_,
    static_cast<size_t>(reinterpret_cast<char*>(&minoutputsize_) -
    reinterpret_cast<char*>(&datatype_)) + sizeof(minoutputsize_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.BaseParam)
}

void BaseParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&chparam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minoutputsize_) -
      reinterpret_cast<char*>(&chparam_)) + sizeof(minoutputsize_));
}

BaseParam::~BaseParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.BaseParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete chparam_;
  if (this != internal_default_instance()) delete filter_;
}

void BaseParam::ArenaDtor(void* object) {
  BaseParam* _this = reinterpret_cast< BaseParam* >(object);
  (void)_this;
}
void BaseParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseParam& BaseParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void BaseParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.BaseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && chparam_ != nullptr) {
    delete chparam_;
  }
  chparam_ = nullptr;
  if (GetArena() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  ::memset(&datatype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minoutputsize_) -
      reinterpret_cast<char*>(&datatype_)) + sizeof(minoutputsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.DataType dataType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::zb::dcts::scenario::FFP::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ChannelizerParam chParam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.PulseShapingFilter filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float samplesPerSymbol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          samplespersymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 minOutputSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          minoutputsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.BaseParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.DataType dataType = 2;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_datatype(), target);
  }

  // .zb.dcts.scenario.FFP.ChannelizerParam chParam = 3;
  if (this->has_chparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chparam(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.PulseShapingFilter filter = 4;
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::filter(this), target, stream);
  }

  // float samplesPerSymbol = 5;
  if (!(this->samplespersymbol() <= 0 && this->samplespersymbol() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_samplespersymbol(), target);
  }

  // uint32 minOutputSize = 6;
  if (this->minoutputsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_minoutputsize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.BaseParam)
  return target;
}

size_t BaseParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.BaseParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.ChannelizerParam chParam = 3;
  if (this->has_chparam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chparam_);
  }

  // .zb.dcts.scenario.FFP.PulseShapingFilter filter = 4;
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .zb.dcts.scenario.FFP.DataType dataType = 2;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  // float samplesPerSymbol = 5;
  if (!(this->samplespersymbol() <= 0 && this->samplespersymbol() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 minOutputSize = 6;
  if (this->minoutputsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minoutputsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.BaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.BaseParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.BaseParam)
    MergeFrom(*source);
  }
}

void BaseParam::MergeFrom(const BaseParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.BaseParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chparam()) {
    _internal_mutable_chparam()->::zb::dcts::scenario::FFP::ChannelizerParam::MergeFrom(from._internal_chparam());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::zb::dcts::scenario::FFP::PulseShapingFilter::MergeFrom(from._internal_filter());
  }
  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (!(from.samplespersymbol() <= 0 && from.samplespersymbol() >= 0)) {
    _internal_set_samplespersymbol(from._internal_samplespersymbol());
  }
  if (from.minoutputsize() != 0) {
    _internal_set_minoutputsize(from._internal_minoutputsize());
  }
}

void BaseParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.BaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseParam::CopyFrom(const BaseParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.BaseParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseParam::IsInitialized() const {
  return true;
}

void BaseParam::InternalSwap(BaseParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseParam, minoutputsize_)
      + sizeof(BaseParam::minoutputsize_)
      - PROTOBUF_FIELD_OFFSET(BaseParam, chparam_)>(
          reinterpret_cast<char*>(&chparam_),
          reinterpret_cast<char*>(&other->chparam_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OOKParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_OOKParam_default_instance_._instance.get_mutable()->baseparam_ = const_cast< ::zb::dcts::scenario::FFP::BaseParam*>(
      ::zb::dcts::scenario::FFP::BaseParam::internal_default_instance());
}
class OOKParam::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::BaseParam& baseparam(const OOKParam* msg);
};

const ::zb::dcts::scenario::FFP::BaseParam&
OOKParam::_Internal::baseparam(const OOKParam* msg) {
  return *msg->baseparam_;
}
OOKParam::OOKParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.OOKParam)
}
OOKParam::OOKParam(const OOKParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseparam()) {
    baseparam_ = new ::zb::dcts::scenario::FFP::BaseParam(*from.baseparam_);
  } else {
    baseparam_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.OOKParam)
}

void OOKParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&baseparam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&baseparam_)) + sizeof(threshold_));
}

OOKParam::~OOKParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.OOKParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OOKParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete baseparam_;
}

void OOKParam::ArenaDtor(void* object) {
  OOKParam* _this = reinterpret_cast< OOKParam* >(object);
  (void)_this;
}
void OOKParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OOKParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OOKParam& OOKParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OOKParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void OOKParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.OOKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && baseparam_ != nullptr) {
    delete baseparam_;
  }
  baseparam_ = nullptr;
  threshold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OOKParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OOKParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.OOKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::baseparam(this), target, stream);
  }

  // float threshold = 2;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.OOKParam)
  return target;
}

size_t OOKParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.OOKParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseparam_);
  }

  // float threshold = 2;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OOKParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.OOKParam)
  GOOGLE_DCHECK_NE(&from, this);
  const OOKParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OOKParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.OOKParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.OOKParam)
    MergeFrom(*source);
  }
}

void OOKParam::MergeFrom(const OOKParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.OOKParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseparam()) {
    _internal_mutable_baseparam()->::zb::dcts::scenario::FFP::BaseParam::MergeFrom(from._internal_baseparam());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void OOKParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.OOKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OOKParam::CopyFrom(const OOKParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.OOKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OOKParam::IsInitialized() const {
  return true;
}

void OOKParam::InternalSwap(OOKParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OOKParam, threshold_)
      + sizeof(OOKParam::threshold_)
      - PROTOBUF_FIELD_OFFSET(OOKParam, baseparam_)>(
          reinterpret_cast<char*>(&baseparam_),
          reinterpret_cast<char*>(&other->baseparam_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OOKParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FSKParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_FSKParam_default_instance_._instance.get_mutable()->baseparam_ = const_cast< ::zb::dcts::scenario::FFP::BaseParam*>(
      ::zb::dcts::scenario::FFP::BaseParam::internal_default_instance());
}
class FSKParam::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::BaseParam& baseparam(const FSKParam* msg);
};

const ::zb::dcts::scenario::FFP::BaseParam&
FSKParam::_Internal::baseparam(const FSKParam* msg) {
  return *msg->baseparam_;
}
FSKParam::FSKParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.FSKParam)
}
FSKParam::FSKParam(const FSKParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseparam()) {
    baseparam_ = new ::zb::dcts::scenario::FFP::BaseParam(*from.baseparam_);
  } else {
    baseparam_ = nullptr;
  }
  maxdev_ = from.maxdev_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.FSKParam)
}

void FSKParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&baseparam_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxdev_) -
      reinterpret_cast<char*>(&baseparam_)) + sizeof(maxdev_));
}

FSKParam::~FSKParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.FSKParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FSKParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete baseparam_;
}

void FSKParam::ArenaDtor(void* object) {
  FSKParam* _this = reinterpret_cast< FSKParam* >(object);
  (void)_this;
}
void FSKParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FSKParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FSKParam& FSKParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FSKParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void FSKParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.FSKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && baseparam_ != nullptr) {
    delete baseparam_;
  }
  baseparam_ = nullptr;
  maxdev_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FSKParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float maxDev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          maxdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FSKParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.FSKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::baseparam(this), target, stream);
  }

  // float maxDev = 2;
  if (!(this->maxdev() <= 0 && this->maxdev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maxdev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.FSKParam)
  return target;
}

size_t FSKParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.FSKParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseparam_);
  }

  // float maxDev = 2;
  if (!(this->maxdev() <= 0 && this->maxdev() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FSKParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.FSKParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FSKParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FSKParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.FSKParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.FSKParam)
    MergeFrom(*source);
  }
}

void FSKParam::MergeFrom(const FSKParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.FSKParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseparam()) {
    _internal_mutable_baseparam()->::zb::dcts::scenario::FFP::BaseParam::MergeFrom(from._internal_baseparam());
  }
  if (!(from.maxdev() <= 0 && from.maxdev() >= 0)) {
    _internal_set_maxdev(from._internal_maxdev());
  }
}

void FSKParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.FSKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FSKParam::CopyFrom(const FSKParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.FSKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSKParam::IsInitialized() const {
  return true;
}

void FSKParam::InternalSwap(FSKParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FSKParam, maxdev_)
      + sizeof(FSKParam::maxdev_)
      - PROTOBUF_FIELD_OFFSET(FSKParam, baseparam_)>(
          reinterpret_cast<char*>(&baseparam_),
          reinterpret_cast<char*>(&other->baseparam_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FSKParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PSKParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_PSKParam_default_instance_._instance.get_mutable()->baseparam_ = const_cast< ::zb::dcts::scenario::FFP::BaseParam*>(
      ::zb::dcts::scenario::FFP::BaseParam::internal_default_instance());
}
class PSKParam::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::BaseParam& baseparam(const PSKParam* msg);
};

const ::zb::dcts::scenario::FFP::BaseParam&
PSKParam::_Internal::baseparam(const PSKParam* msg) {
  return *msg->baseparam_;
}
PSKParam::PSKParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.PSKParam)
}
PSKParam::PSKParam(const PSKParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseparam()) {
    baseparam_ = new ::zb::dcts::scenario::FFP::BaseParam(*from.baseparam_);
  } else {
    baseparam_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.PSKParam)
}

void PSKParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto.base);
  baseparam_ = nullptr;
}

PSKParam::~PSKParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.PSKParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PSKParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete baseparam_;
}

void PSKParam::ArenaDtor(void* object) {
  PSKParam* _this = reinterpret_cast< PSKParam* >(object);
  (void)_this;
}
void PSKParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PSKParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PSKParam& PSKParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PSKParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void PSKParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.PSKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && baseparam_ != nullptr) {
    delete baseparam_;
  }
  baseparam_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSKParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PSKParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.PSKParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::baseparam(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.PSKParam)
  return target;
}

size_t PSKParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.PSKParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.BaseParam baseParam = 1;
  if (this->has_baseparam()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *baseparam_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PSKParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.PSKParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PSKParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PSKParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.PSKParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.PSKParam)
    MergeFrom(*source);
  }
}

void PSKParam::MergeFrom(const PSKParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.PSKParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_baseparam()) {
    _internal_mutable_baseparam()->::zb::dcts::scenario::FFP::BaseParam::MergeFrom(from._internal_baseparam());
  }
}

void PSKParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.PSKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSKParam::CopyFrom(const PSKParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.PSKParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSKParam::IsInitialized() const {
  return true;
}

void PSKParam::InternalSwap(PSKParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(baseparam_, other->baseparam_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSKParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IQData::InitAsDefaultInstance() {
}
class IQData::_Internal {
 public:
};

IQData::IQData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_i_(arena),
  data_q_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.IQData)
}
IQData::IQData(const IQData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_i_(from.data_i_),
      data_q_(from.data_q_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.IQData)
}

void IQData::SharedCtor() {
}

IQData::~IQData() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.IQData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IQData::ArenaDtor(void* object) {
  IQData* _this = reinterpret_cast< IQData* >(object);
  (void)_this;
}
void IQData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IQData& IQData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IQData_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void IQData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.IQData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_i_.Clear();
  data_q_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data_i(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float data_q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_data_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.IQData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data_i = 1;
  if (this->_internal_data_i_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data_i(), target);
  }

  // repeated float data_q = 2;
  if (this->_internal_data_q_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data_q(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.IQData)
  return target;
}

size_t IQData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.IQData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data_i = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_i_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float data_q = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_q_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.IQData)
  GOOGLE_DCHECK_NE(&from, this);
  const IQData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.IQData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.IQData)
    MergeFrom(*source);
  }
}

void IQData::MergeFrom(const IQData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.IQData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_i_.MergeFrom(from.data_i_);
  data_q_.MergeFrom(from.data_q_);
}

void IQData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.IQData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQData::CopyFrom(const IQData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.IQData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQData::IsInitialized() const {
  return true;
}

void IQData::InternalSwap(IQData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_i_.InternalSwap(&other->data_i_);
  data_q_.InternalSwap(&other->data_q_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IQData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VSAParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_VSAParam_default_instance_._instance.get_mutable()->bank_ = const_cast< ::zb::dcts::scenario::spectrum::DDCBank*>(
      ::zb::dcts::scenario::spectrum::DDCBank::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAParam_default_instance_._instance.get_mutable()->ook_param_ = const_cast< ::zb::dcts::scenario::FFP::OOKParam*>(
      ::zb::dcts::scenario::FFP::OOKParam::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAParam_default_instance_._instance.get_mutable()->fsk_param_ = const_cast< ::zb::dcts::scenario::FFP::FSKParam*>(
      ::zb::dcts::scenario::FFP::FSKParam::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAParam_default_instance_._instance.get_mutable()->psk_param_ = const_cast< ::zb::dcts::scenario::FFP::PSKParam*>(
      ::zb::dcts::scenario::FFP::PSKParam::internal_default_instance());
}
class VSAParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::DDCBank& bank(const VSAParam* msg);
  static const ::zb::dcts::scenario::FFP::OOKParam& ook_param(const VSAParam* msg);
  static const ::zb::dcts::scenario::FFP::FSKParam& fsk_param(const VSAParam* msg);
  static const ::zb::dcts::scenario::FFP::PSKParam& psk_param(const VSAParam* msg);
};

const ::zb::dcts::scenario::spectrum::DDCBank&
VSAParam::_Internal::bank(const VSAParam* msg) {
  return *msg->bank_;
}
const ::zb::dcts::scenario::FFP::OOKParam&
VSAParam::_Internal::ook_param(const VSAParam* msg) {
  return *msg->ook_param_;
}
const ::zb::dcts::scenario::FFP::FSKParam&
VSAParam::_Internal::fsk_param(const VSAParam* msg) {
  return *msg->fsk_param_;
}
const ::zb::dcts::scenario::FFP::PSKParam&
VSAParam::_Internal::psk_param(const VSAParam* msg) {
  return *msg->psk_param_;
}
void VSAParam::clear_bank() {
  if (GetArena() == nullptr && bank_ != nullptr) {
    delete bank_;
  }
  bank_ = nullptr;
}
VSAParam::VSAParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.VSAParam)
}
VSAParam::VSAParam(const VSAParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bank()) {
    bank_ = new ::zb::dcts::scenario::spectrum::DDCBank(*from.bank_);
  } else {
    bank_ = nullptr;
  }
  if (from._internal_has_ook_param()) {
    ook_param_ = new ::zb::dcts::scenario::FFP::OOKParam(*from.ook_param_);
  } else {
    ook_param_ = nullptr;
  }
  if (from._internal_has_fsk_param()) {
    fsk_param_ = new ::zb::dcts::scenario::FFP::FSKParam(*from.fsk_param_);
  } else {
    fsk_param_ = nullptr;
  }
  if (from._internal_has_psk_param()) {
    psk_param_ = new ::zb::dcts::scenario::FFP::PSKParam(*from.psk_param_);
  } else {
    psk_param_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.VSAParam)
}

void VSAParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&bank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&bank_)) + sizeof(type_));
}

VSAParam::~VSAParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.VSAParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSAParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bank_;
  if (this != internal_default_instance()) delete ook_param_;
  if (this != internal_default_instance()) delete fsk_param_;
  if (this != internal_default_instance()) delete psk_param_;
}

void VSAParam::ArenaDtor(void* object) {
  VSAParam* _this = reinterpret_cast< VSAParam* >(object);
  (void)_this;
}
void VSAParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSAParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSAParam& VSAParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void VSAParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.VSAParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bank_ != nullptr) {
    delete bank_;
  }
  bank_ = nullptr;
  if (GetArena() == nullptr && ook_param_ != nullptr) {
    delete ook_param_;
  }
  ook_param_ = nullptr;
  if (GetArena() == nullptr && fsk_param_ != nullptr) {
    delete fsk_param_;
  }
  fsk_param_ = nullptr;
  if (GetArena() == nullptr && psk_param_ != nullptr) {
    delete psk_param_;
  }
  psk_param_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSAParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.DDCBank bank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.DigitalDemodType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::FFP::DigitalDemodType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.OOKParam ook_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ook_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.FSKParam fsk_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fsk_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.PSKParam psk_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psk_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSAParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.VSAParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.DDCBank bank = 1;
  if (this->has_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bank(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.DigitalDemodType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .zb.dcts.scenario.FFP.OOKParam ook_param = 3;
  if (this->has_ook_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ook_param(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.FSKParam fsk_param = 4;
  if (this->has_fsk_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fsk_param(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.PSKParam psk_param = 5;
  if (this->has_psk_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::psk_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.VSAParam)
  return target;
}

size_t VSAParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.VSAParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.DDCBank bank = 1;
  if (this->has_bank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bank_);
  }

  // .zb.dcts.scenario.FFP.OOKParam ook_param = 3;
  if (this->has_ook_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ook_param_);
  }

  // .zb.dcts.scenario.FFP.FSKParam fsk_param = 4;
  if (this->has_fsk_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fsk_param_);
  }

  // .zb.dcts.scenario.FFP.PSKParam psk_param = 5;
  if (this->has_psk_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *psk_param_);
  }

  // .zb.dcts.scenario.FFP.DigitalDemodType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSAParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.VSAParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VSAParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSAParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.VSAParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.VSAParam)
    MergeFrom(*source);
  }
}

void VSAParam::MergeFrom(const VSAParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.VSAParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bank()) {
    _internal_mutable_bank()->::zb::dcts::scenario::spectrum::DDCBank::MergeFrom(from._internal_bank());
  }
  if (from.has_ook_param()) {
    _internal_mutable_ook_param()->::zb::dcts::scenario::FFP::OOKParam::MergeFrom(from._internal_ook_param());
  }
  if (from.has_fsk_param()) {
    _internal_mutable_fsk_param()->::zb::dcts::scenario::FFP::FSKParam::MergeFrom(from._internal_fsk_param());
  }
  if (from.has_psk_param()) {
    _internal_mutable_psk_param()->::zb::dcts::scenario::FFP::PSKParam::MergeFrom(from._internal_psk_param());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void VSAParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.VSAParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSAParam::CopyFrom(const VSAParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.VSAParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSAParam::IsInitialized() const {
  return true;
}

void VSAParam::InternalSwap(VSAParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSAParam, type_)
      + sizeof(VSAParam::type_)
      - PROTOBUF_FIELD_OFFSET(VSAParam, bank_)>(
          reinterpret_cast<char*>(&bank_),
          reinterpret_cast<char*>(&other->bank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSAParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VSARequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_VSARequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSARequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::zb::dcts::scenario::FFP::VSASource*>(
      ::zb::dcts::scenario::FFP::VSASource::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSARequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::FFP::VSAParam*>(
      ::zb::dcts::scenario::FFP::VSAParam::internal_default_instance());
}
class VSARequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const VSARequest* msg);
  static const ::zb::dcts::scenario::FFP::VSASource& source(const VSARequest* msg);
  static const ::zb::dcts::scenario::FFP::VSAParam& param(const VSARequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
VSARequest::_Internal::scenario(const VSARequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::FFP::VSASource&
VSARequest::_Internal::source(const VSARequest* msg) {
  return *msg->source_;
}
const ::zb::dcts::scenario::FFP::VSAParam&
VSARequest::_Internal::param(const VSARequest* msg) {
  return *msg->param_;
}
void VSARequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
VSARequest::VSARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.VSARequest)
}
VSARequest::VSARequest(const VSARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::scenario::FFP::VSASource(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::FFP::VSAParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.VSARequest)
}

void VSARequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(param_));
}

VSARequest::~VSARequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.VSARequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete param_;
}

void VSARequest::ArenaDtor(void* object) {
  VSARequest* _this = reinterpret_cast< VSARequest* >(object);
  (void)_this;
}
void VSARequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSARequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSARequest& VSARequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSARequest_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void VSARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.VSARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSARequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.VSASource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.VSAParam param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSARequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.VSARequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.VSASource source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.VSAParam param = 3;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.VSARequest)
  return target;
}

size_t VSARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.VSARequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.FFP.VSASource source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .zb.dcts.scenario.FFP.VSAParam param = 3;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSARequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.VSARequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VSARequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSARequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.VSARequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.VSARequest)
    MergeFrom(*source);
  }
}

void VSARequest::MergeFrom(const VSARequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.VSARequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::scenario::FFP::VSASource::MergeFrom(from._internal_source());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::FFP::VSAParam::MergeFrom(from._internal_param());
  }
}

void VSARequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.VSARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSARequest::CopyFrom(const VSARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.VSARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSARequest::IsInitialized() const {
  return true;
}

void VSARequest::InternalSwap(VSARequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSARequest, param_)
      + sizeof(VSARequest::param_)
      - PROTOBUF_FIELD_OFFSET(VSARequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSARequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VSAResult_Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_VSAResult_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAResult_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAResult_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class VSAResult_Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const VSAResult_Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const VSAResult_Header* msg);
  static const ::zb::dcts::Position& device_position(const VSAResult_Header* msg);
};

const ::zb::dcts::source::SourceId&
VSAResult_Header::_Internal::result_from(const VSAResult_Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
VSAResult_Header::_Internal::time_span(const VSAResult_Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
VSAResult_Header::_Internal::device_position(const VSAResult_Header* msg) {
  return *msg->device_position_;
}
void VSAResult_Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void VSAResult_Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void VSAResult_Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
VSAResult_Header::VSAResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.VSAResult.Header)
}
VSAResult_Header::VSAResult_Header(const VSAResult_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.VSAResult.Header)
}

void VSAResult_Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

VSAResult_Header::~VSAResult_Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.VSAResult.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSAResult_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void VSAResult_Header::ArenaDtor(void* object) {
  VSAResult_Header* _this = reinterpret_cast< VSAResult_Header* >(object);
  (void)_this;
}
void VSAResult_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSAResult_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSAResult_Header& VSAResult_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSAResult_Header_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void VSAResult_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.VSAResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSAResult_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSAResult_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.VSAResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.VSAResult.Header)
  return target;
}

size_t VSAResult_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.VSAResult.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSAResult_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.VSAResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const VSAResult_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSAResult_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.VSAResult.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.VSAResult.Header)
    MergeFrom(*source);
  }
}

void VSAResult_Header::MergeFrom(const VSAResult_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.VSAResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void VSAResult_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.VSAResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSAResult_Header::CopyFrom(const VSAResult_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.VSAResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSAResult_Header::IsInitialized() const {
  return true;
}

void VSAResult_Header::InternalSwap(VSAResult_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSAResult_Header, sequence_number_)
      + sizeof(VSAResult_Header::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(VSAResult_Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSAResult_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VSAResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_VSAResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::FFP::VSAResult_Header*>(
      ::zb::dcts::scenario::FFP::VSAResult_Header::internal_default_instance());
  ::zb::dcts::scenario::FFP::_VSAResult_default_instance_._instance.get_mutable()->demod_result_ = const_cast< ::zb::dcts::scenario::FFP::IQData*>(
      ::zb::dcts::scenario::FFP::IQData::internal_default_instance());
}
class VSAResult::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::VSAResult_Header& header(const VSAResult* msg);
  static const ::zb::dcts::scenario::FFP::IQData& demod_result(const VSAResult* msg);
};

const ::zb::dcts::scenario::FFP::VSAResult_Header&
VSAResult::_Internal::header(const VSAResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::FFP::IQData&
VSAResult::_Internal::demod_result(const VSAResult* msg) {
  return *msg->demod_result_;
}
VSAResult::VSAResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.VSAResult)
}
VSAResult::VSAResult(const VSAResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbols().empty()) {
    symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbols(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::FFP::VSAResult_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_demod_result()) {
    demod_result_ = new ::zb::dcts::scenario::FFP::IQData(*from.demod_result_);
  } else {
    demod_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.VSAResult)
}

void VSAResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto.base);
  symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demod_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(demod_result_));
}

VSAResult::~VSAResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.VSAResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VSAResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete demod_result_;
}

void VSAResult::ArenaDtor(void* object) {
  VSAResult* _this = reinterpret_cast< VSAResult* >(object);
  (void)_this;
}
void VSAResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VSAResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VSAResult& VSAResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VSAResult_scenario_2fFFP_2fVSA_2eproto.base);
  return *internal_default_instance();
}


void VSAResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.VSAResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && demod_result_ != nullptr) {
    delete demod_result_;
  }
  demod_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VSAResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.VSAResult.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.IQData demod_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_demod_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes symbols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VSAResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.VSAResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.VSAResult.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.IQData demod_result = 2;
  if (this->has_demod_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::demod_result(this), target, stream);
  }

  // bytes symbols = 3;
  if (this->symbols().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_symbols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.VSAResult)
  return target;
}

size_t VSAResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.VSAResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes symbols = 3;
  if (this->symbols().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_symbols());
  }

  // .zb.dcts.scenario.FFP.VSAResult.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.FFP.IQData demod_result = 2;
  if (this->has_demod_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *demod_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VSAResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.VSAResult)
  GOOGLE_DCHECK_NE(&from, this);
  const VSAResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VSAResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.VSAResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.VSAResult)
    MergeFrom(*source);
  }
}

void VSAResult::MergeFrom(const VSAResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.VSAResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbols().size() > 0) {
    _internal_set_symbols(from._internal_symbols());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::FFP::VSAResult_Header::MergeFrom(from._internal_header());
  }
  if (from.has_demod_result()) {
    _internal_mutable_demod_result()->::zb::dcts::scenario::FFP::IQData::MergeFrom(from._internal_demod_result());
  }
}

void VSAResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.VSAResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSAResult::CopyFrom(const VSAResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.VSAResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSAResult::IsInitialized() const {
  return true;
}

void VSAResult::InternalSwap(VSAResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbols_.Swap(&other->symbols_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VSAResult, demod_result_)
      + sizeof(VSAResult::demod_result_)
      - PROTOBUF_FIELD_OFFSET(VSAResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VSAResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::VSASource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::VSASource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::VSASource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ChannelizerParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ChannelizerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ChannelizerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::PulseShapingFilter* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::PulseShapingFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::PulseShapingFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::BaseParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::BaseParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::BaseParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::OOKParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::OOKParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::OOKParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::FSKParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::FSKParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::FSKParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::PSKParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::PSKParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::PSKParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::IQData* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::IQData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::IQData >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::VSAParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::VSAParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::VSAParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::VSARequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::VSARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::VSARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::VSAResult_Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::VSAResult_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::VSAResult_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::VSAResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::VSAResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::VSAResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
