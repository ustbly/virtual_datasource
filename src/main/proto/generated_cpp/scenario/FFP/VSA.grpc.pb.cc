// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/FFP/VSA.proto

#include "scenario/FFP/VSA.pb.h"
#include "scenario/FFP/VSA.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {

static const char* VSAService_method_names[] = {
  "/zb.dcts.scenario.FFP.VSAService/StartVSATask",
  "/zb.dcts.scenario.FFP.VSAService/StopVSATask",
};

std::unique_ptr< VSAService::Stub> VSAService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VSAService::Stub> stub(new VSAService::Stub(channel));
  return stub;
}

VSAService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartVSATask_(VSAService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopVSATask_(VSAService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VSAService::Stub::StartVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::VSARequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartVSATask_, context, request, response);
}

void VSAService::Stub::experimental_async::StartVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::VSARequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartVSATask_, context, request, response, std::move(f));
}

void VSAService::Stub::experimental_async::StartVSATask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartVSATask_, context, request, response, std::move(f));
}

void VSAService::Stub::experimental_async::StartVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::VSARequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartVSATask_, context, request, response, reactor);
}

void VSAService::Stub::experimental_async::StartVSATask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartVSATask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* VSAService::Stub::AsyncStartVSATaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::VSARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartVSATask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* VSAService::Stub::PrepareAsyncStartVSATaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::VSARequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartVSATask_, context, request, false);
}

::grpc::Status VSAService::Stub::StopVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopVSATask_, context, request, response);
}

void VSAService::Stub::experimental_async::StopVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVSATask_, context, request, response, std::move(f));
}

void VSAService::Stub::experimental_async::StopVSATask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVSATask_, context, request, response, std::move(f));
}

void VSAService::Stub::experimental_async::StopVSATask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVSATask_, context, request, response, reactor);
}

void VSAService::Stub::experimental_async::StopVSATask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVSATask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* VSAService::Stub::AsyncStopVSATaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopVSATask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* VSAService::Stub::PrepareAsyncStopVSATaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopVSATask_, context, request, false);
}

VSAService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VSAService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VSAService::Service, ::zb::dcts::scenario::FFP::VSARequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&VSAService::Service::StartVSATask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VSAService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VSAService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&VSAService::Service::StopVSATask), this)));
}

VSAService::Service::~Service() {
}

::grpc::Status VSAService::Service::StartVSATask(::grpc::ServerContext* context, const ::zb::dcts::scenario::FFP::VSARequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status VSAService::Service::StopVSATask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace FFP

