// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/FFP/modIdentify.proto

#include "scenario/FFP/modIdentify.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fmodIdentify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fmodIdentify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fmodIdentify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDCBank_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
class ModSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModSource> _instance;
} _ModSource_default_instance_;
class ModIdentifyParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModIdentifyParam> _instance;
} _ModIdentifyParam_default_instance_;
class ModIdentifyResult_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModIdentifyResult_Header> _instance;
} _ModIdentifyResult_Header_default_instance_;
class ModIdentifyResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModIdentifyResult> _instance;
} _ModIdentifyResult_default_instance_;
class ModIdentifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModIdentifyRequest> _instance;
} _ModIdentifyRequest_default_instance_;
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ModIdentifyParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ModIdentifyParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ModIdentifyParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto}, {
      &scc_info_DDCBank_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ModIdentifyRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ModIdentifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ModIdentifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto.base,
      &scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto.base,}};

static void InitDefaultsscc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ModIdentifyResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ModIdentifyResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ModIdentifyResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto}, {
      &scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto.base,}};

static void InitDefaultsscc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ModIdentifyResult_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ModIdentifyResult_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ModIdentifyResult_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ModSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ModSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ModSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fFFP_2fmodIdentify_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fFFP_2fmodIdentify_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fFFP_2fmodIdentify_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fFFP_2fmodIdentify_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModSource, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModSource, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModSource, antenna_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyParam, bank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult_Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult_Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult_Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult_Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, mod_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, snr_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyResult, spectrum_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyRequest, source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ModIdentifyRequest, param_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::FFP::ModSource)},
  { 9, -1, sizeof(::zb::dcts::scenario::FFP::ModIdentifyParam)},
  { 15, -1, sizeof(::zb::dcts::scenario::FFP::ModIdentifyResult_Header)},
  { 24, -1, sizeof(::zb::dcts::scenario::FFP::ModIdentifyResult)},
  { 35, -1, sizeof(::zb::dcts::scenario::FFP::ModIdentifyRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ModSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ModIdentifyParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ModIdentifyResult_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ModIdentifyResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ModIdentifyRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fFFP_2fmodIdentify_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036scenario/FFP/modIdentify.proto\022\024zb.dct"
  "s.scenario.FFP\032\ndcts.proto\032\023source/sourc"
  "e.proto\032\027scenario/scenario.proto\032\027scenar"
  "io/spectrum.proto\"m\n\tModSource\022$\n\002id\030\001 \001"
  "(\0132\030.zb.dcts.source.SourceId\022\017\n\007address\030"
  "\002 \001(\t\022\030\n\020attenuation_gain\030\003 \001(\005\022\017\n\007anten"
  "na\030\004 \001(\005\"D\n\020ModIdentifyParam\0220\n\004bank\030\003 \001"
  "(\0132\".zb.dcts.scenario.spectrum.DDCBank\"\251"
  "\006\n\021ModIdentifyResult\022>\n\006header\030\001 \001(\0132..z"
  "b.dcts.scenario.FFP.ModIdentifyResult.He"
  "ader\022A\n\010mod_type\030\002 \001(\0162/.zb.dcts.scenari"
  "o.FFP.ModIdentifyResult.ModType\022\030\n\020cente"
  "r_frequency\030\003 \001(\001\022\021\n\tbandwidth\030\004 \001(\001\022\013\n\003"
  "snr\030\005 \001(\001\022\030\n\020spectrum_samples\030\006 \003(\002\032\242\001\n\006"
  "Header\022-\n\013result_from\030\001 \001(\0132\030.zb.dcts.so"
  "urce.SourceId\022\027\n\017sequence_number\030\002 \001(\r\022$"
  "\n\ttime_span\030\003 \001(\0132\021.zb.dcts.TimeSpan\022*\n\017"
  "device_position\030\004 \001(\0132\021.zb.dcts.Position"
  "\"\227\003\n\007ModType\022\013\n\007UNKNOWN\020\000\022\006\n\002AM\020\001\022\010\n\004AMS"
  "C\020\002\022\010\n\004AMTC\020\003\022\007\n\003SSB\020\004\022\007\n\003DSB\020\005\022\007\n\003VSB\020\006"
  "\022\007\n\003LSB\020\007\022\007\n\003USB\020\010\022\006\n\002FM\020\013\022\007\n\003ASK\020\025\022\010\n\004A"
  "SK2\020\026\022\010\n\004ASK4\020\027\022\010\n\004ASK8\020\030\022\t\n\005ASK16\020\031\022\007\n\003"
  "FSK\020\037\022\010\n\004FSK2\020 \022\010\n\004FSK4\020!\022\010\n\004FSK8\020\"\022\t\n\005F"
  "SK16\020#\022\007\n\003MSK\020$\022\007\n\003PSK\020)\022\010\n\004BPSK\020*\022\t\n\005OQ"
  "PSK\020+\022\010\n\004QPSK\020,\022\013\n\007Pi4QPSK\020-\022\010\n\004PSK8\020.\022\t"
  "\n\005PSK16\020/\022\t\n\005D8PSK\0200\022\007\n\003QAM\0203\022\t\n\005QAM16\0204"
  "\022\t\n\005QAM32\0205\022\t\n\005QAM64\0206\022\n\n\006QAM128\0207\022\n\n\006QA"
  "M256\0208\022\n\n\006QAM512\0209\022\013\n\007QAM1024\020:\022\006\n\002CW\020F\022"
  "\t\n\005Noise\020P\"\254\001\n\022ModIdentifyRequest\022.\n\010sce"
  "nario\030\001 \001(\0132\034.zb.dcts.scenario.ScenarioI"
  "d\022/\n\006source\030\002 \001(\0132\037.zb.dcts.scenario.FFP"
  ".ModSource\0225\n\005param\030\003 \001(\0132&.zb.dcts.scen"
  "ario.FFP.ModIdentifyParam2\334\001\n\031Modulation"
  "IdentifyService\022c\n\024StartModIdentifyTask\022"
  "(.zb.dcts.scenario.FFP.ModIdentifyReques"
  "t\032\037.zb.dcts.scenario.ScenarioReply\"\000\022Z\n\023"
  "StopModIdentifyTask\022 .zb.dcts.scenario.S"
  "cenarioTaskId\032\037.zb.dcts.scenario.Scenari"
  "oReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_sccs[5] = {
  &scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto.base,
  &scc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto.base,
  &scc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto.base,
  &scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto.base,
  &scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fFFP_2fmodIdentify_2eproto, "scenario/FFP/modIdentify.proto", 1536,
  &descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_once, descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_sccs, descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto_deps, 5, 4,
  schemas, file_default_instances, TableStruct_scenario_2fFFP_2fmodIdentify_2eproto::offsets,
  file_level_metadata_scenario_2fFFP_2fmodIdentify_2eproto, 5, file_level_enum_descriptors_scenario_2fFFP_2fmodIdentify_2eproto, file_level_service_descriptors_scenario_2fFFP_2fmodIdentify_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fFFP_2fmodIdentify_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModIdentifyResult_ModType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fFFP_2fmodIdentify_2eproto);
  return file_level_enum_descriptors_scenario_2fFFP_2fmodIdentify_2eproto[0];
}
bool ModIdentifyResult_ModType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 70:
    case 80:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModIdentifyResult_ModType ModIdentifyResult::UNKNOWN;
constexpr ModIdentifyResult_ModType ModIdentifyResult::AM;
constexpr ModIdentifyResult_ModType ModIdentifyResult::AMSC;
constexpr ModIdentifyResult_ModType ModIdentifyResult::AMTC;
constexpr ModIdentifyResult_ModType ModIdentifyResult::SSB;
constexpr ModIdentifyResult_ModType ModIdentifyResult::DSB;
constexpr ModIdentifyResult_ModType ModIdentifyResult::VSB;
constexpr ModIdentifyResult_ModType ModIdentifyResult::LSB;
constexpr ModIdentifyResult_ModType ModIdentifyResult::USB;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FM;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ASK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ASK2;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ASK4;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ASK8;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ASK16;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FSK2;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FSK4;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FSK8;
constexpr ModIdentifyResult_ModType ModIdentifyResult::FSK16;
constexpr ModIdentifyResult_ModType ModIdentifyResult::MSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::PSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::BPSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::OQPSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QPSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::Pi4QPSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::PSK8;
constexpr ModIdentifyResult_ModType ModIdentifyResult::PSK16;
constexpr ModIdentifyResult_ModType ModIdentifyResult::D8PSK;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM16;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM32;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM64;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM128;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM256;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM512;
constexpr ModIdentifyResult_ModType ModIdentifyResult::QAM1024;
constexpr ModIdentifyResult_ModType ModIdentifyResult::CW;
constexpr ModIdentifyResult_ModType ModIdentifyResult::Noise;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ModType_MIN;
constexpr ModIdentifyResult_ModType ModIdentifyResult::ModType_MAX;
constexpr int ModIdentifyResult::ModType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ModSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ModSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class ModSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const ModSource* msg);
};

const ::zb::dcts::source::SourceId&
ModSource::_Internal::id(const ModSource* msg) {
  return *msg->id_;
}
void ModSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ModSource::ModSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ModSource)
}
ModSource::ModSource(const ModSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&attenuation_gain_, &from.attenuation_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ModSource)
}

void ModSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&id_)) + sizeof(antenna_));
}

ModSource::~ModSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ModSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ModSource::ArenaDtor(void* object) {
  ModSource* _this = reinterpret_cast< ModSource* >(object);
  (void)_this;
}
void ModSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModSource& ModSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModSource_scenario_2fFFP_2fmodIdentify_2eproto.base);
  return *internal_default_instance();
}


void ModSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ModSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&attenuation_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.FFP.ModSource.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ModSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.FFP.ModSource.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_antenna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ModSource)
  return target;
}

size_t ModSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ModSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ModSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ModSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ModSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ModSource)
    MergeFrom(*source);
  }
}

void ModSource::MergeFrom(const ModSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ModSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
}

void ModSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ModSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModSource::CopyFrom(const ModSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ModSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModSource::IsInitialized() const {
  return true;
}

void ModSource::InternalSwap(ModSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModSource, antenna_)
      + sizeof(ModSource::antenna_)
      - PROTOBUF_FIELD_OFFSET(ModSource, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModIdentifyParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ModIdentifyParam_default_instance_._instance.get_mutable()->bank_ = const_cast< ::zb::dcts::scenario::spectrum::DDCBank*>(
      ::zb::dcts::scenario::spectrum::DDCBank::internal_default_instance());
}
class ModIdentifyParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::DDCBank& bank(const ModIdentifyParam* msg);
};

const ::zb::dcts::scenario::spectrum::DDCBank&
ModIdentifyParam::_Internal::bank(const ModIdentifyParam* msg) {
  return *msg->bank_;
}
void ModIdentifyParam::clear_bank() {
  if (GetArena() == nullptr && bank_ != nullptr) {
    delete bank_;
  }
  bank_ = nullptr;
}
ModIdentifyParam::ModIdentifyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ModIdentifyParam)
}
ModIdentifyParam::ModIdentifyParam(const ModIdentifyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bank()) {
    bank_ = new ::zb::dcts::scenario::spectrum::DDCBank(*from.bank_);
  } else {
    bank_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ModIdentifyParam)
}

void ModIdentifyParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto.base);
  bank_ = nullptr;
}

ModIdentifyParam::~ModIdentifyParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ModIdentifyParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModIdentifyParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bank_;
}

void ModIdentifyParam::ArenaDtor(void* object) {
  ModIdentifyParam* _this = reinterpret_cast< ModIdentifyParam* >(object);
  (void)_this;
}
void ModIdentifyParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModIdentifyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModIdentifyParam& ModIdentifyParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModIdentifyParam_scenario_2fFFP_2fmodIdentify_2eproto.base);
  return *internal_default_instance();
}


void ModIdentifyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bank_ != nullptr) {
    delete bank_;
  }
  bank_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModIdentifyParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.DDCBank bank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModIdentifyParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.DDCBank bank = 3;
  if (this->has_bank()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bank(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ModIdentifyParam)
  return target;
}

size_t ModIdentifyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.DDCBank bank = 3;
  if (this->has_bank()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bank_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModIdentifyParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ModIdentifyParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModIdentifyParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ModIdentifyParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ModIdentifyParam)
    MergeFrom(*source);
  }
}

void ModIdentifyParam::MergeFrom(const ModIdentifyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bank()) {
    _internal_mutable_bank()->::zb::dcts::scenario::spectrum::DDCBank::MergeFrom(from._internal_bank());
  }
}

void ModIdentifyParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModIdentifyParam::CopyFrom(const ModIdentifyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModIdentifyParam::IsInitialized() const {
  return true;
}

void ModIdentifyParam::InternalSwap(ModIdentifyParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bank_, other->bank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModIdentifyParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModIdentifyResult_Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ModIdentifyResult_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_ModIdentifyResult_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::FFP::_ModIdentifyResult_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class ModIdentifyResult_Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const ModIdentifyResult_Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const ModIdentifyResult_Header* msg);
  static const ::zb::dcts::Position& device_position(const ModIdentifyResult_Header* msg);
};

const ::zb::dcts::source::SourceId&
ModIdentifyResult_Header::_Internal::result_from(const ModIdentifyResult_Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
ModIdentifyResult_Header::_Internal::time_span(const ModIdentifyResult_Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
ModIdentifyResult_Header::_Internal::device_position(const ModIdentifyResult_Header* msg) {
  return *msg->device_position_;
}
void ModIdentifyResult_Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void ModIdentifyResult_Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void ModIdentifyResult_Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
ModIdentifyResult_Header::ModIdentifyResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
}
ModIdentifyResult_Header::ModIdentifyResult_Header(const ModIdentifyResult_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
}

void ModIdentifyResult_Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

ModIdentifyResult_Header::~ModIdentifyResult_Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModIdentifyResult_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void ModIdentifyResult_Header::ArenaDtor(void* object) {
  ModIdentifyResult_Header* _this = reinterpret_cast< ModIdentifyResult_Header* >(object);
  (void)_this;
}
void ModIdentifyResult_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModIdentifyResult_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModIdentifyResult_Header& ModIdentifyResult_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModIdentifyResult_Header_scenario_2fFFP_2fmodIdentify_2eproto.base);
  return *internal_default_instance();
}


void ModIdentifyResult_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModIdentifyResult_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModIdentifyResult_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  return target;
}

size_t ModIdentifyResult_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModIdentifyResult_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const ModIdentifyResult_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModIdentifyResult_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
    MergeFrom(*source);
  }
}

void ModIdentifyResult_Header::MergeFrom(const ModIdentifyResult_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void ModIdentifyResult_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModIdentifyResult_Header::CopyFrom(const ModIdentifyResult_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModIdentifyResult_Header::IsInitialized() const {
  return true;
}

void ModIdentifyResult_Header::InternalSwap(ModIdentifyResult_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModIdentifyResult_Header, sequence_number_)
      + sizeof(ModIdentifyResult_Header::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ModIdentifyResult_Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModIdentifyResult_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModIdentifyResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ModIdentifyResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::FFP::ModIdentifyResult_Header*>(
      ::zb::dcts::scenario::FFP::ModIdentifyResult_Header::internal_default_instance());
}
class ModIdentifyResult::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::ModIdentifyResult_Header& header(const ModIdentifyResult* msg);
};

const ::zb::dcts::scenario::FFP::ModIdentifyResult_Header&
ModIdentifyResult::_Internal::header(const ModIdentifyResult* msg) {
  return *msg->header_;
}
ModIdentifyResult::ModIdentifyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_samples_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ModIdentifyResult)
}
ModIdentifyResult::ModIdentifyResult(const ModIdentifyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_samples_(from.spectrum_samples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::FFP::ModIdentifyResult_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&mod_type_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(mod_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ModIdentifyResult)
}

void ModIdentifyResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mod_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mod_type_));
}

ModIdentifyResult::~ModIdentifyResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ModIdentifyResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModIdentifyResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ModIdentifyResult::ArenaDtor(void* object) {
  ModIdentifyResult* _this = reinterpret_cast< ModIdentifyResult* >(object);
  (void)_this;
}
void ModIdentifyResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModIdentifyResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModIdentifyResult& ModIdentifyResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModIdentifyResult_scenario_2fFFP_2fmodIdentify_2eproto.base);
  return *internal_default_instance();
}


void ModIdentifyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_samples_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mod_type_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(mod_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModIdentifyResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.ModIdentifyResult.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ModIdentifyResult.ModType mod_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mod_type(static_cast<::zb::dcts::scenario::FFP::ModIdentifyResult_ModType>(val));
        } else goto handle_unusual;
        continue;
      // double center_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double snr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float spectrum_samples = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum_samples(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_spectrum_samples(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModIdentifyResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.ModIdentifyResult.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.ModIdentifyResult.ModType mod_type = 2;
  if (this->mod_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mod_type(), target);
  }

  // double center_frequency = 3;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_center_frequency(), target);
  }

  // double bandwidth = 4;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bandwidth(), target);
  }

  // double snr = 5;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_snr(), target);
  }

  // repeated float spectrum_samples = 6;
  if (this->_internal_spectrum_samples_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_spectrum_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ModIdentifyResult)
  return target;
}

size_t ModIdentifyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spectrum_samples = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_samples_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_samples_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.FFP.ModIdentifyResult.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double center_frequency = 3;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double bandwidth = 4;
  if (!(this->bandwidth() <= 0 && this->bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double snr = 5;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.scenario.FFP.ModIdentifyResult.ModType mod_type = 2;
  if (this->mod_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mod_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModIdentifyResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ModIdentifyResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModIdentifyResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ModIdentifyResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ModIdentifyResult)
    MergeFrom(*source);
  }
}

void ModIdentifyResult::MergeFrom(const ModIdentifyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_samples_.MergeFrom(from.spectrum_samples_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::FFP::ModIdentifyResult_Header::MergeFrom(from._internal_header());
  }
  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.bandwidth() <= 0 && from.bandwidth() >= 0)) {
    _internal_set_bandwidth(from._internal_bandwidth());
  }
  if (!(from.snr() <= 0 && from.snr() >= 0)) {
    _internal_set_snr(from._internal_snr());
  }
  if (from.mod_type() != 0) {
    _internal_set_mod_type(from._internal_mod_type());
  }
}

void ModIdentifyResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModIdentifyResult::CopyFrom(const ModIdentifyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModIdentifyResult::IsInitialized() const {
  return true;
}

void ModIdentifyResult::InternalSwap(ModIdentifyResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_samples_.InternalSwap(&other->spectrum_samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModIdentifyResult, mod_type_)
      + sizeof(ModIdentifyResult::mod_type_)
      - PROTOBUF_FIELD_OFFSET(ModIdentifyResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModIdentifyResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModIdentifyRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ModIdentifyRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_ModIdentifyRequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::zb::dcts::scenario::FFP::ModSource*>(
      ::zb::dcts::scenario::FFP::ModSource::internal_default_instance());
  ::zb::dcts::scenario::FFP::_ModIdentifyRequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::FFP::ModIdentifyParam*>(
      ::zb::dcts::scenario::FFP::ModIdentifyParam::internal_default_instance());
}
class ModIdentifyRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const ModIdentifyRequest* msg);
  static const ::zb::dcts::scenario::FFP::ModSource& source(const ModIdentifyRequest* msg);
  static const ::zb::dcts::scenario::FFP::ModIdentifyParam& param(const ModIdentifyRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
ModIdentifyRequest::_Internal::scenario(const ModIdentifyRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::FFP::ModSource&
ModIdentifyRequest::_Internal::source(const ModIdentifyRequest* msg) {
  return *msg->source_;
}
const ::zb::dcts::scenario::FFP::ModIdentifyParam&
ModIdentifyRequest::_Internal::param(const ModIdentifyRequest* msg) {
  return *msg->param_;
}
void ModIdentifyRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
ModIdentifyRequest::ModIdentifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ModIdentifyRequest)
}
ModIdentifyRequest::ModIdentifyRequest(const ModIdentifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::scenario::FFP::ModSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::FFP::ModIdentifyParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ModIdentifyRequest)
}

void ModIdentifyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(param_));
}

ModIdentifyRequest::~ModIdentifyRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ModIdentifyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModIdentifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete param_;
}

void ModIdentifyRequest::ArenaDtor(void* object) {
  ModIdentifyRequest* _this = reinterpret_cast< ModIdentifyRequest* >(object);
  (void)_this;
}
void ModIdentifyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModIdentifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModIdentifyRequest& ModIdentifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModIdentifyRequest_scenario_2fFFP_2fmodIdentify_2eproto.base);
  return *internal_default_instance();
}


void ModIdentifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModIdentifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ModSource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ModIdentifyParam param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModIdentifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.ModSource source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.ModIdentifyParam param = 3;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ModIdentifyRequest)
  return target;
}

size_t ModIdentifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.FFP.ModSource source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .zb.dcts.scenario.FFP.ModIdentifyParam param = 3;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModIdentifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModIdentifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModIdentifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ModIdentifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ModIdentifyRequest)
    MergeFrom(*source);
  }
}

void ModIdentifyRequest::MergeFrom(const ModIdentifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::scenario::FFP::ModSource::MergeFrom(from._internal_source());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::FFP::ModIdentifyParam::MergeFrom(from._internal_param());
  }
}

void ModIdentifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModIdentifyRequest::CopyFrom(const ModIdentifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ModIdentifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModIdentifyRequest::IsInitialized() const {
  return true;
}

void ModIdentifyRequest::InternalSwap(ModIdentifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModIdentifyRequest, param_)
      + sizeof(ModIdentifyRequest::param_)
      - PROTOBUF_FIELD_OFFSET(ModIdentifyRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModIdentifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ModSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ModSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ModSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ModIdentifyParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ModIdentifyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ModIdentifyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ModIdentifyResult_Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ModIdentifyResult_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ModIdentifyResult_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ModIdentifyResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ModIdentifyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ModIdentifyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ModIdentifyRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ModIdentifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ModIdentifyRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
