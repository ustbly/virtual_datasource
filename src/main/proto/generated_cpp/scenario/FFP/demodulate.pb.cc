// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/FFP/demodulate.proto

#include "scenario/FFP/demodulate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
class DemodSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemodSource> _instance;
} _DemodSource_default_instance_;
class DemodChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemodChannel> _instance;
} _DemodChannel_default_instance_;
class AudioBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioBlock> _instance;
} _AudioBlock_default_instance_;
class ChannelAudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelAudio> _instance;
} _ChannelAudio_default_instance_;
class AnalogDemodResult_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogDemodResult_Header> _instance;
} _AnalogDemodResult_Header_default_instance_;
class AnalogDemodResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogDemodResult> _instance;
} _AnalogDemodResult_default_instance_;
class AnalogDemodParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogDemodParam> _instance;
} _AnalogDemodParam_default_instance_;
class AnalogDemodRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogDemodRequest> _instance;
} _AnalogDemodRequest_default_instance_;
class ChangeDemodChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeDemodChannelRequest> _instance;
} _ChangeDemodChannelRequest_default_instance_;
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_AnalogDemodParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::AnalogDemodParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::AnalogDemodParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static void InitDefaultsscc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_AnalogDemodRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::AnalogDemodRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::AnalogDemodRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto.base,
      &scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static void InitDefaultsscc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_AnalogDemodResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::AnalogDemodResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::AnalogDemodResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto.base,
      &scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static void InitDefaultsscc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::AnalogDemodResult_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_AudioBlock_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::AudioBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::AudioBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto}, {}};

static void InitDefaultsscc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ChangeDemodChannelRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static void InitDefaultsscc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_ChannelAudio_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::ChannelAudio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::ChannelAudio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static void InitDefaultsscc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_DemodChannel_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::DemodChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::DemodChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::FFP::_DemodSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::FFP::DemodSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::FFP::DemodSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fFFP_2fdemodulate_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fFFP_2fdemodulate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fFFP_2fdemodulate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fFFP_2fdemodulate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodSource, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodSource, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodSource, antenna_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodChannel, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodChannel, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::DemodChannel, audio_sr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AudioBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AudioBlock, pcm_bitstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelAudio, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChannelAudio, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult_Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult_Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult_Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult_Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodResult, channel_audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodParam, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodParam, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodRequest, source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::AnalogDemodRequest, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, param_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::FFP::DemodSource)},
  { 9, -1, sizeof(::zb::dcts::scenario::FFP::DemodChannel)},
  { 17, -1, sizeof(::zb::dcts::scenario::FFP::AudioBlock)},
  { 23, -1, sizeof(::zb::dcts::scenario::FFP::ChannelAudio)},
  { 30, -1, sizeof(::zb::dcts::scenario::FFP::AnalogDemodResult_Header)},
  { 39, -1, sizeof(::zb::dcts::scenario::FFP::AnalogDemodResult)},
  { 46, -1, sizeof(::zb::dcts::scenario::FFP::AnalogDemodParam)},
  { 53, -1, sizeof(::zb::dcts::scenario::FFP::AnalogDemodRequest)},
  { 61, -1, sizeof(::zb::dcts::scenario::FFP::ChangeDemodChannelRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_DemodSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_DemodChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_AudioBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ChannelAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_AnalogDemodResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_AnalogDemodParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_AnalogDemodRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::FFP::_ChangeDemodChannelRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fFFP_2fdemodulate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035scenario/FFP/demodulate.proto\022\024zb.dcts"
  ".scenario.FFP\032\ndcts.proto\032\023source/source"
  ".proto\032\027scenario/scenario.proto\032\027scenari"
  "o/spectrum.proto\"o\n\013DemodSource\022$\n\002id\030\001 "
  "\001(\0132\030.zb.dcts.source.SourceId\022\017\n\007address"
  "\030\002 \001(\t\022\030\n\020attenuation_gain\030\003 \001(\005\022\017\n\007ante"
  "nna\030\004 \001(\005\"h\n\014DemodChannel\022\n\n\002id\030\001 \001(\t\022:\n"
  "\013signal_band\030\002 \001(\0132%.zb.dcts.scenario.sp"
  "ectrum.SignalBand\022\020\n\010audio_sr\030\003 \001(\001\"#\n\nA"
  "udioBlock\022\025\n\rpcm_bitstream\030\003 \003(\005\"L\n\014Chan"
  "nelAudio\022\n\n\002id\030\001 \001(\t\0220\n\006blocks\030\002 \003(\0132 .z"
  "b.dcts.scenario.FFP.AudioBlock\"\263\002\n\021Analo"
  "gDemodResult\022>\n\006header\030\001 \001(\0132..zb.dcts.s"
  "cenario.FFP.AnalogDemodResult.Header\0229\n\r"
  "channel_audio\030\002 \001(\0132\".zb.dcts.scenario.F"
  "FP.ChannelAudio\032\242\001\n\006Header\022-\n\013result_fro"
  "m\030\001 \001(\0132\030.zb.dcts.source.SourceId\022\027\n\017seq"
  "uence_number\030\002 \001(\r\022$\n\ttime_span\030\003 \001(\0132\021."
  "zb.dcts.TimeSpan\022*\n\017device_position\030\004 \001("
  "\0132\021.zb.dcts.Position\"z\n\020AnalogDemodParam"
  "\0221\n\004type\030\001 \001(\0162#.zb.dcts.scenario.FFP.An"
  "alogModType\0223\n\007channel\030\002 \001(\0132\".zb.dcts.s"
  "cenario.FFP.DemodChannel\"\256\001\n\022AnalogDemod"
  "Request\022.\n\010scenario\030\001 \001(\0132\034.zb.dcts.scen"
  "ario.ScenarioId\0221\n\006source\030\002 \001(\0132!.zb.dct"
  "s.scenario.FFP.DemodSource\0225\n\005param\030\003 \001("
  "\0132&.zb.dcts.scenario.FFP.AnalogDemodPara"
  "m\"\207\001\n\031ChangeDemodChannelRequest\0223\n\trespo"
  "nser\030\001 \001(\0132 .zb.dcts.scenario.ScenarioTa"
  "skId\0225\n\005param\030\002 \001(\0132&.zb.dcts.scenario.F"
  "FP.AnalogDemodParam*L\n\rAnalogModType\022\006\n\002"
  "AM\020\000\022\006\n\002FM\020\001\022\006\n\002PM\020\002\022\006\n\002CW\020\003\022\007\n\003LSB\020\004\022\007\n"
  "\003USB\020\005\022\t\n\005PULSE\020\0062\247\003\n\023DemodulationServic"
  "e\022c\n\024StartAnalogDemodTask\022(.zb.dcts.scen"
  "ario.FFP.AnalogDemodRequest\032\037.zb.dcts.sc"
  "enario.ScenarioReply\"\000\022h\n\022ChangeDemodCha"
  "nnel\022/.zb.dcts.scenario.FFP.ChangeDemodC"
  "hannelRequest\032\037.zb.dcts.scenario.Scenari"
  "oReply\"\000\022e\n\024GetAnalogDemodResult\022 .zb.dc"
  "ts.scenario.ScenarioTaskId\032\'.zb.dcts.sce"
  "nario.FFP.AnalogDemodResult\"\0000\001\022Z\n\023StopA"
  "nalogDemodTask\022 .zb.dcts.scenario.Scenar"
  "ioTaskId\032\037.zb.dcts.scenario.ScenarioRepl"
  "y\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_sccs[9] = {
  &scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto.base,
  &scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fFFP_2fdemodulate_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fFFP_2fdemodulate_2eproto, "scenario/FFP/demodulate.proto", 1731,
  &descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_once, descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_sccs, descriptor_table_scenario_2fFFP_2fdemodulate_2eproto_deps, 9, 4,
  schemas, file_default_instances, TableStruct_scenario_2fFFP_2fdemodulate_2eproto::offsets,
  file_level_metadata_scenario_2fFFP_2fdemodulate_2eproto, 9, file_level_enum_descriptors_scenario_2fFFP_2fdemodulate_2eproto, file_level_service_descriptors_scenario_2fFFP_2fdemodulate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fFFP_2fdemodulate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fFFP_2fdemodulate_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogModType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
  return file_level_enum_descriptors_scenario_2fFFP_2fdemodulate_2eproto[0];
}
bool AnalogModType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DemodSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_DemodSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class DemodSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const DemodSource* msg);
};

const ::zb::dcts::source::SourceId&
DemodSource::_Internal::id(const DemodSource* msg) {
  return *msg->id_;
}
void DemodSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
DemodSource::DemodSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.DemodSource)
}
DemodSource::DemodSource(const DemodSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&attenuation_gain_, &from.attenuation_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.DemodSource)
}

void DemodSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&id_)) + sizeof(antenna_));
}

DemodSource::~DemodSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.DemodSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemodSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void DemodSource::ArenaDtor(void* object) {
  DemodSource* _this = reinterpret_cast< DemodSource* >(object);
  (void)_this;
}
void DemodSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemodSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemodSource& DemodSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemodSource_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void DemodSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.DemodSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&attenuation_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&attenuation_gain_)) + sizeof(antenna_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemodSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.FFP.DemodSource.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemodSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.DemodSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.FFP.DemodSource.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_antenna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.DemodSource)
  return target;
}

size_t DemodSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.DemodSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 attenuation_gain = 3;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 4;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemodSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.DemodSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DemodSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemodSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.DemodSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.DemodSource)
    MergeFrom(*source);
  }
}

void DemodSource::MergeFrom(const DemodSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.DemodSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
}

void DemodSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.DemodSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemodSource::CopyFrom(const DemodSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.DemodSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemodSource::IsInitialized() const {
  return true;
}

void DemodSource::InternalSwap(DemodSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DemodSource, antenna_)
      + sizeof(DemodSource::antenna_)
      - PROTOBUF_FIELD_OFFSET(DemodSource, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DemodSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DemodChannel::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_DemodChannel_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
}
class DemodChannel::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const DemodChannel* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
DemodChannel::_Internal::signal_band(const DemodChannel* msg) {
  return *msg->signal_band_;
}
void DemodChannel::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
DemodChannel::DemodChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.DemodChannel)
}
DemodChannel::DemodChannel(const DemodChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  audio_sr_ = from.audio_sr_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.DemodChannel)
}

void DemodChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&signal_band_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_sr_) -
      reinterpret_cast<char*>(&signal_band_)) + sizeof(audio_sr_));
}

DemodChannel::~DemodChannel() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.DemodChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemodChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signal_band_;
}

void DemodChannel::ArenaDtor(void* object) {
  DemodChannel* _this = reinterpret_cast< DemodChannel* >(object);
  (void)_this;
}
void DemodChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemodChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemodChannel& DemodChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemodChannel_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void DemodChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.DemodChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  audio_sr_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemodChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.FFP.DemodChannel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double audio_sr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          audio_sr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemodChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.DemodChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.FFP.DemodChannel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // double audio_sr = 3;
  if (!(this->audio_sr() <= 0 && this->audio_sr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_audio_sr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.DemodChannel)
  return target;
}

size_t DemodChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.DemodChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // double audio_sr = 3;
  if (!(this->audio_sr() <= 0 && this->audio_sr() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemodChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.DemodChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const DemodChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemodChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.DemodChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.DemodChannel)
    MergeFrom(*source);
  }
}

void DemodChannel::MergeFrom(const DemodChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.DemodChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (!(from.audio_sr() <= 0 && from.audio_sr() >= 0)) {
    _internal_set_audio_sr(from._internal_audio_sr());
  }
}

void DemodChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.DemodChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemodChannel::CopyFrom(const DemodChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.DemodChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemodChannel::IsInitialized() const {
  return true;
}

void DemodChannel::InternalSwap(DemodChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DemodChannel, audio_sr_)
      + sizeof(DemodChannel::audio_sr_)
      - PROTOBUF_FIELD_OFFSET(DemodChannel, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DemodChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioBlock::InitAsDefaultInstance() {
}
class AudioBlock::_Internal {
 public:
};

AudioBlock::AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pcm_bitstream_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.AudioBlock)
}
AudioBlock::AudioBlock(const AudioBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pcm_bitstream_(from.pcm_bitstream_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.AudioBlock)
}

void AudioBlock::SharedCtor() {
}

AudioBlock::~AudioBlock() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.AudioBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioBlock::ArenaDtor(void* object) {
  AudioBlock* _this = reinterpret_cast< AudioBlock* >(object);
  (void)_this;
}
void AudioBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioBlock& AudioBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioBlock_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void AudioBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pcm_bitstream_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 pcm_bitstream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pcm_bitstream(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 3;
  {
    int byte_size = _pcm_bitstream_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_pcm_bitstream(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.AudioBlock)
  return target;
}

size_t AudioBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.AudioBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pcm_bitstream_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pcm_bitstream_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.AudioBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.AudioBlock)
    MergeFrom(*source);
  }
}

void AudioBlock::MergeFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pcm_bitstream_.MergeFrom(from.pcm_bitstream_);
}

void AudioBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioBlock::CopyFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioBlock::IsInitialized() const {
  return true;
}

void AudioBlock::InternalSwap(AudioBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pcm_bitstream_.InternalSwap(&other->pcm_bitstream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelAudio::InitAsDefaultInstance() {
}
class ChannelAudio::_Internal {
 public:
};

ChannelAudio::ChannelAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ChannelAudio)
}
ChannelAudio::ChannelAudio(const ChannelAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ChannelAudio)
}

void ChannelAudio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelAudio::~ChannelAudio() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ChannelAudio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelAudio::ArenaDtor(void* object) {
  ChannelAudio* _this = reinterpret_cast< ChannelAudio* >(object);
  (void)_this;
}
void ChannelAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelAudio& ChannelAudio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void ChannelAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ChannelAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.FFP.ChannelAudio.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.FFP.AudioBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ChannelAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.FFP.ChannelAudio.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .zb.dcts.scenario.FFP.AudioBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ChannelAudio)
  return target;
}

size_t ChannelAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ChannelAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.FFP.AudioBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ChannelAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ChannelAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ChannelAudio)
    MergeFrom(*source);
  }
}

void ChannelAudio::MergeFrom(const ChannelAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ChannelAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ChannelAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ChannelAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelAudio::CopyFrom(const ChannelAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ChannelAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelAudio::IsInitialized() const {
  return true;
}

void ChannelAudio::InternalSwap(ChannelAudio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelAudio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogDemodResult_Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class AnalogDemodResult_Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const AnalogDemodResult_Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const AnalogDemodResult_Header* msg);
  static const ::zb::dcts::Position& device_position(const AnalogDemodResult_Header* msg);
};

const ::zb::dcts::source::SourceId&
AnalogDemodResult_Header::_Internal::result_from(const AnalogDemodResult_Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
AnalogDemodResult_Header::_Internal::time_span(const AnalogDemodResult_Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
AnalogDemodResult_Header::_Internal::device_position(const AnalogDemodResult_Header* msg) {
  return *msg->device_position_;
}
void AnalogDemodResult_Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void AnalogDemodResult_Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void AnalogDemodResult_Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
AnalogDemodResult_Header::AnalogDemodResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
}
AnalogDemodResult_Header::AnalogDemodResult_Header(const AnalogDemodResult_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
}

void AnalogDemodResult_Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

AnalogDemodResult_Header::~AnalogDemodResult_Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogDemodResult_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void AnalogDemodResult_Header::ArenaDtor(void* object) {
  AnalogDemodResult_Header* _this = reinterpret_cast< AnalogDemodResult_Header* >(object);
  (void)_this;
}
void AnalogDemodResult_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogDemodResult_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogDemodResult_Header& AnalogDemodResult_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogDemodResult_Header_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void AnalogDemodResult_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogDemodResult_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogDemodResult_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  return target;
}

size_t AnalogDemodResult_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogDemodResult_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogDemodResult_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogDemodResult_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
    MergeFrom(*source);
  }
}

void AnalogDemodResult_Header::MergeFrom(const AnalogDemodResult_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void AnalogDemodResult_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogDemodResult_Header::CopyFrom(const AnalogDemodResult_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogDemodResult_Header::IsInitialized() const {
  return true;
}

void AnalogDemodResult_Header::InternalSwap(AnalogDemodResult_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogDemodResult_Header, sequence_number_)
      + sizeof(AnalogDemodResult_Header::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(AnalogDemodResult_Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogDemodResult_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogDemodResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_AnalogDemodResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::FFP::AnalogDemodResult_Header*>(
      ::zb::dcts::scenario::FFP::AnalogDemodResult_Header::internal_default_instance());
  ::zb::dcts::scenario::FFP::_AnalogDemodResult_default_instance_._instance.get_mutable()->channel_audio_ = const_cast< ::zb::dcts::scenario::FFP::ChannelAudio*>(
      ::zb::dcts::scenario::FFP::ChannelAudio::internal_default_instance());
}
class AnalogDemodResult::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header& header(const AnalogDemodResult* msg);
  static const ::zb::dcts::scenario::FFP::ChannelAudio& channel_audio(const AnalogDemodResult* msg);
};

const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header&
AnalogDemodResult::_Internal::header(const AnalogDemodResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::FFP::ChannelAudio&
AnalogDemodResult::_Internal::channel_audio(const AnalogDemodResult* msg) {
  return *msg->channel_audio_;
}
AnalogDemodResult::AnalogDemodResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.AnalogDemodResult)
}
AnalogDemodResult::AnalogDemodResult(const AnalogDemodResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::FFP::AnalogDemodResult_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_channel_audio()) {
    channel_audio_ = new ::zb::dcts::scenario::FFP::ChannelAudio(*from.channel_audio_);
  } else {
    channel_audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.AnalogDemodResult)
}

void AnalogDemodResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_audio_) -
      reinterpret_cast<char*>(&header_)) + sizeof(channel_audio_));
}

AnalogDemodResult::~AnalogDemodResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.AnalogDemodResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogDemodResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete channel_audio_;
}

void AnalogDemodResult::ArenaDtor(void* object) {
  AnalogDemodResult* _this = reinterpret_cast< AnalogDemodResult* >(object);
  (void)_this;
}
void AnalogDemodResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogDemodResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogDemodResult& AnalogDemodResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogDemodResult_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void AnalogDemodResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogDemodResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.AnalogDemodResult.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogDemodResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.AnalogDemodResult.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 2;
  if (this->has_channel_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.AnalogDemodResult)
  return target;
}

size_t AnalogDemodResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.AnalogDemodResult.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 2;
  if (this->has_channel_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_audio_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogDemodResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogDemodResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogDemodResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.AnalogDemodResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.AnalogDemodResult)
    MergeFrom(*source);
  }
}

void AnalogDemodResult::MergeFrom(const AnalogDemodResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::FFP::AnalogDemodResult_Header::MergeFrom(from._internal_header());
  }
  if (from.has_channel_audio()) {
    _internal_mutable_channel_audio()->::zb::dcts::scenario::FFP::ChannelAudio::MergeFrom(from._internal_channel_audio());
  }
}

void AnalogDemodResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogDemodResult::CopyFrom(const AnalogDemodResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogDemodResult::IsInitialized() const {
  return true;
}

void AnalogDemodResult::InternalSwap(AnalogDemodResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogDemodResult, channel_audio_)
      + sizeof(AnalogDemodResult::channel_audio_)
      - PROTOBUF_FIELD_OFFSET(AnalogDemodResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogDemodResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogDemodParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_AnalogDemodParam_default_instance_._instance.get_mutable()->channel_ = const_cast< ::zb::dcts::scenario::FFP::DemodChannel*>(
      ::zb::dcts::scenario::FFP::DemodChannel::internal_default_instance());
}
class AnalogDemodParam::_Internal {
 public:
  static const ::zb::dcts::scenario::FFP::DemodChannel& channel(const AnalogDemodParam* msg);
};

const ::zb::dcts::scenario::FFP::DemodChannel&
AnalogDemodParam::_Internal::channel(const AnalogDemodParam* msg) {
  return *msg->channel_;
}
AnalogDemodParam::AnalogDemodParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.AnalogDemodParam)
}
AnalogDemodParam::AnalogDemodParam(const AnalogDemodParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::zb::dcts::scenario::FFP::DemodChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.AnalogDemodParam)
}

void AnalogDemodParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(type_));
}

AnalogDemodParam::~AnalogDemodParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.AnalogDemodParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogDemodParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void AnalogDemodParam::ArenaDtor(void* object) {
  AnalogDemodParam* _this = reinterpret_cast< AnalogDemodParam* >(object);
  (void)_this;
}
void AnalogDemodParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogDemodParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogDemodParam& AnalogDemodParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogDemodParam_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void AnalogDemodParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogDemodParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.FFP.AnalogModType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::FFP::AnalogModType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.DemodChannel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogDemodParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.AnalogModType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .zb.dcts.scenario.FFP.DemodChannel channel = 2;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.AnalogDemodParam)
  return target;
}

size_t AnalogDemodParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.FFP.DemodChannel channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .zb.dcts.scenario.FFP.AnalogModType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogDemodParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogDemodParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogDemodParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.AnalogDemodParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.AnalogDemodParam)
    MergeFrom(*source);
  }
}

void AnalogDemodParam::MergeFrom(const AnalogDemodParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::zb::dcts::scenario::FFP::DemodChannel::MergeFrom(from._internal_channel());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AnalogDemodParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogDemodParam::CopyFrom(const AnalogDemodParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogDemodParam::IsInitialized() const {
  return true;
}

void AnalogDemodParam::InternalSwap(AnalogDemodParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogDemodParam, type_)
      + sizeof(AnalogDemodParam::type_)
      - PROTOBUF_FIELD_OFFSET(AnalogDemodParam, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogDemodParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogDemodRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_AnalogDemodRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_AnalogDemodRequest_default_instance_._instance.get_mutable()->source_ = const_cast< ::zb::dcts::scenario::FFP::DemodSource*>(
      ::zb::dcts::scenario::FFP::DemodSource::internal_default_instance());
  ::zb::dcts::scenario::FFP::_AnalogDemodRequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::FFP::AnalogDemodParam*>(
      ::zb::dcts::scenario::FFP::AnalogDemodParam::internal_default_instance());
}
class AnalogDemodRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const AnalogDemodRequest* msg);
  static const ::zb::dcts::scenario::FFP::DemodSource& source(const AnalogDemodRequest* msg);
  static const ::zb::dcts::scenario::FFP::AnalogDemodParam& param(const AnalogDemodRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
AnalogDemodRequest::_Internal::scenario(const AnalogDemodRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::FFP::DemodSource&
AnalogDemodRequest::_Internal::source(const AnalogDemodRequest* msg) {
  return *msg->source_;
}
const ::zb::dcts::scenario::FFP::AnalogDemodParam&
AnalogDemodRequest::_Internal::param(const AnalogDemodRequest* msg) {
  return *msg->param_;
}
void AnalogDemodRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
AnalogDemodRequest::AnalogDemodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.AnalogDemodRequest)
}
AnalogDemodRequest::AnalogDemodRequest(const AnalogDemodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::zb::dcts::scenario::FFP::DemodSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::FFP::AnalogDemodParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.AnalogDemodRequest)
}

void AnalogDemodRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(param_));
}

AnalogDemodRequest::~AnalogDemodRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.AnalogDemodRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalogDemodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete param_;
}

void AnalogDemodRequest::ArenaDtor(void* object) {
  AnalogDemodRequest* _this = reinterpret_cast< AnalogDemodRequest* >(object);
  (void)_this;
}
void AnalogDemodRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalogDemodRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogDemodRequest& AnalogDemodRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogDemodRequest_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void AnalogDemodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogDemodRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.DemodSource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.AnalogDemodParam param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogDemodRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.DemodSource source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 3;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.AnalogDemodRequest)
  return target;
}

size_t AnalogDemodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.FFP.DemodSource source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 3;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogDemodRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogDemodRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogDemodRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.AnalogDemodRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.AnalogDemodRequest)
    MergeFrom(*source);
  }
}

void AnalogDemodRequest::MergeFrom(const AnalogDemodRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::zb::dcts::scenario::FFP::DemodSource::MergeFrom(from._internal_source());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::FFP::AnalogDemodParam::MergeFrom(from._internal_param());
  }
}

void AnalogDemodRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogDemodRequest::CopyFrom(const AnalogDemodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.AnalogDemodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogDemodRequest::IsInitialized() const {
  return true;
}

void AnalogDemodRequest::InternalSwap(AnalogDemodRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogDemodRequest, param_)
      + sizeof(AnalogDemodRequest::param_)
      - PROTOBUF_FIELD_OFFSET(AnalogDemodRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogDemodRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeDemodChannelRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::FFP::_ChangeDemodChannelRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::FFP::_ChangeDemodChannelRequest_default_instance_._instance.get_mutable()->param_ = const_cast< ::zb::dcts::scenario::FFP::AnalogDemodParam*>(
      ::zb::dcts::scenario::FFP::AnalogDemodParam::internal_default_instance());
}
class ChangeDemodChannelRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ChangeDemodChannelRequest* msg);
  static const ::zb::dcts::scenario::FFP::AnalogDemodParam& param(const ChangeDemodChannelRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ChangeDemodChannelRequest::_Internal::responser(const ChangeDemodChannelRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::FFP::AnalogDemodParam&
ChangeDemodChannelRequest::_Internal::param(const ChangeDemodChannelRequest* msg) {
  return *msg->param_;
}
void ChangeDemodChannelRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
ChangeDemodChannelRequest::ChangeDemodChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
}
ChangeDemodChannelRequest::ChangeDemodChannelRequest(const ChangeDemodChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::zb::dcts::scenario::FFP::AnalogDemodParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
}

void ChangeDemodChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(param_));
}

ChangeDemodChannelRequest::~ChangeDemodChannelRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeDemodChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete param_;
}

void ChangeDemodChannelRequest::ArenaDtor(void* object) {
  ChangeDemodChannelRequest* _this = reinterpret_cast< ChangeDemodChannelRequest* >(object);
  (void)_this;
}
void ChangeDemodChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeDemodChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeDemodChannelRequest& ChangeDemodChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeDemodChannelRequest_scenario_2fFFP_2fdemodulate_2eproto.base);
  return *internal_default_instance();
}


void ChangeDemodChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeDemodChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.AnalogDemodParam param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeDemodChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 2;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  return target;
}

size_t ChangeDemodChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 2;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeDemodChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeDemodChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeDemodChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
    MergeFrom(*source);
  }
}

void ChangeDemodChannelRequest::MergeFrom(const ChangeDemodChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::zb::dcts::scenario::FFP::AnalogDemodParam::MergeFrom(from._internal_param());
  }
}

void ChangeDemodChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeDemodChannelRequest::CopyFrom(const ChangeDemodChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeDemodChannelRequest::IsInitialized() const {
  return true;
}

void ChangeDemodChannelRequest::InternalSwap(ChangeDemodChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeDemodChannelRequest, param_)
      + sizeof(ChangeDemodChannelRequest::param_)
      - PROTOBUF_FIELD_OFFSET(ChangeDemodChannelRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeDemodChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::DemodSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::DemodSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::DemodSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::DemodChannel* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::DemodChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::DemodChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::AudioBlock* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::AudioBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::AudioBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ChannelAudio* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ChannelAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ChannelAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::AnalogDemodResult_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::AnalogDemodResult_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::AnalogDemodResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::AnalogDemodResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::AnalogDemodResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::AnalogDemodParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::AnalogDemodParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::AnalogDemodParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::AnalogDemodRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::AnalogDemodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::AnalogDemodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
