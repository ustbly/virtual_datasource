// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/FFP/comSystemIdentify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fcomSystemIdentify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fcomSystemIdentify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fcomSystemIdentify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
class ComSystemIdentifyResult;
class ComSystemIdentifyResultDefaultTypeInternal;
extern ComSystemIdentifyResultDefaultTypeInternal _ComSystemIdentifyResult_default_instance_;
class ComSystemIdentifyResult_Header;
class ComSystemIdentifyResult_HeaderDefaultTypeInternal;
extern ComSystemIdentifyResult_HeaderDefaultTypeInternal _ComSystemIdentifyResult_Header_default_instance_;
class ComSystemParam;
class ComSystemParamDefaultTypeInternal;
extern ComSystemParamDefaultTypeInternal _ComSystemParam_default_instance_;
class ComSystemRequest;
class ComSystemRequestDefaultTypeInternal;
extern ComSystemRequestDefaultTypeInternal _ComSystemRequest_default_instance_;
class ComSystemSource;
class ComSystemSourceDefaultTypeInternal;
extern ComSystemSourceDefaultTypeInternal _ComSystemSource_default_instance_;
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemIdentifyResult>(Arena*);
template<> ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header>(Arena*);
template<> ::zb::dcts::scenario::FFP::ComSystemParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemParam>(Arena*);
template<> ::zb::dcts::scenario::FFP::ComSystemRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemRequest>(Arena*);
template<> ::zb::dcts::scenario::FFP::ComSystemSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {

enum ComSystemIdentifyResult_ComSystemType : int {
  ComSystemIdentifyResult_ComSystemType_UNKNOWN = 0,
  ComSystemIdentifyResult_ComSystemType_DME = 1,
  ComSystemIdentifyResult_ComSystemType_TACAN = 2,
  ComSystemIdentifyResult_ComSystemType_Link4A = 3,
  ComSystemIdentifyResult_ComSystemType_Link11 = 4,
  ComSystemIdentifyResult_ComSystemType_Link16 = 5,
  ComSystemIdentifyResult_ComSystemType_ComSystemIdentifyResult_ComSystemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComSystemIdentifyResult_ComSystemType_ComSystemIdentifyResult_ComSystemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComSystemIdentifyResult_ComSystemType_IsValid(int value);
constexpr ComSystemIdentifyResult_ComSystemType ComSystemIdentifyResult_ComSystemType_ComSystemType_MIN = ComSystemIdentifyResult_ComSystemType_UNKNOWN;
constexpr ComSystemIdentifyResult_ComSystemType ComSystemIdentifyResult_ComSystemType_ComSystemType_MAX = ComSystemIdentifyResult_ComSystemType_Link16;
constexpr int ComSystemIdentifyResult_ComSystemType_ComSystemType_ARRAYSIZE = ComSystemIdentifyResult_ComSystemType_ComSystemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComSystemIdentifyResult_ComSystemType_descriptor();
template<typename T>
inline const std::string& ComSystemIdentifyResult_ComSystemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComSystemIdentifyResult_ComSystemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComSystemIdentifyResult_ComSystemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComSystemIdentifyResult_ComSystemType_descriptor(), enum_t_value);
}
inline bool ComSystemIdentifyResult_ComSystemType_Parse(
    const std::string& name, ComSystemIdentifyResult_ComSystemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComSystemIdentifyResult_ComSystemType>(
    ComSystemIdentifyResult_ComSystemType_descriptor(), name, value);
}
// ===================================================================

class ComSystemSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ComSystemSource) */ {
 public:
  inline ComSystemSource() : ComSystemSource(nullptr) {};
  virtual ~ComSystemSource();

  ComSystemSource(const ComSystemSource& from);
  ComSystemSource(ComSystemSource&& from) noexcept
    : ComSystemSource() {
    *this = ::std::move(from);
  }

  inline ComSystemSource& operator=(const ComSystemSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComSystemSource& operator=(ComSystemSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComSystemSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComSystemSource* internal_default_instance() {
    return reinterpret_cast<const ComSystemSource*>(
               &_ComSystemSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComSystemSource& a, ComSystemSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ComSystemSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComSystemSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComSystemSource* New() const final {
    return CreateMaybeMessage<ComSystemSource>(nullptr);
  }

  ComSystemSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComSystemSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComSystemSource& from);
  void MergeFrom(const ComSystemSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComSystemSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ComSystemSource";
  }
  protected:
  explicit ComSystemSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 1,
    kAttenuationGainFieldNumber = 3,
    kAntennaFieldNumber = 4,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // int32 attenuation_gain = 3;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 4;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ComSystemSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::zb::dcts::source::SourceId* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto;
};
// -------------------------------------------------------------------

class ComSystemParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ComSystemParam) */ {
 public:
  inline ComSystemParam() : ComSystemParam(nullptr) {};
  virtual ~ComSystemParam();

  ComSystemParam(const ComSystemParam& from);
  ComSystemParam(ComSystemParam&& from) noexcept
    : ComSystemParam() {
    *this = ::std::move(from);
  }

  inline ComSystemParam& operator=(const ComSystemParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComSystemParam& operator=(ComSystemParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComSystemParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComSystemParam* internal_default_instance() {
    return reinterpret_cast<const ComSystemParam*>(
               &_ComSystemParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComSystemParam& a, ComSystemParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ComSystemParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComSystemParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComSystemParam* New() const final {
    return CreateMaybeMessage<ComSystemParam>(nullptr);
  }

  ComSystemParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComSystemParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComSystemParam& from);
  void MergeFrom(const ComSystemParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComSystemParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ComSystemParam";
  }
  protected:
  explicit ComSystemParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankFieldNumber = 3,
  };
  // .zb.dcts.scenario.spectrum.DDCBank bank = 3;
  bool has_bank() const;
  private:
  bool _internal_has_bank() const;
  public:
  void clear_bank();
  const ::zb::dcts::scenario::spectrum::DDCBank& bank() const;
  ::zb::dcts::scenario::spectrum::DDCBank* release_bank();
  ::zb::dcts::scenario::spectrum::DDCBank* mutable_bank();
  void set_allocated_bank(::zb::dcts::scenario::spectrum::DDCBank* bank);
  private:
  const ::zb::dcts::scenario::spectrum::DDCBank& _internal_bank() const;
  ::zb::dcts::scenario::spectrum::DDCBank* _internal_mutable_bank();
  public:
  void unsafe_arena_set_allocated_bank(
      ::zb::dcts::scenario::spectrum::DDCBank* bank);
  ::zb::dcts::scenario::spectrum::DDCBank* unsafe_arena_release_bank();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ComSystemParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::DDCBank* bank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto;
};
// -------------------------------------------------------------------

class ComSystemIdentifyResult_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header) */ {
 public:
  inline ComSystemIdentifyResult_Header() : ComSystemIdentifyResult_Header(nullptr) {};
  virtual ~ComSystemIdentifyResult_Header();

  ComSystemIdentifyResult_Header(const ComSystemIdentifyResult_Header& from);
  ComSystemIdentifyResult_Header(ComSystemIdentifyResult_Header&& from) noexcept
    : ComSystemIdentifyResult_Header() {
    *this = ::std::move(from);
  }

  inline ComSystemIdentifyResult_Header& operator=(const ComSystemIdentifyResult_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComSystemIdentifyResult_Header& operator=(ComSystemIdentifyResult_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComSystemIdentifyResult_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComSystemIdentifyResult_Header* internal_default_instance() {
    return reinterpret_cast<const ComSystemIdentifyResult_Header*>(
               &_ComSystemIdentifyResult_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ComSystemIdentifyResult_Header& a, ComSystemIdentifyResult_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(ComSystemIdentifyResult_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComSystemIdentifyResult_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComSystemIdentifyResult_Header* New() const final {
    return CreateMaybeMessage<ComSystemIdentifyResult_Header>(nullptr);
  }

  ComSystemIdentifyResult_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComSystemIdentifyResult_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComSystemIdentifyResult_Header& from);
  void MergeFrom(const ComSystemIdentifyResult_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComSystemIdentifyResult_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header";
  }
  protected:
  explicit ComSystemIdentifyResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kDevicePositionFieldNumber = 4,
    kSequenceNumberFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 4;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto;
};
// -------------------------------------------------------------------

class ComSystemIdentifyResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ComSystemIdentifyResult) */ {
 public:
  inline ComSystemIdentifyResult() : ComSystemIdentifyResult(nullptr) {};
  virtual ~ComSystemIdentifyResult();

  ComSystemIdentifyResult(const ComSystemIdentifyResult& from);
  ComSystemIdentifyResult(ComSystemIdentifyResult&& from) noexcept
    : ComSystemIdentifyResult() {
    *this = ::std::move(from);
  }

  inline ComSystemIdentifyResult& operator=(const ComSystemIdentifyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComSystemIdentifyResult& operator=(ComSystemIdentifyResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComSystemIdentifyResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComSystemIdentifyResult* internal_default_instance() {
    return reinterpret_cast<const ComSystemIdentifyResult*>(
               &_ComSystemIdentifyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComSystemIdentifyResult& a, ComSystemIdentifyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ComSystemIdentifyResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComSystemIdentifyResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComSystemIdentifyResult* New() const final {
    return CreateMaybeMessage<ComSystemIdentifyResult>(nullptr);
  }

  ComSystemIdentifyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComSystemIdentifyResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComSystemIdentifyResult& from);
  void MergeFrom(const ComSystemIdentifyResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComSystemIdentifyResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ComSystemIdentifyResult";
  }
  protected:
  explicit ComSystemIdentifyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComSystemIdentifyResult_Header Header;

  typedef ComSystemIdentifyResult_ComSystemType ComSystemType;
  static constexpr ComSystemType UNKNOWN =
    ComSystemIdentifyResult_ComSystemType_UNKNOWN;
  static constexpr ComSystemType DME =
    ComSystemIdentifyResult_ComSystemType_DME;
  static constexpr ComSystemType TACAN =
    ComSystemIdentifyResult_ComSystemType_TACAN;
  static constexpr ComSystemType Link4A =
    ComSystemIdentifyResult_ComSystemType_Link4A;
  static constexpr ComSystemType Link11 =
    ComSystemIdentifyResult_ComSystemType_Link11;
  static constexpr ComSystemType Link16 =
    ComSystemIdentifyResult_ComSystemType_Link16;
  static inline bool ComSystemType_IsValid(int value) {
    return ComSystemIdentifyResult_ComSystemType_IsValid(value);
  }
  static constexpr ComSystemType ComSystemType_MIN =
    ComSystemIdentifyResult_ComSystemType_ComSystemType_MIN;
  static constexpr ComSystemType ComSystemType_MAX =
    ComSystemIdentifyResult_ComSystemType_ComSystemType_MAX;
  static constexpr int ComSystemType_ARRAYSIZE =
    ComSystemIdentifyResult_ComSystemType_ComSystemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ComSystemType_descriptor() {
    return ComSystemIdentifyResult_ComSystemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ComSystemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ComSystemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ComSystemType_Name.");
    return ComSystemIdentifyResult_ComSystemType_Name(enum_t_value);
  }
  static inline bool ComSystemType_Parse(const std::string& name,
      ComSystemType* value) {
    return ComSystemIdentifyResult_ComSystemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumSamplesFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated float spectrum_samples = 3;
  int spectrum_samples_size() const;
  private:
  int _internal_spectrum_samples_size() const;
  public:
  void clear_spectrum_samples();
  private:
  float _internal_spectrum_samples(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spectrum_samples() const;
  void _internal_add_spectrum_samples(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spectrum_samples();
  public:
  float spectrum_samples(int index) const;
  void set_spectrum_samples(int index, float value);
  void add_spectrum_samples(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spectrum_samples() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spectrum_samples();

  // .zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header& header() const;
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* release_header();
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* header);
  private:
  const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header& _internal_header() const;
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* header);
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.FFP.ComSystemIdentifyResult.ComSystemType type = 2;
  void clear_type();
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType type() const;
  void set_type(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType value);
  private:
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType _internal_type() const;
  void _internal_set_type(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ComSystemIdentifyResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spectrum_samples_;
  mutable std::atomic<int> _spectrum_samples_cached_byte_size_;
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* header_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto;
};
// -------------------------------------------------------------------

class ComSystemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ComSystemRequest) */ {
 public:
  inline ComSystemRequest() : ComSystemRequest(nullptr) {};
  virtual ~ComSystemRequest();

  ComSystemRequest(const ComSystemRequest& from);
  ComSystemRequest(ComSystemRequest&& from) noexcept
    : ComSystemRequest() {
    *this = ::std::move(from);
  }

  inline ComSystemRequest& operator=(const ComSystemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComSystemRequest& operator=(ComSystemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComSystemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComSystemRequest* internal_default_instance() {
    return reinterpret_cast<const ComSystemRequest*>(
               &_ComSystemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ComSystemRequest& a, ComSystemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ComSystemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComSystemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComSystemRequest* New() const final {
    return CreateMaybeMessage<ComSystemRequest>(nullptr);
  }

  ComSystemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComSystemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComSystemRequest& from);
  void MergeFrom(const ComSystemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComSystemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ComSystemRequest";
  }
  protected:
  explicit ComSystemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fcomSystemIdentify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceFieldNumber = 2,
    kParamFieldNumber = 3,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.FFP.ComSystemSource source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::zb::dcts::scenario::FFP::ComSystemSource& source() const;
  ::zb::dcts::scenario::FFP::ComSystemSource* release_source();
  ::zb::dcts::scenario::FFP::ComSystemSource* mutable_source();
  void set_allocated_source(::zb::dcts::scenario::FFP::ComSystemSource* source);
  private:
  const ::zb::dcts::scenario::FFP::ComSystemSource& _internal_source() const;
  ::zb::dcts::scenario::FFP::ComSystemSource* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::zb::dcts::scenario::FFP::ComSystemSource* source);
  ::zb::dcts::scenario::FFP::ComSystemSource* unsafe_arena_release_source();

  // .zb.dcts.scenario.FFP.ComSystemParam param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::scenario::FFP::ComSystemParam& param() const;
  ::zb::dcts::scenario::FFP::ComSystemParam* release_param();
  ::zb::dcts::scenario::FFP::ComSystemParam* mutable_param();
  void set_allocated_param(::zb::dcts::scenario::FFP::ComSystemParam* param);
  private:
  const ::zb::dcts::scenario::FFP::ComSystemParam& _internal_param() const;
  ::zb::dcts::scenario::FFP::ComSystemParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::scenario::FFP::ComSystemParam* param);
  ::zb::dcts::scenario::FFP::ComSystemParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ComSystemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::FFP::ComSystemSource* source_;
  ::zb::dcts::scenario::FFP::ComSystemParam* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fcomSystemIdentify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComSystemSource

// .zb.dcts.source.SourceId id = 1;
inline bool ComSystemSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ComSystemSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& ComSystemSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& ComSystemSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemSource.id)
  return _internal_id();
}
inline void ComSystemSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemSource.id)
}
inline ::zb::dcts::source::SourceId* ComSystemSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* ComSystemSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* ComSystemSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* ComSystemSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemSource.id)
  return _internal_mutable_id();
}
inline void ComSystemSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemSource.id)
}

// string address = 2;
inline void ComSystemSource::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ComSystemSource::address() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemSource.address)
  return _internal_address();
}
inline void ComSystemSource::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemSource.address)
}
inline std::string* ComSystemSource::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemSource.address)
  return _internal_mutable_address();
}
inline const std::string& ComSystemSource::_internal_address() const {
  return address_.Get();
}
inline void ComSystemSource::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComSystemSource::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.FFP.ComSystemSource.address)
}
inline void ComSystemSource::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.FFP.ComSystemSource.address)
}
inline void ComSystemSource::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.FFP.ComSystemSource.address)
}
inline std::string* ComSystemSource::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComSystemSource::release_address() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemSource.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComSystemSource::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemSource.address)
}
inline std::string* ComSystemSource::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.FFP.ComSystemSource.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComSystemSource::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemSource.address)
}

// int32 attenuation_gain = 3;
inline void ComSystemSource::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComSystemSource::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComSystemSource::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemSource.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void ComSystemSource::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void ComSystemSource::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemSource.attenuation_gain)
}

// int32 antenna = 4;
inline void ComSystemSource::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComSystemSource::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComSystemSource::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemSource.antenna)
  return _internal_antenna();
}
inline void ComSystemSource::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void ComSystemSource::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemSource.antenna)
}

// -------------------------------------------------------------------

// ComSystemParam

// .zb.dcts.scenario.spectrum.DDCBank bank = 3;
inline bool ComSystemParam::_internal_has_bank() const {
  return this != internal_default_instance() && bank_ != nullptr;
}
inline bool ComSystemParam::has_bank() const {
  return _internal_has_bank();
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& ComSystemParam::_internal_bank() const {
  const ::zb::dcts::scenario::spectrum::DDCBank* p = bank_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::DDCBank*>(
      &::zb::dcts::scenario::spectrum::_DDCBank_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& ComSystemParam::bank() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemParam.bank)
  return _internal_bank();
}
inline void ComSystemParam::unsafe_arena_set_allocated_bank(
    ::zb::dcts::scenario::spectrum::DDCBank* bank) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bank_);
  }
  bank_ = bank;
  if (bank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemParam.bank)
}
inline ::zb::dcts::scenario::spectrum::DDCBank* ComSystemParam::release_bank() {
  auto temp = unsafe_arena_release_bank();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* ComSystemParam::unsafe_arena_release_bank() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemParam.bank)
  
  ::zb::dcts::scenario::spectrum::DDCBank* temp = bank_;
  bank_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* ComSystemParam::_internal_mutable_bank() {
  
  if (bank_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::DDCBank>(GetArena());
    bank_ = p;
  }
  return bank_;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* ComSystemParam::mutable_bank() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemParam.bank)
  return _internal_mutable_bank();
}
inline void ComSystemParam::set_allocated_bank(::zb::dcts::scenario::spectrum::DDCBank* bank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bank_);
  }
  if (bank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bank)->GetArena();
    if (message_arena != submessage_arena) {
      bank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bank, submessage_arena);
    }
    
  } else {
    
  }
  bank_ = bank;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemParam.bank)
}

// -------------------------------------------------------------------

// ComSystemIdentifyResult_Header

// .zb.dcts.source.SourceId result_from = 1;
inline bool ComSystemIdentifyResult_Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool ComSystemIdentifyResult_Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& ComSystemIdentifyResult_Header::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& ComSystemIdentifyResult_Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.result_from)
  return _internal_result_from();
}
inline void ComSystemIdentifyResult_Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.result_from)
}
inline ::zb::dcts::source::SourceId* ComSystemIdentifyResult_Header::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* ComSystemIdentifyResult_Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* ComSystemIdentifyResult_Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* ComSystemIdentifyResult_Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.result_from)
  return _internal_mutable_result_from();
}
inline void ComSystemIdentifyResult_Header::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.result_from)
}

// uint32 sequence_number = 2;
inline void ComSystemIdentifyResult_Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComSystemIdentifyResult_Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComSystemIdentifyResult_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.sequence_number)
  return _internal_sequence_number();
}
inline void ComSystemIdentifyResult_Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void ComSystemIdentifyResult_Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.sequence_number)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool ComSystemIdentifyResult_Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool ComSystemIdentifyResult_Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& ComSystemIdentifyResult_Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& ComSystemIdentifyResult_Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.time_span)
  return _internal_time_span();
}
inline void ComSystemIdentifyResult_Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.time_span)
}
inline ::zb::dcts::TimeSpan* ComSystemIdentifyResult_Header::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* ComSystemIdentifyResult_Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* ComSystemIdentifyResult_Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* ComSystemIdentifyResult_Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.time_span)
  return _internal_mutable_time_span();
}
inline void ComSystemIdentifyResult_Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.time_span)
}

// .zb.dcts.Position device_position = 4;
inline bool ComSystemIdentifyResult_Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool ComSystemIdentifyResult_Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& ComSystemIdentifyResult_Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& ComSystemIdentifyResult_Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.device_position)
  return _internal_device_position();
}
inline void ComSystemIdentifyResult_Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.device_position)
}
inline ::zb::dcts::Position* ComSystemIdentifyResult_Header::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* ComSystemIdentifyResult_Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* ComSystemIdentifyResult_Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* ComSystemIdentifyResult_Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.device_position)
  return _internal_mutable_device_position();
}
inline void ComSystemIdentifyResult_Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header.device_position)
}

// -------------------------------------------------------------------

// ComSystemIdentifyResult

// .zb.dcts.scenario.FFP.ComSystemIdentifyResult.Header header = 1;
inline bool ComSystemIdentifyResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ComSystemIdentifyResult::has_header() const {
  return _internal_has_header();
}
inline void ComSystemIdentifyResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header& ComSystemIdentifyResult::_internal_header() const {
  const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header*>(
      &::zb::dcts::scenario::FFP::_ComSystemIdentifyResult_Header_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header& ComSystemIdentifyResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.header)
  return _internal_header();
}
inline void ComSystemIdentifyResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.header)
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* ComSystemIdentifyResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* ComSystemIdentifyResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemIdentifyResult.header)
  
  ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* ComSystemIdentifyResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* ComSystemIdentifyResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemIdentifyResult.header)
  return _internal_mutable_header();
}
inline void ComSystemIdentifyResult::set_allocated_header(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemIdentifyResult.header)
}

// .zb.dcts.scenario.FFP.ComSystemIdentifyResult.ComSystemType type = 2;
inline void ComSystemIdentifyResult::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType ComSystemIdentifyResult::_internal_type() const {
  return static_cast< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType >(type_);
}
inline ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType ComSystemIdentifyResult::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.type)
  return _internal_type();
}
inline void ComSystemIdentifyResult::_internal_set_type(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType value) {
  
  type_ = value;
}
inline void ComSystemIdentifyResult::set_type(::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemIdentifyResult.type)
}

// repeated float spectrum_samples = 3;
inline int ComSystemIdentifyResult::_internal_spectrum_samples_size() const {
  return spectrum_samples_.size();
}
inline int ComSystemIdentifyResult::spectrum_samples_size() const {
  return _internal_spectrum_samples_size();
}
inline void ComSystemIdentifyResult::clear_spectrum_samples() {
  spectrum_samples_.Clear();
}
inline float ComSystemIdentifyResult::_internal_spectrum_samples(int index) const {
  return spectrum_samples_.Get(index);
}
inline float ComSystemIdentifyResult::spectrum_samples(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemIdentifyResult.spectrum_samples)
  return _internal_spectrum_samples(index);
}
inline void ComSystemIdentifyResult::set_spectrum_samples(int index, float value) {
  spectrum_samples_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ComSystemIdentifyResult.spectrum_samples)
}
inline void ComSystemIdentifyResult::_internal_add_spectrum_samples(float value) {
  spectrum_samples_.Add(value);
}
inline void ComSystemIdentifyResult::add_spectrum_samples(float value) {
  _internal_add_spectrum_samples(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.FFP.ComSystemIdentifyResult.spectrum_samples)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComSystemIdentifyResult::_internal_spectrum_samples() const {
  return spectrum_samples_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ComSystemIdentifyResult::spectrum_samples() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.FFP.ComSystemIdentifyResult.spectrum_samples)
  return _internal_spectrum_samples();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComSystemIdentifyResult::_internal_mutable_spectrum_samples() {
  return &spectrum_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ComSystemIdentifyResult::mutable_spectrum_samples() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.FFP.ComSystemIdentifyResult.spectrum_samples)
  return _internal_mutable_spectrum_samples();
}

// -------------------------------------------------------------------

// ComSystemRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool ComSystemRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool ComSystemRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& ComSystemRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& ComSystemRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemRequest.scenario)
  return _internal_scenario();
}
inline void ComSystemRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* ComSystemRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* ComSystemRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* ComSystemRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* ComSystemRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemRequest.scenario)
  return _internal_mutable_scenario();
}
inline void ComSystemRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.scenario)
}

// .zb.dcts.scenario.FFP.ComSystemSource source = 2;
inline bool ComSystemRequest::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool ComSystemRequest::has_source() const {
  return _internal_has_source();
}
inline void ComSystemRequest::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::ComSystemSource& ComSystemRequest::_internal_source() const {
  const ::zb::dcts::scenario::FFP::ComSystemSource* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::ComSystemSource*>(
      &::zb::dcts::scenario::FFP::_ComSystemSource_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::ComSystemSource& ComSystemRequest::source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemRequest.source)
  return _internal_source();
}
inline void ComSystemRequest::unsafe_arena_set_allocated_source(
    ::zb::dcts::scenario::FFP::ComSystemSource* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.source)
}
inline ::zb::dcts::scenario::FFP::ComSystemSource* ComSystemRequest::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemSource* ComSystemRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemRequest.source)
  
  ::zb::dcts::scenario::FFP::ComSystemSource* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemSource* ComSystemRequest::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemSource>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::zb::dcts::scenario::FFP::ComSystemSource* ComSystemRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemRequest.source)
  return _internal_mutable_source();
}
inline void ComSystemRequest::set_allocated_source(::zb::dcts::scenario::FFP::ComSystemSource* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.source)
}

// .zb.dcts.scenario.FFP.ComSystemParam param = 3;
inline bool ComSystemRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ComSystemRequest::has_param() const {
  return _internal_has_param();
}
inline void ComSystemRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::ComSystemParam& ComSystemRequest::_internal_param() const {
  const ::zb::dcts::scenario::FFP::ComSystemParam* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::ComSystemParam*>(
      &::zb::dcts::scenario::FFP::_ComSystemParam_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::ComSystemParam& ComSystemRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ComSystemRequest.param)
  return _internal_param();
}
inline void ComSystemRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::scenario::FFP::ComSystemParam* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.param)
}
inline ::zb::dcts::scenario::FFP::ComSystemParam* ComSystemRequest::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemParam* ComSystemRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ComSystemRequest.param)
  
  ::zb::dcts::scenario::FFP::ComSystemParam* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::ComSystemParam* ComSystemRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::ComSystemParam>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::scenario::FFP::ComSystemParam* ComSystemRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ComSystemRequest.param)
  return _internal_mutable_param();
}
inline void ComSystemRequest::set_allocated_param(::zb::dcts::scenario::FFP::ComSystemParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ComSystemRequest.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType>() {
  return ::zb::dcts::scenario::FFP::ComSystemIdentifyResult_ComSystemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fcomSystemIdentify_2eproto
