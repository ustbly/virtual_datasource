// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/FFP/demodulate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fdemodulate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fdemodulate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fFFP_2fdemodulate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fFFP_2fdemodulate_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {
class AnalogDemodParam;
class AnalogDemodParamDefaultTypeInternal;
extern AnalogDemodParamDefaultTypeInternal _AnalogDemodParam_default_instance_;
class AnalogDemodRequest;
class AnalogDemodRequestDefaultTypeInternal;
extern AnalogDemodRequestDefaultTypeInternal _AnalogDemodRequest_default_instance_;
class AnalogDemodResult;
class AnalogDemodResultDefaultTypeInternal;
extern AnalogDemodResultDefaultTypeInternal _AnalogDemodResult_default_instance_;
class AnalogDemodResult_Header;
class AnalogDemodResult_HeaderDefaultTypeInternal;
extern AnalogDemodResult_HeaderDefaultTypeInternal _AnalogDemodResult_Header_default_instance_;
class AudioBlock;
class AudioBlockDefaultTypeInternal;
extern AudioBlockDefaultTypeInternal _AudioBlock_default_instance_;
class ChangeDemodChannelRequest;
class ChangeDemodChannelRequestDefaultTypeInternal;
extern ChangeDemodChannelRequestDefaultTypeInternal _ChangeDemodChannelRequest_default_instance_;
class ChannelAudio;
class ChannelAudioDefaultTypeInternal;
extern ChannelAudioDefaultTypeInternal _ChannelAudio_default_instance_;
class DemodChannel;
class DemodChannelDefaultTypeInternal;
extern DemodChannelDefaultTypeInternal _DemodChannel_default_instance_;
class DemodSource;
class DemodSourceDefaultTypeInternal;
extern DemodSourceDefaultTypeInternal _DemodSource_default_instance_;
}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::FFP::AnalogDemodParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodParam>(Arena*);
template<> ::zb::dcts::scenario::FFP::AnalogDemodRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodRequest>(Arena*);
template<> ::zb::dcts::scenario::FFP::AnalogDemodResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodResult>(Arena*);
template<> ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodResult_Header>(Arena*);
template<> ::zb::dcts::scenario::FFP::AudioBlock* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::AudioBlock>(Arena*);
template<> ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ChangeDemodChannelRequest>(Arena*);
template<> ::zb::dcts::scenario::FFP::ChannelAudio* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::ChannelAudio>(Arena*);
template<> ::zb::dcts::scenario::FFP::DemodChannel* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::DemodChannel>(Arena*);
template<> ::zb::dcts::scenario::FFP::DemodSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::FFP::DemodSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {

enum AnalogModType : int {
  AM = 0,
  FM = 1,
  PM = 2,
  CW = 3,
  LSB = 4,
  USB = 5,
  PULSE = 6,
  AnalogModType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnalogModType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnalogModType_IsValid(int value);
constexpr AnalogModType AnalogModType_MIN = AM;
constexpr AnalogModType AnalogModType_MAX = PULSE;
constexpr int AnalogModType_ARRAYSIZE = AnalogModType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnalogModType_descriptor();
template<typename T>
inline const std::string& AnalogModType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalogModType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalogModType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnalogModType_descriptor(), enum_t_value);
}
inline bool AnalogModType_Parse(
    const std::string& name, AnalogModType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnalogModType>(
    AnalogModType_descriptor(), name, value);
}
// ===================================================================

class DemodSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.DemodSource) */ {
 public:
  inline DemodSource() : DemodSource(nullptr) {};
  virtual ~DemodSource();

  DemodSource(const DemodSource& from);
  DemodSource(DemodSource&& from) noexcept
    : DemodSource() {
    *this = ::std::move(from);
  }

  inline DemodSource& operator=(const DemodSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemodSource& operator=(DemodSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemodSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemodSource* internal_default_instance() {
    return reinterpret_cast<const DemodSource*>(
               &_DemodSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemodSource& a, DemodSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DemodSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemodSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemodSource* New() const final {
    return CreateMaybeMessage<DemodSource>(nullptr);
  }

  DemodSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemodSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemodSource& from);
  void MergeFrom(const DemodSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemodSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.DemodSource";
  }
  protected:
  explicit DemodSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 1,
    kAttenuationGainFieldNumber = 3,
    kAntennaFieldNumber = 4,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // int32 attenuation_gain = 3;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 4;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.DemodSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::zb::dcts::source::SourceId* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class DemodChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.DemodChannel) */ {
 public:
  inline DemodChannel() : DemodChannel(nullptr) {};
  virtual ~DemodChannel();

  DemodChannel(const DemodChannel& from);
  DemodChannel(DemodChannel&& from) noexcept
    : DemodChannel() {
    *this = ::std::move(from);
  }

  inline DemodChannel& operator=(const DemodChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemodChannel& operator=(DemodChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemodChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemodChannel* internal_default_instance() {
    return reinterpret_cast<const DemodChannel*>(
               &_DemodChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemodChannel& a, DemodChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(DemodChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemodChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemodChannel* New() const final {
    return CreateMaybeMessage<DemodChannel>(nullptr);
  }

  DemodChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemodChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemodChannel& from);
  void MergeFrom(const DemodChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemodChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.DemodChannel";
  }
  protected:
  explicit DemodChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignalBandFieldNumber = 2,
    kAudioSrFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::scenario::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::scenario::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::scenario::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  ::zb::dcts::scenario::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // double audio_sr = 3;
  void clear_audio_sr();
  double audio_sr() const;
  void set_audio_sr(double value);
  private:
  double _internal_audio_sr() const;
  void _internal_set_audio_sr(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.DemodChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::zb::dcts::scenario::spectrum::SignalBand* signal_band_;
  double audio_sr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class AudioBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.AudioBlock) */ {
 public:
  inline AudioBlock() : AudioBlock(nullptr) {};
  virtual ~AudioBlock();

  AudioBlock(const AudioBlock& from);
  AudioBlock(AudioBlock&& from) noexcept
    : AudioBlock() {
    *this = ::std::move(from);
  }

  inline AudioBlock& operator=(const AudioBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBlock& operator=(AudioBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioBlock* internal_default_instance() {
    return reinterpret_cast<const AudioBlock*>(
               &_AudioBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioBlock& a, AudioBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioBlock* New() const final {
    return CreateMaybeMessage<AudioBlock>(nullptr);
  }

  AudioBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioBlock& from);
  void MergeFrom(const AudioBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.AudioBlock";
  }
  protected:
  explicit AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcmBitstreamFieldNumber = 3,
  };
  // repeated int32 pcm_bitstream = 3;
  int pcm_bitstream_size() const;
  private:
  int _internal_pcm_bitstream_size() const;
  public:
  void clear_pcm_bitstream();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcm_bitstream(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pcm_bitstream() const;
  void _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pcm_bitstream();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pcm_bitstream(int index) const;
  void set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pcm_bitstream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pcm_bitstream();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.AudioBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pcm_bitstream_;
  mutable std::atomic<int> _pcm_bitstream_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class ChannelAudio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ChannelAudio) */ {
 public:
  inline ChannelAudio() : ChannelAudio(nullptr) {};
  virtual ~ChannelAudio();

  ChannelAudio(const ChannelAudio& from);
  ChannelAudio(ChannelAudio&& from) noexcept
    : ChannelAudio() {
    *this = ::std::move(from);
  }

  inline ChannelAudio& operator=(const ChannelAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelAudio& operator=(ChannelAudio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelAudio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelAudio* internal_default_instance() {
    return reinterpret_cast<const ChannelAudio*>(
               &_ChannelAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelAudio& a, ChannelAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelAudio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelAudio* New() const final {
    return CreateMaybeMessage<ChannelAudio>(nullptr);
  }

  ChannelAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelAudio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelAudio& from);
  void MergeFrom(const ChannelAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelAudio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ChannelAudio";
  }
  protected:
  explicit ChannelAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.FFP.AudioBlock blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::zb::dcts::scenario::FFP::AudioBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::FFP::AudioBlock >*
      mutable_blocks();
  private:
  const ::zb::dcts::scenario::FFP::AudioBlock& _internal_blocks(int index) const;
  ::zb::dcts::scenario::FFP::AudioBlock* _internal_add_blocks();
  public:
  const ::zb::dcts::scenario::FFP::AudioBlock& blocks(int index) const;
  ::zb::dcts::scenario::FFP::AudioBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::FFP::AudioBlock >&
      blocks() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ChannelAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::FFP::AudioBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class AnalogDemodResult_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.AnalogDemodResult.Header) */ {
 public:
  inline AnalogDemodResult_Header() : AnalogDemodResult_Header(nullptr) {};
  virtual ~AnalogDemodResult_Header();

  AnalogDemodResult_Header(const AnalogDemodResult_Header& from);
  AnalogDemodResult_Header(AnalogDemodResult_Header&& from) noexcept
    : AnalogDemodResult_Header() {
    *this = ::std::move(from);
  }

  inline AnalogDemodResult_Header& operator=(const AnalogDemodResult_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogDemodResult_Header& operator=(AnalogDemodResult_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogDemodResult_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogDemodResult_Header* internal_default_instance() {
    return reinterpret_cast<const AnalogDemodResult_Header*>(
               &_AnalogDemodResult_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnalogDemodResult_Header& a, AnalogDemodResult_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogDemodResult_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogDemodResult_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogDemodResult_Header* New() const final {
    return CreateMaybeMessage<AnalogDemodResult_Header>(nullptr);
  }

  AnalogDemodResult_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogDemodResult_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogDemodResult_Header& from);
  void MergeFrom(const AnalogDemodResult_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogDemodResult_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.AnalogDemodResult.Header";
  }
  protected:
  explicit AnalogDemodResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kDevicePositionFieldNumber = 4,
    kSequenceNumberFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 4;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.AnalogDemodResult.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class AnalogDemodResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.AnalogDemodResult) */ {
 public:
  inline AnalogDemodResult() : AnalogDemodResult(nullptr) {};
  virtual ~AnalogDemodResult();

  AnalogDemodResult(const AnalogDemodResult& from);
  AnalogDemodResult(AnalogDemodResult&& from) noexcept
    : AnalogDemodResult() {
    *this = ::std::move(from);
  }

  inline AnalogDemodResult& operator=(const AnalogDemodResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogDemodResult& operator=(AnalogDemodResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogDemodResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogDemodResult* internal_default_instance() {
    return reinterpret_cast<const AnalogDemodResult*>(
               &_AnalogDemodResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AnalogDemodResult& a, AnalogDemodResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogDemodResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogDemodResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogDemodResult* New() const final {
    return CreateMaybeMessage<AnalogDemodResult>(nullptr);
  }

  AnalogDemodResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogDemodResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogDemodResult& from);
  void MergeFrom(const AnalogDemodResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogDemodResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.AnalogDemodResult";
  }
  protected:
  explicit AnalogDemodResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AnalogDemodResult_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChannelAudioFieldNumber = 2,
  };
  // .zb.dcts.scenario.FFP.AnalogDemodResult.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header& header() const;
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* release_header();
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::FFP::AnalogDemodResult_Header* header);
  private:
  const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header& _internal_header() const;
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* header);
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 2;
  bool has_channel_audio() const;
  private:
  bool _internal_has_channel_audio() const;
  public:
  void clear_channel_audio();
  const ::zb::dcts::scenario::FFP::ChannelAudio& channel_audio() const;
  ::zb::dcts::scenario::FFP::ChannelAudio* release_channel_audio();
  ::zb::dcts::scenario::FFP::ChannelAudio* mutable_channel_audio();
  void set_allocated_channel_audio(::zb::dcts::scenario::FFP::ChannelAudio* channel_audio);
  private:
  const ::zb::dcts::scenario::FFP::ChannelAudio& _internal_channel_audio() const;
  ::zb::dcts::scenario::FFP::ChannelAudio* _internal_mutable_channel_audio();
  public:
  void unsafe_arena_set_allocated_channel_audio(
      ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio);
  ::zb::dcts::scenario::FFP::ChannelAudio* unsafe_arena_release_channel_audio();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.AnalogDemodResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* header_;
  ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class AnalogDemodParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.AnalogDemodParam) */ {
 public:
  inline AnalogDemodParam() : AnalogDemodParam(nullptr) {};
  virtual ~AnalogDemodParam();

  AnalogDemodParam(const AnalogDemodParam& from);
  AnalogDemodParam(AnalogDemodParam&& from) noexcept
    : AnalogDemodParam() {
    *this = ::std::move(from);
  }

  inline AnalogDemodParam& operator=(const AnalogDemodParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogDemodParam& operator=(AnalogDemodParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogDemodParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogDemodParam* internal_default_instance() {
    return reinterpret_cast<const AnalogDemodParam*>(
               &_AnalogDemodParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnalogDemodParam& a, AnalogDemodParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogDemodParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogDemodParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogDemodParam* New() const final {
    return CreateMaybeMessage<AnalogDemodParam>(nullptr);
  }

  AnalogDemodParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogDemodParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogDemodParam& from);
  void MergeFrom(const AnalogDemodParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogDemodParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.AnalogDemodParam";
  }
  protected:
  explicit AnalogDemodParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .zb.dcts.scenario.FFP.DemodChannel channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::zb::dcts::scenario::FFP::DemodChannel& channel() const;
  ::zb::dcts::scenario::FFP::DemodChannel* release_channel();
  ::zb::dcts::scenario::FFP::DemodChannel* mutable_channel();
  void set_allocated_channel(::zb::dcts::scenario::FFP::DemodChannel* channel);
  private:
  const ::zb::dcts::scenario::FFP::DemodChannel& _internal_channel() const;
  ::zb::dcts::scenario::FFP::DemodChannel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::zb::dcts::scenario::FFP::DemodChannel* channel);
  ::zb::dcts::scenario::FFP::DemodChannel* unsafe_arena_release_channel();

  // .zb.dcts.scenario.FFP.AnalogModType type = 1;
  void clear_type();
  ::zb::dcts::scenario::FFP::AnalogModType type() const;
  void set_type(::zb::dcts::scenario::FFP::AnalogModType value);
  private:
  ::zb::dcts::scenario::FFP::AnalogModType _internal_type() const;
  void _internal_set_type(::zb::dcts::scenario::FFP::AnalogModType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.AnalogDemodParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::FFP::DemodChannel* channel_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class AnalogDemodRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.AnalogDemodRequest) */ {
 public:
  inline AnalogDemodRequest() : AnalogDemodRequest(nullptr) {};
  virtual ~AnalogDemodRequest();

  AnalogDemodRequest(const AnalogDemodRequest& from);
  AnalogDemodRequest(AnalogDemodRequest&& from) noexcept
    : AnalogDemodRequest() {
    *this = ::std::move(from);
  }

  inline AnalogDemodRequest& operator=(const AnalogDemodRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogDemodRequest& operator=(AnalogDemodRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalogDemodRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalogDemodRequest* internal_default_instance() {
    return reinterpret_cast<const AnalogDemodRequest*>(
               &_AnalogDemodRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AnalogDemodRequest& a, AnalogDemodRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogDemodRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogDemodRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalogDemodRequest* New() const final {
    return CreateMaybeMessage<AnalogDemodRequest>(nullptr);
  }

  AnalogDemodRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalogDemodRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalogDemodRequest& from);
  void MergeFrom(const AnalogDemodRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogDemodRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.AnalogDemodRequest";
  }
  protected:
  explicit AnalogDemodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceFieldNumber = 2,
    kParamFieldNumber = 3,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.FFP.DemodSource source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::zb::dcts::scenario::FFP::DemodSource& source() const;
  ::zb::dcts::scenario::FFP::DemodSource* release_source();
  ::zb::dcts::scenario::FFP::DemodSource* mutable_source();
  void set_allocated_source(::zb::dcts::scenario::FFP::DemodSource* source);
  private:
  const ::zb::dcts::scenario::FFP::DemodSource& _internal_source() const;
  ::zb::dcts::scenario::FFP::DemodSource* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::zb::dcts::scenario::FFP::DemodSource* source);
  ::zb::dcts::scenario::FFP::DemodSource* unsafe_arena_release_source();

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::scenario::FFP::AnalogDemodParam& param() const;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* release_param();
  ::zb::dcts::scenario::FFP::AnalogDemodParam* mutable_param();
  void set_allocated_param(::zb::dcts::scenario::FFP::AnalogDemodParam* param);
  private:
  const ::zb::dcts::scenario::FFP::AnalogDemodParam& _internal_param() const;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::scenario::FFP::AnalogDemodParam* param);
  ::zb::dcts::scenario::FFP::AnalogDemodParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.AnalogDemodRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::FFP::DemodSource* source_;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// -------------------------------------------------------------------

class ChangeDemodChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.FFP.ChangeDemodChannelRequest) */ {
 public:
  inline ChangeDemodChannelRequest() : ChangeDemodChannelRequest(nullptr) {};
  virtual ~ChangeDemodChannelRequest();

  ChangeDemodChannelRequest(const ChangeDemodChannelRequest& from);
  ChangeDemodChannelRequest(ChangeDemodChannelRequest&& from) noexcept
    : ChangeDemodChannelRequest() {
    *this = ::std::move(from);
  }

  inline ChangeDemodChannelRequest& operator=(const ChangeDemodChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDemodChannelRequest& operator=(ChangeDemodChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeDemodChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeDemodChannelRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeDemodChannelRequest*>(
               &_ChangeDemodChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChangeDemodChannelRequest& a, ChangeDemodChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDemodChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDemodChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeDemodChannelRequest* New() const final {
    return CreateMaybeMessage<ChangeDemodChannelRequest>(nullptr);
  }

  ChangeDemodChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeDemodChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeDemodChannelRequest& from);
  void MergeFrom(const ChangeDemodChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDemodChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.FFP.ChangeDemodChannelRequest";
  }
  protected:
  explicit ChangeDemodChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto);
    return ::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.FFP.AnalogDemodParam param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::scenario::FFP::AnalogDemodParam& param() const;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* release_param();
  ::zb::dcts::scenario::FFP::AnalogDemodParam* mutable_param();
  void set_allocated_param(::zb::dcts::scenario::FFP::AnalogDemodParam* param);
  private:
  const ::zb::dcts::scenario::FFP::AnalogDemodParam& _internal_param() const;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::scenario::FFP::AnalogDemodParam* param);
  ::zb::dcts::scenario::FFP::AnalogDemodParam* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.FFP.ChangeDemodChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::FFP::AnalogDemodParam* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fFFP_2fdemodulate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemodSource

// .zb.dcts.source.SourceId id = 1;
inline bool DemodSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool DemodSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& DemodSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& DemodSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodSource.id)
  return _internal_id();
}
inline void DemodSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.DemodSource.id)
}
inline ::zb::dcts::source::SourceId* DemodSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* DemodSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.DemodSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* DemodSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* DemodSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.DemodSource.id)
  return _internal_mutable_id();
}
inline void DemodSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.DemodSource.id)
}

// string address = 2;
inline void DemodSource::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DemodSource::address() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodSource.address)
  return _internal_address();
}
inline void DemodSource::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.DemodSource.address)
}
inline std::string* DemodSource::mutable_address() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.DemodSource.address)
  return _internal_mutable_address();
}
inline const std::string& DemodSource::_internal_address() const {
  return address_.Get();
}
inline void DemodSource::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DemodSource::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.FFP.DemodSource.address)
}
inline void DemodSource::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.FFP.DemodSource.address)
}
inline void DemodSource::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.FFP.DemodSource.address)
}
inline std::string* DemodSource::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DemodSource::release_address() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.DemodSource.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DemodSource::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.DemodSource.address)
}
inline std::string* DemodSource::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.FFP.DemodSource.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DemodSource::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.DemodSource.address)
}

// int32 attenuation_gain = 3;
inline void DemodSource::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodSource::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodSource::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodSource.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void DemodSource::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void DemodSource::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.DemodSource.attenuation_gain)
}

// int32 antenna = 4;
inline void DemodSource::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodSource::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DemodSource::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodSource.antenna)
  return _internal_antenna();
}
inline void DemodSource::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void DemodSource::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.DemodSource.antenna)
}

// -------------------------------------------------------------------

// DemodChannel

// string id = 1;
inline void DemodChannel::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DemodChannel::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodChannel.id)
  return _internal_id();
}
inline void DemodChannel::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.DemodChannel.id)
}
inline std::string* DemodChannel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.DemodChannel.id)
  return _internal_mutable_id();
}
inline const std::string& DemodChannel::_internal_id() const {
  return id_.Get();
}
inline void DemodChannel::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DemodChannel::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.FFP.DemodChannel.id)
}
inline void DemodChannel::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.FFP.DemodChannel.id)
}
inline void DemodChannel::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.FFP.DemodChannel.id)
}
inline std::string* DemodChannel::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DemodChannel::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.DemodChannel.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DemodChannel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.DemodChannel.id)
}
inline std::string* DemodChannel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.FFP.DemodChannel.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DemodChannel::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.DemodChannel.id)
}

// .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
inline bool DemodChannel::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool DemodChannel::has_signal_band() const {
  return _internal_has_signal_band();
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DemodChannel::_internal_signal_band() const {
  const ::zb::dcts::scenario::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SignalBand*>(
      &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DemodChannel::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodChannel.signal_band)
  return _internal_signal_band();
}
inline void DemodChannel::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.DemodChannel.signal_band)
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::release_signal_band() {
  auto temp = unsafe_arena_release_signal_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.DemodChannel.signal_band)
  
  ::zb::dcts::scenario::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.DemodChannel.signal_band)
  return _internal_mutable_signal_band();
}
inline void DemodChannel::set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band)->GetArena();
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.DemodChannel.signal_band)
}

// double audio_sr = 3;
inline void DemodChannel::clear_audio_sr() {
  audio_sr_ = 0;
}
inline double DemodChannel::_internal_audio_sr() const {
  return audio_sr_;
}
inline double DemodChannel::audio_sr() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.DemodChannel.audio_sr)
  return _internal_audio_sr();
}
inline void DemodChannel::_internal_set_audio_sr(double value) {
  
  audio_sr_ = value;
}
inline void DemodChannel::set_audio_sr(double value) {
  _internal_set_audio_sr(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.DemodChannel.audio_sr)
}

// -------------------------------------------------------------------

// AudioBlock

// repeated int32 pcm_bitstream = 3;
inline int AudioBlock::_internal_pcm_bitstream_size() const {
  return pcm_bitstream_.size();
}
inline int AudioBlock::pcm_bitstream_size() const {
  return _internal_pcm_bitstream_size();
}
inline void AudioBlock::clear_pcm_bitstream() {
  pcm_bitstream_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::_internal_pcm_bitstream(int index) const {
  return pcm_bitstream_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::pcm_bitstream(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream(index);
}
inline void AudioBlock::set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.AudioBlock.pcm_bitstream)
}
inline void AudioBlock::_internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Add(value);
}
inline void AudioBlock::add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pcm_bitstream(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.FFP.AudioBlock.pcm_bitstream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::_internal_pcm_bitstream() const {
  return pcm_bitstream_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::pcm_bitstream() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.FFP.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::_internal_mutable_pcm_bitstream() {
  return &pcm_bitstream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::mutable_pcm_bitstream() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.FFP.AudioBlock.pcm_bitstream)
  return _internal_mutable_pcm_bitstream();
}

// -------------------------------------------------------------------

// ChannelAudio

// string id = 1;
inline void ChannelAudio::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChannelAudio::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ChannelAudio.id)
  return _internal_id();
}
inline void ChannelAudio::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.ChannelAudio.id)
}
inline std::string* ChannelAudio::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ChannelAudio.id)
  return _internal_mutable_id();
}
inline const std::string& ChannelAudio::_internal_id() const {
  return id_.Get();
}
inline void ChannelAudio::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChannelAudio::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.FFP.ChannelAudio.id)
}
inline void ChannelAudio::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.FFP.ChannelAudio.id)
}
inline void ChannelAudio::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.FFP.ChannelAudio.id)
}
inline std::string* ChannelAudio::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChannelAudio::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ChannelAudio.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelAudio::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ChannelAudio.id)
}
inline std::string* ChannelAudio::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.FFP.ChannelAudio.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChannelAudio::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ChannelAudio.id)
}

// repeated .zb.dcts.scenario.FFP.AudioBlock blocks = 2;
inline int ChannelAudio::_internal_blocks_size() const {
  return blocks_.size();
}
inline int ChannelAudio::blocks_size() const {
  return _internal_blocks_size();
}
inline void ChannelAudio::clear_blocks() {
  blocks_.Clear();
}
inline ::zb::dcts::scenario::FFP::AudioBlock* ChannelAudio::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ChannelAudio.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::FFP::AudioBlock >*
ChannelAudio::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.FFP.ChannelAudio.blocks)
  return &blocks_;
}
inline const ::zb::dcts::scenario::FFP::AudioBlock& ChannelAudio::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::zb::dcts::scenario::FFP::AudioBlock& ChannelAudio::blocks(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ChannelAudio.blocks)
  return _internal_blocks(index);
}
inline ::zb::dcts::scenario::FFP::AudioBlock* ChannelAudio::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::zb::dcts::scenario::FFP::AudioBlock* ChannelAudio::add_blocks() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.FFP.ChannelAudio.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::FFP::AudioBlock >&
ChannelAudio::blocks() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.FFP.ChannelAudio.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// AnalogDemodResult_Header

// .zb.dcts.source.SourceId result_from = 1;
inline bool AnalogDemodResult_Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool AnalogDemodResult_Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& AnalogDemodResult_Header::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& AnalogDemodResult_Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.Header.result_from)
  return _internal_result_from();
}
inline void AnalogDemodResult_Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.result_from)
}
inline ::zb::dcts::source::SourceId* AnalogDemodResult_Header::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* AnalogDemodResult_Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodResult.Header.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* AnalogDemodResult_Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* AnalogDemodResult_Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodResult.Header.result_from)
  return _internal_mutable_result_from();
}
inline void AnalogDemodResult_Header::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.result_from)
}

// uint32 sequence_number = 2;
inline void AnalogDemodResult_Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogDemodResult_Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalogDemodResult_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.Header.sequence_number)
  return _internal_sequence_number();
}
inline void AnalogDemodResult_Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void AnalogDemodResult_Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.AnalogDemodResult.Header.sequence_number)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool AnalogDemodResult_Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool AnalogDemodResult_Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& AnalogDemodResult_Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& AnalogDemodResult_Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.Header.time_span)
  return _internal_time_span();
}
inline void AnalogDemodResult_Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.time_span)
}
inline ::zb::dcts::TimeSpan* AnalogDemodResult_Header::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* AnalogDemodResult_Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodResult.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* AnalogDemodResult_Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* AnalogDemodResult_Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodResult.Header.time_span)
  return _internal_mutable_time_span();
}
inline void AnalogDemodResult_Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.time_span)
}

// .zb.dcts.Position device_position = 4;
inline bool AnalogDemodResult_Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool AnalogDemodResult_Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& AnalogDemodResult_Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& AnalogDemodResult_Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.Header.device_position)
  return _internal_device_position();
}
inline void AnalogDemodResult_Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.device_position)
}
inline ::zb::dcts::Position* AnalogDemodResult_Header::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* AnalogDemodResult_Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodResult.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* AnalogDemodResult_Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* AnalogDemodResult_Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodResult.Header.device_position)
  return _internal_mutable_device_position();
}
inline void AnalogDemodResult_Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.Header.device_position)
}

// -------------------------------------------------------------------

// AnalogDemodResult

// .zb.dcts.scenario.FFP.AnalogDemodResult.Header header = 1;
inline bool AnalogDemodResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AnalogDemodResult::has_header() const {
  return _internal_has_header();
}
inline void AnalogDemodResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header& AnalogDemodResult::_internal_header() const {
  const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header*>(
      &::zb::dcts::scenario::FFP::_AnalogDemodResult_Header_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodResult_Header& AnalogDemodResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.header)
  return _internal_header();
}
inline void AnalogDemodResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.header)
}
inline ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* AnalogDemodResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* AnalogDemodResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodResult.header)
  
  ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* AnalogDemodResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodResult_Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodResult_Header* AnalogDemodResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodResult.header)
  return _internal_mutable_header();
}
inline void AnalogDemodResult::set_allocated_header(::zb::dcts::scenario::FFP::AnalogDemodResult_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.header)
}

// .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 2;
inline bool AnalogDemodResult::_internal_has_channel_audio() const {
  return this != internal_default_instance() && channel_audio_ != nullptr;
}
inline bool AnalogDemodResult::has_channel_audio() const {
  return _internal_has_channel_audio();
}
inline void AnalogDemodResult::clear_channel_audio() {
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::ChannelAudio& AnalogDemodResult::_internal_channel_audio() const {
  const ::zb::dcts::scenario::FFP::ChannelAudio* p = channel_audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::ChannelAudio*>(
      &::zb::dcts::scenario::FFP::_ChannelAudio_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::ChannelAudio& AnalogDemodResult::channel_audio() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodResult.channel_audio)
  return _internal_channel_audio();
}
inline void AnalogDemodResult::unsafe_arena_set_allocated_channel_audio(
    ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_audio_);
  }
  channel_audio_ = channel_audio;
  if (channel_audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.channel_audio)
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* AnalogDemodResult::release_channel_audio() {
  auto temp = unsafe_arena_release_channel_audio();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* AnalogDemodResult::unsafe_arena_release_channel_audio() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodResult.channel_audio)
  
  ::zb::dcts::scenario::FFP::ChannelAudio* temp = channel_audio_;
  channel_audio_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* AnalogDemodResult::_internal_mutable_channel_audio() {
  
  if (channel_audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::ChannelAudio>(GetArena());
    channel_audio_ = p;
  }
  return channel_audio_;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* AnalogDemodResult::mutable_channel_audio() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodResult.channel_audio)
  return _internal_mutable_channel_audio();
}
inline void AnalogDemodResult::set_allocated_channel_audio(::zb::dcts::scenario::FFP::ChannelAudio* channel_audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_audio_;
  }
  if (channel_audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_audio);
    if (message_arena != submessage_arena) {
      channel_audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_audio, submessage_arena);
    }
    
  } else {
    
  }
  channel_audio_ = channel_audio;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodResult.channel_audio)
}

// -------------------------------------------------------------------

// AnalogDemodParam

// .zb.dcts.scenario.FFP.AnalogModType type = 1;
inline void AnalogDemodParam::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::scenario::FFP::AnalogModType AnalogDemodParam::_internal_type() const {
  return static_cast< ::zb::dcts::scenario::FFP::AnalogModType >(type_);
}
inline ::zb::dcts::scenario::FFP::AnalogModType AnalogDemodParam::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodParam.type)
  return _internal_type();
}
inline void AnalogDemodParam::_internal_set_type(::zb::dcts::scenario::FFP::AnalogModType value) {
  
  type_ = value;
}
inline void AnalogDemodParam::set_type(::zb::dcts::scenario::FFP::AnalogModType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.FFP.AnalogDemodParam.type)
}

// .zb.dcts.scenario.FFP.DemodChannel channel = 2;
inline bool AnalogDemodParam::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool AnalogDemodParam::has_channel() const {
  return _internal_has_channel();
}
inline void AnalogDemodParam::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::DemodChannel& AnalogDemodParam::_internal_channel() const {
  const ::zb::dcts::scenario::FFP::DemodChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::DemodChannel*>(
      &::zb::dcts::scenario::FFP::_DemodChannel_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::DemodChannel& AnalogDemodParam::channel() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodParam.channel)
  return _internal_channel();
}
inline void AnalogDemodParam::unsafe_arena_set_allocated_channel(
    ::zb::dcts::scenario::FFP::DemodChannel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodParam.channel)
}
inline ::zb::dcts::scenario::FFP::DemodChannel* AnalogDemodParam::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::DemodChannel* AnalogDemodParam::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodParam.channel)
  
  ::zb::dcts::scenario::FFP::DemodChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::DemodChannel* AnalogDemodParam::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::DemodChannel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::zb::dcts::scenario::FFP::DemodChannel* AnalogDemodParam::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodParam.channel)
  return _internal_mutable_channel();
}
inline void AnalogDemodParam::set_allocated_channel(::zb::dcts::scenario::FFP::DemodChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodParam.channel)
}

// -------------------------------------------------------------------

// AnalogDemodRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool AnalogDemodRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool AnalogDemodRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& AnalogDemodRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& AnalogDemodRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodRequest.scenario)
  return _internal_scenario();
}
inline void AnalogDemodRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* AnalogDemodRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* AnalogDemodRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* AnalogDemodRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* AnalogDemodRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodRequest.scenario)
  return _internal_mutable_scenario();
}
inline void AnalogDemodRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.scenario)
}

// .zb.dcts.scenario.FFP.DemodSource source = 2;
inline bool AnalogDemodRequest::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool AnalogDemodRequest::has_source() const {
  return _internal_has_source();
}
inline void AnalogDemodRequest::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::DemodSource& AnalogDemodRequest::_internal_source() const {
  const ::zb::dcts::scenario::FFP::DemodSource* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::DemodSource*>(
      &::zb::dcts::scenario::FFP::_DemodSource_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::DemodSource& AnalogDemodRequest::source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodRequest.source)
  return _internal_source();
}
inline void AnalogDemodRequest::unsafe_arena_set_allocated_source(
    ::zb::dcts::scenario::FFP::DemodSource* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.source)
}
inline ::zb::dcts::scenario::FFP::DemodSource* AnalogDemodRequest::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::DemodSource* AnalogDemodRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodRequest.source)
  
  ::zb::dcts::scenario::FFP::DemodSource* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::DemodSource* AnalogDemodRequest::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::DemodSource>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::zb::dcts::scenario::FFP::DemodSource* AnalogDemodRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodRequest.source)
  return _internal_mutable_source();
}
inline void AnalogDemodRequest::set_allocated_source(::zb::dcts::scenario::FFP::DemodSource* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.source)
}

// .zb.dcts.scenario.FFP.AnalogDemodParam param = 3;
inline bool AnalogDemodRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool AnalogDemodRequest::has_param() const {
  return _internal_has_param();
}
inline void AnalogDemodRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodParam& AnalogDemodRequest::_internal_param() const {
  const ::zb::dcts::scenario::FFP::AnalogDemodParam* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::AnalogDemodParam*>(
      &::zb::dcts::scenario::FFP::_AnalogDemodParam_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodParam& AnalogDemodRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.AnalogDemodRequest.param)
  return _internal_param();
}
inline void AnalogDemodRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::scenario::FFP::AnalogDemodParam* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.param)
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* AnalogDemodRequest::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* AnalogDemodRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.AnalogDemodRequest.param)
  
  ::zb::dcts::scenario::FFP::AnalogDemodParam* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* AnalogDemodRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodParam>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* AnalogDemodRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.AnalogDemodRequest.param)
  return _internal_mutable_param();
}
inline void AnalogDemodRequest::set_allocated_param(::zb::dcts::scenario::FFP::AnalogDemodParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.AnalogDemodRequest.param)
}

// -------------------------------------------------------------------

// ChangeDemodChannelRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ChangeDemodChannelRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ChangeDemodChannelRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeDemodChannelRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeDemodChannelRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.responser)
  return _internal_responser();
}
inline void ChangeDemodChannelRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeDemodChannelRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeDemodChannelRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeDemodChannelRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeDemodChannelRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.responser)
  return _internal_mutable_responser();
}
inline void ChangeDemodChannelRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.responser)
}

// .zb.dcts.scenario.FFP.AnalogDemodParam param = 2;
inline bool ChangeDemodChannelRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ChangeDemodChannelRequest::has_param() const {
  return _internal_has_param();
}
inline void ChangeDemodChannelRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodParam& ChangeDemodChannelRequest::_internal_param() const {
  const ::zb::dcts::scenario::FFP::AnalogDemodParam* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::AnalogDemodParam*>(
      &::zb::dcts::scenario::FFP::_AnalogDemodParam_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::AnalogDemodParam& ChangeDemodChannelRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.param)
  return _internal_param();
}
inline void ChangeDemodChannelRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::scenario::FFP::AnalogDemodParam* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.param)
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* ChangeDemodChannelRequest::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* ChangeDemodChannelRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.param)
  
  ::zb::dcts::scenario::FFP::AnalogDemodParam* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* ChangeDemodChannelRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::AnalogDemodParam>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::scenario::FFP::AnalogDemodParam* ChangeDemodChannelRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.param)
  return _internal_mutable_param();
}
inline void ChangeDemodChannelRequest::set_allocated_param(::zb::dcts::scenario::FFP::AnalogDemodParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.FFP.ChangeDemodChannelRequest.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::FFP::AnalogModType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::FFP::AnalogModType>() {
  return ::zb::dcts::scenario::FFP::AnalogModType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fFFP_2fdemodulate_2eproto
