// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/FFP/demodulate.proto
#ifndef GRPC_scenario_2fFFP_2fdemodulate_2eproto__INCLUDED
#define GRPC_scenario_2fFFP_2fdemodulate_2eproto__INCLUDED

#include "scenario/FFP/demodulate.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace scenario {
namespace FFP {

class DemodulationService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.scenario.FFP.DemodulationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncStartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncStartAnalogDemodTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStartAnalogDemodTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncChangeDemodChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncChangeDemodChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>> GetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(GetAnalogDemodResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>> AsyncGetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(AsyncGetAnalogDemodResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>> PrepareAsyncGetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(PrepareAsyncGetAnalogDemodResultRaw(context, request, cq));
    }
    virtual ::grpc::Status StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncStopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncStopAnalogDemodTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStopAnalogDemodTaskRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAnalogDemodResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* reactor) = 0;
      #else
      virtual void GetAnalogDemodResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* reactor) = 0;
      #endif
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncStartAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStartAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncChangeDemodChannelRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncChangeDemodChannelRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>* GetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>* AsyncGetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::FFP::AnalogDemodResult>* PrepareAsyncGetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncStopAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStopAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncStartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncStartAnalogDemodTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStartAnalogDemodTaskRaw(context, request, cq));
    }
    ::grpc::Status ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncChangeDemodChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncChangeDemodChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>> GetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(GetAnalogDemodResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>> AsyncGetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(AsyncGetAnalogDemodResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>> PrepareAsyncGetAnalogDemodResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>>(PrepareAsyncGetAnalogDemodResultRaw(context, request, cq));
    }
    ::grpc::Status StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncStopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncStopAnalogDemodTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStopAnalogDemodTaskRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeDemodChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAnalogDemodResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* reactor) override;
      #else
      void GetAnalogDemodResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* reactor) override;
      #endif
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopAnalogDemodTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncStartAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStartAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncChangeDemodChannelRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncChangeDemodChannelRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>* GetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>* AsyncGetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::FFP::AnalogDemodResult>* PrepareAsyncGetAnalogDemodResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncStopAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStopAnalogDemodTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartAnalogDemodTask_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeDemodChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAnalogDemodResult_;
    const ::grpc::internal::RpcMethod rpcmethod_StopAnalogDemodTask_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* writer);
    virtual ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartAnalogDemodTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartAnalogDemodTask(::grpc::ServerContext* context, ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeDemodChannel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeDemodChannel(::grpc::ServerContext* context, ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAnalogDemodResult() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnalogDemodResult(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopAnalogDemodTask() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAnalogDemodTask(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartAnalogDemodTask<WithAsyncMethod_ChangeDemodChannel<WithAsyncMethod_GetAnalogDemodResult<WithAsyncMethod_StopAnalogDemodTask<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartAnalogDemodTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::FFP::AnalogDemodRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->StartAnalogDemodTask(context, request, response); }));}
    void SetMessageAllocatorFor_StartAnalogDemodTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::FFP::AnalogDemodRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::FFP::AnalogDemodRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartAnalogDemodTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartAnalogDemodTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ChangeDemodChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->ChangeDemodChannel(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeDemodChannel(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeDemodChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeDemodChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAnalogDemodResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::FFP::AnalogDemodResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request) { return this->GetAnalogDemodResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* GetAnalogDemodResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::scenario::FFP::AnalogDemodResult>* GetAnalogDemodResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopAnalogDemodTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->StopAnalogDemodTask(context, request, response); }));}
    void SetMessageAllocatorFor_StopAnalogDemodTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopAnalogDemodTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopAnalogDemodTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartAnalogDemodTask<ExperimentalWithCallbackMethod_ChangeDemodChannel<ExperimentalWithCallbackMethod_GetAnalogDemodResult<ExperimentalWithCallbackMethod_StopAnalogDemodTask<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartAnalogDemodTask<ExperimentalWithCallbackMethod_ChangeDemodChannel<ExperimentalWithCallbackMethod_GetAnalogDemodResult<ExperimentalWithCallbackMethod_StopAnalogDemodTask<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartAnalogDemodTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeDemodChannel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAnalogDemodResult() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopAnalogDemodTask() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartAnalogDemodTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartAnalogDemodTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeDemodChannel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeDemodChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAnalogDemodResult() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAnalogDemodResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopAnalogDemodTask() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAnalogDemodTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartAnalogDemodTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartAnalogDemodTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartAnalogDemodTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartAnalogDemodTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ChangeDemodChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeDemodChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeDemodChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeDemodChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAnalogDemodResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetAnalogDemodResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAnalogDemodResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetAnalogDemodResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopAnalogDemodTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopAnalogDemodTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopAnalogDemodTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopAnalogDemodTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartAnalogDemodTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::FFP::AnalogDemodRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_StartAnalogDemodTask<BaseClass>::StreamedStartAnalogDemodTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::AnalogDemodRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartAnalogDemodTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::FFP::AnalogDemodRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeDemodChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeDemodChannel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_ChangeDemodChannel<BaseClass>::StreamedChangeDemodChannel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ChangeDemodChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeDemodChannel(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeDemodChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::FFP::ChangeDemodChannelRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopAnalogDemodTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopAnalogDemodTask() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_StopAnalogDemodTask<BaseClass>::StreamedStopAnalogDemodTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopAnalogDemodTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopAnalogDemodTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopAnalogDemodTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartAnalogDemodTask<WithStreamedUnaryMethod_ChangeDemodChannel<WithStreamedUnaryMethod_StopAnalogDemodTask<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAnalogDemodResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAnalogDemodResult() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::FFP::AnalogDemodResult>(std::bind(&WithSplitStreamingMethod_GetAnalogDemodResult<BaseClass>::StreamedGetAnalogDemodResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetAnalogDemodResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAnalogDemodResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::FFP::AnalogDemodResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAnalogDemodResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::FFP::AnalogDemodResult>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAnalogDemodResult<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartAnalogDemodTask<WithStreamedUnaryMethod_ChangeDemodChannel<WithSplitStreamingMethod_GetAnalogDemodResult<WithStreamedUnaryMethod_StopAnalogDemodTask<Service > > > > StreamedService;
};

}  // namespace FFP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_scenario_2fFFP_2fdemodulate_2eproto__INCLUDED
