// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/auto.proto

#include "scenario/auto.pb.h"
#include "scenario/auto.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace automatic {

static const char* AutoScenarioService_method_names[] = {
  "/zb.dcts.scenario.automatic.AutoScenarioService/CreateAutoMCPScenario",
  "/zb.dcts.scenario.automatic.AutoScenarioService/CloseAutoScenario",
};

std::unique_ptr< AutoScenarioService::Stub> AutoScenarioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AutoScenarioService::Stub> stub(new AutoScenarioService::Stub(channel));
  return stub;
}

AutoScenarioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateAutoMCPScenario_(AutoScenarioService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseAutoScenario_(AutoScenarioService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AutoScenarioService::Stub::CreateAutoMCPScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAutoMCPScenario_, context, request, response);
}

void AutoScenarioService::Stub::experimental_async::CreateAutoMCPScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAutoMCPScenario_, context, request, response, std::move(f));
}

void AutoScenarioService::Stub::experimental_async::CreateAutoMCPScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAutoMCPScenario_, context, request, response, std::move(f));
}

void AutoScenarioService::Stub::experimental_async::CreateAutoMCPScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAutoMCPScenario_, context, request, response, reactor);
}

void AutoScenarioService::Stub::experimental_async::CreateAutoMCPScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAutoMCPScenario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AutoScenarioService::Stub::AsyncCreateAutoMCPScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CreateAutoMCPScenario_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AutoScenarioService::Stub::PrepareAsyncCreateAutoMCPScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CreateAutoMCPScenario_, context, request, false);
}

::grpc::Status AutoScenarioService::Stub::CloseAutoScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseAutoScenario_, context, request, response);
}

void AutoScenarioService::Stub::experimental_async::CloseAutoScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseAutoScenario_, context, request, response, std::move(f));
}

void AutoScenarioService::Stub::experimental_async::CloseAutoScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseAutoScenario_, context, request, response, std::move(f));
}

void AutoScenarioService::Stub::experimental_async::CloseAutoScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseAutoScenario_, context, request, response, reactor);
}

void AutoScenarioService::Stub::experimental_async::CloseAutoScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseAutoScenario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AutoScenarioService::Stub::AsyncCloseAutoScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseAutoScenario_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AutoScenarioService::Stub::PrepareAsyncCloseAutoScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseAutoScenario_, context, request, false);
}

AutoScenarioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoScenarioService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoScenarioService::Service, ::zb::dcts::scenario::automatic::CreateAutoMCPRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&AutoScenarioService::Service::CreateAutoMCPScenario), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AutoScenarioService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AutoScenarioService::Service, ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&AutoScenarioService::Service::CloseAutoScenario), this)));
}

AutoScenarioService::Service::~Service() {
}

::grpc::Status AutoScenarioService::Service::CreateAutoMCPScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::automatic::CreateAutoMCPRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AutoScenarioService::Service::CloseAutoScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace automatic

