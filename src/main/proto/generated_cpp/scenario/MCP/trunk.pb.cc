// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/MCP/trunk.proto

#include "scenario/MCP/trunk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_scenario_2fMCP_2ftrunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace MCP {
class PScanSource_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PScanSource_ParamsEntry_DoNotUse> _instance;
} _PScanSource_ParamsEntry_DoNotUse_default_instance_;
class PScanSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PScanSource> _instance;
} _PScanSource_default_instance_;
class PScanParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PScanParam> _instance;
} _PScanParam_default_instance_;
class CreateScenarioRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateScenarioRequest> _instance;
} _CreateScenarioRequest_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
}  // namespace MCP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::CreateScenarioRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::MCP::CreateScenarioRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto}, {
      &scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto.base,
      &scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto.base,
      &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,
      &scc_info_SourceId_source_2fsource_2eproto.base,}};

static void InitDefaultsscc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_PScanParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::PScanParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::MCP::PScanParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_PScanSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::PScanSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::MCP::PScanSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto.base,}};

static void InitDefaultsscc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_PScanSource_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse();
  }
  ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto}, {}};

static void InitDefaultsscc_info_Result_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_Result_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::MCP::Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Result_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Result_scenario_2fMCP_2ftrunk_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_Status_scenario_2fMCP_2ftrunk_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_Status_scenario_2fMCP_2ftrunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::MCP::_Status_default_instance_;
    new (ptr) ::zb::dcts::scenario::MCP::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::MCP::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_scenario_2fMCP_2ftrunk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Status_scenario_2fMCP_2ftrunk_2eproto}, {
      &scc_info_TimeSpan_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fMCP_2ftrunk_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenario_2fMCP_2ftrunk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fMCP_2ftrunk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fMCP_2ftrunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanSource, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanParam, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanParam, rbw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::PScanParam, expected_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::CreateScenarioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::CreateScenarioRequest, pscan_source_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::CreateScenarioRequest, pscan_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::CreateScenarioRequest, detection_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::CreateScenarioRequest, ffp_sources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Status, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Status, total_sweep_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Result, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Result, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Result, panorama_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::MCP::Result, closeshot_view_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse)},
  { 9, -1, sizeof(::zb::dcts::scenario::MCP::PScanSource)},
  { 19, -1, sizeof(::zb::dcts::scenario::MCP::PScanParam)},
  { 28, -1, sizeof(::zb::dcts::scenario::MCP::CreateScenarioRequest)},
  { 37, -1, sizeof(::zb::dcts::scenario::MCP::Status)},
  { 44, -1, sizeof(::zb::dcts::scenario::MCP::Result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_PScanSource_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_PScanSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_PScanParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::MCP::_Result_default_instance_),
};

const char descriptor_table_protodef_scenario_2fMCP_2ftrunk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030scenario/MCP/trunk.proto\022\024zb.dcts.scen"
  "ario.MCP\032\ndcts.proto\032\023source/source.prot"
  "o\032\027scenario/scenario.proto\032\027scenario/spe"
  "ctrum.proto\032\030scenario/detection.proto\"\343\001"
  "\n\013PScanSource\022$\n\002id\030\001 \001(\0132\030.zb.dcts.sour"
  "ce.SourceId\022\025\n\raverage_count\030\003 \001(\005\022\030\n\020at"
  "tenuation_gain\030\004 \001(\005\022\017\n\007antenna\030\005 \001(\005\022=\n"
  "\006params\030\006 \003(\0132-.zb.dcts.scenario.MCP.PSc"
  "anSource.ParamsEntry\032-\n\013ParamsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\210\001\n\nPScanPar"
  "am\022;\n\tfreq_span\030\001 \001(\0132(.zb.dcts.scenario"
  ".spectrum.FrequencySpan\022\013\n\003rbw\030\002 \001(\001\022\027\n\017"
  "result_interval\030\003 \001(\005\022\027\n\017expected_points"
  "\030\005 \001(\005\"\373\001\n\025CreateScenarioRequest\0227\n\014psca"
  "n_source\030\001 \001(\0132!.zb.dcts.scenario.MCP.PS"
  "canSource\0225\n\013pscan_param\030\002 \001(\0132 .zb.dcts"
  ".scenario.MCP.PScanParam\022C\n\017detection_pa"
  "ram\030\003 \001(\0132*.zb.dcts.scenario.detection.D"
  "etectionParam\022-\n\013FFP_sources\030\004 \003(\0132\030.zb."
  "dcts.source.SourceId\"I\n\006Status\022$\n\ttime_s"
  "pan\030\001 \001(\0132\021.zb.dcts.TimeSpan\022\031\n\021total_sw"
  "eep_count\030\002 \001(\r\"\332\001\n\006Result\0221\n\006header\030\001 \001"
  "(\0132!.zb.dcts.scenario.spectrum.Header\022,\n"
  "\006status\030\002 \001(\0132\034.zb.dcts.scenario.MCP.Sta"
  "tus\0226\n\rpanorama_view\030\006 \001(\0132\037.zb.dcts.sce"
  "nario.spectrum.View\0227\n\016closeshot_view\030\007 "
  "\001(\0132\037.zb.dcts.scenario.spectrum.View2\316\n\n"
  "\017MCPTrunkService\022`\n\016CreateScenario\022+.zb."
  "dcts.scenario.MCP.CreateScenarioRequest\032"
  "\037.zb.dcts.scenario.ScenarioReply\"\000\022T\n\016Ge"
  "tPScanResult\022 .zb.dcts.scenario.Scenario"
  "TaskId\032\034.zb.dcts.scenario.MCP.Result\"\0000\001"
  "\022P\n\rCloseScenario\022\034.zb.dcts.scenario.Sce"
  "narioId\032\037.zb.dcts.scenario.ScenarioReply"
  "\"\000\022Y\n\nOpenZoomIn\022(.zb.dcts.scenario.spec"
  "trum.ZoomInRequest\032\037.zb.dcts.scenario.Sc"
  "enarioReply\"\000\022R\n\013CloseZoomIn\022 .zb.dcts.s"
  "cenario.ScenarioTaskId\032\037.zb.dcts.scenari"
  "o.ScenarioReply\"\000\022]\n\014OpenDataHold\022*.zb.d"
  "cts.scenario.spectrum.DataHoldRequest\032\037."
  "zb.dcts.scenario.ScenarioReply\"\000\022^\n\rRese"
  "tDataHold\022*.zb.dcts.scenario.spectrum.Da"
  "taHoldRequest\032\037.zb.dcts.scenario.Scenari"
  "oReply\"\000\022^\n\rCloseDataHold\022*.zb.dcts.scen"
  "ario.spectrum.DataHoldRequest\032\037.zb.dcts."
  "scenario.ScenarioReply\"\000\022`\n\rOpenDetectio"
  "n\022,.zb.dcts.scenario.detection.Detection"
  "Request\032\037.zb.dcts.scenario.ScenarioReply"
  "\"\000\022U\n\016CloseDetection\022 .zb.dcts.scenario."
  "ScenarioTaskId\032\037.zb.dcts.scenario.Scenar"
  "ioReply\"\000\022\177\n\020QuerySignalTable\0223.zb.dcts."
  "scenario.detection.SignalTableQueryReque"
  "st\0324.zb.dcts.scenario.detection.SignalTa"
  "bleQueryResponse\"\000\022W\n\020ClearSignalTable\022 "
  ".zb.dcts.scenario.ScenarioTaskId\032\037.zb.dc"
  "ts.scenario.ScenarioReply\"\000\022h\n\017SignalGat"
  "hering\0222.zb.dcts.scenario.detection.Sign"
  "alGatheringRequest\032\037.zb.dcts.scenario.Sc"
  "enarioReply\"\000\022f\n\022GetGatheringResult\022 .zb"
  ".dcts.scenario.ScenarioTaskId\032,.zb.dcts."
  "scenario.detection.SignalSampleList\"\000b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fMCP_2ftrunk_2eproto_deps[5] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fdetection_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fMCP_2ftrunk_2eproto_sccs[6] = {
  &scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto.base,
  &scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto.base,
  &scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto.base,
  &scc_info_PScanSource_ParamsEntry_DoNotUse_scenario_2fMCP_2ftrunk_2eproto.base,
  &scc_info_Result_scenario_2fMCP_2ftrunk_2eproto.base,
  &scc_info_Status_scenario_2fMCP_2ftrunk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fMCP_2ftrunk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fMCP_2ftrunk_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fMCP_2ftrunk_2eproto, "scenario/MCP/trunk.proto", 2445,
  &descriptor_table_scenario_2fMCP_2ftrunk_2eproto_once, descriptor_table_scenario_2fMCP_2ftrunk_2eproto_sccs, descriptor_table_scenario_2fMCP_2ftrunk_2eproto_deps, 6, 5,
  schemas, file_default_instances, TableStruct_scenario_2fMCP_2ftrunk_2eproto::offsets,
  file_level_metadata_scenario_2fMCP_2ftrunk_2eproto, 6, file_level_enum_descriptors_scenario_2fMCP_2ftrunk_2eproto, file_level_service_descriptors_scenario_2fMCP_2ftrunk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fMCP_2ftrunk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fMCP_2ftrunk_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace MCP {

// ===================================================================

PScanSource_ParamsEntry_DoNotUse::PScanSource_ParamsEntry_DoNotUse() {}
PScanSource_ParamsEntry_DoNotUse::PScanSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PScanSource_ParamsEntry_DoNotUse::MergeFrom(const PScanSource_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PScanSource_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PScanSource_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PScanSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::MCP::_PScanSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class PScanSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const PScanSource* msg);
};

const ::zb::dcts::source::SourceId&
PScanSource::_Internal::id(const PScanSource* msg) {
  return *msg->id_;
}
void PScanSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
PScanSource::PScanSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.MCP.PScanSource)
}
PScanSource::PScanSource(const PScanSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&average_count_, &from.average_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&average_count_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.MCP.PScanSource)
}

void PScanSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&id_)) + sizeof(antenna_));
}

PScanSource::~PScanSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.MCP.PScanSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PScanSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void PScanSource::ArenaDtor(void* object) {
  PScanSource* _this = reinterpret_cast< PScanSource* >(object);
  (void)_this;
}
void PScanSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PScanSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PScanSource& PScanSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PScanSource_scenario_2fMCP_2ftrunk_2eproto.base);
  return *internal_default_instance();
}


void PScanSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.MCP.PScanSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&average_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&average_count_)) + sizeof(antenna_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PScanSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PScanSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.MCP.PScanSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // int32 average_count = 3;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_average_count(), target);
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attenuation_gain(), target);
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_antenna(), target);
  }

  // map<string, string> params = 6;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.MCP.PScanSource.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.MCP.PScanSource.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PScanSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = PScanSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.MCP.PScanSource)
  return target;
}

size_t PScanSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.MCP.PScanSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += PScanSource_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 average_count = 3;
  if (this->average_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // int32 attenuation_gain = 4;
  if (this->attenuation_gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_gain());
  }

  // int32 antenna = 5;
  if (this->antenna() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PScanSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.MCP.PScanSource)
  GOOGLE_DCHECK_NE(&from, this);
  const PScanSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PScanSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.MCP.PScanSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.MCP.PScanSource)
    MergeFrom(*source);
  }
}

void PScanSource::MergeFrom(const PScanSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.MCP.PScanSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.attenuation_gain() != 0) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
}

void PScanSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.MCP.PScanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PScanSource::CopyFrom(const PScanSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.MCP.PScanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PScanSource::IsInitialized() const {
  return true;
}

void PScanSource::InternalSwap(PScanSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PScanSource, antenna_)
      + sizeof(PScanSource::antenna_)
      - PROTOBUF_FIELD_OFFSET(PScanSource, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PScanSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PScanParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::MCP::_PScanParam_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
}
class PScanParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const PScanParam* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
PScanParam::_Internal::freq_span(const PScanParam* msg) {
  return *msg->freq_span_;
}
void PScanParam::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
PScanParam::PScanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.MCP.PScanParam)
}
PScanParam::PScanParam(const PScanParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  ::memcpy(&rbw_, &from.rbw_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_points_) -
    reinterpret_cast<char*>(&rbw_)) + sizeof(expected_points_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.MCP.PScanParam)
}

void PScanParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto.base);
  ::memset(&freq_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_points_) -
      reinterpret_cast<char*>(&freq_span_)) + sizeof(expected_points_));
}

PScanParam::~PScanParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.MCP.PScanParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PScanParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
}

void PScanParam::ArenaDtor(void* object) {
  PScanParam* _this = reinterpret_cast< PScanParam* >(object);
  (void)_this;
}
void PScanParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PScanParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PScanParam& PScanParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PScanParam_scenario_2fMCP_2ftrunk_2eproto.base);
  return *internal_default_instance();
}


void PScanParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.MCP.PScanParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  ::memset(&rbw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expected_points_) -
      reinterpret_cast<char*>(&rbw_)) + sizeof(expected_points_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PScanParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rbw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PScanParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.MCP.PScanParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::freq_span(this), target, stream);
  }

  // double rbw = 2;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rbw(), target);
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result_interval(), target);
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_expected_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.MCP.PScanParam)
  return target;
}

size_t PScanParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.MCP.PScanParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // double rbw = 2;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 result_interval = 3;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 expected_points = 5;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PScanParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.MCP.PScanParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PScanParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PScanParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.MCP.PScanParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.MCP.PScanParam)
    MergeFrom(*source);
  }
}

void PScanParam::MergeFrom(const PScanParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.MCP.PScanParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (!(from.rbw() <= 0 && from.rbw() >= 0)) {
    _internal_set_rbw(from._internal_rbw());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
}

void PScanParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.MCP.PScanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PScanParam::CopyFrom(const PScanParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.MCP.PScanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PScanParam::IsInitialized() const {
  return true;
}

void PScanParam::InternalSwap(PScanParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PScanParam, expected_points_)
      + sizeof(PScanParam::expected_points_)
      - PROTOBUF_FIELD_OFFSET(PScanParam, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PScanParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateScenarioRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_._instance.get_mutable()->pscan_source_ = const_cast< ::zb::dcts::scenario::MCP::PScanSource*>(
      ::zb::dcts::scenario::MCP::PScanSource::internal_default_instance());
  ::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_._instance.get_mutable()->pscan_param_ = const_cast< ::zb::dcts::scenario::MCP::PScanParam*>(
      ::zb::dcts::scenario::MCP::PScanParam::internal_default_instance());
  ::zb::dcts::scenario::MCP::_CreateScenarioRequest_default_instance_._instance.get_mutable()->detection_param_ = const_cast< ::zb::dcts::scenario::detection::DetectionParam*>(
      ::zb::dcts::scenario::detection::DetectionParam::internal_default_instance());
}
class CreateScenarioRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::MCP::PScanSource& pscan_source(const CreateScenarioRequest* msg);
  static const ::zb::dcts::scenario::MCP::PScanParam& pscan_param(const CreateScenarioRequest* msg);
  static const ::zb::dcts::scenario::detection::DetectionParam& detection_param(const CreateScenarioRequest* msg);
};

const ::zb::dcts::scenario::MCP::PScanSource&
CreateScenarioRequest::_Internal::pscan_source(const CreateScenarioRequest* msg) {
  return *msg->pscan_source_;
}
const ::zb::dcts::scenario::MCP::PScanParam&
CreateScenarioRequest::_Internal::pscan_param(const CreateScenarioRequest* msg) {
  return *msg->pscan_param_;
}
const ::zb::dcts::scenario::detection::DetectionParam&
CreateScenarioRequest::_Internal::detection_param(const CreateScenarioRequest* msg) {
  return *msg->detection_param_;
}
void CreateScenarioRequest::clear_detection_param() {
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
}
void CreateScenarioRequest::clear_ffp_sources() {
  ffp_sources_.Clear();
}
CreateScenarioRequest::CreateScenarioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ffp_sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.MCP.CreateScenarioRequest)
}
CreateScenarioRequest::CreateScenarioRequest(const CreateScenarioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ffp_sources_(from.ffp_sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pscan_source()) {
    pscan_source_ = new ::zb::dcts::scenario::MCP::PScanSource(*from.pscan_source_);
  } else {
    pscan_source_ = nullptr;
  }
  if (from._internal_has_pscan_param()) {
    pscan_param_ = new ::zb::dcts::scenario::MCP::PScanParam(*from.pscan_param_);
  } else {
    pscan_param_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::scenario::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.MCP.CreateScenarioRequest)
}

void CreateScenarioRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto.base);
  ::memset(&pscan_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_param_) -
      reinterpret_cast<char*>(&pscan_source_)) + sizeof(detection_param_));
}

CreateScenarioRequest::~CreateScenarioRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.MCP.CreateScenarioRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateScenarioRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pscan_source_;
  if (this != internal_default_instance()) delete pscan_param_;
  if (this != internal_default_instance()) delete detection_param_;
}

void CreateScenarioRequest::ArenaDtor(void* object) {
  CreateScenarioRequest* _this = reinterpret_cast< CreateScenarioRequest* >(object);
  (void)_this;
}
void CreateScenarioRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateScenarioRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateScenarioRequest& CreateScenarioRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateScenarioRequest_scenario_2fMCP_2ftrunk_2eproto.base);
  return *internal_default_instance();
}


void CreateScenarioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ffp_sources_.Clear();
  if (GetArena() == nullptr && pscan_source_ != nullptr) {
    delete pscan_source_;
  }
  pscan_source_ = nullptr;
  if (GetArena() == nullptr && pscan_param_ != nullptr) {
    delete pscan_param_;
  }
  pscan_param_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateScenarioRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.MCP.PScanSource pscan_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pscan_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.MCP.PScanParam pscan_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pscan_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.DetectionParam detection_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.SourceId FFP_sources = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ffp_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateScenarioRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.MCP.PScanSource pscan_source = 1;
  if (this->has_pscan_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pscan_source(this), target, stream);
  }

  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 2;
  if (this->has_pscan_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pscan_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 3;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::detection_param(this), target, stream);
  }

  // repeated .zb.dcts.source.SourceId FFP_sources = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ffp_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ffp_sources(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.MCP.CreateScenarioRequest)
  return target;
}

size_t CreateScenarioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.SourceId FFP_sources = 4;
  total_size += 1UL * this->_internal_ffp_sources_size();
  for (const auto& msg : this->ffp_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.MCP.PScanSource pscan_source = 1;
  if (this->has_pscan_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pscan_source_);
  }

  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 2;
  if (this->has_pscan_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pscan_param_);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 3;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateScenarioRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateScenarioRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateScenarioRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.MCP.CreateScenarioRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.MCP.CreateScenarioRequest)
    MergeFrom(*source);
  }
}

void CreateScenarioRequest::MergeFrom(const CreateScenarioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ffp_sources_.MergeFrom(from.ffp_sources_);
  if (from.has_pscan_source()) {
    _internal_mutable_pscan_source()->::zb::dcts::scenario::MCP::PScanSource::MergeFrom(from._internal_pscan_source());
  }
  if (from.has_pscan_param()) {
    _internal_mutable_pscan_param()->::zb::dcts::scenario::MCP::PScanParam::MergeFrom(from._internal_pscan_param());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::scenario::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void CreateScenarioRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateScenarioRequest::CopyFrom(const CreateScenarioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.MCP.CreateScenarioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateScenarioRequest::IsInitialized() const {
  return true;
}

void CreateScenarioRequest::InternalSwap(CreateScenarioRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ffp_sources_.InternalSwap(&other->ffp_sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateScenarioRequest, detection_param_)
      + sizeof(CreateScenarioRequest::detection_param_)
      - PROTOBUF_FIELD_OFFSET(CreateScenarioRequest, pscan_source_)>(
          reinterpret_cast<char*>(&pscan_source_),
          reinterpret_cast<char*>(&other->pscan_source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateScenarioRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
  ::zb::dcts::scenario::MCP::_Status_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
}
class Status::_Internal {
 public:
  static const ::zb::dcts::TimeSpan& time_span(const Status* msg);
};

const ::zb::dcts::TimeSpan&
Status::_Internal::time_span(const Status* msg) {
  return *msg->time_span_;
}
void Status::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.MCP.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  total_sweep_count_ = from.total_sweep_count_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.MCP.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_scenario_2fMCP_2ftrunk_2eproto.base);
  ::memset(&time_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_sweep_count_) -
      reinterpret_cast<char*>(&time_span_)) + sizeof(total_sweep_count_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.MCP.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_span_;
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_scenario_2fMCP_2ftrunk_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.MCP.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  total_sweep_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.TimeSpan time_span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_sweep_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_sweep_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.MCP.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time_span(this), target, stream);
  }

  // uint32 total_sweep_count = 2;
  if (this->total_sweep_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_sweep_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.MCP.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.MCP.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.TimeSpan time_span = 1;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // uint32 total_sweep_count = 2;
  if (this->total_sweep_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_sweep_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.MCP.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.MCP.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.MCP.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.MCP.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.total_sweep_count() != 0) {
    _internal_set_total_sweep_count(from._internal_total_sweep_count());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.MCP.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.MCP.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, total_sweep_count_)
      + sizeof(Status::total_sweep_count_)
      - PROTOBUF_FIELD_OFFSET(Status, time_span_)>(
          reinterpret_cast<char*>(&time_span_),
          reinterpret_cast<char*>(&other->time_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Result::InitAsDefaultInstance() {
  ::zb::dcts::scenario::MCP::_Result_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::MCP::_Result_default_instance_._instance.get_mutable()->status_ = const_cast< ::zb::dcts::scenario::MCP::Status*>(
      ::zb::dcts::scenario::MCP::Status::internal_default_instance());
  ::zb::dcts::scenario::MCP::_Result_default_instance_._instance.get_mutable()->panorama_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
  ::zb::dcts::scenario::MCP::_Result_default_instance_._instance.get_mutable()->closeshot_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class Result::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const Result* msg);
  static const ::zb::dcts::scenario::MCP::Status& status(const Result* msg);
  static const ::zb::dcts::scenario::spectrum::View& panorama_view(const Result* msg);
  static const ::zb::dcts::scenario::spectrum::View& closeshot_view(const Result* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
Result::_Internal::header(const Result* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::MCP::Status&
Result::_Internal::status(const Result* msg) {
  return *msg->status_;
}
const ::zb::dcts::scenario::spectrum::View&
Result::_Internal::panorama_view(const Result* msg) {
  return *msg->panorama_view_;
}
const ::zb::dcts::scenario::spectrum::View&
Result::_Internal::closeshot_view(const Result* msg) {
  return *msg->closeshot_view_;
}
void Result::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void Result::clear_panorama_view() {
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
}
void Result::clear_closeshot_view() {
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.MCP.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::zb::dcts::scenario::MCP::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_panorama_view()) {
    panorama_view_ = new ::zb::dcts::scenario::spectrum::View(*from.panorama_view_);
  } else {
    panorama_view_ = nullptr;
  }
  if (from._internal_has_closeshot_view()) {
    closeshot_view_ = new ::zb::dcts::scenario::spectrum::View(*from.closeshot_view_);
  } else {
    closeshot_view_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.MCP.Result)
}

void Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Result_scenario_2fMCP_2ftrunk_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closeshot_view_) -
      reinterpret_cast<char*>(&header_)) + sizeof(closeshot_view_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.MCP.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete panorama_view_;
  if (this != internal_default_instance()) delete closeshot_view_;
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Result_scenario_2fMCP_2ftrunk_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.MCP.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.MCP.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View panorama_view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_panorama_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_closeshot_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.MCP.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.MCP.Status status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::panorama_view(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::closeshot_view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.MCP.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.MCP.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.MCP.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panorama_view_);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closeshot_view_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.MCP.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.MCP.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.MCP.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.MCP.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::zb::dcts::scenario::MCP::Status::MergeFrom(from._internal_status());
  }
  if (from.has_panorama_view()) {
    _internal_mutable_panorama_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_panorama_view());
  }
  if (from.has_closeshot_view()) {
    _internal_mutable_closeshot_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_closeshot_view());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.MCP.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.MCP.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, closeshot_view_)
      + sizeof(Result::closeshot_view_)
      - PROTOBUF_FIELD_OFFSET(Result, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MCP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::PScanSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::PScanSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::PScanSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::PScanParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::PScanParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::PScanParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::CreateScenarioRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::CreateScenarioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::CreateScenarioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::Status* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::MCP::Result* Arena::CreateMaybeMessage< ::zb::dcts::scenario::MCP::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::MCP::Result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
