// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/MCP/trunk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fMCP_2ftrunk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fMCP_2ftrunk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
#include "scenario/detection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fMCP_2ftrunk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fMCP_2ftrunk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fMCP_2ftrunk_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace MCP {
class CreateScenarioRequest;
class CreateScenarioRequestDefaultTypeInternal;
extern CreateScenarioRequestDefaultTypeInternal _CreateScenarioRequest_default_instance_;
class PScanParam;
class PScanParamDefaultTypeInternal;
extern PScanParamDefaultTypeInternal _PScanParam_default_instance_;
class PScanSource;
class PScanSourceDefaultTypeInternal;
extern PScanSourceDefaultTypeInternal _PScanSource_default_instance_;
class PScanSource_ParamsEntry_DoNotUse;
class PScanSource_ParamsEntry_DoNotUseDefaultTypeInternal;
extern PScanSource_ParamsEntry_DoNotUseDefaultTypeInternal _PScanSource_ParamsEntry_DoNotUse_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace MCP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::MCP::CreateScenarioRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::CreateScenarioRequest>(Arena*);
template<> ::zb::dcts::scenario::MCP::PScanParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanParam>(Arena*);
template<> ::zb::dcts::scenario::MCP::PScanSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanSource>(Arena*);
template<> ::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanSource_ParamsEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::MCP::Result* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::Result>(Arena*);
template<> ::zb::dcts::scenario::MCP::Status* Arena::CreateMaybeMessage<::zb::dcts::scenario::MCP::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace MCP {

// ===================================================================

class PScanSource_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PScanSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PScanSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PScanSource_ParamsEntry_DoNotUse();
  PScanSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PScanSource_ParamsEntry_DoNotUse& other);
  static const PScanSource_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PScanSource_ParamsEntry_DoNotUse*>(&_PScanSource_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.MCP.PScanSource.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.MCP.PScanSource.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class PScanSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.MCP.PScanSource) */ {
 public:
  inline PScanSource() : PScanSource(nullptr) {};
  virtual ~PScanSource();

  PScanSource(const PScanSource& from);
  PScanSource(PScanSource&& from) noexcept
    : PScanSource() {
    *this = ::std::move(from);
  }

  inline PScanSource& operator=(const PScanSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline PScanSource& operator=(PScanSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PScanSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PScanSource* internal_default_instance() {
    return reinterpret_cast<const PScanSource*>(
               &_PScanSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PScanSource& a, PScanSource& b) {
    a.Swap(&b);
  }
  inline void Swap(PScanSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PScanSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PScanSource* New() const final {
    return CreateMaybeMessage<PScanSource>(nullptr);
  }

  PScanSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PScanSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PScanSource& from);
  void MergeFrom(const PScanSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PScanSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.MCP.PScanSource";
  }
  protected:
  explicit PScanSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kIdFieldNumber = 1,
    kAverageCountFieldNumber = 3,
    kAttenuationGainFieldNumber = 4,
    kAntennaFieldNumber = 5,
  };
  // map<string, string> params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // int32 average_count = 3;
  void clear_average_count();
  ::PROTOBUF_NAMESPACE_ID::int32 average_count() const;
  void set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_count() const;
  void _internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_gain = 4;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 5;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.MCP.PScanSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PScanSource_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::zb::dcts::source::SourceId* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fMCP_2ftrunk_2eproto;
};
// -------------------------------------------------------------------

class PScanParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.MCP.PScanParam) */ {
 public:
  inline PScanParam() : PScanParam(nullptr) {};
  virtual ~PScanParam();

  PScanParam(const PScanParam& from);
  PScanParam(PScanParam&& from) noexcept
    : PScanParam() {
    *this = ::std::move(from);
  }

  inline PScanParam& operator=(const PScanParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline PScanParam& operator=(PScanParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PScanParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PScanParam* internal_default_instance() {
    return reinterpret_cast<const PScanParam*>(
               &_PScanParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PScanParam& a, PScanParam& b) {
    a.Swap(&b);
  }
  inline void Swap(PScanParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PScanParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PScanParam* New() const final {
    return CreateMaybeMessage<PScanParam>(nullptr);
  }

  PScanParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PScanParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PScanParam& from);
  void MergeFrom(const PScanParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PScanParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.MCP.PScanParam";
  }
  protected:
  explicit PScanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqSpanFieldNumber = 1,
    kRbwFieldNumber = 2,
    kResultIntervalFieldNumber = 3,
    kExpectedPointsFieldNumber = 5,
  };
  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::scenario::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::scenario::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // double rbw = 2;
  void clear_rbw();
  double rbw() const;
  void set_rbw(double value);
  private:
  double _internal_rbw() const;
  void _internal_set_rbw(double value);
  public:

  // int32 result_interval = 3;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 5;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.MCP.PScanParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
  double rbw_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fMCP_2ftrunk_2eproto;
};
// -------------------------------------------------------------------

class CreateScenarioRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.MCP.CreateScenarioRequest) */ {
 public:
  inline CreateScenarioRequest() : CreateScenarioRequest(nullptr) {};
  virtual ~CreateScenarioRequest();

  CreateScenarioRequest(const CreateScenarioRequest& from);
  CreateScenarioRequest(CreateScenarioRequest&& from) noexcept
    : CreateScenarioRequest() {
    *this = ::std::move(from);
  }

  inline CreateScenarioRequest& operator=(const CreateScenarioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateScenarioRequest& operator=(CreateScenarioRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateScenarioRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateScenarioRequest* internal_default_instance() {
    return reinterpret_cast<const CreateScenarioRequest*>(
               &_CreateScenarioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateScenarioRequest& a, CreateScenarioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateScenarioRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateScenarioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateScenarioRequest* New() const final {
    return CreateMaybeMessage<CreateScenarioRequest>(nullptr);
  }

  CreateScenarioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateScenarioRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateScenarioRequest& from);
  void MergeFrom(const CreateScenarioRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateScenarioRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.MCP.CreateScenarioRequest";
  }
  protected:
  explicit CreateScenarioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFFPSourcesFieldNumber = 4,
    kPscanSourceFieldNumber = 1,
    kPscanParamFieldNumber = 2,
    kDetectionParamFieldNumber = 3,
  };
  // repeated .zb.dcts.source.SourceId FFP_sources = 4;
  int ffp_sources_size() const;
  private:
  int _internal_ffp_sources_size() const;
  public:
  void clear_ffp_sources();
  ::zb::dcts::source::SourceId* mutable_ffp_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceId >*
      mutable_ffp_sources();
  private:
  const ::zb::dcts::source::SourceId& _internal_ffp_sources(int index) const;
  ::zb::dcts::source::SourceId* _internal_add_ffp_sources();
  public:
  const ::zb::dcts::source::SourceId& ffp_sources(int index) const;
  ::zb::dcts::source::SourceId* add_ffp_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceId >&
      ffp_sources() const;

  // .zb.dcts.scenario.MCP.PScanSource pscan_source = 1;
  bool has_pscan_source() const;
  private:
  bool _internal_has_pscan_source() const;
  public:
  void clear_pscan_source();
  const ::zb::dcts::scenario::MCP::PScanSource& pscan_source() const;
  ::zb::dcts::scenario::MCP::PScanSource* release_pscan_source();
  ::zb::dcts::scenario::MCP::PScanSource* mutable_pscan_source();
  void set_allocated_pscan_source(::zb::dcts::scenario::MCP::PScanSource* pscan_source);
  private:
  const ::zb::dcts::scenario::MCP::PScanSource& _internal_pscan_source() const;
  ::zb::dcts::scenario::MCP::PScanSource* _internal_mutable_pscan_source();
  public:
  void unsafe_arena_set_allocated_pscan_source(
      ::zb::dcts::scenario::MCP::PScanSource* pscan_source);
  ::zb::dcts::scenario::MCP::PScanSource* unsafe_arena_release_pscan_source();

  // .zb.dcts.scenario.MCP.PScanParam pscan_param = 2;
  bool has_pscan_param() const;
  private:
  bool _internal_has_pscan_param() const;
  public:
  void clear_pscan_param();
  const ::zb::dcts::scenario::MCP::PScanParam& pscan_param() const;
  ::zb::dcts::scenario::MCP::PScanParam* release_pscan_param();
  ::zb::dcts::scenario::MCP::PScanParam* mutable_pscan_param();
  void set_allocated_pscan_param(::zb::dcts::scenario::MCP::PScanParam* pscan_param);
  private:
  const ::zb::dcts::scenario::MCP::PScanParam& _internal_pscan_param() const;
  ::zb::dcts::scenario::MCP::PScanParam* _internal_mutable_pscan_param();
  public:
  void unsafe_arena_set_allocated_pscan_param(
      ::zb::dcts::scenario::MCP::PScanParam* pscan_param);
  ::zb::dcts::scenario::MCP::PScanParam* unsafe_arena_release_pscan_param();

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 3;
  bool has_detection_param() const;
  private:
  bool _internal_has_detection_param() const;
  public:
  void clear_detection_param();
  const ::zb::dcts::scenario::detection::DetectionParam& detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* release_detection_param();
  ::zb::dcts::scenario::detection::DetectionParam* mutable_detection_param();
  void set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param);
  private:
  const ::zb::dcts::scenario::detection::DetectionParam& _internal_detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* _internal_mutable_detection_param();
  public:
  void unsafe_arena_set_allocated_detection_param(
      ::zb::dcts::scenario::detection::DetectionParam* detection_param);
  ::zb::dcts::scenario::detection::DetectionParam* unsafe_arena_release_detection_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.MCP.CreateScenarioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceId > ffp_sources_;
  ::zb::dcts::scenario::MCP::PScanSource* pscan_source_;
  ::zb::dcts::scenario::MCP::PScanParam* pscan_param_;
  ::zb::dcts::scenario::detection::DetectionParam* detection_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fMCP_2ftrunk_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.MCP.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.MCP.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeSpanFieldNumber = 1,
    kTotalSweepCountFieldNumber = 2,
  };
  // .zb.dcts.TimeSpan time_span = 1;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // uint32 total_sweep_count = 2;
  void clear_total_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count() const;
  void set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_sweep_count() const;
  void _internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.MCP.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::TimeSpan* time_span_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fMCP_2ftrunk_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.MCP.Result) */ {
 public:
  inline Result() : Result(nullptr) {};
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.MCP.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fMCP_2ftrunk_2eproto);
    return ::descriptor_table_scenario_2fMCP_2ftrunk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPanoramaViewFieldNumber = 6,
    kCloseshotViewFieldNumber = 7,
  };
  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.MCP.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::zb::dcts::scenario::MCP::Status& status() const;
  ::zb::dcts::scenario::MCP::Status* release_status();
  ::zb::dcts::scenario::MCP::Status* mutable_status();
  void set_allocated_status(::zb::dcts::scenario::MCP::Status* status);
  private:
  const ::zb::dcts::scenario::MCP::Status& _internal_status() const;
  ::zb::dcts::scenario::MCP::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::zb::dcts::scenario::MCP::Status* status);
  ::zb::dcts::scenario::MCP::Status* unsafe_arena_release_status();

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  bool has_panorama_view() const;
  private:
  bool _internal_has_panorama_view() const;
  public:
  void clear_panorama_view();
  const ::zb::dcts::scenario::spectrum::View& panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* release_panorama_view();
  ::zb::dcts::scenario::spectrum::View* mutable_panorama_view();
  void set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_panorama_view();
  public:
  void unsafe_arena_set_allocated_panorama_view(
      ::zb::dcts::scenario::spectrum::View* panorama_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_panorama_view();

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  bool has_closeshot_view() const;
  private:
  bool _internal_has_closeshot_view() const;
  public:
  void clear_closeshot_view();
  const ::zb::dcts::scenario::spectrum::View& closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* release_closeshot_view();
  ::zb::dcts::scenario::spectrum::View* mutable_closeshot_view();
  void set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_closeshot_view();
  public:
  void unsafe_arena_set_allocated_closeshot_view(
      ::zb::dcts::scenario::spectrum::View* closeshot_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_closeshot_view();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.MCP.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::scenario::MCP::Status* status_;
  ::zb::dcts::scenario::spectrum::View* panorama_view_;
  ::zb::dcts::scenario::spectrum::View* closeshot_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fMCP_2ftrunk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PScanSource

// .zb.dcts.source.SourceId id = 1;
inline bool PScanSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool PScanSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& PScanSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& PScanSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanSource.id)
  return _internal_id();
}
inline void PScanSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.PScanSource.id)
}
inline ::zb::dcts::source::SourceId* PScanSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* PScanSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.PScanSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* PScanSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* PScanSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.PScanSource.id)
  return _internal_mutable_id();
}
inline void PScanSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.PScanSource.id)
}

// int32 average_count = 3;
inline void PScanSource::clear_average_count() {
  average_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::_internal_average_count() const {
  return average_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::average_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanSource.average_count)
  return _internal_average_count();
}
inline void PScanSource::_internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_count_ = value;
}
inline void PScanSource::set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanSource.average_count)
}

// int32 attenuation_gain = 4;
inline void PScanSource::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanSource.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void PScanSource::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void PScanSource::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanSource.attenuation_gain)
}

// int32 antenna = 5;
inline void PScanSource::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanSource::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanSource.antenna)
  return _internal_antenna();
}
inline void PScanSource::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void PScanSource::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanSource.antenna)
}

// map<string, string> params = 6;
inline int PScanSource::_internal_params_size() const {
  return params_.size();
}
inline int PScanSource::params_size() const {
  return _internal_params_size();
}
inline void PScanSource::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PScanSource::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PScanSource::params() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.MCP.PScanSource.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PScanSource::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PScanSource::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.MCP.PScanSource.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// PScanParam

// .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 1;
inline bool PScanParam::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool PScanParam::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& PScanParam::_internal_freq_span() const {
  const ::zb::dcts::scenario::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      &::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& PScanParam::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanParam.freq_span)
  return _internal_freq_span();
}
inline void PScanParam::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.PScanParam.freq_span)
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* PScanParam::release_freq_span() {
  auto temp = unsafe_arena_release_freq_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* PScanParam::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.PScanParam.freq_span)
  
  ::zb::dcts::scenario::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* PScanParam::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* PScanParam::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.PScanParam.freq_span)
  return _internal_mutable_freq_span();
}
inline void PScanParam::set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.PScanParam.freq_span)
}

// double rbw = 2;
inline void PScanParam::clear_rbw() {
  rbw_ = 0;
}
inline double PScanParam::_internal_rbw() const {
  return rbw_;
}
inline double PScanParam::rbw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanParam.rbw)
  return _internal_rbw();
}
inline void PScanParam::_internal_set_rbw(double value) {
  
  rbw_ = value;
}
inline void PScanParam::set_rbw(double value) {
  _internal_set_rbw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanParam.rbw)
}

// int32 result_interval = 3;
inline void PScanParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanParam.result_interval)
  return _internal_result_interval();
}
inline void PScanParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void PScanParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanParam.result_interval)
}

// int32 expected_points = 5;
inline void PScanParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScanParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.PScanParam.expected_points)
  return _internal_expected_points();
}
inline void PScanParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void PScanParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.PScanParam.expected_points)
}

// -------------------------------------------------------------------

// CreateScenarioRequest

// .zb.dcts.scenario.MCP.PScanSource pscan_source = 1;
inline bool CreateScenarioRequest::_internal_has_pscan_source() const {
  return this != internal_default_instance() && pscan_source_ != nullptr;
}
inline bool CreateScenarioRequest::has_pscan_source() const {
  return _internal_has_pscan_source();
}
inline void CreateScenarioRequest::clear_pscan_source() {
  if (GetArena() == nullptr && pscan_source_ != nullptr) {
    delete pscan_source_;
  }
  pscan_source_ = nullptr;
}
inline const ::zb::dcts::scenario::MCP::PScanSource& CreateScenarioRequest::_internal_pscan_source() const {
  const ::zb::dcts::scenario::MCP::PScanSource* p = pscan_source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::MCP::PScanSource*>(
      &::zb::dcts::scenario::MCP::_PScanSource_default_instance_);
}
inline const ::zb::dcts::scenario::MCP::PScanSource& CreateScenarioRequest::pscan_source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_source)
  return _internal_pscan_source();
}
inline void CreateScenarioRequest::unsafe_arena_set_allocated_pscan_source(
    ::zb::dcts::scenario::MCP::PScanSource* pscan_source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pscan_source_);
  }
  pscan_source_ = pscan_source;
  if (pscan_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_source)
}
inline ::zb::dcts::scenario::MCP::PScanSource* CreateScenarioRequest::release_pscan_source() {
  auto temp = unsafe_arena_release_pscan_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanSource* CreateScenarioRequest::unsafe_arena_release_pscan_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_source)
  
  ::zb::dcts::scenario::MCP::PScanSource* temp = pscan_source_;
  pscan_source_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanSource* CreateScenarioRequest::_internal_mutable_pscan_source() {
  
  if (pscan_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanSource>(GetArena());
    pscan_source_ = p;
  }
  return pscan_source_;
}
inline ::zb::dcts::scenario::MCP::PScanSource* CreateScenarioRequest::mutable_pscan_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_source)
  return _internal_mutable_pscan_source();
}
inline void CreateScenarioRequest::set_allocated_pscan_source(::zb::dcts::scenario::MCP::PScanSource* pscan_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pscan_source_;
  }
  if (pscan_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pscan_source);
    if (message_arena != submessage_arena) {
      pscan_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pscan_source, submessage_arena);
    }
    
  } else {
    
  }
  pscan_source_ = pscan_source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_source)
}

// .zb.dcts.scenario.MCP.PScanParam pscan_param = 2;
inline bool CreateScenarioRequest::_internal_has_pscan_param() const {
  return this != internal_default_instance() && pscan_param_ != nullptr;
}
inline bool CreateScenarioRequest::has_pscan_param() const {
  return _internal_has_pscan_param();
}
inline void CreateScenarioRequest::clear_pscan_param() {
  if (GetArena() == nullptr && pscan_param_ != nullptr) {
    delete pscan_param_;
  }
  pscan_param_ = nullptr;
}
inline const ::zb::dcts::scenario::MCP::PScanParam& CreateScenarioRequest::_internal_pscan_param() const {
  const ::zb::dcts::scenario::MCP::PScanParam* p = pscan_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::MCP::PScanParam*>(
      &::zb::dcts::scenario::MCP::_PScanParam_default_instance_);
}
inline const ::zb::dcts::scenario::MCP::PScanParam& CreateScenarioRequest::pscan_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_param)
  return _internal_pscan_param();
}
inline void CreateScenarioRequest::unsafe_arena_set_allocated_pscan_param(
    ::zb::dcts::scenario::MCP::PScanParam* pscan_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pscan_param_);
  }
  pscan_param_ = pscan_param;
  if (pscan_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_param)
}
inline ::zb::dcts::scenario::MCP::PScanParam* CreateScenarioRequest::release_pscan_param() {
  auto temp = unsafe_arena_release_pscan_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanParam* CreateScenarioRequest::unsafe_arena_release_pscan_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_param)
  
  ::zb::dcts::scenario::MCP::PScanParam* temp = pscan_param_;
  pscan_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::MCP::PScanParam* CreateScenarioRequest::_internal_mutable_pscan_param() {
  
  if (pscan_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::MCP::PScanParam>(GetArena());
    pscan_param_ = p;
  }
  return pscan_param_;
}
inline ::zb::dcts::scenario::MCP::PScanParam* CreateScenarioRequest::mutable_pscan_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_param)
  return _internal_mutable_pscan_param();
}
inline void CreateScenarioRequest::set_allocated_pscan_param(::zb::dcts::scenario::MCP::PScanParam* pscan_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pscan_param_;
  }
  if (pscan_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pscan_param);
    if (message_arena != submessage_arena) {
      pscan_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pscan_param, submessage_arena);
    }
    
  } else {
    
  }
  pscan_param_ = pscan_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.pscan_param)
}

// .zb.dcts.scenario.detection.DetectionParam detection_param = 3;
inline bool CreateScenarioRequest::_internal_has_detection_param() const {
  return this != internal_default_instance() && detection_param_ != nullptr;
}
inline bool CreateScenarioRequest::has_detection_param() const {
  return _internal_has_detection_param();
}
inline const ::zb::dcts::scenario::detection::DetectionParam& CreateScenarioRequest::_internal_detection_param() const {
  const ::zb::dcts::scenario::detection::DetectionParam* p = detection_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::detection::DetectionParam*>(
      &::zb::dcts::scenario::detection::_DetectionParam_default_instance_);
}
inline const ::zb::dcts::scenario::detection::DetectionParam& CreateScenarioRequest::detection_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.CreateScenarioRequest.detection_param)
  return _internal_detection_param();
}
inline void CreateScenarioRequest::unsafe_arena_set_allocated_detection_param(
    ::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  detection_param_ = detection_param;
  if (detection_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.detection_param)
}
inline ::zb::dcts::scenario::detection::DetectionParam* CreateScenarioRequest::release_detection_param() {
  auto temp = unsafe_arena_release_detection_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* CreateScenarioRequest::unsafe_arena_release_detection_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.CreateScenarioRequest.detection_param)
  
  ::zb::dcts::scenario::detection::DetectionParam* temp = detection_param_;
  detection_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* CreateScenarioRequest::_internal_mutable_detection_param() {
  
  if (detection_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::detection::DetectionParam>(GetArena());
    detection_param_ = p;
  }
  return detection_param_;
}
inline ::zb::dcts::scenario::detection::DetectionParam* CreateScenarioRequest::mutable_detection_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.CreateScenarioRequest.detection_param)
  return _internal_mutable_detection_param();
}
inline void CreateScenarioRequest::set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  if (detection_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param)->GetArena();
    if (message_arena != submessage_arena) {
      detection_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_param, submessage_arena);
    }
    
  } else {
    
  }
  detection_param_ = detection_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.CreateScenarioRequest.detection_param)
}

// repeated .zb.dcts.source.SourceId FFP_sources = 4;
inline int CreateScenarioRequest::_internal_ffp_sources_size() const {
  return ffp_sources_.size();
}
inline int CreateScenarioRequest::ffp_sources_size() const {
  return _internal_ffp_sources_size();
}
inline ::zb::dcts::source::SourceId* CreateScenarioRequest::mutable_ffp_sources(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.CreateScenarioRequest.FFP_sources)
  return ffp_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceId >*
CreateScenarioRequest::mutable_ffp_sources() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.MCP.CreateScenarioRequest.FFP_sources)
  return &ffp_sources_;
}
inline const ::zb::dcts::source::SourceId& CreateScenarioRequest::_internal_ffp_sources(int index) const {
  return ffp_sources_.Get(index);
}
inline const ::zb::dcts::source::SourceId& CreateScenarioRequest::ffp_sources(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.CreateScenarioRequest.FFP_sources)
  return _internal_ffp_sources(index);
}
inline ::zb::dcts::source::SourceId* CreateScenarioRequest::_internal_add_ffp_sources() {
  return ffp_sources_.Add();
}
inline ::zb::dcts::source::SourceId* CreateScenarioRequest::add_ffp_sources() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.MCP.CreateScenarioRequest.FFP_sources)
  return _internal_add_ffp_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::SourceId >&
CreateScenarioRequest::ffp_sources() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.MCP.CreateScenarioRequest.FFP_sources)
  return ffp_sources_;
}

// -------------------------------------------------------------------

// Status

// .zb.dcts.TimeSpan time_span = 1;
inline bool Status::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool Status::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& Status::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& Status::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Status.time_span)
  return _internal_time_span();
}
inline void Status::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.Status.time_span)
}
inline ::zb::dcts::TimeSpan* Status::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* Status::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.Status.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* Status::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* Status::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.Status.time_span)
  return _internal_mutable_time_span();
}
inline void Status::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.Status.time_span)
}

// uint32 total_sweep_count = 2;
inline void Status::clear_total_sweep_count() {
  total_sweep_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_total_sweep_count() const {
  return total_sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::total_sweep_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Status.total_sweep_count)
  return _internal_total_sweep_count();
}
inline void Status::_internal_set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_sweep_count_ = value;
}
inline void Status::set_total_sweep_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_sweep_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.MCP.Status.total_sweep_count)
}

// -------------------------------------------------------------------

// Result

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool Result::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Result::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& Result::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& Result::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Result.header)
  return _internal_header();
}
inline void Result::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.Result.header)
}
inline ::zb::dcts::scenario::spectrum::Header* Result::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* Result::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.Result.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* Result::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* Result::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.Result.header)
  return _internal_mutable_header();
}
inline void Result::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.Result.header)
}

// .zb.dcts.scenario.MCP.Status status = 2;
inline bool Result::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Result::has_status() const {
  return _internal_has_status();
}
inline void Result::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::zb::dcts::scenario::MCP::Status& Result::_internal_status() const {
  const ::zb::dcts::scenario::MCP::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::MCP::Status*>(
      &::zb::dcts::scenario::MCP::_Status_default_instance_);
}
inline const ::zb::dcts::scenario::MCP::Status& Result::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Result.status)
  return _internal_status();
}
inline void Result::unsafe_arena_set_allocated_status(
    ::zb::dcts::scenario::MCP::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.Result.status)
}
inline ::zb::dcts::scenario::MCP::Status* Result::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::MCP::Status* Result::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.Result.status)
  
  ::zb::dcts::scenario::MCP::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::MCP::Status* Result::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::MCP::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::zb::dcts::scenario::MCP::Status* Result::mutable_status() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.Result.status)
  return _internal_mutable_status();
}
inline void Result::set_allocated_status(::zb::dcts::scenario::MCP::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.Result.status)
}

// .zb.dcts.scenario.spectrum.View panorama_view = 6;
inline bool Result::_internal_has_panorama_view() const {
  return this != internal_default_instance() && panorama_view_ != nullptr;
}
inline bool Result::has_panorama_view() const {
  return _internal_has_panorama_view();
}
inline const ::zb::dcts::scenario::spectrum::View& Result::_internal_panorama_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = panorama_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& Result::panorama_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Result.panorama_view)
  return _internal_panorama_view();
}
inline void Result::unsafe_arena_set_allocated_panorama_view(
    ::zb::dcts::scenario::spectrum::View* panorama_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  panorama_view_ = panorama_view;
  if (panorama_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.Result.panorama_view)
}
inline ::zb::dcts::scenario::spectrum::View* Result::release_panorama_view() {
  auto temp = unsafe_arena_release_panorama_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* Result::unsafe_arena_release_panorama_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.Result.panorama_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* Result::_internal_mutable_panorama_view() {
  
  if (panorama_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    panorama_view_ = p;
  }
  return panorama_view_;
}
inline ::zb::dcts::scenario::spectrum::View* Result::mutable_panorama_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.Result.panorama_view)
  return _internal_mutable_panorama_view();
}
inline void Result::set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  if (panorama_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view)->GetArena();
    if (message_arena != submessage_arena) {
      panorama_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panorama_view, submessage_arena);
    }
    
  } else {
    
  }
  panorama_view_ = panorama_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.Result.panorama_view)
}

// .zb.dcts.scenario.spectrum.View closeshot_view = 7;
inline bool Result::_internal_has_closeshot_view() const {
  return this != internal_default_instance() && closeshot_view_ != nullptr;
}
inline bool Result::has_closeshot_view() const {
  return _internal_has_closeshot_view();
}
inline const ::zb::dcts::scenario::spectrum::View& Result::_internal_closeshot_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = closeshot_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& Result::closeshot_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.MCP.Result.closeshot_view)
  return _internal_closeshot_view();
}
inline void Result::unsafe_arena_set_allocated_closeshot_view(
    ::zb::dcts::scenario::spectrum::View* closeshot_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  closeshot_view_ = closeshot_view;
  if (closeshot_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.MCP.Result.closeshot_view)
}
inline ::zb::dcts::scenario::spectrum::View* Result::release_closeshot_view() {
  auto temp = unsafe_arena_release_closeshot_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* Result::unsafe_arena_release_closeshot_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.MCP.Result.closeshot_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* Result::_internal_mutable_closeshot_view() {
  
  if (closeshot_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    closeshot_view_ = p;
  }
  return closeshot_view_;
}
inline ::zb::dcts::scenario::spectrum::View* Result::mutable_closeshot_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.MCP.Result.closeshot_view)
  return _internal_mutable_closeshot_view();
}
inline void Result::set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  if (closeshot_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view)->GetArena();
    if (message_arena != submessage_arena) {
      closeshot_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closeshot_view, submessage_arena);
    }
    
  } else {
    
  }
  closeshot_view_ = closeshot_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.MCP.Result.closeshot_view)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MCP
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fMCP_2ftrunk_2eproto
