// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/DF.proto

#include "scenario/DF.pb.h"
#include "scenario/DF.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace DF {

static const char* DirectionFindingService_method_names[] = {
  "/zb.dcts.scenario.DF.DirectionFindingService/StartDFTask",
  "/zb.dcts.scenario.DF.DirectionFindingService/ChangeDFSignals",
  "/zb.dcts.scenario.DF.DirectionFindingService/GetDFResult",
  "/zb.dcts.scenario.DF.DirectionFindingService/StopDFTask",
};

std::unique_ptr< DirectionFindingService::Stub> DirectionFindingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DirectionFindingService::Stub> stub(new DirectionFindingService::Stub(channel));
  return stub;
}

DirectionFindingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartDFTask_(DirectionFindingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeDFSignals_(DirectionFindingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDFResult_(DirectionFindingService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StopDFTask_(DirectionFindingService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DirectionFindingService::Stub::StartDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartDFTask_, context, request, response);
}

void DirectionFindingService::Stub::experimental_async::StartDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartDFTask_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::StartDFTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartDFTask_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::StartDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartDFTask_, context, request, response, reactor);
}

void DirectionFindingService::Stub::experimental_async::StartDFTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartDFTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::AsyncStartDFTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartDFTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::PrepareAsyncStartDFTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartDFTask_, context, request, false);
}

::grpc::Status DirectionFindingService::Stub::ChangeDFSignals(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeDFSignals_, context, request, response);
}

void DirectionFindingService::Stub::experimental_async::ChangeDFSignals(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeDFSignals_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::ChangeDFSignals(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeDFSignals_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::ChangeDFSignals(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeDFSignals_, context, request, response, reactor);
}

void DirectionFindingService::Stub::experimental_async::ChangeDFSignals(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeDFSignals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::AsyncChangeDFSignalsRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ChangeDFSignals_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::PrepareAsyncChangeDFSignalsRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ChangeDFSignals_, context, request, false);
}

::grpc::ClientReader< ::zb::dcts::scenario::DF::DirectionFindingResult>* DirectionFindingService::Stub::GetDFResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::zb::dcts::scenario::DF::DirectionFindingResult>::Create(channel_.get(), rpcmethod_GetDFResult_, context, request);
}

void DirectionFindingService::Stub::experimental_async::GetDFResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::DF::DirectionFindingResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::zb::dcts::scenario::DF::DirectionFindingResult>::Create(stub_->channel_.get(), stub_->rpcmethod_GetDFResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::DF::DirectionFindingResult>* DirectionFindingService::Stub::AsyncGetDFResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::DF::DirectionFindingResult>::Create(channel_.get(), cq, rpcmethod_GetDFResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::DF::DirectionFindingResult>* DirectionFindingService::Stub::PrepareAsyncGetDFResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::DF::DirectionFindingResult>::Create(channel_.get(), cq, rpcmethod_GetDFResult_, context, request, false, nullptr);
}

::grpc::Status DirectionFindingService::Stub::StopDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopDFTask_, context, request, response);
}

void DirectionFindingService::Stub::experimental_async::StopDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopDFTask_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::StopDFTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopDFTask_, context, request, response, std::move(f));
}

void DirectionFindingService::Stub::experimental_async::StopDFTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopDFTask_, context, request, response, reactor);
}

void DirectionFindingService::Stub::experimental_async::StopDFTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopDFTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::AsyncStopDFTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopDFTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* DirectionFindingService::Stub::PrepareAsyncStopDFTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopDFTask_, context, request, false);
}

DirectionFindingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectionFindingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectionFindingService::Service, ::zb::dcts::scenario::DF::DirectionFindingRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&DirectionFindingService::Service::StartDFTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectionFindingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectionFindingService::Service, ::zb::dcts::scenario::DF::ChangeSignalsRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&DirectionFindingService::Service::ChangeDFSignals), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectionFindingService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DirectionFindingService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::DF::DirectionFindingResult>(
          std::mem_fn(&DirectionFindingService::Service::GetDFResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectionFindingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectionFindingService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&DirectionFindingService::Service::StopDFTask), this)));
}

DirectionFindingService::Service::~Service() {
}

::grpc::Status DirectionFindingService::Service::StartDFTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::DF::DirectionFindingRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectionFindingService::Service::ChangeDFSignals(::grpc::ServerContext* context, const ::zb::dcts::scenario::DF::ChangeSignalsRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectionFindingService::Service::GetDFResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::DF::DirectionFindingResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectionFindingService::Service::StopDFTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace DF

