// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/DF.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fDF_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fDF_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fDF_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fDF_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fDF_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace DF {
class ChangeSignalsRequest;
class ChangeSignalsRequestDefaultTypeInternal;
extern ChangeSignalsRequestDefaultTypeInternal _ChangeSignalsRequest_default_instance_;
class DFSource;
class DFSourceDefaultTypeInternal;
extern DFSourceDefaultTypeInternal _DFSource_default_instance_;
class DirectionFindingRequest;
class DirectionFindingRequestDefaultTypeInternal;
extern DirectionFindingRequestDefaultTypeInternal _DirectionFindingRequest_default_instance_;
class DirectionFindingResult;
class DirectionFindingResultDefaultTypeInternal;
extern DirectionFindingResultDefaultTypeInternal _DirectionFindingResult_default_instance_;
class DirectionFindingSignal;
class DirectionFindingSignalDefaultTypeInternal;
extern DirectionFindingSignalDefaultTypeInternal _DirectionFindingSignal_default_instance_;
class DirectionFindingSignals;
class DirectionFindingSignalsDefaultTypeInternal;
extern DirectionFindingSignalsDefaultTypeInternal _DirectionFindingSignals_default_instance_;
class SignalDirection;
class SignalDirectionDefaultTypeInternal;
extern SignalDirectionDefaultTypeInternal _SignalDirection_default_instance_;
}  // namespace DF
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::DF::ChangeSignalsRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::ChangeSignalsRequest>(Arena*);
template<> ::zb::dcts::scenario::DF::DFSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::DFSource>(Arena*);
template<> ::zb::dcts::scenario::DF::DirectionFindingRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingRequest>(Arena*);
template<> ::zb::dcts::scenario::DF::DirectionFindingResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingResult>(Arena*);
template<> ::zb::dcts::scenario::DF::DirectionFindingSignal* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingSignal>(Arena*);
template<> ::zb::dcts::scenario::DF::DirectionFindingSignals* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingSignals>(Arena*);
template<> ::zb::dcts::scenario::DF::SignalDirection* Arena::CreateMaybeMessage<::zb::dcts::scenario::DF::SignalDirection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace DF {

// ===================================================================

class DirectionFindingSignal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.DirectionFindingSignal) */ {
 public:
  inline DirectionFindingSignal() : DirectionFindingSignal(nullptr) {};
  virtual ~DirectionFindingSignal();

  DirectionFindingSignal(const DirectionFindingSignal& from);
  DirectionFindingSignal(DirectionFindingSignal&& from) noexcept
    : DirectionFindingSignal() {
    *this = ::std::move(from);
  }

  inline DirectionFindingSignal& operator=(const DirectionFindingSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionFindingSignal& operator=(DirectionFindingSignal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionFindingSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectionFindingSignal* internal_default_instance() {
    return reinterpret_cast<const DirectionFindingSignal*>(
               &_DirectionFindingSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DirectionFindingSignal& a, DirectionFindingSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionFindingSignal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionFindingSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionFindingSignal* New() const final {
    return CreateMaybeMessage<DirectionFindingSignal>(nullptr);
  }

  DirectionFindingSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionFindingSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionFindingSignal& from);
  void MergeFrom(const DirectionFindingSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionFindingSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.DirectionFindingSignal";
  }
  protected:
  explicit DirectionFindingSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignalBandFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::scenario::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::scenario::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::scenario::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  ::zb::dcts::scenario::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.DirectionFindingSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::zb::dcts::scenario::spectrum::SignalBand* signal_band_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class DirectionFindingSignals PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.DirectionFindingSignals) */ {
 public:
  inline DirectionFindingSignals() : DirectionFindingSignals(nullptr) {};
  virtual ~DirectionFindingSignals();

  DirectionFindingSignals(const DirectionFindingSignals& from);
  DirectionFindingSignals(DirectionFindingSignals&& from) noexcept
    : DirectionFindingSignals() {
    *this = ::std::move(from);
  }

  inline DirectionFindingSignals& operator=(const DirectionFindingSignals& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionFindingSignals& operator=(DirectionFindingSignals&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionFindingSignals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectionFindingSignals* internal_default_instance() {
    return reinterpret_cast<const DirectionFindingSignals*>(
               &_DirectionFindingSignals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DirectionFindingSignals& a, DirectionFindingSignals& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionFindingSignals* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionFindingSignals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionFindingSignals* New() const final {
    return CreateMaybeMessage<DirectionFindingSignals>(nullptr);
  }

  DirectionFindingSignals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionFindingSignals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionFindingSignals& from);
  void MergeFrom(const DirectionFindingSignals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionFindingSignals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.DirectionFindingSignals";
  }
  protected:
  explicit DirectionFindingSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.DF.DirectionFindingSignal targets = 1;
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::zb::dcts::scenario::DF::DirectionFindingSignal* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::DirectionFindingSignal >*
      mutable_targets();
  private:
  const ::zb::dcts::scenario::DF::DirectionFindingSignal& _internal_targets(int index) const;
  ::zb::dcts::scenario::DF::DirectionFindingSignal* _internal_add_targets();
  public:
  const ::zb::dcts::scenario::DF::DirectionFindingSignal& targets(int index) const;
  ::zb::dcts::scenario::DF::DirectionFindingSignal* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::DirectionFindingSignal >&
      targets() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.DirectionFindingSignals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::DirectionFindingSignal > targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class SignalDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.SignalDirection) */ {
 public:
  inline SignalDirection() : SignalDirection(nullptr) {};
  virtual ~SignalDirection();

  SignalDirection(const SignalDirection& from);
  SignalDirection(SignalDirection&& from) noexcept
    : SignalDirection() {
    *this = ::std::move(from);
  }

  inline SignalDirection& operator=(const SignalDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalDirection& operator=(SignalDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalDirection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalDirection* internal_default_instance() {
    return reinterpret_cast<const SignalDirection*>(
               &_SignalDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignalDirection& a, SignalDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalDirection* New() const final {
    return CreateMaybeMessage<SignalDirection>(nullptr);
  }

  SignalDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalDirection& from);
  void MergeFrom(const SignalDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.SignalDirection";
  }
  protected:
  explicit SignalDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignalBandFieldNumber = 2,
    kDirectionOfArrivalFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::scenario::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::scenario::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::scenario::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  ::zb::dcts::scenario::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // .zb.dcts.DOA direction_of_arrival = 3;
  bool has_direction_of_arrival() const;
  private:
  bool _internal_has_direction_of_arrival() const;
  public:
  void clear_direction_of_arrival();
  const ::zb::dcts::DOA& direction_of_arrival() const;
  ::zb::dcts::DOA* release_direction_of_arrival();
  ::zb::dcts::DOA* mutable_direction_of_arrival();
  void set_allocated_direction_of_arrival(::zb::dcts::DOA* direction_of_arrival);
  private:
  const ::zb::dcts::DOA& _internal_direction_of_arrival() const;
  ::zb::dcts::DOA* _internal_mutable_direction_of_arrival();
  public:
  void unsafe_arena_set_allocated_direction_of_arrival(
      ::zb::dcts::DOA* direction_of_arrival);
  ::zb::dcts::DOA* unsafe_arena_release_direction_of_arrival();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.SignalDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::zb::dcts::scenario::spectrum::SignalBand* signal_band_;
  ::zb::dcts::DOA* direction_of_arrival_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class DirectionFindingResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.DirectionFindingResult) */ {
 public:
  inline DirectionFindingResult() : DirectionFindingResult(nullptr) {};
  virtual ~DirectionFindingResult();

  DirectionFindingResult(const DirectionFindingResult& from);
  DirectionFindingResult(DirectionFindingResult&& from) noexcept
    : DirectionFindingResult() {
    *this = ::std::move(from);
  }

  inline DirectionFindingResult& operator=(const DirectionFindingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionFindingResult& operator=(DirectionFindingResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionFindingResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectionFindingResult* internal_default_instance() {
    return reinterpret_cast<const DirectionFindingResult*>(
               &_DirectionFindingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DirectionFindingResult& a, DirectionFindingResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionFindingResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionFindingResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionFindingResult* New() const final {
    return CreateMaybeMessage<DirectionFindingResult>(nullptr);
  }

  DirectionFindingResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionFindingResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionFindingResult& from);
  void MergeFrom(const DirectionFindingResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionFindingResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.DirectionFindingResult";
  }
  protected:
  explicit DirectionFindingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalsDirectionFieldNumber = 4,
    kResultFromFieldNumber = 1,
    kTimeStampFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // repeated .zb.dcts.scenario.DF.SignalDirection signals_direction = 4;
  int signals_direction_size() const;
  private:
  int _internal_signals_direction_size() const;
  public:
  void clear_signals_direction();
  ::zb::dcts::scenario::DF::SignalDirection* mutable_signals_direction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::SignalDirection >*
      mutable_signals_direction();
  private:
  const ::zb::dcts::scenario::DF::SignalDirection& _internal_signals_direction(int index) const;
  ::zb::dcts::scenario::DF::SignalDirection* _internal_add_signals_direction();
  public:
  const ::zb::dcts::scenario::DF::SignalDirection& signals_direction(int index) const;
  ::zb::dcts::scenario::DF::SignalDirection* add_signals_direction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::SignalDirection >&
      signals_direction() const;

  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.Timestamp time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::zb::dcts::Position& position() const;
  ::zb::dcts::Position* release_position();
  ::zb::dcts::Position* mutable_position();
  void set_allocated_position(::zb::dcts::Position* position);
  private:
  const ::zb::dcts::Position& _internal_position() const;
  ::zb::dcts::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::zb::dcts::Position* position);
  ::zb::dcts::Position* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.DirectionFindingResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::SignalDirection > signals_direction_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class DFSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.DFSource) */ {
 public:
  inline DFSource() : DFSource(nullptr) {};
  virtual ~DFSource();

  DFSource(const DFSource& from);
  DFSource(DFSource&& from) noexcept
    : DFSource() {
    *this = ::std::move(from);
  }

  inline DFSource& operator=(const DFSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DFSource& operator=(DFSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DFSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DFSource* internal_default_instance() {
    return reinterpret_cast<const DFSource*>(
               &_DFSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DFSource& a, DFSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DFSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DFSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DFSource* New() const final {
    return CreateMaybeMessage<DFSource>(nullptr);
  }

  DFSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DFSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DFSource& from);
  void MergeFrom(const DFSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DFSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.DFSource";
  }
  protected:
  explicit DFSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // .zb.dcts.source.SourceId source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::zb::dcts::source::SourceId& source() const;
  ::zb::dcts::source::SourceId* release_source();
  ::zb::dcts::source::SourceId* mutable_source();
  void set_allocated_source(::zb::dcts::source::SourceId* source);
  private:
  const ::zb::dcts::source::SourceId& _internal_source() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::zb::dcts::source::SourceId* source);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.DFSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class DirectionFindingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.DirectionFindingRequest) */ {
 public:
  inline DirectionFindingRequest() : DirectionFindingRequest(nullptr) {};
  virtual ~DirectionFindingRequest();

  DirectionFindingRequest(const DirectionFindingRequest& from);
  DirectionFindingRequest(DirectionFindingRequest&& from) noexcept
    : DirectionFindingRequest() {
    *this = ::std::move(from);
  }

  inline DirectionFindingRequest& operator=(const DirectionFindingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionFindingRequest& operator=(DirectionFindingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionFindingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectionFindingRequest* internal_default_instance() {
    return reinterpret_cast<const DirectionFindingRequest*>(
               &_DirectionFindingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirectionFindingRequest& a, DirectionFindingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionFindingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionFindingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionFindingRequest* New() const final {
    return CreateMaybeMessage<DirectionFindingRequest>(nullptr);
  }

  DirectionFindingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionFindingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionFindingRequest& from);
  void MergeFrom(const DirectionFindingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionFindingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.DirectionFindingRequest";
  }
  protected:
  explicit DirectionFindingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceFieldNumber = 2,
    kParamFieldNumber = 3,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.DF.DFSource source = 2;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::zb::dcts::scenario::DF::DFSource& source() const;
  ::zb::dcts::scenario::DF::DFSource* release_source();
  ::zb::dcts::scenario::DF::DFSource* mutable_source();
  void set_allocated_source(::zb::dcts::scenario::DF::DFSource* source);
  private:
  const ::zb::dcts::scenario::DF::DFSource& _internal_source() const;
  ::zb::dcts::scenario::DF::DFSource* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::zb::dcts::scenario::DF::DFSource* source);
  ::zb::dcts::scenario::DF::DFSource* unsafe_arena_release_source();

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& param() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* release_param();
  ::zb::dcts::scenario::DF::DirectionFindingSignals* mutable_param();
  void set_allocated_param(::zb::dcts::scenario::DF::DirectionFindingSignals* param);
  private:
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& _internal_param() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::scenario::DF::DirectionFindingSignals* param);
  ::zb::dcts::scenario::DF::DirectionFindingSignals* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.DirectionFindingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::DF::DFSource* source_;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// -------------------------------------------------------------------

class ChangeSignalsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.DF.ChangeSignalsRequest) */ {
 public:
  inline ChangeSignalsRequest() : ChangeSignalsRequest(nullptr) {};
  virtual ~ChangeSignalsRequest();

  ChangeSignalsRequest(const ChangeSignalsRequest& from);
  ChangeSignalsRequest(ChangeSignalsRequest&& from) noexcept
    : ChangeSignalsRequest() {
    *this = ::std::move(from);
  }

  inline ChangeSignalsRequest& operator=(const ChangeSignalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeSignalsRequest& operator=(ChangeSignalsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeSignalsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeSignalsRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeSignalsRequest*>(
               &_ChangeSignalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChangeSignalsRequest& a, ChangeSignalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeSignalsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeSignalsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeSignalsRequest* New() const final {
    return CreateMaybeMessage<ChangeSignalsRequest>(nullptr);
  }

  ChangeSignalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeSignalsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeSignalsRequest& from);
  void MergeFrom(const ChangeSignalsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeSignalsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.DF.ChangeSignalsRequest";
  }
  protected:
  explicit ChangeSignalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fDF_2eproto);
    return ::descriptor_table_scenario_2fDF_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.DF.DirectionFindingSignals param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& param() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* release_param();
  ::zb::dcts::scenario::DF::DirectionFindingSignals* mutable_param();
  void set_allocated_param(::zb::dcts::scenario::DF::DirectionFindingSignals* param);
  private:
  const ::zb::dcts::scenario::DF::DirectionFindingSignals& _internal_param() const;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::zb::dcts::scenario::DF::DirectionFindingSignals* param);
  ::zb::dcts::scenario::DF::DirectionFindingSignals* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.DF.ChangeSignalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::DF::DirectionFindingSignals* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fDF_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectionFindingSignal

// string id = 1;
inline void DirectionFindingSignal::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DirectionFindingSignal::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingSignal.id)
  return _internal_id();
}
inline void DirectionFindingSignal::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}
inline std::string* DirectionFindingSignal::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingSignal.id)
  return _internal_mutable_id();
}
inline const std::string& DirectionFindingSignal::_internal_id() const {
  return id_.Get();
}
inline void DirectionFindingSignal::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DirectionFindingSignal::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}
inline void DirectionFindingSignal::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}
inline void DirectionFindingSignal::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}
inline std::string* DirectionFindingSignal::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DirectionFindingSignal::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingSignal.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectionFindingSignal::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}
inline std::string* DirectionFindingSignal::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.DF.DirectionFindingSignal.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DirectionFindingSignal::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingSignal.id)
}

// .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
inline bool DirectionFindingSignal::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool DirectionFindingSignal::has_signal_band() const {
  return _internal_has_signal_band();
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DirectionFindingSignal::_internal_signal_band() const {
  const ::zb::dcts::scenario::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SignalBand*>(
      &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DirectionFindingSignal::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingSignal.signal_band)
  return _internal_signal_band();
}
inline void DirectionFindingSignal::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingSignal.signal_band)
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DirectionFindingSignal::release_signal_band() {
  auto temp = unsafe_arena_release_signal_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DirectionFindingSignal::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingSignal.signal_band)
  
  ::zb::dcts::scenario::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DirectionFindingSignal::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DirectionFindingSignal::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingSignal.signal_band)
  return _internal_mutable_signal_band();
}
inline void DirectionFindingSignal::set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band)->GetArena();
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingSignal.signal_band)
}

// -------------------------------------------------------------------

// DirectionFindingSignals

// repeated .zb.dcts.scenario.DF.DirectionFindingSignal targets = 1;
inline int DirectionFindingSignals::_internal_targets_size() const {
  return targets_.size();
}
inline int DirectionFindingSignals::targets_size() const {
  return _internal_targets_size();
}
inline void DirectionFindingSignals::clear_targets() {
  targets_.Clear();
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignal* DirectionFindingSignals::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingSignals.targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::DirectionFindingSignal >*
DirectionFindingSignals::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.DF.DirectionFindingSignals.targets)
  return &targets_;
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignal& DirectionFindingSignals::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignal& DirectionFindingSignals::targets(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingSignals.targets)
  return _internal_targets(index);
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignal* DirectionFindingSignals::_internal_add_targets() {
  return targets_.Add();
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignal* DirectionFindingSignals::add_targets() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.DF.DirectionFindingSignals.targets)
  return _internal_add_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::DirectionFindingSignal >&
DirectionFindingSignals::targets() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.DF.DirectionFindingSignals.targets)
  return targets_;
}

// -------------------------------------------------------------------

// SignalDirection

// string id = 1;
inline void SignalDirection::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignalDirection::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.SignalDirection.id)
  return _internal_id();
}
inline void SignalDirection::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.DF.SignalDirection.id)
}
inline std::string* SignalDirection::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.SignalDirection.id)
  return _internal_mutable_id();
}
inline const std::string& SignalDirection::_internal_id() const {
  return id_.Get();
}
inline void SignalDirection::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignalDirection::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.DF.SignalDirection.id)
}
inline void SignalDirection::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.DF.SignalDirection.id)
}
inline void SignalDirection::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.DF.SignalDirection.id)
}
inline std::string* SignalDirection::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignalDirection::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.SignalDirection.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignalDirection::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.SignalDirection.id)
}
inline std::string* SignalDirection::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.DF.SignalDirection.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SignalDirection::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.SignalDirection.id)
}

// .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
inline bool SignalDirection::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool SignalDirection::has_signal_band() const {
  return _internal_has_signal_band();
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& SignalDirection::_internal_signal_band() const {
  const ::zb::dcts::scenario::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SignalBand*>(
      &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& SignalDirection::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.SignalDirection.signal_band)
  return _internal_signal_band();
}
inline void SignalDirection::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.SignalDirection.signal_band)
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SignalDirection::release_signal_band() {
  auto temp = unsafe_arena_release_signal_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SignalDirection::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.SignalDirection.signal_band)
  
  ::zb::dcts::scenario::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SignalDirection::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* SignalDirection::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.SignalDirection.signal_band)
  return _internal_mutable_signal_band();
}
inline void SignalDirection::set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band)->GetArena();
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.SignalDirection.signal_band)
}

// .zb.dcts.DOA direction_of_arrival = 3;
inline bool SignalDirection::_internal_has_direction_of_arrival() const {
  return this != internal_default_instance() && direction_of_arrival_ != nullptr;
}
inline bool SignalDirection::has_direction_of_arrival() const {
  return _internal_has_direction_of_arrival();
}
inline const ::zb::dcts::DOA& SignalDirection::_internal_direction_of_arrival() const {
  const ::zb::dcts::DOA* p = direction_of_arrival_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::DOA*>(
      &::zb::dcts::_DOA_default_instance_);
}
inline const ::zb::dcts::DOA& SignalDirection::direction_of_arrival() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.SignalDirection.direction_of_arrival)
  return _internal_direction_of_arrival();
}
inline void SignalDirection::unsafe_arena_set_allocated_direction_of_arrival(
    ::zb::dcts::DOA* direction_of_arrival) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_of_arrival_);
  }
  direction_of_arrival_ = direction_of_arrival;
  if (direction_of_arrival) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.SignalDirection.direction_of_arrival)
}
inline ::zb::dcts::DOA* SignalDirection::release_direction_of_arrival() {
  auto temp = unsafe_arena_release_direction_of_arrival();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::DOA* SignalDirection::unsafe_arena_release_direction_of_arrival() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.SignalDirection.direction_of_arrival)
  
  ::zb::dcts::DOA* temp = direction_of_arrival_;
  direction_of_arrival_ = nullptr;
  return temp;
}
inline ::zb::dcts::DOA* SignalDirection::_internal_mutable_direction_of_arrival() {
  
  if (direction_of_arrival_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::DOA>(GetArena());
    direction_of_arrival_ = p;
  }
  return direction_of_arrival_;
}
inline ::zb::dcts::DOA* SignalDirection::mutable_direction_of_arrival() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.SignalDirection.direction_of_arrival)
  return _internal_mutable_direction_of_arrival();
}
inline void SignalDirection::set_allocated_direction_of_arrival(::zb::dcts::DOA* direction_of_arrival) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_of_arrival_);
  }
  if (direction_of_arrival) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_of_arrival)->GetArena();
    if (message_arena != submessage_arena) {
      direction_of_arrival = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction_of_arrival, submessage_arena);
    }
    
  } else {
    
  }
  direction_of_arrival_ = direction_of_arrival;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.SignalDirection.direction_of_arrival)
}

// -------------------------------------------------------------------

// DirectionFindingResult

// .zb.dcts.source.SourceId result_from = 1;
inline bool DirectionFindingResult::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool DirectionFindingResult::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& DirectionFindingResult::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& DirectionFindingResult::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingResult.result_from)
  return _internal_result_from();
}
inline void DirectionFindingResult::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.result_from)
}
inline ::zb::dcts::source::SourceId* DirectionFindingResult::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* DirectionFindingResult::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingResult.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* DirectionFindingResult::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* DirectionFindingResult::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingResult.result_from)
  return _internal_mutable_result_from();
}
inline void DirectionFindingResult::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.result_from)
}

// .zb.dcts.Timestamp time_stamp = 2;
inline bool DirectionFindingResult::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool DirectionFindingResult::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& DirectionFindingResult::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& DirectionFindingResult::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingResult.time_stamp)
  return _internal_time_stamp();
}
inline void DirectionFindingResult::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.time_stamp)
}
inline ::zb::dcts::Timestamp* DirectionFindingResult::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* DirectionFindingResult::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingResult.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* DirectionFindingResult::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* DirectionFindingResult::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingResult.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void DirectionFindingResult::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.time_stamp)
}

// .zb.dcts.Position position = 3;
inline bool DirectionFindingResult::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool DirectionFindingResult::has_position() const {
  return _internal_has_position();
}
inline const ::zb::dcts::Position& DirectionFindingResult::_internal_position() const {
  const ::zb::dcts::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& DirectionFindingResult::position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingResult.position)
  return _internal_position();
}
inline void DirectionFindingResult::unsafe_arena_set_allocated_position(
    ::zb::dcts::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.position)
}
inline ::zb::dcts::Position* DirectionFindingResult::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* DirectionFindingResult::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingResult.position)
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* DirectionFindingResult::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::zb::dcts::Position* DirectionFindingResult::mutable_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingResult.position)
  return _internal_mutable_position();
}
inline void DirectionFindingResult::set_allocated_position(::zb::dcts::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingResult.position)
}

// repeated .zb.dcts.scenario.DF.SignalDirection signals_direction = 4;
inline int DirectionFindingResult::_internal_signals_direction_size() const {
  return signals_direction_.size();
}
inline int DirectionFindingResult::signals_direction_size() const {
  return _internal_signals_direction_size();
}
inline void DirectionFindingResult::clear_signals_direction() {
  signals_direction_.Clear();
}
inline ::zb::dcts::scenario::DF::SignalDirection* DirectionFindingResult::mutable_signals_direction(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingResult.signals_direction)
  return signals_direction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::SignalDirection >*
DirectionFindingResult::mutable_signals_direction() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.DF.DirectionFindingResult.signals_direction)
  return &signals_direction_;
}
inline const ::zb::dcts::scenario::DF::SignalDirection& DirectionFindingResult::_internal_signals_direction(int index) const {
  return signals_direction_.Get(index);
}
inline const ::zb::dcts::scenario::DF::SignalDirection& DirectionFindingResult::signals_direction(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingResult.signals_direction)
  return _internal_signals_direction(index);
}
inline ::zb::dcts::scenario::DF::SignalDirection* DirectionFindingResult::_internal_add_signals_direction() {
  return signals_direction_.Add();
}
inline ::zb::dcts::scenario::DF::SignalDirection* DirectionFindingResult::add_signals_direction() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.DF.DirectionFindingResult.signals_direction)
  return _internal_add_signals_direction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::DF::SignalDirection >&
DirectionFindingResult::signals_direction() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.DF.DirectionFindingResult.signals_direction)
  return signals_direction_;
}

// -------------------------------------------------------------------

// DFSource

// .zb.dcts.source.SourceId source = 1;
inline bool DFSource::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool DFSource::has_source() const {
  return _internal_has_source();
}
inline const ::zb::dcts::source::SourceId& DFSource::_internal_source() const {
  const ::zb::dcts::source::SourceId* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& DFSource::source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DFSource.source)
  return _internal_source();
}
inline void DFSource::unsafe_arena_set_allocated_source(
    ::zb::dcts::source::SourceId* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DFSource.source)
}
inline ::zb::dcts::source::SourceId* DFSource::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* DFSource::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DFSource.source)
  
  ::zb::dcts::source::SourceId* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* DFSource::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::zb::dcts::source::SourceId* DFSource::mutable_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DFSource.source)
  return _internal_mutable_source();
}
inline void DFSource::set_allocated_source(::zb::dcts::source::SourceId* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source)->GetArena();
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DFSource.source)
}

// -------------------------------------------------------------------

// DirectionFindingRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool DirectionFindingRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool DirectionFindingRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& DirectionFindingRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& DirectionFindingRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingRequest.scenario)
  return _internal_scenario();
}
inline void DirectionFindingRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* DirectionFindingRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* DirectionFindingRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* DirectionFindingRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* DirectionFindingRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingRequest.scenario)
  return _internal_mutable_scenario();
}
inline void DirectionFindingRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.scenario)
}

// .zb.dcts.scenario.DF.DFSource source = 2;
inline bool DirectionFindingRequest::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool DirectionFindingRequest::has_source() const {
  return _internal_has_source();
}
inline void DirectionFindingRequest::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::zb::dcts::scenario::DF::DFSource& DirectionFindingRequest::_internal_source() const {
  const ::zb::dcts::scenario::DF::DFSource* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::DF::DFSource*>(
      &::zb::dcts::scenario::DF::_DFSource_default_instance_);
}
inline const ::zb::dcts::scenario::DF::DFSource& DirectionFindingRequest::source() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingRequest.source)
  return _internal_source();
}
inline void DirectionFindingRequest::unsafe_arena_set_allocated_source(
    ::zb::dcts::scenario::DF::DFSource* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.source)
}
inline ::zb::dcts::scenario::DF::DFSource* DirectionFindingRequest::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::DF::DFSource* DirectionFindingRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingRequest.source)
  
  ::zb::dcts::scenario::DF::DFSource* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::DF::DFSource* DirectionFindingRequest::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::DF::DFSource>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::zb::dcts::scenario::DF::DFSource* DirectionFindingRequest::mutable_source() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingRequest.source)
  return _internal_mutable_source();
}
inline void DirectionFindingRequest::set_allocated_source(::zb::dcts::scenario::DF::DFSource* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.source)
}

// .zb.dcts.scenario.DF.DirectionFindingSignals param = 3;
inline bool DirectionFindingRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool DirectionFindingRequest::has_param() const {
  return _internal_has_param();
}
inline void DirectionFindingRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& DirectionFindingRequest::_internal_param() const {
  const ::zb::dcts::scenario::DF::DirectionFindingSignals* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      &::zb::dcts::scenario::DF::_DirectionFindingSignals_default_instance_);
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& DirectionFindingRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.DirectionFindingRequest.param)
  return _internal_param();
}
inline void DirectionFindingRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::scenario::DF::DirectionFindingSignals* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.param)
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* DirectionFindingRequest::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* DirectionFindingRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.DirectionFindingRequest.param)
  
  ::zb::dcts::scenario::DF::DirectionFindingSignals* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* DirectionFindingRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingSignals>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* DirectionFindingRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.DirectionFindingRequest.param)
  return _internal_mutable_param();
}
inline void DirectionFindingRequest::set_allocated_param(::zb::dcts::scenario::DF::DirectionFindingSignals* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.DirectionFindingRequest.param)
}

// -------------------------------------------------------------------

// ChangeSignalsRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ChangeSignalsRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ChangeSignalsRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeSignalsRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeSignalsRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.ChangeSignalsRequest.responser)
  return _internal_responser();
}
inline void ChangeSignalsRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.ChangeSignalsRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeSignalsRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeSignalsRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.ChangeSignalsRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeSignalsRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeSignalsRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.ChangeSignalsRequest.responser)
  return _internal_mutable_responser();
}
inline void ChangeSignalsRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.ChangeSignalsRequest.responser)
}

// .zb.dcts.scenario.DF.DirectionFindingSignals param = 2;
inline bool ChangeSignalsRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ChangeSignalsRequest::has_param() const {
  return _internal_has_param();
}
inline void ChangeSignalsRequest::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& ChangeSignalsRequest::_internal_param() const {
  const ::zb::dcts::scenario::DF::DirectionFindingSignals* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::DF::DirectionFindingSignals*>(
      &::zb::dcts::scenario::DF::_DirectionFindingSignals_default_instance_);
}
inline const ::zb::dcts::scenario::DF::DirectionFindingSignals& ChangeSignalsRequest::param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.DF.ChangeSignalsRequest.param)
  return _internal_param();
}
inline void ChangeSignalsRequest::unsafe_arena_set_allocated_param(
    ::zb::dcts::scenario::DF::DirectionFindingSignals* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.DF.ChangeSignalsRequest.param)
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* ChangeSignalsRequest::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* ChangeSignalsRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.DF.ChangeSignalsRequest.param)
  
  ::zb::dcts::scenario::DF::DirectionFindingSignals* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* ChangeSignalsRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::DF::DirectionFindingSignals>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::zb::dcts::scenario::DF::DirectionFindingSignals* ChangeSignalsRequest::mutable_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.DF.ChangeSignalsRequest.param)
  return _internal_mutable_param();
}
inline void ChangeSignalsRequest::set_allocated_param(::zb::dcts::scenario::DF::DirectionFindingSignals* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.DF.ChangeSignalsRequest.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DF
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fDF_2eproto
