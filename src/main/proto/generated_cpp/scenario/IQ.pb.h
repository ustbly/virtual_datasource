// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/IQ.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fIQ_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fIQ_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fIQ_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fIQ_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fIQ_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace IQ {
class AdvancedAcqParam;
class AdvancedAcqParamDefaultTypeInternal;
extern AdvancedAcqParamDefaultTypeInternal _AdvancedAcqParam_default_instance_;
class IQHeader;
class IQHeaderDefaultTypeInternal;
extern IQHeaderDefaultTypeInternal _IQHeader_default_instance_;
class IQSource;
class IQSourceDefaultTypeInternal;
extern IQSourceDefaultTypeInternal _IQSource_default_instance_;
class IQSource_ParamsEntry_DoNotUse;
class IQSource_ParamsEntry_DoNotUseDefaultTypeInternal;
extern IQSource_ParamsEntry_DoNotUseDefaultTypeInternal _IQSource_ParamsEntry_DoNotUse_default_instance_;
class SimpleAcqParam;
class SimpleAcqParamDefaultTypeInternal;
extern SimpleAcqParamDefaultTypeInternal _SimpleAcqParam_default_instance_;
class TimeTriggerParam;
class TimeTriggerParamDefaultTypeInternal;
extern TimeTriggerParamDefaultTypeInternal _TimeTriggerParam_default_instance_;
}  // namespace IQ
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::IQ::AdvancedAcqParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::AdvancedAcqParam>(Arena*);
template<> ::zb::dcts::scenario::IQ::IQHeader* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::IQHeader>(Arena*);
template<> ::zb::dcts::scenario::IQ::IQSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::IQSource>(Arena*);
template<> ::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::IQSource_ParamsEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::IQ::SimpleAcqParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::SimpleAcqParam>(Arena*);
template<> ::zb::dcts::scenario::IQ::TimeTriggerParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::IQ::TimeTriggerParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace IQ {

enum TimeTriggerParam_Type : int {
  TimeTriggerParam_Type_NONE = 0,
  TimeTriggerParam_Type_ABS_TIME = 2,
  TimeTriggerParam_Type_REL_TIME = 4,
  TimeTriggerParam_Type_TimeTriggerParam_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeTriggerParam_Type_TimeTriggerParam_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeTriggerParam_Type_IsValid(int value);
constexpr TimeTriggerParam_Type TimeTriggerParam_Type_Type_MIN = TimeTriggerParam_Type_NONE;
constexpr TimeTriggerParam_Type TimeTriggerParam_Type_Type_MAX = TimeTriggerParam_Type_REL_TIME;
constexpr int TimeTriggerParam_Type_Type_ARRAYSIZE = TimeTriggerParam_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeTriggerParam_Type_descriptor();
template<typename T>
inline const std::string& TimeTriggerParam_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeTriggerParam_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeTriggerParam_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeTriggerParam_Type_descriptor(), enum_t_value);
}
inline bool TimeTriggerParam_Type_Parse(
    const std::string& name, TimeTriggerParam_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeTriggerParam_Type>(
    TimeTriggerParam_Type_descriptor(), name, value);
}
enum IQType : int {
  cplx_16 = 0,
  cplx_32 = 1,
  IQType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IQType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IQType_IsValid(int value);
constexpr IQType IQType_MIN = cplx_16;
constexpr IQType IQType_MAX = cplx_32;
constexpr int IQType_ARRAYSIZE = IQType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IQType_descriptor();
template<typename T>
inline const std::string& IQType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IQType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IQType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IQType_descriptor(), enum_t_value);
}
inline bool IQType_Parse(
    const std::string& name, IQType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IQType>(
    IQType_descriptor(), name, value);
}
// ===================================================================

class IQSource_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IQSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<IQSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  IQSource_ParamsEntry_DoNotUse();
  IQSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const IQSource_ParamsEntry_DoNotUse& other);
  static const IQSource_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const IQSource_ParamsEntry_DoNotUse*>(&_IQSource_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.IQ.IQSource.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.IQ.IQSource.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class IQSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.IQ.IQSource) */ {
 public:
  inline IQSource() : IQSource(nullptr) {};
  virtual ~IQSource();

  IQSource(const IQSource& from);
  IQSource(IQSource&& from) noexcept
    : IQSource() {
    *this = ::std::move(from);
  }

  inline IQSource& operator=(const IQSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline IQSource& operator=(IQSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IQSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IQSource* internal_default_instance() {
    return reinterpret_cast<const IQSource*>(
               &_IQSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IQSource& a, IQSource& b) {
    a.Swap(&b);
  }
  inline void Swap(IQSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IQSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IQSource* New() const final {
    return CreateMaybeMessage<IQSource>(nullptr);
  }

  IQSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IQSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IQSource& from);
  void MergeFrom(const IQSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IQSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.IQ.IQSource";
  }
  protected:
  explicit IQSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kIdFieldNumber = 1,
    kAttenuationGainFieldNumber = 4,
    kAntennaFieldNumber = 5,
  };
  // map<string, string> params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // int32 attenuation_gain = 4;
  void clear_attenuation_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain() const;
  void set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 5;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.IQ.IQSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      IQSource_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::zb::dcts::source::SourceId* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fIQ_2eproto;
};
// -------------------------------------------------------------------

class SimpleAcqParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.IQ.SimpleAcqParam) */ {
 public:
  inline SimpleAcqParam() : SimpleAcqParam(nullptr) {};
  virtual ~SimpleAcqParam();

  SimpleAcqParam(const SimpleAcqParam& from);
  SimpleAcqParam(SimpleAcqParam&& from) noexcept
    : SimpleAcqParam() {
    *this = ::std::move(from);
  }

  inline SimpleAcqParam& operator=(const SimpleAcqParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAcqParam& operator=(SimpleAcqParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleAcqParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleAcqParam* internal_default_instance() {
    return reinterpret_cast<const SimpleAcqParam*>(
               &_SimpleAcqParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleAcqParam& a, SimpleAcqParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleAcqParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAcqParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleAcqParam* New() const final {
    return CreateMaybeMessage<SimpleAcqParam>(nullptr);
  }

  SimpleAcqParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleAcqParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleAcqParam& from);
  void MergeFrom(const SimpleAcqParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleAcqParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.IQ.SimpleAcqParam";
  }
  protected:
  explicit SimpleAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 4,
    kTotalSamplesFieldNumber = 1,
    kBlockSizeFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // .zb.dcts.scenario.spectrum.DDCBank segment = 4;
  bool has_segment() const;
  private:
  bool _internal_has_segment() const;
  public:
  void clear_segment();
  const ::zb::dcts::scenario::spectrum::DDCBank& segment() const;
  ::zb::dcts::scenario::spectrum::DDCBank* release_segment();
  ::zb::dcts::scenario::spectrum::DDCBank* mutable_segment();
  void set_allocated_segment(::zb::dcts::scenario::spectrum::DDCBank* segment);
  private:
  const ::zb::dcts::scenario::spectrum::DDCBank& _internal_segment() const;
  ::zb::dcts::scenario::spectrum::DDCBank* _internal_mutable_segment();
  public:
  void unsafe_arena_set_allocated_segment(
      ::zb::dcts::scenario::spectrum::DDCBank* segment);
  ::zb::dcts::scenario::spectrum::DDCBank* unsafe_arena_release_segment();

  // int32 total_samples = 1;
  void clear_total_samples();
  ::PROTOBUF_NAMESPACE_ID::int32 total_samples() const;
  void set_total_samples(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_samples() const;
  void _internal_set_total_samples(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 block_size = 2;
  void clear_block_size();
  ::PROTOBUF_NAMESPACE_ID::int32 block_size() const;
  void set_block_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_size() const;
  void _internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  void clear_data_type();
  ::zb::dcts::scenario::IQ::IQType data_type() const;
  void set_data_type(::zb::dcts::scenario::IQ::IQType value);
  private:
  ::zb::dcts::scenario::IQ::IQType _internal_data_type() const;
  void _internal_set_data_type(::zb::dcts::scenario::IQ::IQType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.IQ.SimpleAcqParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::DDCBank* segment_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_size_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fIQ_2eproto;
};
// -------------------------------------------------------------------

class TimeTriggerParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.IQ.TimeTriggerParam) */ {
 public:
  inline TimeTriggerParam() : TimeTriggerParam(nullptr) {};
  virtual ~TimeTriggerParam();

  TimeTriggerParam(const TimeTriggerParam& from);
  TimeTriggerParam(TimeTriggerParam&& from) noexcept
    : TimeTriggerParam() {
    *this = ::std::move(from);
  }

  inline TimeTriggerParam& operator=(const TimeTriggerParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeTriggerParam& operator=(TimeTriggerParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeTriggerParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeTriggerParam* internal_default_instance() {
    return reinterpret_cast<const TimeTriggerParam*>(
               &_TimeTriggerParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimeTriggerParam& a, TimeTriggerParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeTriggerParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeTriggerParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeTriggerParam* New() const final {
    return CreateMaybeMessage<TimeTriggerParam>(nullptr);
  }

  TimeTriggerParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeTriggerParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeTriggerParam& from);
  void MergeFrom(const TimeTriggerParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeTriggerParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.IQ.TimeTriggerParam";
  }
  protected:
  explicit TimeTriggerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeTriggerParam_Type Type;
  static constexpr Type NONE =
    TimeTriggerParam_Type_NONE;
  static constexpr Type ABS_TIME =
    TimeTriggerParam_Type_ABS_TIME;
  static constexpr Type REL_TIME =
    TimeTriggerParam_Type_REL_TIME;
  static inline bool Type_IsValid(int value) {
    return TimeTriggerParam_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TimeTriggerParam_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TimeTriggerParam_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TimeTriggerParam_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TimeTriggerParam_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TimeTriggerParam_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return TimeTriggerParam_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerTimeFieldNumber = 2,
    kTriggerTypeFieldNumber = 1,
    kSweepIntervalFieldNumber = 3,
    kSegmentIntervalFieldNumber = 4,
  };
  // .zb.dcts.Timestamp trigger_time = 2;
  bool has_trigger_time() const;
  private:
  bool _internal_has_trigger_time() const;
  public:
  void clear_trigger_time();
  const ::zb::dcts::Timestamp& trigger_time() const;
  ::zb::dcts::Timestamp* release_trigger_time();
  ::zb::dcts::Timestamp* mutable_trigger_time();
  void set_allocated_trigger_time(::zb::dcts::Timestamp* trigger_time);
  private:
  const ::zb::dcts::Timestamp& _internal_trigger_time() const;
  ::zb::dcts::Timestamp* _internal_mutable_trigger_time();
  public:
  void unsafe_arena_set_allocated_trigger_time(
      ::zb::dcts::Timestamp* trigger_time);
  ::zb::dcts::Timestamp* unsafe_arena_release_trigger_time();

  // .zb.dcts.scenario.IQ.TimeTriggerParam.Type trigger_type = 1;
  void clear_trigger_type();
  ::zb::dcts::scenario::IQ::TimeTriggerParam_Type trigger_type() const;
  void set_trigger_type(::zb::dcts::scenario::IQ::TimeTriggerParam_Type value);
  private:
  ::zb::dcts::scenario::IQ::TimeTriggerParam_Type _internal_trigger_type() const;
  void _internal_set_trigger_type(::zb::dcts::scenario::IQ::TimeTriggerParam_Type value);
  public:

  // int32 sweep_interval = 3;
  void clear_sweep_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_interval() const;
  void set_sweep_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sweep_interval() const;
  void _internal_set_sweep_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 segment_interval = 4;
  void clear_segment_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 segment_interval() const;
  void set_segment_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segment_interval() const;
  void _internal_set_segment_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.IQ.TimeTriggerParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::Timestamp* trigger_time_;
  int trigger_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 segment_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fIQ_2eproto;
};
// -------------------------------------------------------------------

class AdvancedAcqParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.IQ.AdvancedAcqParam) */ {
 public:
  inline AdvancedAcqParam() : AdvancedAcqParam(nullptr) {};
  virtual ~AdvancedAcqParam();

  AdvancedAcqParam(const AdvancedAcqParam& from);
  AdvancedAcqParam(AdvancedAcqParam&& from) noexcept
    : AdvancedAcqParam() {
    *this = ::std::move(from);
  }

  inline AdvancedAcqParam& operator=(const AdvancedAcqParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvancedAcqParam& operator=(AdvancedAcqParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdvancedAcqParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvancedAcqParam* internal_default_instance() {
    return reinterpret_cast<const AdvancedAcqParam*>(
               &_AdvancedAcqParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AdvancedAcqParam& a, AdvancedAcqParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvancedAcqParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvancedAcqParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdvancedAcqParam* New() const final {
    return CreateMaybeMessage<AdvancedAcqParam>(nullptr);
  }

  AdvancedAcqParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdvancedAcqParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdvancedAcqParam& from);
  void MergeFrom(const AdvancedAcqParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvancedAcqParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.IQ.AdvancedAcqParam";
  }
  protected:
  explicit AdvancedAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentsFieldNumber = 4,
    kTriggerParamFieldNumber = 5,
    kNumSweepsFieldNumber = 1,
    kNumSamplesPerSegmentFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // repeated .zb.dcts.scenario.spectrum.DDCBank segments = 4;
  int segments_size() const;
  private:
  int _internal_segments_size() const;
  public:
  void clear_segments();
  ::zb::dcts::scenario::spectrum::DDCBank* mutable_segments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::DDCBank >*
      mutable_segments();
  private:
  const ::zb::dcts::scenario::spectrum::DDCBank& _internal_segments(int index) const;
  ::zb::dcts::scenario::spectrum::DDCBank* _internal_add_segments();
  public:
  const ::zb::dcts::scenario::spectrum::DDCBank& segments(int index) const;
  ::zb::dcts::scenario::spectrum::DDCBank* add_segments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::DDCBank >&
      segments() const;

  // .zb.dcts.scenario.IQ.TimeTriggerParam trigger_param = 5;
  bool has_trigger_param() const;
  private:
  bool _internal_has_trigger_param() const;
  public:
  void clear_trigger_param();
  const ::zb::dcts::scenario::IQ::TimeTriggerParam& trigger_param() const;
  ::zb::dcts::scenario::IQ::TimeTriggerParam* release_trigger_param();
  ::zb::dcts::scenario::IQ::TimeTriggerParam* mutable_trigger_param();
  void set_allocated_trigger_param(::zb::dcts::scenario::IQ::TimeTriggerParam* trigger_param);
  private:
  const ::zb::dcts::scenario::IQ::TimeTriggerParam& _internal_trigger_param() const;
  ::zb::dcts::scenario::IQ::TimeTriggerParam* _internal_mutable_trigger_param();
  public:
  void unsafe_arena_set_allocated_trigger_param(
      ::zb::dcts::scenario::IQ::TimeTriggerParam* trigger_param);
  ::zb::dcts::scenario::IQ::TimeTriggerParam* unsafe_arena_release_trigger_param();

  // int32 num_sweeps = 1;
  void clear_num_sweeps();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sweeps() const;
  void set_num_sweeps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_sweeps() const;
  void _internal_set_num_sweeps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_samples_per_segment = 2;
  void clear_num_samples_per_segment();
  ::PROTOBUF_NAMESPACE_ID::int32 num_samples_per_segment() const;
  void set_num_samples_per_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_samples_per_segment() const;
  void _internal_set_num_samples_per_segment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .zb.dcts.scenario.IQ.IQType data_type = 3;
  void clear_data_type();
  ::zb::dcts::scenario::IQ::IQType data_type() const;
  void set_data_type(::zb::dcts::scenario::IQ::IQType value);
  private:
  ::zb::dcts::scenario::IQ::IQType _internal_data_type() const;
  void _internal_set_data_type(::zb::dcts::scenario::IQ::IQType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.IQ.AdvancedAcqParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::DDCBank > segments_;
  ::zb::dcts::scenario::IQ::TimeTriggerParam* trigger_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sweeps_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_samples_per_segment_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fIQ_2eproto;
};
// -------------------------------------------------------------------

class IQHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.IQ.IQHeader) */ {
 public:
  inline IQHeader() : IQHeader(nullptr) {};
  virtual ~IQHeader();

  IQHeader(const IQHeader& from);
  IQHeader(IQHeader&& from) noexcept
    : IQHeader() {
    *this = ::std::move(from);
  }

  inline IQHeader& operator=(const IQHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline IQHeader& operator=(IQHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IQHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IQHeader* internal_default_instance() {
    return reinterpret_cast<const IQHeader*>(
               &_IQHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IQHeader& a, IQHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(IQHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IQHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IQHeader* New() const final {
    return CreateMaybeMessage<IQHeader>(nullptr);
  }

  IQHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IQHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IQHeader& from);
  void MergeFrom(const IQHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IQHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.IQ.IQHeader";
  }
  protected:
  explicit IQHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fIQ_2eproto);
    return ::descriptor_table_scenario_2fIQ_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeStampFieldNumber = 12,
    kPositionFieldNumber = 15,
    kSequenceNumberFieldNumber = 3,
    kSweepIndexFieldNumber = 4,
    kSegmentIndexFieldNumber = 5,
    kDataTypeFieldNumber = 6,
    kCenterFrequencyFieldNumber = 9,
    kSampleRateFieldNumber = 10,
    kScaleToVoltsFieldNumber = 11,
    kTruncateBitsFieldNumber = 7,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.Timestamp time_stamp = 12;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.Position position = 15;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::zb::dcts::Position& position() const;
  ::zb::dcts::Position* release_position();
  ::zb::dcts::Position* mutable_position();
  void set_allocated_position(::zb::dcts::Position* position);
  private:
  const ::zb::dcts::Position& _internal_position() const;
  ::zb::dcts::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::zb::dcts::Position* position);
  ::zb::dcts::Position* unsafe_arena_release_position();

  // uint64 sequence_number = 3;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sweep_index = 4;
  void clear_sweep_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index() const;
  void set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sweep_index() const;
  void _internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 segment_index = 5;
  void clear_segment_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index() const;
  void set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_segment_index() const;
  void _internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .zb.dcts.scenario.IQ.IQType data_type = 6;
  void clear_data_type();
  ::zb::dcts::scenario::IQ::IQType data_type() const;
  void set_data_type(::zb::dcts::scenario::IQ::IQType value);
  private:
  ::zb::dcts::scenario::IQ::IQType _internal_data_type() const;
  void _internal_set_data_type(::zb::dcts::scenario::IQ::IQType value);
  public:

  // double center_frequency = 9;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double sample_rate = 10;
  void clear_sample_rate();
  double sample_rate() const;
  void set_sample_rate(double value);
  private:
  double _internal_sample_rate() const;
  void _internal_set_sample_rate(double value);
  public:

  // double scale_to_volts = 11;
  void clear_scale_to_volts();
  double scale_to_volts() const;
  void set_scale_to_volts(double value);
  private:
  double _internal_scale_to_volts() const;
  void _internal_set_scale_to_volts(double value);
  public:

  // uint32 truncate_bits = 7;
  void clear_truncate_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 truncate_bits() const;
  void set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_truncate_bits() const;
  void _internal_set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.IQ.IQHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sweep_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segment_index_;
  int data_type_;
  double center_frequency_;
  double sample_rate_;
  double scale_to_volts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 truncate_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fIQ_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IQSource

// .zb.dcts.source.SourceId id = 1;
inline bool IQSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool IQSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& IQSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& IQSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQSource.id)
  return _internal_id();
}
inline void IQSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.IQSource.id)
}
inline ::zb::dcts::source::SourceId* IQSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* IQSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.IQSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* IQSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* IQSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.IQSource.id)
  return _internal_mutable_id();
}
inline void IQSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.IQSource.id)
}

// int32 attenuation_gain = 4;
inline void IQSource::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IQSource::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IQSource::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQSource.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void IQSource::_internal_set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_gain_ = value;
}
inline void IQSource::set_attenuation_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQSource.attenuation_gain)
}

// int32 antenna = 5;
inline void IQSource::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IQSource::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IQSource::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQSource.antenna)
  return _internal_antenna();
}
inline void IQSource::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void IQSource::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQSource.antenna)
}

// map<string, string> params = 6;
inline int IQSource::_internal_params_size() const {
  return params_.size();
}
inline int IQSource::params_size() const {
  return _internal_params_size();
}
inline void IQSource::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IQSource::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
IQSource::params() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.IQ.IQSource.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IQSource::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
IQSource::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.IQ.IQSource.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// SimpleAcqParam

// int32 total_samples = 1;
inline void SimpleAcqParam::clear_total_samples() {
  total_samples_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleAcqParam::_internal_total_samples() const {
  return total_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleAcqParam::total_samples() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.SimpleAcqParam.total_samples)
  return _internal_total_samples();
}
inline void SimpleAcqParam::_internal_set_total_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_samples_ = value;
}
inline void SimpleAcqParam::set_total_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_samples(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.SimpleAcqParam.total_samples)
}

// int32 block_size = 2;
inline void SimpleAcqParam::clear_block_size() {
  block_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleAcqParam::_internal_block_size() const {
  return block_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleAcqParam::block_size() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.SimpleAcqParam.block_size)
  return _internal_block_size();
}
inline void SimpleAcqParam::_internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_size_ = value;
}
inline void SimpleAcqParam::set_block_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.SimpleAcqParam.block_size)
}

// .zb.dcts.scenario.IQ.IQType data_type = 3;
inline void SimpleAcqParam::clear_data_type() {
  data_type_ = 0;
}
inline ::zb::dcts::scenario::IQ::IQType SimpleAcqParam::_internal_data_type() const {
  return static_cast< ::zb::dcts::scenario::IQ::IQType >(data_type_);
}
inline ::zb::dcts::scenario::IQ::IQType SimpleAcqParam::data_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.SimpleAcqParam.data_type)
  return _internal_data_type();
}
inline void SimpleAcqParam::_internal_set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  
  data_type_ = value;
}
inline void SimpleAcqParam::set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.SimpleAcqParam.data_type)
}

// .zb.dcts.scenario.spectrum.DDCBank segment = 4;
inline bool SimpleAcqParam::_internal_has_segment() const {
  return this != internal_default_instance() && segment_ != nullptr;
}
inline bool SimpleAcqParam::has_segment() const {
  return _internal_has_segment();
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& SimpleAcqParam::_internal_segment() const {
  const ::zb::dcts::scenario::spectrum::DDCBank* p = segment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::DDCBank*>(
      &::zb::dcts::scenario::spectrum::_DDCBank_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& SimpleAcqParam::segment() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.SimpleAcqParam.segment)
  return _internal_segment();
}
inline void SimpleAcqParam::unsafe_arena_set_allocated_segment(
    ::zb::dcts::scenario::spectrum::DDCBank* segment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment_);
  }
  segment_ = segment;
  if (segment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.SimpleAcqParam.segment)
}
inline ::zb::dcts::scenario::spectrum::DDCBank* SimpleAcqParam::release_segment() {
  auto temp = unsafe_arena_release_segment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* SimpleAcqParam::unsafe_arena_release_segment() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.SimpleAcqParam.segment)
  
  ::zb::dcts::scenario::spectrum::DDCBank* temp = segment_;
  segment_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* SimpleAcqParam::_internal_mutable_segment() {
  
  if (segment_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::DDCBank>(GetArena());
    segment_ = p;
  }
  return segment_;
}
inline ::zb::dcts::scenario::spectrum::DDCBank* SimpleAcqParam::mutable_segment() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.SimpleAcqParam.segment)
  return _internal_mutable_segment();
}
inline void SimpleAcqParam::set_allocated_segment(::zb::dcts::scenario::spectrum::DDCBank* segment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment_);
  }
  if (segment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(segment)->GetArena();
    if (message_arena != submessage_arena) {
      segment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.SimpleAcqParam.segment)
}

// -------------------------------------------------------------------

// TimeTriggerParam

// .zb.dcts.scenario.IQ.TimeTriggerParam.Type trigger_type = 1;
inline void TimeTriggerParam::clear_trigger_type() {
  trigger_type_ = 0;
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam_Type TimeTriggerParam::_internal_trigger_type() const {
  return static_cast< ::zb::dcts::scenario::IQ::TimeTriggerParam_Type >(trigger_type_);
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam_Type TimeTriggerParam::trigger_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_type)
  return _internal_trigger_type();
}
inline void TimeTriggerParam::_internal_set_trigger_type(::zb::dcts::scenario::IQ::TimeTriggerParam_Type value) {
  
  trigger_type_ = value;
}
inline void TimeTriggerParam::set_trigger_type(::zb::dcts::scenario::IQ::TimeTriggerParam_Type value) {
  _internal_set_trigger_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_type)
}

// .zb.dcts.Timestamp trigger_time = 2;
inline bool TimeTriggerParam::_internal_has_trigger_time() const {
  return this != internal_default_instance() && trigger_time_ != nullptr;
}
inline bool TimeTriggerParam::has_trigger_time() const {
  return _internal_has_trigger_time();
}
inline const ::zb::dcts::Timestamp& TimeTriggerParam::_internal_trigger_time() const {
  const ::zb::dcts::Timestamp* p = trigger_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& TimeTriggerParam::trigger_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_time)
  return _internal_trigger_time();
}
inline void TimeTriggerParam::unsafe_arena_set_allocated_trigger_time(
    ::zb::dcts::Timestamp* trigger_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_time_);
  }
  trigger_time_ = trigger_time;
  if (trigger_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_time)
}
inline ::zb::dcts::Timestamp* TimeTriggerParam::release_trigger_time() {
  auto temp = unsafe_arena_release_trigger_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* TimeTriggerParam::unsafe_arena_release_trigger_time() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_time)
  
  ::zb::dcts::Timestamp* temp = trigger_time_;
  trigger_time_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* TimeTriggerParam::_internal_mutable_trigger_time() {
  
  if (trigger_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    trigger_time_ = p;
  }
  return trigger_time_;
}
inline ::zb::dcts::Timestamp* TimeTriggerParam::mutable_trigger_time() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_time)
  return _internal_mutable_trigger_time();
}
inline void TimeTriggerParam::set_allocated_trigger_time(::zb::dcts::Timestamp* trigger_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_time_);
  }
  if (trigger_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_time)->GetArena();
    if (message_arena != submessage_arena) {
      trigger_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_time, submessage_arena);
    }
    
  } else {
    
  }
  trigger_time_ = trigger_time;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.TimeTriggerParam.trigger_time)
}

// int32 sweep_interval = 3;
inline void TimeTriggerParam::clear_sweep_interval() {
  sweep_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeTriggerParam::_internal_sweep_interval() const {
  return sweep_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeTriggerParam::sweep_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.TimeTriggerParam.sweep_interval)
  return _internal_sweep_interval();
}
inline void TimeTriggerParam::_internal_set_sweep_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sweep_interval_ = value;
}
inline void TimeTriggerParam::set_sweep_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sweep_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.TimeTriggerParam.sweep_interval)
}

// int32 segment_interval = 4;
inline void TimeTriggerParam::clear_segment_interval() {
  segment_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeTriggerParam::_internal_segment_interval() const {
  return segment_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeTriggerParam::segment_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.TimeTriggerParam.segment_interval)
  return _internal_segment_interval();
}
inline void TimeTriggerParam::_internal_set_segment_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segment_interval_ = value;
}
inline void TimeTriggerParam::set_segment_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segment_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.TimeTriggerParam.segment_interval)
}

// -------------------------------------------------------------------

// AdvancedAcqParam

// int32 num_sweeps = 1;
inline void AdvancedAcqParam::clear_num_sweeps() {
  num_sweeps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdvancedAcqParam::_internal_num_sweeps() const {
  return num_sweeps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdvancedAcqParam::num_sweeps() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.AdvancedAcqParam.num_sweeps)
  return _internal_num_sweeps();
}
inline void AdvancedAcqParam::_internal_set_num_sweeps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_sweeps_ = value;
}
inline void AdvancedAcqParam::set_num_sweeps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_sweeps(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.AdvancedAcqParam.num_sweeps)
}

// int32 num_samples_per_segment = 2;
inline void AdvancedAcqParam::clear_num_samples_per_segment() {
  num_samples_per_segment_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdvancedAcqParam::_internal_num_samples_per_segment() const {
  return num_samples_per_segment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AdvancedAcqParam::num_samples_per_segment() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.AdvancedAcqParam.num_samples_per_segment)
  return _internal_num_samples_per_segment();
}
inline void AdvancedAcqParam::_internal_set_num_samples_per_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_samples_per_segment_ = value;
}
inline void AdvancedAcqParam::set_num_samples_per_segment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_samples_per_segment(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.AdvancedAcqParam.num_samples_per_segment)
}

// .zb.dcts.scenario.IQ.IQType data_type = 3;
inline void AdvancedAcqParam::clear_data_type() {
  data_type_ = 0;
}
inline ::zb::dcts::scenario::IQ::IQType AdvancedAcqParam::_internal_data_type() const {
  return static_cast< ::zb::dcts::scenario::IQ::IQType >(data_type_);
}
inline ::zb::dcts::scenario::IQ::IQType AdvancedAcqParam::data_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.AdvancedAcqParam.data_type)
  return _internal_data_type();
}
inline void AdvancedAcqParam::_internal_set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  
  data_type_ = value;
}
inline void AdvancedAcqParam::set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.AdvancedAcqParam.data_type)
}

// repeated .zb.dcts.scenario.spectrum.DDCBank segments = 4;
inline int AdvancedAcqParam::_internal_segments_size() const {
  return segments_.size();
}
inline int AdvancedAcqParam::segments_size() const {
  return _internal_segments_size();
}
inline ::zb::dcts::scenario::spectrum::DDCBank* AdvancedAcqParam::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.AdvancedAcqParam.segments)
  return segments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::DDCBank >*
AdvancedAcqParam::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.IQ.AdvancedAcqParam.segments)
  return &segments_;
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& AdvancedAcqParam::_internal_segments(int index) const {
  return segments_.Get(index);
}
inline const ::zb::dcts::scenario::spectrum::DDCBank& AdvancedAcqParam::segments(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.AdvancedAcqParam.segments)
  return _internal_segments(index);
}
inline ::zb::dcts::scenario::spectrum::DDCBank* AdvancedAcqParam::_internal_add_segments() {
  return segments_.Add();
}
inline ::zb::dcts::scenario::spectrum::DDCBank* AdvancedAcqParam::add_segments() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.IQ.AdvancedAcqParam.segments)
  return _internal_add_segments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::spectrum::DDCBank >&
AdvancedAcqParam::segments() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.IQ.AdvancedAcqParam.segments)
  return segments_;
}

// .zb.dcts.scenario.IQ.TimeTriggerParam trigger_param = 5;
inline bool AdvancedAcqParam::_internal_has_trigger_param() const {
  return this != internal_default_instance() && trigger_param_ != nullptr;
}
inline bool AdvancedAcqParam::has_trigger_param() const {
  return _internal_has_trigger_param();
}
inline void AdvancedAcqParam::clear_trigger_param() {
  if (GetArena() == nullptr && trigger_param_ != nullptr) {
    delete trigger_param_;
  }
  trigger_param_ = nullptr;
}
inline const ::zb::dcts::scenario::IQ::TimeTriggerParam& AdvancedAcqParam::_internal_trigger_param() const {
  const ::zb::dcts::scenario::IQ::TimeTriggerParam* p = trigger_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::IQ::TimeTriggerParam*>(
      &::zb::dcts::scenario::IQ::_TimeTriggerParam_default_instance_);
}
inline const ::zb::dcts::scenario::IQ::TimeTriggerParam& AdvancedAcqParam::trigger_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.AdvancedAcqParam.trigger_param)
  return _internal_trigger_param();
}
inline void AdvancedAcqParam::unsafe_arena_set_allocated_trigger_param(
    ::zb::dcts::scenario::IQ::TimeTriggerParam* trigger_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trigger_param_);
  }
  trigger_param_ = trigger_param;
  if (trigger_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.AdvancedAcqParam.trigger_param)
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam* AdvancedAcqParam::release_trigger_param() {
  auto temp = unsafe_arena_release_trigger_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam* AdvancedAcqParam::unsafe_arena_release_trigger_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.AdvancedAcqParam.trigger_param)
  
  ::zb::dcts::scenario::IQ::TimeTriggerParam* temp = trigger_param_;
  trigger_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam* AdvancedAcqParam::_internal_mutable_trigger_param() {
  
  if (trigger_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::IQ::TimeTriggerParam>(GetArena());
    trigger_param_ = p;
  }
  return trigger_param_;
}
inline ::zb::dcts::scenario::IQ::TimeTriggerParam* AdvancedAcqParam::mutable_trigger_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.AdvancedAcqParam.trigger_param)
  return _internal_mutable_trigger_param();
}
inline void AdvancedAcqParam::set_allocated_trigger_param(::zb::dcts::scenario::IQ::TimeTriggerParam* trigger_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trigger_param_;
  }
  if (trigger_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trigger_param);
    if (message_arena != submessage_arena) {
      trigger_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trigger_param, submessage_arena);
    }
    
  } else {
    
  }
  trigger_param_ = trigger_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.AdvancedAcqParam.trigger_param)
}

// -------------------------------------------------------------------

// IQHeader

// .zb.dcts.source.SourceId result_from = 1;
inline bool IQHeader::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool IQHeader::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& IQHeader::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& IQHeader::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.result_from)
  return _internal_result_from();
}
inline void IQHeader::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.IQHeader.result_from)
}
inline ::zb::dcts::source::SourceId* IQHeader::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* IQHeader::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.IQHeader.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* IQHeader::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* IQHeader::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.IQHeader.result_from)
  return _internal_mutable_result_from();
}
inline void IQHeader::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.IQHeader.result_from)
}

// uint64 sequence_number = 3;
inline void IQHeader::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IQHeader::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IQHeader::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.sequence_number)
  return _internal_sequence_number();
}
inline void IQHeader::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_number_ = value;
}
inline void IQHeader::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.sequence_number)
}

// uint64 sweep_index = 4;
inline void IQHeader::clear_sweep_index() {
  sweep_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IQHeader::_internal_sweep_index() const {
  return sweep_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IQHeader::sweep_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.sweep_index)
  return _internal_sweep_index();
}
inline void IQHeader::_internal_set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sweep_index_ = value;
}
inline void IQHeader::set_sweep_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sweep_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.sweep_index)
}

// uint32 segment_index = 5;
inline void IQHeader::clear_segment_index() {
  segment_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQHeader::_internal_segment_index() const {
  return segment_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQHeader::segment_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.segment_index)
  return _internal_segment_index();
}
inline void IQHeader::_internal_set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segment_index_ = value;
}
inline void IQHeader::set_segment_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.segment_index)
}

// .zb.dcts.scenario.IQ.IQType data_type = 6;
inline void IQHeader::clear_data_type() {
  data_type_ = 0;
}
inline ::zb::dcts::scenario::IQ::IQType IQHeader::_internal_data_type() const {
  return static_cast< ::zb::dcts::scenario::IQ::IQType >(data_type_);
}
inline ::zb::dcts::scenario::IQ::IQType IQHeader::data_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.data_type)
  return _internal_data_type();
}
inline void IQHeader::_internal_set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  
  data_type_ = value;
}
inline void IQHeader::set_data_type(::zb::dcts::scenario::IQ::IQType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.data_type)
}

// uint32 truncate_bits = 7;
inline void IQHeader::clear_truncate_bits() {
  truncate_bits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQHeader::_internal_truncate_bits() const {
  return truncate_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQHeader::truncate_bits() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.truncate_bits)
  return _internal_truncate_bits();
}
inline void IQHeader::_internal_set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  truncate_bits_ = value;
}
inline void IQHeader::set_truncate_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_truncate_bits(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.truncate_bits)
}

// double center_frequency = 9;
inline void IQHeader::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double IQHeader::_internal_center_frequency() const {
  return center_frequency_;
}
inline double IQHeader::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.center_frequency)
  return _internal_center_frequency();
}
inline void IQHeader::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void IQHeader::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.center_frequency)
}

// double sample_rate = 10;
inline void IQHeader::clear_sample_rate() {
  sample_rate_ = 0;
}
inline double IQHeader::_internal_sample_rate() const {
  return sample_rate_;
}
inline double IQHeader::sample_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.sample_rate)
  return _internal_sample_rate();
}
inline void IQHeader::_internal_set_sample_rate(double value) {
  
  sample_rate_ = value;
}
inline void IQHeader::set_sample_rate(double value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.sample_rate)
}

// double scale_to_volts = 11;
inline void IQHeader::clear_scale_to_volts() {
  scale_to_volts_ = 0;
}
inline double IQHeader::_internal_scale_to_volts() const {
  return scale_to_volts_;
}
inline double IQHeader::scale_to_volts() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.scale_to_volts)
  return _internal_scale_to_volts();
}
inline void IQHeader::_internal_set_scale_to_volts(double value) {
  
  scale_to_volts_ = value;
}
inline void IQHeader::set_scale_to_volts(double value) {
  _internal_set_scale_to_volts(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.IQ.IQHeader.scale_to_volts)
}

// .zb.dcts.Timestamp time_stamp = 12;
inline bool IQHeader::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool IQHeader::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& IQHeader::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& IQHeader::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.time_stamp)
  return _internal_time_stamp();
}
inline void IQHeader::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.IQHeader.time_stamp)
}
inline ::zb::dcts::Timestamp* IQHeader::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* IQHeader::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.IQHeader.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* IQHeader::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* IQHeader::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.IQHeader.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void IQHeader::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.IQHeader.time_stamp)
}

// .zb.dcts.Position position = 15;
inline bool IQHeader::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool IQHeader::has_position() const {
  return _internal_has_position();
}
inline const ::zb::dcts::Position& IQHeader::_internal_position() const {
  const ::zb::dcts::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& IQHeader::position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.IQ.IQHeader.position)
  return _internal_position();
}
inline void IQHeader::unsafe_arena_set_allocated_position(
    ::zb::dcts::Position* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.IQ.IQHeader.position)
}
inline ::zb::dcts::Position* IQHeader::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* IQHeader::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.IQ.IQHeader.position)
  
  ::zb::dcts::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* IQHeader::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::zb::dcts::Position* IQHeader::mutable_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.IQ.IQHeader.position)
  return _internal_mutable_position();
}
inline void IQHeader::set_allocated_position(::zb::dcts::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.IQ.IQHeader.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IQ
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::IQ::TimeTriggerParam_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::IQ::TimeTriggerParam_Type>() {
  return ::zb::dcts::scenario::IQ::TimeTriggerParam_Type_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::IQ::IQType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::IQ::IQType>() {
  return ::zb::dcts::scenario::IQ::IQType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fIQ_2eproto
