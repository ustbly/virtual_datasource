// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhMultiChannelAcq.proto

#include "scenario/kh/KhMultiChannelAcq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {
class NarrowChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NarrowChannel> _instance;
} _NarrowChannel_default_instance_;
class MultiAcqParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAcqParam> _instance;
} _MultiAcqParam_default_instance_;
class ChannelIQDataDevDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelIQDataDev> _instance;
} _ChannelIQDataDev_default_instance_;
class MultiAcqResult_ResultHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAcqResult_ResultHeader> _instance;
} _MultiAcqResult_ResultHeader_default_instance_;
class MultiAcqResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiAcqResult> _instance;
} _MultiAcqResult_default_instance_;
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_ChannelIQDataDev_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,}};

static void InitDefaultsscc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto}, {
      &scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
      &scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,}};

static void InitDefaultsscc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto}, {
      &scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
      &scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,}};

static void InitDefaultsscc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannel_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhMultiChannelAcq_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenario_2fkh_2fKhMultiChannelAcq_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhMultiChannelAcq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, width_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, cent_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, run_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, fft_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, demod_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel, audio_sr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam, broad_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, channel_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, signal_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, cent_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, samp_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, data_iq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev, hopping_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, device_position_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, cent_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, samp_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, qtz_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader, spanif_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult, spectrum_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult, channel_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel)},
  { 13, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam)},
  { 20, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev)},
  { 33, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader)},
  { 46, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_ChannelIQDataDev_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhMultiChannelAcq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#scenario/kh/KhMultiChannelAcq.proto\022$z"
  "b.dcts.scenario.kh.commMultiChannel\032\ndct"
  "s.proto\032\023source/source.proto\032\037scenario/k"
  "h/KhSpectrumAcq.proto\032\035scenario/FFP/demo"
  "dulate.proto\"\263\001\n\rNarrowChannel\022\022\n\nchanne"
  "l_id\030\001 \001(\005\022\r\n\005width\030\002 \001(\001\022\021\n\tcent_freq\030\003"
  " \001(\001\022\013\n\003run\030\004 \001(\010\022\013\n\003fft\030\005 \001(\010\022\r\n\005demod\030"
  "\006 \001(\010\0221\n\004type\030\007 \001(\0162#.zb.dcts.scenario.F"
  "FP.AnalogModType\022\020\n\010audio_sr\030\010 \001(\001\"\231\001\n\rM"
  "ultiAcqParam\022A\n\005broad\030\001 \001(\01322.zb.dcts.sc"
  "enario.kh.commSpectrum.SpectrumAcqParam\022"
  "E\n\010channels\030\002 \003(\01323.zb.dcts.scenario.kh."
  "commMultiChannel.NarrowChannel\"\276\001\n\020Chann"
  "elIQDataDev\022\022\n\nchannel_id\030\002 \001(\005\022\021\n\tsigna"
  "l_id\030\003 \001(\005\022\021\n\tcent_freq\030\004 \001(\001\022\016\n\006status\030"
  "\005 \001(\005\022\021\n\tsamp_rate\030\006 \001(\001\022&\n\ntime_stamp\030\007"
  " \001(\0132\022.zb.dcts.Timestamp\022\017\n\007data_iq\030\010 \003("
  "\r\022\024\n\014hopping_freq\030\n \001(\001\"\263\003\n\016MultiAcqResu"
  "lt\022Q\n\006header\030\001 \001(\0132A.zb.dcts.scenario.kh"
  ".commMultiChannel.MultiAcqResult.ResultH"
  "eader\022\020\n\010spectrum\030\002 \003(\002\022L\n\014channel_data\030"
  "\003 \003(\01326.zb.dcts.scenario.kh.commMultiCha"
  "nnel.ChannelIQDataDev\032\355\001\n\014ResultHeader\022-"
  "\n\013result_from\030\001 \001(\0132\030.zb.dcts.source.Sou"
  "rceId\022\027\n\017sequence_number\030\002 \001(\r\022&\n\ntime_s"
  "tamp\030\003 \001(\0132\022.zb.dcts.Timestamp\022*\n\017device"
  "_position\030\004 \001(\0132\021.zb.dcts.Position\022\021\n\tce"
  "nt_freq\030\005 \001(\001\022\021\n\tsamp_rate\030\006 \001(\001\022\013\n\003qtz\030"
  "\010 \001(\001\022\016\n\006spanIF\030\t \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto,
  &::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_sccs[5] = {
  &scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
  &scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
  &scc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
  &scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
  &scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhMultiChannelAcq_2eproto, "scenario/kh/KhMultiChannelAcq.proto", 1149,
  &descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_once, descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto_deps, 5, 4,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhMultiChannelAcq_2eproto, 5, file_level_enum_descriptors_scenario_2fkh_2fKhMultiChannelAcq_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhMultiChannelAcq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhMultiChannelAcq_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {

// ===================================================================

void NarrowChannel::InitAsDefaultInstance() {
}
class NarrowChannel::_Internal {
 public:
};

NarrowChannel::NarrowChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
}
NarrowChannel::NarrowChannel(const NarrowChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&width_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
}

void NarrowChannel::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&width_)) + sizeof(type_));
}

NarrowChannel::~NarrowChannel() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NarrowChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NarrowChannel::ArenaDtor(void* object) {
  NarrowChannel* _this = reinterpret_cast< NarrowChannel* >(object);
  (void)_this;
}
void NarrowChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NarrowChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NarrowChannel& NarrowChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  return *internal_default_instance();
}


void NarrowChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&width_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NarrowChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cent_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cent_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool run = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fft = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool demod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          demod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.AnalogModType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::FFP::AnalogModType>(val));
        } else goto handle_unusual;
        continue;
      // double audio_sr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          audio_sr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NarrowChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double cent_freq = 3;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cent_freq(), target);
  }

  // bool run = 4;
  if (this->run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_run(), target);
  }

  // bool fft = 5;
  if (this->fft() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_fft(), target);
  }

  // bool demod = 6;
  if (this->demod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_demod(), target);
  }

  // .zb.dcts.scenario.FFP.AnalogModType type = 7;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // double audio_sr = 8;
  if (!(this->audio_sr() <= 0 && this->audio_sr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_audio_sr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  return target;
}

size_t NarrowChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double cent_freq = 3;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  // bool run = 4;
  if (this->run() != 0) {
    total_size += 1 + 1;
  }

  // bool fft = 5;
  if (this->fft() != 0) {
    total_size += 1 + 1;
  }

  // bool demod = 6;
  if (this->demod() != 0) {
    total_size += 1 + 1;
  }

  // double audio_sr = 8;
  if (!(this->audio_sr() <= 0 && this->audio_sr() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.scenario.FFP.AnalogModType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NarrowChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const NarrowChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NarrowChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
    MergeFrom(*source);
  }
}

void NarrowChannel::MergeFrom(const NarrowChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.cent_freq() <= 0 && from.cent_freq() >= 0)) {
    _internal_set_cent_freq(from._internal_cent_freq());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.run() != 0) {
    _internal_set_run(from._internal_run());
  }
  if (from.fft() != 0) {
    _internal_set_fft(from._internal_fft());
  }
  if (from.demod() != 0) {
    _internal_set_demod(from._internal_demod());
  }
  if (!(from.audio_sr() <= 0 && from.audio_sr() >= 0)) {
    _internal_set_audio_sr(from._internal_audio_sr());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void NarrowChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NarrowChannel::CopyFrom(const NarrowChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NarrowChannel::IsInitialized() const {
  return true;
}

void NarrowChannel::InternalSwap(NarrowChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NarrowChannel, type_)
      + sizeof(NarrowChannel::type_)
      - PROTOBUF_FIELD_OFFSET(NarrowChannel, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NarrowChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAcqParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqParam_default_instance_._instance.get_mutable()->broad_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::internal_default_instance());
}
class MultiAcqParam::_Internal {
 public:
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& broad(const MultiAcqParam* msg);
};

const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam&
MultiAcqParam::_Internal::broad(const MultiAcqParam* msg) {
  return *msg->broad_;
}
void MultiAcqParam::clear_broad() {
  if (GetArena() == nullptr && broad_ != nullptr) {
    delete broad_;
  }
  broad_ = nullptr;
}
MultiAcqParam::MultiAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
}
MultiAcqParam::MultiAcqParam(const MultiAcqParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_broad()) {
    broad_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam(*from.broad_);
  } else {
    broad_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
}

void MultiAcqParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  broad_ = nullptr;
}

MultiAcqParam::~MultiAcqParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiAcqParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete broad_;
}

void MultiAcqParam::ArenaDtor(void* object) {
  MultiAcqParam* _this = reinterpret_cast< MultiAcqParam* >(object);
  (void)_this;
}
void MultiAcqParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAcqParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAcqParam& MultiAcqParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  return *internal_default_instance();
}


void MultiAcqParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArena() == nullptr && broad_ != nullptr) {
    delete broad_;
  }
  broad_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAcqParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_broad(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAcqParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;
  if (this->has_broad()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::broad(this), target, stream);
  }

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  return target;
}

size_t MultiAcqParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;
  if (this->has_broad()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *broad_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAcqParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAcqParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAcqParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
    MergeFrom(*source);
  }
}

void MultiAcqParam::MergeFrom(const MultiAcqParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.has_broad()) {
    _internal_mutable_broad()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::MergeFrom(from._internal_broad());
  }
}

void MultiAcqParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAcqParam::CopyFrom(const MultiAcqParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAcqParam::IsInitialized() const {
  return true;
}

void MultiAcqParam::InternalSwap(MultiAcqParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  swap(broad_, other->broad_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAcqParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelIQDataDev::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_ChannelIQDataDev_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class ChannelIQDataDev::_Internal {
 public:
  static const ::zb::dcts::Timestamp& time_stamp(const ChannelIQDataDev* msg);
};

const ::zb::dcts::Timestamp&
ChannelIQDataDev::_Internal::time_stamp(const ChannelIQDataDev* msg) {
  return *msg->time_stamp_;
}
void ChannelIQDataDev::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
ChannelIQDataDev::ChannelIQDataDev(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_iq_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
}
ChannelIQDataDev::ChannelIQDataDev(const ChannelIQDataDev& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_iq_(from.data_iq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hopping_freq_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(hopping_freq_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
}

void ChannelIQDataDev::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hopping_freq_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(hopping_freq_));
}

ChannelIQDataDev::~ChannelIQDataDev() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelIQDataDev::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_stamp_;
}

void ChannelIQDataDev::ArenaDtor(void* object) {
  ChannelIQDataDev* _this = reinterpret_cast< ChannelIQDataDev* >(object);
  (void)_this;
}
void ChannelIQDataDev::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelIQDataDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelIQDataDev& ChannelIQDataDev::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelIQDataDev_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  return *internal_default_instance();
}


void ChannelIQDataDev::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_iq_.Clear();
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hopping_freq_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(hopping_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelIQDataDev::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 signal_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          signal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cent_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          cent_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double samp_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          samp_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data_iq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data_iq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_data_iq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double hopping_freq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          hopping_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelIQDataDev::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // int32 signal_id = 3;
  if (this->signal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_signal_id(), target);
  }

  // double cent_freq = 4;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cent_freq(), target);
  }

  // int32 status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_samp_rate(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 7;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::time_stamp(this), target, stream);
  }

  // repeated uint32 data_iq = 8;
  {
    int byte_size = _data_iq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_data_iq(), byte_size, target);
    }
  }

  // double hopping_freq = 10;
  if (!(this->hopping_freq() <= 0 && this->hopping_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_hopping_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  return target;
}

size_t ChannelIQDataDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data_iq = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_iq_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_iq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.Timestamp time_stamp = 7;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // int32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  // int32 signal_id = 3;
  if (this->signal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_signal_id());
  }

  // double cent_freq = 4;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // double hopping_freq = 10;
  if (!(this->hopping_freq() <= 0 && this->hopping_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelIQDataDev::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelIQDataDev* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelIQDataDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
    MergeFrom(*source);
  }
}

void ChannelIQDataDev::MergeFrom(const ChannelIQDataDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_iq_.MergeFrom(from.data_iq_);
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.signal_id() != 0) {
    _internal_set_signal_id(from._internal_signal_id());
  }
  if (!(from.cent_freq() <= 0 && from.cent_freq() >= 0)) {
    _internal_set_cent_freq(from._internal_cent_freq());
  }
  if (!(from.samp_rate() <= 0 && from.samp_rate() >= 0)) {
    _internal_set_samp_rate(from._internal_samp_rate());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.hopping_freq() <= 0 && from.hopping_freq() >= 0)) {
    _internal_set_hopping_freq(from._internal_hopping_freq());
  }
}

void ChannelIQDataDev::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelIQDataDev::CopyFrom(const ChannelIQDataDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelIQDataDev::IsInitialized() const {
  return true;
}

void ChannelIQDataDev::InternalSwap(ChannelIQDataDev* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_iq_.InternalSwap(&other->data_iq_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelIQDataDev, hopping_freq_)
      + sizeof(ChannelIQDataDev::hopping_freq_)
      - PROTOBUF_FIELD_OFFSET(ChannelIQDataDev, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelIQDataDev::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAcqResult_ResultHeader::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class MultiAcqResult_ResultHeader::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const MultiAcqResult_ResultHeader* msg);
  static const ::zb::dcts::Timestamp& time_stamp(const MultiAcqResult_ResultHeader* msg);
  static const ::zb::dcts::Position& device_position(const MultiAcqResult_ResultHeader* msg);
};

const ::zb::dcts::source::SourceId&
MultiAcqResult_ResultHeader::_Internal::result_from(const MultiAcqResult_ResultHeader* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::Timestamp&
MultiAcqResult_ResultHeader::_Internal::time_stamp(const MultiAcqResult_ResultHeader* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::Position&
MultiAcqResult_ResultHeader::_Internal::device_position(const MultiAcqResult_ResultHeader* msg) {
  return *msg->device_position_;
}
void MultiAcqResult_ResultHeader::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void MultiAcqResult_ResultHeader::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void MultiAcqResult_ResultHeader::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
MultiAcqResult_ResultHeader::MultiAcqResult_ResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
}
MultiAcqResult_ResultHeader::MultiAcqResult_ResultHeader(const MultiAcqResult_ResultHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  ::memcpy(&cent_freq_, &from.cent_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&cent_freq_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
}

void MultiAcqResult_ResultHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

MultiAcqResult_ResultHeader::~MultiAcqResult_ResultHeader() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiAcqResult_ResultHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete device_position_;
}

void MultiAcqResult_ResultHeader::ArenaDtor(void* object) {
  MultiAcqResult_ResultHeader* _this = reinterpret_cast< MultiAcqResult_ResultHeader* >(object);
  (void)_this;
}
void MultiAcqResult_ResultHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAcqResult_ResultHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAcqResult_ResultHeader& MultiAcqResult_ResultHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAcqResult_ResultHeader_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  return *internal_default_instance();
}


void MultiAcqResult_ResultHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  ::memset(&cent_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&cent_freq_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAcqResult_ResultHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cent_freq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cent_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double samp_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          samp_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qtz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          qtz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double spanIF = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          spanif_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAcqResult_ResultHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 3;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_stamp(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  // double cent_freq = 5;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cent_freq(), target);
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_samp_rate(), target);
  }

  // double qtz = 8;
  if (!(this->qtz() <= 0 && this->qtz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_qtz(), target);
  }

  // double spanIF = 9;
  if (!(this->spanif() <= 0 && this->spanif() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_spanif(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  return target;
}

size_t MultiAcqResult_ResultHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.Timestamp time_stamp = 3;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // double cent_freq = 5;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double qtz = 8;
  if (!(this->qtz() <= 0 && this->qtz() >= 0)) {
    total_size += 1 + 8;
  }

  // double spanIF = 9;
  if (!(this->spanif() <= 0 && this->spanif() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAcqResult_ResultHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAcqResult_ResultHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAcqResult_ResultHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
    MergeFrom(*source);
  }
}

void MultiAcqResult_ResultHeader::MergeFrom(const MultiAcqResult_ResultHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (!(from.cent_freq() <= 0 && from.cent_freq() >= 0)) {
    _internal_set_cent_freq(from._internal_cent_freq());
  }
  if (!(from.samp_rate() <= 0 && from.samp_rate() >= 0)) {
    _internal_set_samp_rate(from._internal_samp_rate());
  }
  if (!(from.qtz() <= 0 && from.qtz() >= 0)) {
    _internal_set_qtz(from._internal_qtz());
  }
  if (!(from.spanif() <= 0 && from.spanif() >= 0)) {
    _internal_set_spanif(from._internal_spanif());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void MultiAcqResult_ResultHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAcqResult_ResultHeader::CopyFrom(const MultiAcqResult_ResultHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAcqResult_ResultHeader::IsInitialized() const {
  return true;
}

void MultiAcqResult_ResultHeader::InternalSwap(MultiAcqResult_ResultHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiAcqResult_ResultHeader, sequence_number_)
      + sizeof(MultiAcqResult_ResultHeader::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(MultiAcqResult_ResultHeader, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAcqResult_ResultHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiAcqResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader*>(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader::internal_default_instance());
}
class MultiAcqResult::_Internal {
 public:
  static const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader& header(const MultiAcqResult* msg);
};

const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader&
MultiAcqResult::_Internal::header(const MultiAcqResult* msg) {
  return *msg->header_;
}
MultiAcqResult::MultiAcqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_(arena),
  channel_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
}
MultiAcqResult::MultiAcqResult(const MultiAcqResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_(from.spectrum_),
      channel_data_(from.channel_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
}

void MultiAcqResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  header_ = nullptr;
}

MultiAcqResult::~MultiAcqResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiAcqResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MultiAcqResult::ArenaDtor(void* object) {
  MultiAcqResult* _this = reinterpret_cast< MultiAcqResult* >(object);
  (void)_this;
}
void MultiAcqResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiAcqResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiAcqResult& MultiAcqResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiAcqResult_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base);
  return *internal_default_instance();
}


void MultiAcqResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_.Clear();
  channel_data_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiAcqResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float spectrum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_spectrum(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiAcqResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated float spectrum = 2;
  if (this->_internal_spectrum_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_spectrum(), target);
  }

  // repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_channel_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  return target;
}

size_t MultiAcqResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spectrum = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;
  total_size += 1UL * this->_internal_channel_data_size();
  for (const auto& msg : this->channel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiAcqResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiAcqResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiAcqResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
    MergeFrom(*source);
  }
}

void MultiAcqResult::MergeFrom(const MultiAcqResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_.MergeFrom(from.spectrum_);
  channel_data_.MergeFrom(from.channel_data_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader::MergeFrom(from._internal_header());
  }
}

void MultiAcqResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiAcqResult::CopyFrom(const MultiAcqResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiAcqResult::IsInitialized() const {
  return true;
}

void MultiAcqResult::InternalSwap(MultiAcqResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_.InternalSwap(&other->spectrum_);
  channel_data_.InternalSwap(&other->channel_data_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiAcqResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
