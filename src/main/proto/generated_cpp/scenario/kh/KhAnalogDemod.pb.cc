// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhAnalogDemod.proto

#include "scenario/kh/KhAnalogDemod.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhAnalogDemod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhAnalogDemod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhAnalogDemod_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commAnalogDemod {
class DemodChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemodChannel> _instance;
} _DemodChannel_default_instance_;
class CommDemodTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDemodTaskRequest> _instance;
} _CommDemodTaskRequest_default_instance_;
class AudioBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioBlock> _instance;
} _AudioBlock_default_instance_;
class ChannelAudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelAudio> _instance;
} _ChannelAudio_default_instance_;
class CommDemodResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDemodResult> _instance;
} _CommDemodResult_default_instance_;
class ChangeChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeChannelRequest> _instance;
} _ChangeChannelRequest_default_instance_;
}  // namespace commAnalogDemod
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_AudioBlock_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto}, {}};

static void InitDefaultsscc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_ChangeChannelRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto.base,}};

static void InitDefaultsscc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_ChannelAudio_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto}, {
      &scc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto.base,}};

static void InitDefaultsscc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto.base,}};

static void InitDefaultsscc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commAnalogDemod::_DemodChannel_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto}, {
      &scc_info_SignalBand_scenario_2fspectrum_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhAnalogDemod_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhAnalogDemod_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhAnalogDemod_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, audio_sample_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, bfo_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel, demod_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock, pcm_bitstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult, channel_audio_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult, spectrum_views_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest, channel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel)},
  { 10, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest)},
  { 19, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock)},
  { 25, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio)},
  { 32, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult)},
  { 40, -1, sizeof(::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_DemodChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_AudioBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_ChannelAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commAnalogDemod::_ChangeChannelRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhAnalogDemod_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037scenario/kh/KhAnalogDemod.proto\022#zb.dc"
  "ts.scenario.kh.commAnalogDemod\032\027scenario"
  "/scenario.proto\032\027scenario/spectrum.proto"
  "\032\035scenario/kh/KhIQDataAcq.proto\"\302\001\n\014Demo"
  "dChannel\022\n\n\002id\030\001 \001(\t\022:\n\013signal_band\030\002 \001("
  "\0132%.zb.dcts.scenario.spectrum.SignalBand"
  "\022\031\n\021audio_sample_rate\030\003 \001(\001\022\013\n\003bfo\030\005 \001(\001"
  "\022B\n\ndemod_type\030\006 \001(\0162..zb.dcts.scenario."
  "kh.commAnalogDemod.DemodType\"\230\002\n\024CommDem"
  "odTaskRequest\022.\n\010scenario\030\001 \001(\0132\034.zb.dct"
  "s.scenario.ScenarioId\022E\n\014source_param\030\002 "
  "\001(\0132/.zb.dcts.scenario.kh.commIqData.Com"
  "mIQAcqSource\022E\n\tacq_param\030\003 \001(\01322.zb.dct"
  "s.scenario.kh.commIqData.CommIQAcquirePa"
  "ram\022B\n\007channel\030\004 \001(\01321.zb.dcts.scenario."
  "kh.commAnalogDemod.DemodChannel\"#\n\nAudio"
  "Block\022\025\n\rpcm_bitstream\030\003 \003(\005\"[\n\014ChannelA"
  "udio\022\n\n\002id\030\001 \001(\t\022\?\n\006blocks\030\002 \003(\0132/.zb.dc"
  "ts.scenario.kh.commAnalogDemod.AudioBloc"
  "k\"\307\001\n\017CommDemodResult\0221\n\006header\030\001 \001(\0132!."
  "zb.dcts.scenario.spectrum.Header\022H\n\rchan"
  "nel_audio\030\002 \001(\01321.zb.dcts.scenario.kh.co"
  "mmAnalogDemod.ChannelAudio\0227\n\016spectrum_v"
  "iews\030\003 \001(\0132\037.zb.dcts.scenario.spectrum.V"
  "iew\"\320\001\n\024ChangeChannelRequest\0223\n\tresponse"
  "r\030\001 \001(\0132 .zb.dcts.scenario.ScenarioTaskI"
  "d\022\?\n\004type\030\002 \001(\01621.zb.dcts.scenario.kh.co"
  "mmIqData.ChangeRequestType\022B\n\007channel\030\003 "
  "\001(\01321.zb.dcts.scenario.kh.commAnalogDemo"
  "d.DemodChannel*c\n\tDemodType\022\010\n\004NONE\020\000\022\006\n"
  "\002AM\020\001\022\006\n\002FM\020\002\022\006\n\002CW\020\003\022\007\n\003LSB\020\004\022\007\n\003USB\020\005\022"
  "\t\n\005PULSE\020\006\022\007\n\003ISB\020\007\022\006\n\002PM\020\010\022\006\n\002IQ\020\t2\250\003\n\022"
  "AnalogDemodService\022i\n\tStartTask\0229.zb.dct"
  "s.scenario.kh.commAnalogDemod.CommDemodT"
  "askRequest\032\037.zb.dcts.scenario.ScenarioRe"
  "ply\"\000\022g\n\tGetResult\022 .zb.dcts.scenario.Sc"
  "enarioTaskId\0324.zb.dcts.scenario.kh.commA"
  "nalogDemod.CommDemodResult\"\0000\001\022m\n\rChange"
  "Channel\0229.zb.dcts.scenario.kh.commAnalog"
  "Demod.ChangeChannelRequest\032\037.zb.dcts.sce"
  "nario.ScenarioReply\"\000\022O\n\010StopTask\022 .zb.d"
  "cts.scenario.ScenarioTaskId\032\037.zb.dcts.sc"
  "enario.ScenarioReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_deps[3] = {
  &::descriptor_table_scenario_2fkh_2fKhIQDataAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_sccs[6] = {
  &scc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
  &scc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
  &scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
  &scc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
  &scc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
  &scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhAnalogDemod_2eproto, "scenario/kh/KhAnalogDemod.proto", 1710,
  &descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_once, descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhAnalogDemod_2eproto, 6, file_level_enum_descriptors_scenario_2fkh_2fKhAnalogDemod_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhAnalogDemod_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhAnalogDemod_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commAnalogDemod {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DemodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhAnalogDemod_2eproto[0];
}
bool DemodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DemodChannel::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commAnalogDemod::_DemodChannel_default_instance_._instance.get_mutable()->signal_band_ = const_cast< ::zb::dcts::scenario::spectrum::SignalBand*>(
      ::zb::dcts::scenario::spectrum::SignalBand::internal_default_instance());
}
class DemodChannel::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::SignalBand& signal_band(const DemodChannel* msg);
};

const ::zb::dcts::scenario::spectrum::SignalBand&
DemodChannel::_Internal::signal_band(const DemodChannel* msg) {
  return *msg->signal_band_;
}
void DemodChannel::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
DemodChannel::DemodChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
}
DemodChannel::DemodChannel(const DemodChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::scenario::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  ::memcpy(&audio_sample_rate_, &from.audio_sample_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&demod_type_) -
    reinterpret_cast<char*>(&audio_sample_rate_)) + sizeof(demod_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
}

void DemodChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&signal_band_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demod_type_) -
      reinterpret_cast<char*>(&signal_band_)) + sizeof(demod_type_));
}

DemodChannel::~DemodChannel() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DemodChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signal_band_;
}

void DemodChannel::ArenaDtor(void* object) {
  DemodChannel* _this = reinterpret_cast< DemodChannel* >(object);
  (void)_this;
}
void DemodChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DemodChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemodChannel& DemodChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemodChannel_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void DemodChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  ::memset(&audio_sample_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demod_type_) -
      reinterpret_cast<char*>(&audio_sample_rate_)) + sizeof(demod_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DemodChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double audio_sample_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          audio_sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          bfo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commAnalogDemod.DemodType demod_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_demod_type(static_cast<::zb::dcts::scenario::kh::commAnalogDemod::DemodType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DemodChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signal_band(this), target, stream);
  }

  // double audio_sample_rate = 3;
  if (!(this->audio_sample_rate() <= 0 && this->audio_sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_audio_sample_rate(), target);
  }

  // double bfo = 5;
  if (!(this->bfo() <= 0 && this->bfo() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bfo(), target);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodType demod_type = 6;
  if (this->demod_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_demod_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  return target;
}

size_t DemodChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // double audio_sample_rate = 3;
  if (!(this->audio_sample_rate() <= 0 && this->audio_sample_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double bfo = 5;
  if (!(this->bfo() <= 0 && this->bfo() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodType demod_type = 6;
  if (this->demod_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_demod_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemodChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const DemodChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemodChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
    MergeFrom(*source);
  }
}

void DemodChannel::MergeFrom(const DemodChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::scenario::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (!(from.audio_sample_rate() <= 0 && from.audio_sample_rate() >= 0)) {
    _internal_set_audio_sample_rate(from._internal_audio_sample_rate());
  }
  if (!(from.bfo() <= 0 && from.bfo() >= 0)) {
    _internal_set_bfo(from._internal_bfo());
  }
  if (from.demod_type() != 0) {
    _internal_set_demod_type(from._internal_demod_type());
  }
}

void DemodChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemodChannel::CopyFrom(const DemodChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemodChannel::IsInitialized() const {
  return true;
}

void DemodChannel::InternalSwap(DemodChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DemodChannel, demod_type_)
      + sizeof(DemodChannel::demod_type_)
      - PROTOBUF_FIELD_OFFSET(DemodChannel, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DemodChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommDemodTaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodTaskRequest_default_instance_._instance.get_mutable()->channel_ = const_cast< ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel*>(
      ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel::internal_default_instance());
}
class CommDemodTaskRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const CommDemodTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param(const CommDemodTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param(const CommDemodTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& channel(const CommDemodTaskRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
CommDemodTaskRequest::_Internal::scenario(const CommDemodTaskRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource&
CommDemodTaskRequest::_Internal::source_param(const CommDemodTaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam&
CommDemodTaskRequest::_Internal::acq_param(const CommDemodTaskRequest* msg) {
  return *msg->acq_param_;
}
const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel&
CommDemodTaskRequest::_Internal::channel(const CommDemodTaskRequest* msg) {
  return *msg->channel_;
}
void CommDemodTaskRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void CommDemodTaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void CommDemodTaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
CommDemodTaskRequest::CommDemodTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
}
CommDemodTaskRequest::CommDemodTaskRequest(const CommDemodTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  if (from._internal_has_channel()) {
    channel_ = new ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
}

void CommDemodTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(channel_));
}

CommDemodTaskRequest::~CommDemodTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommDemodTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
  if (this != internal_default_instance()) delete channel_;
}

void CommDemodTaskRequest::ArenaDtor(void* object) {
  CommDemodTaskRequest* _this = reinterpret_cast< CommDemodTaskRequest* >(object);
  (void)_this;
}
void CommDemodTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommDemodTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommDemodTaskRequest& CommDemodTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommDemodTaskRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void CommDemodTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommDemodTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommDemodTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 4;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  return target;
}

size_t CommDemodTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 4;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommDemodTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommDemodTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommDemodTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
    MergeFrom(*source);
  }
}

void CommDemodTaskRequest::MergeFrom(const CommDemodTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::MergeFrom(from._internal_acq_param());
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel::MergeFrom(from._internal_channel());
  }
}

void CommDemodTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommDemodTaskRequest::CopyFrom(const CommDemodTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommDemodTaskRequest::IsInitialized() const {
  return true;
}

void CommDemodTaskRequest::InternalSwap(CommDemodTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommDemodTaskRequest, channel_)
      + sizeof(CommDemodTaskRequest::channel_)
      - PROTOBUF_FIELD_OFFSET(CommDemodTaskRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommDemodTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioBlock::InitAsDefaultInstance() {
}
class AudioBlock::_Internal {
 public:
};

AudioBlock::AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pcm_bitstream_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
}
AudioBlock::AudioBlock(const AudioBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pcm_bitstream_(from.pcm_bitstream_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
}

void AudioBlock::SharedCtor() {
}

AudioBlock::~AudioBlock() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioBlock::ArenaDtor(void* object) {
  AudioBlock* _this = reinterpret_cast< AudioBlock* >(object);
  (void)_this;
}
void AudioBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioBlock& AudioBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioBlock_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void AudioBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pcm_bitstream_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 pcm_bitstream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pcm_bitstream(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 3;
  {
    int byte_size = _pcm_bitstream_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_pcm_bitstream(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  return target;
}

size_t AudioBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pcm_bitstream_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pcm_bitstream_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
    MergeFrom(*source);
  }
}

void AudioBlock::MergeFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pcm_bitstream_.MergeFrom(from.pcm_bitstream_);
}

void AudioBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioBlock::CopyFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioBlock::IsInitialized() const {
  return true;
}

void AudioBlock::InternalSwap(AudioBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pcm_bitstream_.InternalSwap(&other->pcm_bitstream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelAudio::InitAsDefaultInstance() {
}
class ChannelAudio::_Internal {
 public:
};

ChannelAudio::ChannelAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
}
ChannelAudio::ChannelAudio(const ChannelAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
}

void ChannelAudio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChannelAudio::~ChannelAudio() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelAudio::ArenaDtor(void* object) {
  ChannelAudio* _this = reinterpret_cast< ChannelAudio* >(object);
  (void)_this;
}
void ChannelAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelAudio& ChannelAudio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelAudio_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void ChannelAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commAnalogDemod.AudioBlock blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .zb.dcts.scenario.kh.commAnalogDemod.AudioBlock blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  return target;
}

size_t ChannelAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.kh.commAnalogDemod.AudioBlock blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelAudio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelAudio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
    MergeFrom(*source);
  }
}

void ChannelAudio::MergeFrom(const ChannelAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ChannelAudio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelAudio::CopyFrom(const ChannelAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelAudio::IsInitialized() const {
  return true;
}

void ChannelAudio::InternalSwap(ChannelAudio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelAudio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommDemodResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodResult_default_instance_._instance.get_mutable()->channel_audio_ = const_cast< ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio*>(
      ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_CommDemodResult_default_instance_._instance.get_mutable()->spectrum_views_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class CommDemodResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const CommDemodResult* msg);
  static const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio& channel_audio(const CommDemodResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& spectrum_views(const CommDemodResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
CommDemodResult::_Internal::header(const CommDemodResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio&
CommDemodResult::_Internal::channel_audio(const CommDemodResult* msg) {
  return *msg->channel_audio_;
}
const ::zb::dcts::scenario::spectrum::View&
CommDemodResult::_Internal::spectrum_views(const CommDemodResult* msg) {
  return *msg->spectrum_views_;
}
void CommDemodResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CommDemodResult::clear_spectrum_views() {
  if (GetArena() == nullptr && spectrum_views_ != nullptr) {
    delete spectrum_views_;
  }
  spectrum_views_ = nullptr;
}
CommDemodResult::CommDemodResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
}
CommDemodResult::CommDemodResult(const CommDemodResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_channel_audio()) {
    channel_audio_ = new ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio(*from.channel_audio_);
  } else {
    channel_audio_ = nullptr;
  }
  if (from._internal_has_spectrum_views()) {
    spectrum_views_ = new ::zb::dcts::scenario::spectrum::View(*from.spectrum_views_);
  } else {
    spectrum_views_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
}

void CommDemodResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spectrum_views_) -
      reinterpret_cast<char*>(&header_)) + sizeof(spectrum_views_));
}

CommDemodResult::~CommDemodResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommDemodResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete channel_audio_;
  if (this != internal_default_instance()) delete spectrum_views_;
}

void CommDemodResult::ArenaDtor(void* object) {
  CommDemodResult* _this = reinterpret_cast< CommDemodResult* >(object);
  (void)_this;
}
void CommDemodResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommDemodResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommDemodResult& CommDemodResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommDemodResult_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void CommDemodResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
  if (GetArena() == nullptr && spectrum_views_ != nullptr) {
    delete spectrum_views_;
  }
  spectrum_views_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommDemodResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio channel_audio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View spectrum_views = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum_views(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommDemodResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio channel_audio = 2;
  if (this->has_channel_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_audio(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View spectrum_views = 3;
  if (this->has_spectrum_views()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spectrum_views(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  return target;
}

size_t CommDemodResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio channel_audio = 2;
  if (this->has_channel_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_audio_);
  }

  // .zb.dcts.scenario.spectrum.View spectrum_views = 3;
  if (this->has_spectrum_views()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_views_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommDemodResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommDemodResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommDemodResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
    MergeFrom(*source);
  }
}

void CommDemodResult::MergeFrom(const CommDemodResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_channel_audio()) {
    _internal_mutable_channel_audio()->::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio::MergeFrom(from._internal_channel_audio());
  }
  if (from.has_spectrum_views()) {
    _internal_mutable_spectrum_views()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_spectrum_views());
  }
}

void CommDemodResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommDemodResult::CopyFrom(const CommDemodResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommDemodResult::IsInitialized() const {
  return true;
}

void CommDemodResult::InternalSwap(CommDemodResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommDemodResult, spectrum_views_)
      + sizeof(CommDemodResult::spectrum_views_)
      - PROTOBUF_FIELD_OFFSET(CommDemodResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommDemodResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeChannelRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commAnalogDemod::_ChangeChannelRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::kh::commAnalogDemod::_ChangeChannelRequest_default_instance_._instance.get_mutable()->channel_ = const_cast< ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel*>(
      ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel::internal_default_instance());
}
class ChangeChannelRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ChangeChannelRequest* msg);
  static const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& channel(const ChangeChannelRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ChangeChannelRequest::_Internal::responser(const ChangeChannelRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel&
ChangeChannelRequest::_Internal::channel(const ChangeChannelRequest* msg) {
  return *msg->channel_;
}
void ChangeChannelRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
ChangeChannelRequest::ChangeChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
}
ChangeChannelRequest::ChangeChannelRequest(const ChangeChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_channel()) {
    channel_ = new ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
}

void ChangeChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(type_));
}

ChangeChannelRequest::~ChangeChannelRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete channel_;
}

void ChangeChannelRequest::ArenaDtor(void* object) {
  ChangeChannelRequest* _this = reinterpret_cast< ChangeChannelRequest* >(object);
  (void)_this;
}
void ChangeChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeChannelRequest& ChangeChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeChannelRequest_scenario_2fkh_2fKhAnalogDemod_2eproto.base);
  return *internal_default_instance();
}


void ChangeChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.ChangeRequestType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::scenario::kh::commIqData::ChangeRequestType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.ChangeRequestType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 3;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  return target;
}

size_t ChangeChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 3;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .zb.dcts.scenario.kh.commIqData.ChangeRequestType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
    MergeFrom(*source);
  }
}

void ChangeChannelRequest::MergeFrom(const ChangeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel::MergeFrom(from._internal_channel());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ChangeChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeChannelRequest::CopyFrom(const ChangeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeChannelRequest::IsInitialized() const {
  return true;
}

void ChangeChannelRequest::InternalSwap(ChangeChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeChannelRequest, type_)
      + sizeof(ChangeChannelRequest::type_)
      - PROTOBUF_FIELD_OFFSET(ChangeChannelRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commAnalogDemod
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
