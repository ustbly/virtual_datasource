// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhMultiChannelAcq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannelAcq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannelAcq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/kh/KhSpectrumAcq.pb.h"
#include "scenario/FFP/demodulate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {
class ChannelIQDataDev;
class ChannelIQDataDevDefaultTypeInternal;
extern ChannelIQDataDevDefaultTypeInternal _ChannelIQDataDev_default_instance_;
class MultiAcqParam;
class MultiAcqParamDefaultTypeInternal;
extern MultiAcqParamDefaultTypeInternal _MultiAcqParam_default_instance_;
class MultiAcqResult;
class MultiAcqResultDefaultTypeInternal;
extern MultiAcqResultDefaultTypeInternal _MultiAcqResult_default_instance_;
class MultiAcqResult_ResultHeader;
class MultiAcqResult_ResultHeaderDefaultTypeInternal;
extern MultiAcqResult_ResultHeaderDefaultTypeInternal _MultiAcqResult_ResultHeader_default_instance_;
class NarrowChannel;
class NarrowChannelDefaultTypeInternal;
extern NarrowChannelDefaultTypeInternal _NarrowChannel_default_instance_;
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {

// ===================================================================

class NarrowChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel) */ {
 public:
  inline NarrowChannel() : NarrowChannel(nullptr) {};
  virtual ~NarrowChannel();

  NarrowChannel(const NarrowChannel& from);
  NarrowChannel(NarrowChannel&& from) noexcept
    : NarrowChannel() {
    *this = ::std::move(from);
  }

  inline NarrowChannel& operator=(const NarrowChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NarrowChannel& operator=(NarrowChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NarrowChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NarrowChannel* internal_default_instance() {
    return reinterpret_cast<const NarrowChannel*>(
               &_NarrowChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NarrowChannel& a, NarrowChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(NarrowChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NarrowChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NarrowChannel* New() const final {
    return CreateMaybeMessage<NarrowChannel>(nullptr);
  }

  NarrowChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NarrowChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NarrowChannel& from);
  void MergeFrom(const NarrowChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NarrowChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.NarrowChannel";
  }
  protected:
  explicit NarrowChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 2,
    kCentFreqFieldNumber = 3,
    kChannelIdFieldNumber = 1,
    kRunFieldNumber = 4,
    kFftFieldNumber = 5,
    kDemodFieldNumber = 6,
    kAudioSrFieldNumber = 8,
    kTypeFieldNumber = 7,
  };
  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double cent_freq = 3;
  void clear_cent_freq();
  double cent_freq() const;
  void set_cent_freq(double value);
  private:
  double _internal_cent_freq() const;
  void _internal_set_cent_freq(double value);
  public:

  // int32 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool run = 4;
  void clear_run();
  bool run() const;
  void set_run(bool value);
  private:
  bool _internal_run() const;
  void _internal_set_run(bool value);
  public:

  // bool fft = 5;
  void clear_fft();
  bool fft() const;
  void set_fft(bool value);
  private:
  bool _internal_fft() const;
  void _internal_set_fft(bool value);
  public:

  // bool demod = 6;
  void clear_demod();
  bool demod() const;
  void set_demod(bool value);
  private:
  bool _internal_demod() const;
  void _internal_set_demod(bool value);
  public:

  // double audio_sr = 8;
  void clear_audio_sr();
  double audio_sr() const;
  void set_audio_sr(double value);
  private:
  double _internal_audio_sr() const;
  void _internal_set_audio_sr(double value);
  public:

  // .zb.dcts.scenario.FFP.AnalogModType type = 7;
  void clear_type();
  ::zb::dcts::scenario::FFP::AnalogModType type() const;
  void set_type(::zb::dcts::scenario::FFP::AnalogModType value);
  private:
  ::zb::dcts::scenario::FFP::AnalogModType _internal_type() const;
  void _internal_set_type(::zb::dcts::scenario::FFP::AnalogModType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double width_;
  double cent_freq_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  bool run_;
  bool fft_;
  bool demod_;
  double audio_sr_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
};
// -------------------------------------------------------------------

class MultiAcqParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam) */ {
 public:
  inline MultiAcqParam() : MultiAcqParam(nullptr) {};
  virtual ~MultiAcqParam();

  MultiAcqParam(const MultiAcqParam& from);
  MultiAcqParam(MultiAcqParam&& from) noexcept
    : MultiAcqParam() {
    *this = ::std::move(from);
  }

  inline MultiAcqParam& operator=(const MultiAcqParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAcqParam& operator=(MultiAcqParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAcqParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAcqParam* internal_default_instance() {
    return reinterpret_cast<const MultiAcqParam*>(
               &_MultiAcqParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiAcqParam& a, MultiAcqParam& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAcqParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAcqParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAcqParam* New() const final {
    return CreateMaybeMessage<MultiAcqParam>(nullptr);
  }

  MultiAcqParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAcqParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAcqParam& from);
  void MergeFrom(const MultiAcqParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAcqParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam";
  }
  protected:
  explicit MultiAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kBroadFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >*
      mutable_channels();
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& _internal_channels(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* _internal_add_channels();
  public:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& channels(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >&
      channels() const;

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;
  bool has_broad() const;
  private:
  bool _internal_has_broad() const;
  public:
  void clear_broad();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& broad() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* release_broad();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* mutable_broad();
  void set_allocated_broad(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* broad);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& _internal_broad() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* _internal_mutable_broad();
  public:
  void unsafe_arena_set_allocated_broad(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* broad);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* unsafe_arena_release_broad();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel > channels_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* broad_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
};
// -------------------------------------------------------------------

class ChannelIQDataDev PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev) */ {
 public:
  inline ChannelIQDataDev() : ChannelIQDataDev(nullptr) {};
  virtual ~ChannelIQDataDev();

  ChannelIQDataDev(const ChannelIQDataDev& from);
  ChannelIQDataDev(ChannelIQDataDev&& from) noexcept
    : ChannelIQDataDev() {
    *this = ::std::move(from);
  }

  inline ChannelIQDataDev& operator=(const ChannelIQDataDev& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelIQDataDev& operator=(ChannelIQDataDev&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelIQDataDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelIQDataDev* internal_default_instance() {
    return reinterpret_cast<const ChannelIQDataDev*>(
               &_ChannelIQDataDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChannelIQDataDev& a, ChannelIQDataDev& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelIQDataDev* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelIQDataDev* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelIQDataDev* New() const final {
    return CreateMaybeMessage<ChannelIQDataDev>(nullptr);
  }

  ChannelIQDataDev* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelIQDataDev>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelIQDataDev& from);
  void MergeFrom(const ChannelIQDataDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelIQDataDev* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev";
  }
  protected:
  explicit ChannelIQDataDev(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIqFieldNumber = 8,
    kTimeStampFieldNumber = 7,
    kChannelIdFieldNumber = 2,
    kSignalIdFieldNumber = 3,
    kCentFreqFieldNumber = 4,
    kSampRateFieldNumber = 6,
    kStatusFieldNumber = 5,
    kHoppingFreqFieldNumber = 10,
  };
  // repeated uint32 data_iq = 8;
  int data_iq_size() const;
  private:
  int _internal_data_iq_size() const;
  public:
  void clear_data_iq();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_iq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_data_iq() const;
  void _internal_add_data_iq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_data_iq();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 data_iq(int index) const;
  void set_data_iq(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_data_iq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      data_iq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_data_iq();

  // .zb.dcts.Timestamp time_stamp = 7;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // int32 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 signal_id = 3;
  void clear_signal_id();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_id() const;
  void set_signal_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal_id() const;
  void _internal_set_signal_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double cent_freq = 4;
  void clear_cent_freq();
  double cent_freq() const;
  void set_cent_freq(double value);
  private:
  double _internal_cent_freq() const;
  void _internal_set_cent_freq(double value);
  public:

  // double samp_rate = 6;
  void clear_samp_rate();
  double samp_rate() const;
  void set_samp_rate(double value);
  private:
  double _internal_samp_rate() const;
  void _internal_set_samp_rate(double value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double hopping_freq = 10;
  void clear_hopping_freq();
  double hopping_freq() const;
  void set_hopping_freq(double value);
  private:
  double _internal_hopping_freq() const;
  void _internal_set_hopping_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > data_iq_;
  mutable std::atomic<int> _data_iq_cached_byte_size_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_id_;
  double cent_freq_;
  double samp_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  double hopping_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
};
// -------------------------------------------------------------------

class MultiAcqResult_ResultHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader) */ {
 public:
  inline MultiAcqResult_ResultHeader() : MultiAcqResult_ResultHeader(nullptr) {};
  virtual ~MultiAcqResult_ResultHeader();

  MultiAcqResult_ResultHeader(const MultiAcqResult_ResultHeader& from);
  MultiAcqResult_ResultHeader(MultiAcqResult_ResultHeader&& from) noexcept
    : MultiAcqResult_ResultHeader() {
    *this = ::std::move(from);
  }

  inline MultiAcqResult_ResultHeader& operator=(const MultiAcqResult_ResultHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAcqResult_ResultHeader& operator=(MultiAcqResult_ResultHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAcqResult_ResultHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAcqResult_ResultHeader* internal_default_instance() {
    return reinterpret_cast<const MultiAcqResult_ResultHeader*>(
               &_MultiAcqResult_ResultHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MultiAcqResult_ResultHeader& a, MultiAcqResult_ResultHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAcqResult_ResultHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAcqResult_ResultHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAcqResult_ResultHeader* New() const final {
    return CreateMaybeMessage<MultiAcqResult_ResultHeader>(nullptr);
  }

  MultiAcqResult_ResultHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAcqResult_ResultHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAcqResult_ResultHeader& from);
  void MergeFrom(const MultiAcqResult_ResultHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAcqResult_ResultHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader";
  }
  protected:
  explicit MultiAcqResult_ResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeStampFieldNumber = 3,
    kDevicePositionFieldNumber = 4,
    kCentFreqFieldNumber = 5,
    kSampRateFieldNumber = 6,
    kQtzFieldNumber = 8,
    kSpanIFFieldNumber = 9,
    kSequenceNumberFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.Timestamp time_stamp = 3;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.Position device_position = 4;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // double cent_freq = 5;
  void clear_cent_freq();
  double cent_freq() const;
  void set_cent_freq(double value);
  private:
  double _internal_cent_freq() const;
  void _internal_set_cent_freq(double value);
  public:

  // double samp_rate = 6;
  void clear_samp_rate();
  double samp_rate() const;
  void set_samp_rate(double value);
  private:
  double _internal_samp_rate() const;
  void _internal_set_samp_rate(double value);
  public:

  // double qtz = 8;
  void clear_qtz();
  double qtz() const;
  void set_qtz(double value);
  private:
  double _internal_qtz() const;
  void _internal_set_qtz(double value);
  public:

  // double spanIF = 9;
  void clear_spanif();
  double spanif() const;
  void set_spanif(double value);
  private:
  double _internal_spanif() const;
  void _internal_set_spanif(double value);
  public:

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::Position* device_position_;
  double cent_freq_;
  double samp_rate_;
  double qtz_;
  double spanif_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
};
// -------------------------------------------------------------------

class MultiAcqResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult) */ {
 public:
  inline MultiAcqResult() : MultiAcqResult(nullptr) {};
  virtual ~MultiAcqResult();

  MultiAcqResult(const MultiAcqResult& from);
  MultiAcqResult(MultiAcqResult&& from) noexcept
    : MultiAcqResult() {
    *this = ::std::move(from);
  }

  inline MultiAcqResult& operator=(const MultiAcqResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAcqResult& operator=(MultiAcqResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiAcqResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiAcqResult* internal_default_instance() {
    return reinterpret_cast<const MultiAcqResult*>(
               &_MultiAcqResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiAcqResult& a, MultiAcqResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiAcqResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAcqResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiAcqResult* New() const final {
    return CreateMaybeMessage<MultiAcqResult>(nullptr);
  }

  MultiAcqResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiAcqResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiAcqResult& from);
  void MergeFrom(const MultiAcqResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiAcqResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult";
  }
  protected:
  explicit MultiAcqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MultiAcqResult_ResultHeader ResultHeader;

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumFieldNumber = 2,
    kChannelDataFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated float spectrum = 2;
  int spectrum_size() const;
  private:
  int _internal_spectrum_size() const;
  public:
  void clear_spectrum();
  private:
  float _internal_spectrum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spectrum() const;
  void _internal_add_spectrum(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spectrum();
  public:
  float spectrum(int index) const;
  void set_spectrum(int index, float value);
  void add_spectrum(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spectrum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spectrum();

  // repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;
  int channel_data_size() const;
  private:
  int _internal_channel_data_size() const;
  public:
  void clear_channel_data();
  ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* mutable_channel_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >*
      mutable_channel_data();
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev& _internal_channel_data(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* _internal_add_channel_data();
  public:
  const ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev& channel_data(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* add_channel_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >&
      channel_data() const;

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader& header() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* release_header();
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* header);
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader& _internal_header() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* header);
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spectrum_;
  mutable std::atomic<int> _spectrum_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev > channel_data_;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NarrowChannel

// int32 channel_id = 1;
inline void NarrowChannel::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NarrowChannel::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NarrowChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.channel_id)
  return _internal_channel_id();
}
inline void NarrowChannel::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void NarrowChannel::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.channel_id)
}

// double width = 2;
inline void NarrowChannel::clear_width() {
  width_ = 0;
}
inline double NarrowChannel::_internal_width() const {
  return width_;
}
inline double NarrowChannel::width() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.width)
  return _internal_width();
}
inline void NarrowChannel::_internal_set_width(double value) {
  
  width_ = value;
}
inline void NarrowChannel::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.width)
}

// double cent_freq = 3;
inline void NarrowChannel::clear_cent_freq() {
  cent_freq_ = 0;
}
inline double NarrowChannel::_internal_cent_freq() const {
  return cent_freq_;
}
inline double NarrowChannel::cent_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.cent_freq)
  return _internal_cent_freq();
}
inline void NarrowChannel::_internal_set_cent_freq(double value) {
  
  cent_freq_ = value;
}
inline void NarrowChannel::set_cent_freq(double value) {
  _internal_set_cent_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.cent_freq)
}

// bool run = 4;
inline void NarrowChannel::clear_run() {
  run_ = false;
}
inline bool NarrowChannel::_internal_run() const {
  return run_;
}
inline bool NarrowChannel::run() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.run)
  return _internal_run();
}
inline void NarrowChannel::_internal_set_run(bool value) {
  
  run_ = value;
}
inline void NarrowChannel::set_run(bool value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.run)
}

// bool fft = 5;
inline void NarrowChannel::clear_fft() {
  fft_ = false;
}
inline bool NarrowChannel::_internal_fft() const {
  return fft_;
}
inline bool NarrowChannel::fft() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.fft)
  return _internal_fft();
}
inline void NarrowChannel::_internal_set_fft(bool value) {
  
  fft_ = value;
}
inline void NarrowChannel::set_fft(bool value) {
  _internal_set_fft(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.fft)
}

// bool demod = 6;
inline void NarrowChannel::clear_demod() {
  demod_ = false;
}
inline bool NarrowChannel::_internal_demod() const {
  return demod_;
}
inline bool NarrowChannel::demod() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.demod)
  return _internal_demod();
}
inline void NarrowChannel::_internal_set_demod(bool value) {
  
  demod_ = value;
}
inline void NarrowChannel::set_demod(bool value) {
  _internal_set_demod(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.demod)
}

// .zb.dcts.scenario.FFP.AnalogModType type = 7;
inline void NarrowChannel::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::scenario::FFP::AnalogModType NarrowChannel::_internal_type() const {
  return static_cast< ::zb::dcts::scenario::FFP::AnalogModType >(type_);
}
inline ::zb::dcts::scenario::FFP::AnalogModType NarrowChannel::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.type)
  return _internal_type();
}
inline void NarrowChannel::_internal_set_type(::zb::dcts::scenario::FFP::AnalogModType value) {
  
  type_ = value;
}
inline void NarrowChannel::set_type(::zb::dcts::scenario::FFP::AnalogModType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.type)
}

// double audio_sr = 8;
inline void NarrowChannel::clear_audio_sr() {
  audio_sr_ = 0;
}
inline double NarrowChannel::_internal_audio_sr() const {
  return audio_sr_;
}
inline double NarrowChannel::audio_sr() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.audio_sr)
  return _internal_audio_sr();
}
inline void NarrowChannel::_internal_set_audio_sr(double value) {
  
  audio_sr_ = value;
}
inline void NarrowChannel::set_audio_sr(double value) {
  _internal_set_audio_sr(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel.audio_sr)
}

// -------------------------------------------------------------------

// MultiAcqParam

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;
inline bool MultiAcqParam::_internal_has_broad() const {
  return this != internal_default_instance() && broad_ != nullptr;
}
inline bool MultiAcqParam::has_broad() const {
  return _internal_has_broad();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& MultiAcqParam::_internal_broad() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* p = broad_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& MultiAcqParam::broad() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.broad)
  return _internal_broad();
}
inline void MultiAcqParam::unsafe_arena_set_allocated_broad(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* broad) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad_);
  }
  broad_ = broad;
  if (broad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.broad)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* MultiAcqParam::release_broad() {
  auto temp = unsafe_arena_release_broad();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* MultiAcqParam::unsafe_arena_release_broad() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.broad)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* temp = broad_;
  broad_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* MultiAcqParam::_internal_mutable_broad() {
  
  if (broad_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam>(GetArena());
    broad_ = p;
  }
  return broad_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* MultiAcqParam::mutable_broad() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.broad)
  return _internal_mutable_broad();
}
inline void MultiAcqParam::set_allocated_broad(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* broad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad_);
  }
  if (broad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad)->GetArena();
    if (message_arena != submessage_arena) {
      broad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broad, submessage_arena);
    }
    
  } else {
    
  }
  broad_ = broad;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.broad)
}

// repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;
inline int MultiAcqParam::_internal_channels_size() const {
  return channels_.size();
}
inline int MultiAcqParam::channels_size() const {
  return _internal_channels_size();
}
inline void MultiAcqParam::clear_channels() {
  channels_.Clear();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* MultiAcqParam::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >*
MultiAcqParam::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.channels)
  return &channels_;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& MultiAcqParam::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& MultiAcqParam::channels(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.channels)
  return _internal_channels(index);
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* MultiAcqParam::_internal_add_channels() {
  return channels_.Add();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* MultiAcqParam::add_channels() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >&
MultiAcqParam::channels() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam.channels)
  return channels_;
}

// -------------------------------------------------------------------

// ChannelIQDataDev

// int32 channel_id = 2;
inline void ChannelIQDataDev::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::channel_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.channel_id)
  return _internal_channel_id();
}
inline void ChannelIQDataDev::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void ChannelIQDataDev::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.channel_id)
}

// int32 signal_id = 3;
inline void ChannelIQDataDev::clear_signal_id() {
  signal_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::_internal_signal_id() const {
  return signal_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::signal_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.signal_id)
  return _internal_signal_id();
}
inline void ChannelIQDataDev::_internal_set_signal_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signal_id_ = value;
}
inline void ChannelIQDataDev::set_signal_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.signal_id)
}

// double cent_freq = 4;
inline void ChannelIQDataDev::clear_cent_freq() {
  cent_freq_ = 0;
}
inline double ChannelIQDataDev::_internal_cent_freq() const {
  return cent_freq_;
}
inline double ChannelIQDataDev::cent_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.cent_freq)
  return _internal_cent_freq();
}
inline void ChannelIQDataDev::_internal_set_cent_freq(double value) {
  
  cent_freq_ = value;
}
inline void ChannelIQDataDev::set_cent_freq(double value) {
  _internal_set_cent_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.cent_freq)
}

// int32 status = 5;
inline void ChannelIQDataDev::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelIQDataDev::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.status)
  return _internal_status();
}
inline void ChannelIQDataDev::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void ChannelIQDataDev::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.status)
}

// double samp_rate = 6;
inline void ChannelIQDataDev::clear_samp_rate() {
  samp_rate_ = 0;
}
inline double ChannelIQDataDev::_internal_samp_rate() const {
  return samp_rate_;
}
inline double ChannelIQDataDev::samp_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.samp_rate)
  return _internal_samp_rate();
}
inline void ChannelIQDataDev::_internal_set_samp_rate(double value) {
  
  samp_rate_ = value;
}
inline void ChannelIQDataDev::set_samp_rate(double value) {
  _internal_set_samp_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.samp_rate)
}

// .zb.dcts.Timestamp time_stamp = 7;
inline bool ChannelIQDataDev::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool ChannelIQDataDev::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& ChannelIQDataDev::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& ChannelIQDataDev::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.time_stamp)
  return _internal_time_stamp();
}
inline void ChannelIQDataDev::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.time_stamp)
}
inline ::zb::dcts::Timestamp* ChannelIQDataDev::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* ChannelIQDataDev::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* ChannelIQDataDev::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* ChannelIQDataDev::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void ChannelIQDataDev::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.time_stamp)
}

// repeated uint32 data_iq = 8;
inline int ChannelIQDataDev::_internal_data_iq_size() const {
  return data_iq_.size();
}
inline int ChannelIQDataDev::data_iq_size() const {
  return _internal_data_iq_size();
}
inline void ChannelIQDataDev::clear_data_iq() {
  data_iq_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelIQDataDev::_internal_data_iq(int index) const {
  return data_iq_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelIQDataDev::data_iq(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.data_iq)
  return _internal_data_iq(index);
}
inline void ChannelIQDataDev::set_data_iq(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_iq_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.data_iq)
}
inline void ChannelIQDataDev::_internal_add_data_iq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  data_iq_.Add(value);
}
inline void ChannelIQDataDev::add_data_iq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_data_iq(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.data_iq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ChannelIQDataDev::_internal_data_iq() const {
  return data_iq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ChannelIQDataDev::data_iq() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.data_iq)
  return _internal_data_iq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ChannelIQDataDev::_internal_mutable_data_iq() {
  return &data_iq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ChannelIQDataDev::mutable_data_iq() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.data_iq)
  return _internal_mutable_data_iq();
}

// double hopping_freq = 10;
inline void ChannelIQDataDev::clear_hopping_freq() {
  hopping_freq_ = 0;
}
inline double ChannelIQDataDev::_internal_hopping_freq() const {
  return hopping_freq_;
}
inline double ChannelIQDataDev::hopping_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.hopping_freq)
  return _internal_hopping_freq();
}
inline void ChannelIQDataDev::_internal_set_hopping_freq(double value) {
  
  hopping_freq_ = value;
}
inline void ChannelIQDataDev::set_hopping_freq(double value) {
  _internal_set_hopping_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev.hopping_freq)
}

// -------------------------------------------------------------------

// MultiAcqResult_ResultHeader

// .zb.dcts.source.SourceId result_from = 1;
inline bool MultiAcqResult_ResultHeader::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool MultiAcqResult_ResultHeader::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& MultiAcqResult_ResultHeader::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& MultiAcqResult_ResultHeader::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.result_from)
  return _internal_result_from();
}
inline void MultiAcqResult_ResultHeader::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.result_from)
}
inline ::zb::dcts::source::SourceId* MultiAcqResult_ResultHeader::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* MultiAcqResult_ResultHeader::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* MultiAcqResult_ResultHeader::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* MultiAcqResult_ResultHeader::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.result_from)
  return _internal_mutable_result_from();
}
inline void MultiAcqResult_ResultHeader::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.result_from)
}

// uint32 sequence_number = 2;
inline void MultiAcqResult_ResultHeader::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiAcqResult_ResultHeader::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MultiAcqResult_ResultHeader::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.sequence_number)
  return _internal_sequence_number();
}
inline void MultiAcqResult_ResultHeader::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void MultiAcqResult_ResultHeader::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.sequence_number)
}

// .zb.dcts.Timestamp time_stamp = 3;
inline bool MultiAcqResult_ResultHeader::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool MultiAcqResult_ResultHeader::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& MultiAcqResult_ResultHeader::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& MultiAcqResult_ResultHeader::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.time_stamp)
  return _internal_time_stamp();
}
inline void MultiAcqResult_ResultHeader::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.time_stamp)
}
inline ::zb::dcts::Timestamp* MultiAcqResult_ResultHeader::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* MultiAcqResult_ResultHeader::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* MultiAcqResult_ResultHeader::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* MultiAcqResult_ResultHeader::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void MultiAcqResult_ResultHeader::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.time_stamp)
}

// .zb.dcts.Position device_position = 4;
inline bool MultiAcqResult_ResultHeader::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool MultiAcqResult_ResultHeader::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& MultiAcqResult_ResultHeader::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& MultiAcqResult_ResultHeader::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.device_position)
  return _internal_device_position();
}
inline void MultiAcqResult_ResultHeader::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.device_position)
}
inline ::zb::dcts::Position* MultiAcqResult_ResultHeader::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* MultiAcqResult_ResultHeader::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* MultiAcqResult_ResultHeader::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* MultiAcqResult_ResultHeader::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.device_position)
  return _internal_mutable_device_position();
}
inline void MultiAcqResult_ResultHeader::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.device_position)
}

// double cent_freq = 5;
inline void MultiAcqResult_ResultHeader::clear_cent_freq() {
  cent_freq_ = 0;
}
inline double MultiAcqResult_ResultHeader::_internal_cent_freq() const {
  return cent_freq_;
}
inline double MultiAcqResult_ResultHeader::cent_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.cent_freq)
  return _internal_cent_freq();
}
inline void MultiAcqResult_ResultHeader::_internal_set_cent_freq(double value) {
  
  cent_freq_ = value;
}
inline void MultiAcqResult_ResultHeader::set_cent_freq(double value) {
  _internal_set_cent_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.cent_freq)
}

// double samp_rate = 6;
inline void MultiAcqResult_ResultHeader::clear_samp_rate() {
  samp_rate_ = 0;
}
inline double MultiAcqResult_ResultHeader::_internal_samp_rate() const {
  return samp_rate_;
}
inline double MultiAcqResult_ResultHeader::samp_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.samp_rate)
  return _internal_samp_rate();
}
inline void MultiAcqResult_ResultHeader::_internal_set_samp_rate(double value) {
  
  samp_rate_ = value;
}
inline void MultiAcqResult_ResultHeader::set_samp_rate(double value) {
  _internal_set_samp_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.samp_rate)
}

// double qtz = 8;
inline void MultiAcqResult_ResultHeader::clear_qtz() {
  qtz_ = 0;
}
inline double MultiAcqResult_ResultHeader::_internal_qtz() const {
  return qtz_;
}
inline double MultiAcqResult_ResultHeader::qtz() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.qtz)
  return _internal_qtz();
}
inline void MultiAcqResult_ResultHeader::_internal_set_qtz(double value) {
  
  qtz_ = value;
}
inline void MultiAcqResult_ResultHeader::set_qtz(double value) {
  _internal_set_qtz(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.qtz)
}

// double spanIF = 9;
inline void MultiAcqResult_ResultHeader::clear_spanif() {
  spanif_ = 0;
}
inline double MultiAcqResult_ResultHeader::_internal_spanif() const {
  return spanif_;
}
inline double MultiAcqResult_ResultHeader::spanif() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.spanIF)
  return _internal_spanif();
}
inline void MultiAcqResult_ResultHeader::_internal_set_spanif(double value) {
  
  spanif_ = value;
}
inline void MultiAcqResult_ResultHeader::set_spanif(double value) {
  _internal_set_spanif(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader.spanIF)
}

// -------------------------------------------------------------------

// MultiAcqResult

// .zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;
inline bool MultiAcqResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MultiAcqResult::has_header() const {
  return _internal_has_header();
}
inline void MultiAcqResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader& MultiAcqResult::_internal_header() const {
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader*>(
      &::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqResult_ResultHeader_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader& MultiAcqResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.header)
  return _internal_header();
}
inline void MultiAcqResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.header)
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* MultiAcqResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* MultiAcqResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.header)
  
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* MultiAcqResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* MultiAcqResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.header)
  return _internal_mutable_header();
}
inline void MultiAcqResult::set_allocated_header(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqResult_ResultHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.header)
}

// repeated float spectrum = 2;
inline int MultiAcqResult::_internal_spectrum_size() const {
  return spectrum_.size();
}
inline int MultiAcqResult::spectrum_size() const {
  return _internal_spectrum_size();
}
inline void MultiAcqResult::clear_spectrum() {
  spectrum_.Clear();
}
inline float MultiAcqResult::_internal_spectrum(int index) const {
  return spectrum_.Get(index);
}
inline float MultiAcqResult::spectrum(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.spectrum)
  return _internal_spectrum(index);
}
inline void MultiAcqResult::set_spectrum(int index, float value) {
  spectrum_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.spectrum)
}
inline void MultiAcqResult::_internal_add_spectrum(float value) {
  spectrum_.Add(value);
}
inline void MultiAcqResult::add_spectrum(float value) {
  _internal_add_spectrum(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.spectrum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MultiAcqResult::_internal_spectrum() const {
  return spectrum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MultiAcqResult::spectrum() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.spectrum)
  return _internal_spectrum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MultiAcqResult::_internal_mutable_spectrum() {
  return &spectrum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MultiAcqResult::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.spectrum)
  return _internal_mutable_spectrum();
}

// repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;
inline int MultiAcqResult::_internal_channel_data_size() const {
  return channel_data_.size();
}
inline int MultiAcqResult::channel_data_size() const {
  return _internal_channel_data_size();
}
inline void MultiAcqResult::clear_channel_data() {
  channel_data_.Clear();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* MultiAcqResult::mutable_channel_data(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.channel_data)
  return channel_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >*
MultiAcqResult::mutable_channel_data() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.channel_data)
  return &channel_data_;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev& MultiAcqResult::_internal_channel_data(int index) const {
  return channel_data_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev& MultiAcqResult::channel_data(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.channel_data)
  return _internal_channel_data(index);
}
inline ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* MultiAcqResult::_internal_add_channel_data() {
  return channel_data_.Add();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev* MultiAcqResult::add_channel_data() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.channel_data)
  return _internal_add_channel_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::ChannelIQDataDev >&
MultiAcqResult::channel_data() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.channel_data)
  return channel_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannelAcq_2eproto
