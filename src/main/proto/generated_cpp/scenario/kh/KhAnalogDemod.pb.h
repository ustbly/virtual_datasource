// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhAnalogDemod.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhAnalogDemod_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhAnalogDemod_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
#include "scenario/kh/KhIQDataAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhAnalogDemod_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commAnalogDemod {
class AudioBlock;
class AudioBlockDefaultTypeInternal;
extern AudioBlockDefaultTypeInternal _AudioBlock_default_instance_;
class ChangeChannelRequest;
class ChangeChannelRequestDefaultTypeInternal;
extern ChangeChannelRequestDefaultTypeInternal _ChangeChannelRequest_default_instance_;
class ChannelAudio;
class ChannelAudioDefaultTypeInternal;
extern ChannelAudioDefaultTypeInternal _ChannelAudio_default_instance_;
class CommDemodResult;
class CommDemodResultDefaultTypeInternal;
extern CommDemodResultDefaultTypeInternal _CommDemodResult_default_instance_;
class CommDemodTaskRequest;
class CommDemodTaskRequestDefaultTypeInternal;
extern CommDemodTaskRequestDefaultTypeInternal _CommDemodTaskRequest_default_instance_;
class DemodChannel;
class DemodChannelDefaultTypeInternal;
extern DemodChannelDefaultTypeInternal _DemodChannel_default_instance_;
}  // namespace commAnalogDemod
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock>(Arena*);
template<> ::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::ChangeChannelRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio>(Arena*);
template<> ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::CommDemodResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::CommDemodTaskRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commAnalogDemod {

enum DemodType : int {
  NONE = 0,
  AM = 1,
  FM = 2,
  CW = 3,
  LSB = 4,
  USB = 5,
  PULSE = 6,
  ISB = 7,
  PM = 8,
  IQ = 9,
  DemodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DemodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DemodType_IsValid(int value);
constexpr DemodType DemodType_MIN = NONE;
constexpr DemodType DemodType_MAX = IQ;
constexpr int DemodType_ARRAYSIZE = DemodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DemodType_descriptor();
template<typename T>
inline const std::string& DemodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DemodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DemodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DemodType_descriptor(), enum_t_value);
}
inline bool DemodType_Parse(
    const std::string& name, DemodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DemodType>(
    DemodType_descriptor(), name, value);
}
// ===================================================================

class DemodChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel) */ {
 public:
  inline DemodChannel() : DemodChannel(nullptr) {};
  virtual ~DemodChannel();

  DemodChannel(const DemodChannel& from);
  DemodChannel(DemodChannel&& from) noexcept
    : DemodChannel() {
    *this = ::std::move(from);
  }

  inline DemodChannel& operator=(const DemodChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemodChannel& operator=(DemodChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemodChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemodChannel* internal_default_instance() {
    return reinterpret_cast<const DemodChannel*>(
               &_DemodChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemodChannel& a, DemodChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(DemodChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DemodChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemodChannel* New() const final {
    return CreateMaybeMessage<DemodChannel>(nullptr);
  }

  DemodChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemodChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemodChannel& from);
  void MergeFrom(const DemodChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemodChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.DemodChannel";
  }
  protected:
  explicit DemodChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignalBandFieldNumber = 2,
    kAudioSampleRateFieldNumber = 3,
    kBfoFieldNumber = 5,
    kDemodTypeFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::scenario::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::scenario::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::scenario::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::scenario::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::scenario::spectrum::SignalBand* signal_band);
  ::zb::dcts::scenario::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // double audio_sample_rate = 3;
  void clear_audio_sample_rate();
  double audio_sample_rate() const;
  void set_audio_sample_rate(double value);
  private:
  double _internal_audio_sample_rate() const;
  void _internal_set_audio_sample_rate(double value);
  public:

  // double bfo = 5;
  void clear_bfo();
  double bfo() const;
  void set_bfo(double value);
  private:
  double _internal_bfo() const;
  void _internal_set_bfo(double value);
  public:

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodType demod_type = 6;
  void clear_demod_type();
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodType demod_type() const;
  void set_demod_type(::zb::dcts::scenario::kh::commAnalogDemod::DemodType value);
  private:
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodType _internal_demod_type() const;
  void _internal_set_demod_type(::zb::dcts::scenario::kh::commAnalogDemod::DemodType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::zb::dcts::scenario::spectrum::SignalBand* signal_band_;
  double audio_sample_rate_;
  double bfo_;
  int demod_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// -------------------------------------------------------------------

class CommDemodTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest) */ {
 public:
  inline CommDemodTaskRequest() : CommDemodTaskRequest(nullptr) {};
  virtual ~CommDemodTaskRequest();

  CommDemodTaskRequest(const CommDemodTaskRequest& from);
  CommDemodTaskRequest(CommDemodTaskRequest&& from) noexcept
    : CommDemodTaskRequest() {
    *this = ::std::move(from);
  }

  inline CommDemodTaskRequest& operator=(const CommDemodTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDemodTaskRequest& operator=(CommDemodTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDemodTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDemodTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommDemodTaskRequest*>(
               &_CommDemodTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommDemodTaskRequest& a, CommDemodTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDemodTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDemodTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDemodTaskRequest* New() const final {
    return CreateMaybeMessage<CommDemodTaskRequest>(nullptr);
  }

  CommDemodTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDemodTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDemodTaskRequest& from);
  void MergeFrom(const CommDemodTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDemodTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest";
  }
  protected:
  explicit CommDemodTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kChannelFieldNumber = 4,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* release_acq_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 4;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& channel() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* release_channel();
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* mutable_channel();
  void set_allocated_channel(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel);
  private:
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& _internal_channel() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel);
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param_;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// -------------------------------------------------------------------

class AudioBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock) */ {
 public:
  inline AudioBlock() : AudioBlock(nullptr) {};
  virtual ~AudioBlock();

  AudioBlock(const AudioBlock& from);
  AudioBlock(AudioBlock&& from) noexcept
    : AudioBlock() {
    *this = ::std::move(from);
  }

  inline AudioBlock& operator=(const AudioBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBlock& operator=(AudioBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioBlock* internal_default_instance() {
    return reinterpret_cast<const AudioBlock*>(
               &_AudioBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioBlock& a, AudioBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioBlock* New() const final {
    return CreateMaybeMessage<AudioBlock>(nullptr);
  }

  AudioBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioBlock& from);
  void MergeFrom(const AudioBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.AudioBlock";
  }
  protected:
  explicit AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcmBitstreamFieldNumber = 3,
  };
  // repeated int32 pcm_bitstream = 3;
  int pcm_bitstream_size() const;
  private:
  int _internal_pcm_bitstream_size() const;
  public:
  void clear_pcm_bitstream();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcm_bitstream(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pcm_bitstream() const;
  void _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pcm_bitstream();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pcm_bitstream(int index) const;
  void set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pcm_bitstream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pcm_bitstream();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pcm_bitstream_;
  mutable std::atomic<int> _pcm_bitstream_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// -------------------------------------------------------------------

class ChannelAudio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio) */ {
 public:
  inline ChannelAudio() : ChannelAudio(nullptr) {};
  virtual ~ChannelAudio();

  ChannelAudio(const ChannelAudio& from);
  ChannelAudio(ChannelAudio&& from) noexcept
    : ChannelAudio() {
    *this = ::std::move(from);
  }

  inline ChannelAudio& operator=(const ChannelAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelAudio& operator=(ChannelAudio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelAudio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelAudio* internal_default_instance() {
    return reinterpret_cast<const ChannelAudio*>(
               &_ChannelAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChannelAudio& a, ChannelAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelAudio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelAudio* New() const final {
    return CreateMaybeMessage<ChannelAudio>(nullptr);
  }

  ChannelAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelAudio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelAudio& from);
  void MergeFrom(const ChannelAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelAudio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio";
  }
  protected:
  explicit ChannelAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .zb.dcts.scenario.kh.commAnalogDemod.AudioBlock blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >*
      mutable_blocks();
  private:
  const ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock& _internal_blocks(int index) const;
  ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* _internal_add_blocks();
  public:
  const ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock& blocks(int index) const;
  ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >&
      blocks() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// -------------------------------------------------------------------

class CommDemodResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult) */ {
 public:
  inline CommDemodResult() : CommDemodResult(nullptr) {};
  virtual ~CommDemodResult();

  CommDemodResult(const CommDemodResult& from);
  CommDemodResult(CommDemodResult&& from) noexcept
    : CommDemodResult() {
    *this = ::std::move(from);
  }

  inline CommDemodResult& operator=(const CommDemodResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDemodResult& operator=(CommDemodResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDemodResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDemodResult* internal_default_instance() {
    return reinterpret_cast<const CommDemodResult*>(
               &_CommDemodResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommDemodResult& a, CommDemodResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDemodResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDemodResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDemodResult* New() const final {
    return CreateMaybeMessage<CommDemodResult>(nullptr);
  }

  CommDemodResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDemodResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDemodResult& from);
  void MergeFrom(const CommDemodResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDemodResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult";
  }
  protected:
  explicit CommDemodResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChannelAudioFieldNumber = 2,
    kSpectrumViewsFieldNumber = 3,
  };
  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio channel_audio = 2;
  bool has_channel_audio() const;
  private:
  bool _internal_has_channel_audio() const;
  public:
  void clear_channel_audio();
  const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio& channel_audio() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* release_channel_audio();
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* mutable_channel_audio();
  void set_allocated_channel_audio(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* channel_audio);
  private:
  const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio& _internal_channel_audio() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* _internal_mutable_channel_audio();
  public:
  void unsafe_arena_set_allocated_channel_audio(
      ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* channel_audio);
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* unsafe_arena_release_channel_audio();

  // .zb.dcts.scenario.spectrum.View spectrum_views = 3;
  bool has_spectrum_views() const;
  private:
  bool _internal_has_spectrum_views() const;
  public:
  void clear_spectrum_views();
  const ::zb::dcts::scenario::spectrum::View& spectrum_views() const;
  ::zb::dcts::scenario::spectrum::View* release_spectrum_views();
  ::zb::dcts::scenario::spectrum::View* mutable_spectrum_views();
  void set_allocated_spectrum_views(::zb::dcts::scenario::spectrum::View* spectrum_views);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_spectrum_views() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_spectrum_views();
  public:
  void unsafe_arena_set_allocated_spectrum_views(
      ::zb::dcts::scenario::spectrum::View* spectrum_views);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_spectrum_views();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* channel_audio_;
  ::zb::dcts::scenario::spectrum::View* spectrum_views_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// -------------------------------------------------------------------

class ChangeChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest) */ {
 public:
  inline ChangeChannelRequest() : ChangeChannelRequest(nullptr) {};
  virtual ~ChangeChannelRequest();

  ChangeChannelRequest(const ChangeChannelRequest& from);
  ChangeChannelRequest(ChangeChannelRequest&& from) noexcept
    : ChangeChannelRequest() {
    *this = ::std::move(from);
  }

  inline ChangeChannelRequest& operator=(const ChangeChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeChannelRequest& operator=(ChangeChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeChannelRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeChannelRequest*>(
               &_ChangeChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangeChannelRequest& a, ChangeChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeChannelRequest* New() const final {
    return CreateMaybeMessage<ChangeChannelRequest>(nullptr);
  }

  ChangeChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeChannelRequest& from);
  void MergeFrom(const ChangeChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest";
  }
  protected:
  explicit ChangeChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhAnalogDemod_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kChannelFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& channel() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* release_channel();
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* mutable_channel();
  void set_allocated_channel(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel);
  private:
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& _internal_channel() const;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel);
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* unsafe_arena_release_channel();

  // .zb.dcts.scenario.kh.commIqData.ChangeRequestType type = 2;
  void clear_type();
  ::zb::dcts::scenario::kh::commIqData::ChangeRequestType type() const;
  void set_type(::zb::dcts::scenario::kh::commIqData::ChangeRequestType value);
  private:
  ::zb::dcts::scenario::kh::commIqData::ChangeRequestType _internal_type() const;
  void _internal_set_type(::zb::dcts::scenario::kh::commIqData::ChangeRequestType value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhAnalogDemod_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemodChannel

// string id = 1;
inline void DemodChannel::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DemodChannel::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
  return _internal_id();
}
inline void DemodChannel::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}
inline std::string* DemodChannel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
  return _internal_mutable_id();
}
inline const std::string& DemodChannel::_internal_id() const {
  return id_.Get();
}
inline void DemodChannel::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DemodChannel::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}
inline void DemodChannel::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}
inline void DemodChannel::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}
inline std::string* DemodChannel::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DemodChannel::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DemodChannel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}
inline std::string* DemodChannel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DemodChannel::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.id)
}

// .zb.dcts.scenario.spectrum.SignalBand signal_band = 2;
inline bool DemodChannel::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool DemodChannel::has_signal_band() const {
  return _internal_has_signal_band();
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DemodChannel::_internal_signal_band() const {
  const ::zb::dcts::scenario::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SignalBand*>(
      &::zb::dcts::scenario::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SignalBand& DemodChannel::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.signal_band)
  return _internal_signal_band();
}
inline void DemodChannel::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.signal_band)
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::release_signal_band() {
  auto temp = unsafe_arena_release_signal_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.signal_band)
  
  ::zb::dcts::scenario::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::scenario::spectrum::SignalBand* DemodChannel::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.signal_band)
  return _internal_mutable_signal_band();
}
inline void DemodChannel::set_allocated_signal_band(::zb::dcts::scenario::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band)->GetArena();
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.signal_band)
}

// double audio_sample_rate = 3;
inline void DemodChannel::clear_audio_sample_rate() {
  audio_sample_rate_ = 0;
}
inline double DemodChannel::_internal_audio_sample_rate() const {
  return audio_sample_rate_;
}
inline double DemodChannel::audio_sample_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.audio_sample_rate)
  return _internal_audio_sample_rate();
}
inline void DemodChannel::_internal_set_audio_sample_rate(double value) {
  
  audio_sample_rate_ = value;
}
inline void DemodChannel::set_audio_sample_rate(double value) {
  _internal_set_audio_sample_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.audio_sample_rate)
}

// double bfo = 5;
inline void DemodChannel::clear_bfo() {
  bfo_ = 0;
}
inline double DemodChannel::_internal_bfo() const {
  return bfo_;
}
inline double DemodChannel::bfo() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.bfo)
  return _internal_bfo();
}
inline void DemodChannel::_internal_set_bfo(double value) {
  
  bfo_ = value;
}
inline void DemodChannel::set_bfo(double value) {
  _internal_set_bfo(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.bfo)
}

// .zb.dcts.scenario.kh.commAnalogDemod.DemodType demod_type = 6;
inline void DemodChannel::clear_demod_type() {
  demod_type_ = 0;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodType DemodChannel::_internal_demod_type() const {
  return static_cast< ::zb::dcts::scenario::kh::commAnalogDemod::DemodType >(demod_type_);
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodType DemodChannel::demod_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.demod_type)
  return _internal_demod_type();
}
inline void DemodChannel::_internal_set_demod_type(::zb::dcts::scenario::kh::commAnalogDemod::DemodType value) {
  
  demod_type_ = value;
}
inline void DemodChannel::set_demod_type(::zb::dcts::scenario::kh::commAnalogDemod::DemodType value) {
  _internal_set_demod_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.DemodChannel.demod_type)
}

// -------------------------------------------------------------------

// CommDemodTaskRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool CommDemodTaskRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool CommDemodTaskRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& CommDemodTaskRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& CommDemodTaskRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.scenario)
  return _internal_scenario();
}
inline void CommDemodTaskRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* CommDemodTaskRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommDemodTaskRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommDemodTaskRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* CommDemodTaskRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.scenario)
  return _internal_mutable_scenario();
}
inline void CommDemodTaskRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.scenario)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
inline bool CommDemodTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommDemodTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommDemodTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommDemodTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.source_param)
  return _internal_source_param();
}
inline void CommDemodTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommDemodTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommDemodTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommDemodTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommDemodTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommDemodTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
inline bool CommDemodTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommDemodTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommDemodTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcquireParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommDemodTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommDemodTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommDemodTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommDemodTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommDemodTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommDemodTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommDemodTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.acq_param)
}

// .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 4;
inline bool CommDemodTaskRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CommDemodTaskRequest::has_channel() const {
  return _internal_has_channel();
}
inline void CommDemodTaskRequest::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& CommDemodTaskRequest::_internal_channel() const {
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel*>(
      &::zb::dcts::scenario::kh::commAnalogDemod::_DemodChannel_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& CommDemodTaskRequest::channel() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.channel)
  return _internal_channel();
}
inline void CommDemodTaskRequest::unsafe_arena_set_allocated_channel(
    ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.channel)
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* CommDemodTaskRequest::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* CommDemodTaskRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.channel)
  
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* CommDemodTaskRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* CommDemodTaskRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.channel)
  return _internal_mutable_channel();
}
inline void CommDemodTaskRequest::set_allocated_channel(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodTaskRequest.channel)
}

// -------------------------------------------------------------------

// AudioBlock

// repeated int32 pcm_bitstream = 3;
inline int AudioBlock::_internal_pcm_bitstream_size() const {
  return pcm_bitstream_.size();
}
inline int AudioBlock::pcm_bitstream_size() const {
  return _internal_pcm_bitstream_size();
}
inline void AudioBlock::clear_pcm_bitstream() {
  pcm_bitstream_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::_internal_pcm_bitstream(int index) const {
  return pcm_bitstream_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::pcm_bitstream(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream(index);
}
inline void AudioBlock::set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock.pcm_bitstream)
}
inline void AudioBlock::_internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Add(value);
}
inline void AudioBlock::add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pcm_bitstream(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock.pcm_bitstream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::_internal_pcm_bitstream() const {
  return pcm_bitstream_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::pcm_bitstream() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::_internal_mutable_pcm_bitstream() {
  return &pcm_bitstream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::mutable_pcm_bitstream() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commAnalogDemod.AudioBlock.pcm_bitstream)
  return _internal_mutable_pcm_bitstream();
}

// -------------------------------------------------------------------

// ChannelAudio

// string id = 1;
inline void ChannelAudio::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChannelAudio::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
  return _internal_id();
}
inline void ChannelAudio::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}
inline std::string* ChannelAudio::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
  return _internal_mutable_id();
}
inline const std::string& ChannelAudio::_internal_id() const {
  return id_.Get();
}
inline void ChannelAudio::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChannelAudio::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}
inline void ChannelAudio::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}
inline void ChannelAudio::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}
inline std::string* ChannelAudio::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChannelAudio::release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelAudio::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}
inline std::string* ChannelAudio::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChannelAudio::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.id)
}

// repeated .zb.dcts.scenario.kh.commAnalogDemod.AudioBlock blocks = 2;
inline int ChannelAudio::_internal_blocks_size() const {
  return blocks_.size();
}
inline int ChannelAudio::blocks_size() const {
  return _internal_blocks_size();
}
inline void ChannelAudio::clear_blocks() {
  blocks_.Clear();
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* ChannelAudio::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >*
ChannelAudio::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.blocks)
  return &blocks_;
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock& ChannelAudio::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock& ChannelAudio::blocks(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.blocks)
  return _internal_blocks(index);
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* ChannelAudio::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock* ChannelAudio::add_blocks() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commAnalogDemod::AudioBlock >&
ChannelAudio::blocks() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// CommDemodResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool CommDemodResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommDemodResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& CommDemodResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& CommDemodResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.header)
  return _internal_header();
}
inline void CommDemodResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* CommDemodResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDemodResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDemodResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDemodResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.header)
  return _internal_mutable_header();
}
inline void CommDemodResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.header)
}

// .zb.dcts.scenario.kh.commAnalogDemod.ChannelAudio channel_audio = 2;
inline bool CommDemodResult::_internal_has_channel_audio() const {
  return this != internal_default_instance() && channel_audio_ != nullptr;
}
inline bool CommDemodResult::has_channel_audio() const {
  return _internal_has_channel_audio();
}
inline void CommDemodResult::clear_channel_audio() {
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio& CommDemodResult::_internal_channel_audio() const {
  const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* p = channel_audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio*>(
      &::zb::dcts::scenario::kh::commAnalogDemod::_ChannelAudio_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio& CommDemodResult::channel_audio() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.channel_audio)
  return _internal_channel_audio();
}
inline void CommDemodResult::unsafe_arena_set_allocated_channel_audio(
    ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* channel_audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_audio_);
  }
  channel_audio_ = channel_audio;
  if (channel_audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.channel_audio)
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* CommDemodResult::release_channel_audio() {
  auto temp = unsafe_arena_release_channel_audio();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* CommDemodResult::unsafe_arena_release_channel_audio() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.channel_audio)
  
  ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* temp = channel_audio_;
  channel_audio_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* CommDemodResult::_internal_mutable_channel_audio() {
  
  if (channel_audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio>(GetArena());
    channel_audio_ = p;
  }
  return channel_audio_;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* CommDemodResult::mutable_channel_audio() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.channel_audio)
  return _internal_mutable_channel_audio();
}
inline void CommDemodResult::set_allocated_channel_audio(::zb::dcts::scenario::kh::commAnalogDemod::ChannelAudio* channel_audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_audio_;
  }
  if (channel_audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_audio);
    if (message_arena != submessage_arena) {
      channel_audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_audio, submessage_arena);
    }
    
  } else {
    
  }
  channel_audio_ = channel_audio;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.channel_audio)
}

// .zb.dcts.scenario.spectrum.View spectrum_views = 3;
inline bool CommDemodResult::_internal_has_spectrum_views() const {
  return this != internal_default_instance() && spectrum_views_ != nullptr;
}
inline bool CommDemodResult::has_spectrum_views() const {
  return _internal_has_spectrum_views();
}
inline const ::zb::dcts::scenario::spectrum::View& CommDemodResult::_internal_spectrum_views() const {
  const ::zb::dcts::scenario::spectrum::View* p = spectrum_views_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& CommDemodResult::spectrum_views() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.spectrum_views)
  return _internal_spectrum_views();
}
inline void CommDemodResult::unsafe_arena_set_allocated_spectrum_views(
    ::zb::dcts::scenario::spectrum::View* spectrum_views) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_views_);
  }
  spectrum_views_ = spectrum_views;
  if (spectrum_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.spectrum_views)
}
inline ::zb::dcts::scenario::spectrum::View* CommDemodResult::release_spectrum_views() {
  auto temp = unsafe_arena_release_spectrum_views();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDemodResult::unsafe_arena_release_spectrum_views() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.spectrum_views)
  
  ::zb::dcts::scenario::spectrum::View* temp = spectrum_views_;
  spectrum_views_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDemodResult::_internal_mutable_spectrum_views() {
  
  if (spectrum_views_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    spectrum_views_ = p;
  }
  return spectrum_views_;
}
inline ::zb::dcts::scenario::spectrum::View* CommDemodResult::mutable_spectrum_views() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.spectrum_views)
  return _internal_mutable_spectrum_views();
}
inline void CommDemodResult::set_allocated_spectrum_views(::zb::dcts::scenario::spectrum::View* spectrum_views) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_views_);
  }
  if (spectrum_views) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_views)->GetArena();
    if (message_arena != submessage_arena) {
      spectrum_views = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum_views, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_views_ = spectrum_views;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.CommDemodResult.spectrum_views)
}

// -------------------------------------------------------------------

// ChangeChannelRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ChangeChannelRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ChangeChannelRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeChannelRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeChannelRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.responser)
  return _internal_responser();
}
inline void ChangeChannelRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeChannelRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeChannelRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeChannelRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeChannelRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.responser)
  return _internal_mutable_responser();
}
inline void ChangeChannelRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.responser)
}

// .zb.dcts.scenario.kh.commIqData.ChangeRequestType type = 2;
inline void ChangeChannelRequest::clear_type() {
  type_ = 0;
}
inline ::zb::dcts::scenario::kh::commIqData::ChangeRequestType ChangeChannelRequest::_internal_type() const {
  return static_cast< ::zb::dcts::scenario::kh::commIqData::ChangeRequestType >(type_);
}
inline ::zb::dcts::scenario::kh::commIqData::ChangeRequestType ChangeChannelRequest::type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.type)
  return _internal_type();
}
inline void ChangeChannelRequest::_internal_set_type(::zb::dcts::scenario::kh::commIqData::ChangeRequestType value) {
  
  type_ = value;
}
inline void ChangeChannelRequest::set_type(::zb::dcts::scenario::kh::commIqData::ChangeRequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.type)
}

// .zb.dcts.scenario.kh.commAnalogDemod.DemodChannel channel = 3;
inline bool ChangeChannelRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool ChangeChannelRequest::has_channel() const {
  return _internal_has_channel();
}
inline void ChangeChannelRequest::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& ChangeChannelRequest::_internal_channel() const {
  const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel*>(
      &::zb::dcts::scenario::kh::commAnalogDemod::_DemodChannel_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel& ChangeChannelRequest::channel() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.channel)
  return _internal_channel();
}
inline void ChangeChannelRequest::unsafe_arena_set_allocated_channel(
    ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.channel)
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* ChangeChannelRequest::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* ChangeChannelRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.channel)
  
  ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* ChangeChannelRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* ChangeChannelRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.channel)
  return _internal_mutable_channel();
}
inline void ChangeChannelRequest::set_allocated_channel(::zb::dcts::scenario::kh::commAnalogDemod::DemodChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel);
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commAnalogDemod.ChangeChannelRequest.channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commAnalogDemod
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commAnalogDemod::DemodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commAnalogDemod::DemodType>() {
  return ::zb::dcts::scenario::kh::commAnalogDemod::DemodType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhAnalogDemod_2eproto
