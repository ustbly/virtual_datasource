// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/kh/KhCommDirectionCali.proto
#ifndef GRPC_scenario_2fkh_2fKhCommDirectionCali_2eproto__INCLUDED
#define GRPC_scenario_2fkh_2fKhCommDirectionCali_2eproto__INCLUDED

#include "scenario/kh/KhCommDirectionCali.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {

class CommDirectionCaliService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.scenario.kh.commDirection.CommDirectionCaliService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncStartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> GetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(GetFixResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> AsyncGetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(AsyncGetFixResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> PrepareAsyncGetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(PrepareAsyncGetFixResultRaw(context, request, cq));
    }
    virtual ::grpc::Status StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncStopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncStopTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStopTaskRaw(context, request, cq));
    }
    virtual ::grpc::Status Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncChange(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncChangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncChange(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncChangeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFixResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* reactor) = 0;
      #else
      virtual void GetFixResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* reactor) = 0;
      #endif
      virtual void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* GetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* AsyncGetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* PrepareAsyncGetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncStartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStartTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> GetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(GetFixResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> AsyncGetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(AsyncGetFixResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>> PrepareAsyncGetFixResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>>(PrepareAsyncGetFixResultRaw(context, request, cq));
    }
    ::grpc::Status StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncStopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncStopTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncStopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncStopTaskRaw(context, request, cq));
    }
    ::grpc::Status Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncChange(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncChangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncChange(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncChangeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFixResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* reactor) override;
      #else
      void GetFixResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* reactor) override;
      #endif
      void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* GetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* AsyncGetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* PrepareAsyncGetFixResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFixResult_;
    const ::grpc::internal::RpcMethod rpcmethod_StopTask_;
    const ::grpc::internal::RpcMethod rpcmethod_Change_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status GetFixResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* writer);
    virtual ::grpc::Status StopTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status Change(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartTask() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTask(::grpc::ServerContext* context, ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFixResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFixResult(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopTask() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTask(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Change() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChange(::grpc::ServerContext* context, ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartTask<WithAsyncMethod_GetFixResult<WithAsyncMethod_StopTask<WithAsyncMethod_Change<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->StartTask(context, request, response); }));}
    void SetMessageAllocatorFor_StartTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFixResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request) { return this->GetFixResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* GetFixResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* GetFixResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->StopTask(context, request, response); }));}
    void SetMessageAllocatorFor_StopTask(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopTask(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Change() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->Change(context, request, response); }));}
    void SetMessageAllocatorFor_Change(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Change(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Change(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartTask<ExperimentalWithCallbackMethod_GetFixResult<ExperimentalWithCallbackMethod_StopTask<ExperimentalWithCallbackMethod_Change<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartTask<ExperimentalWithCallbackMethod_GetFixResult<ExperimentalWithCallbackMethod_StopTask<ExperimentalWithCallbackMethod_Change<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartTask() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFixResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopTask() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Change() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartTask() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFixResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFixResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopTask() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Change() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFixResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetFixResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetFixResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetFixResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopTask() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopTask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopTask(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Change() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Change(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Change(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Change(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartTask() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_StartTask<BaseClass>::StreamedStartTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopTask() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_StopTask<BaseClass>::StreamedStopTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopTask(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Change : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Change() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_Change<BaseClass>::StreamedChange, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Change() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Change(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartTask<WithStreamedUnaryMethod_StopTask<WithStreamedUnaryMethod_Change<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetFixResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetFixResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>(std::bind(&WithSplitStreamingMethod_GetFixResult<BaseClass>::StreamedGetFixResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetFixResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFixResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetFixResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetFixResult<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartTask<WithSplitStreamingMethod_GetFixResult<WithStreamedUnaryMethod_StopTask<WithStreamedUnaryMethod_Change<Service > > > > StreamedService;
};

}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_scenario_2fkh_2fKhCommDirectionCali_2eproto__INCLUDED
