// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhSpectrumAcq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpectrumAcq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpectrumAcq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "source/source.pb.h"
#include "source/kh/KhContext.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class FequecyPoints;
class FequecyPointsDefaultTypeInternal;
extern FequecyPointsDefaultTypeInternal _FequecyPoints_default_instance_;
class SpectrumAcqParam;
class SpectrumAcqParamDefaultTypeInternal;
extern SpectrumAcqParamDefaultTypeInternal _SpectrumAcqParam_default_instance_;
class SpectrumAcqParam_OthersEntry_DoNotUse;
class SpectrumAcqParam_OthersEntry_DoNotUseDefaultTypeInternal;
extern SpectrumAcqParam_OthersEntry_DoNotUseDefaultTypeInternal _SpectrumAcqParam_OthersEntry_DoNotUse_default_instance_;
class SpectrumAcqResult;
class SpectrumAcqResultDefaultTypeInternal;
extern SpectrumAcqResultDefaultTypeInternal _SpectrumAcqResult_default_instance_;
class SpectrumAcqSource;
class SpectrumAcqSourceDefaultTypeInternal;
extern SpectrumAcqSourceDefaultTypeInternal _SpectrumAcqSource_default_instance_;
class SpectrumAcqSource_ParamsEntry_DoNotUse;
class SpectrumAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal;
extern SpectrumAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal _SpectrumAcqSource_ParamsEntry_DoNotUse_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::FequecyPoints>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {

enum RunMode : int {
  REALTIME = 0,
  SWEEP = 1,
  SEAMLESS = 2,
  HSCAN = 3,
  SEARCH = 4,
  DISCRETE = 5,
  RunMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RunMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RunMode_IsValid(int value);
constexpr RunMode RunMode_MIN = REALTIME;
constexpr RunMode RunMode_MAX = DISCRETE;
constexpr int RunMode_ARRAYSIZE = RunMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunMode_descriptor();
template<typename T>
inline const std::string& RunMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunMode_descriptor(), enum_t_value);
}
inline bool RunMode_Parse(
    const std::string& name, RunMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunMode>(
    RunMode_descriptor(), name, value);
}
// ===================================================================

class SpectrumAcqSource_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpectrumAcqSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpectrumAcqSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SpectrumAcqSource_ParamsEntry_DoNotUse();
  SpectrumAcqSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SpectrumAcqSource_ParamsEntry_DoNotUse& other);
  static const SpectrumAcqSource_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SpectrumAcqSource_ParamsEntry_DoNotUse*>(&_SpectrumAcqSource_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class SpectrumAcqSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource) */ {
 public:
  inline SpectrumAcqSource() : SpectrumAcqSource(nullptr) {};
  virtual ~SpectrumAcqSource();

  SpectrumAcqSource(const SpectrumAcqSource& from);
  SpectrumAcqSource(SpectrumAcqSource&& from) noexcept
    : SpectrumAcqSource() {
    *this = ::std::move(from);
  }

  inline SpectrumAcqSource& operator=(const SpectrumAcqSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumAcqSource& operator=(SpectrumAcqSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumAcqSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectrumAcqSource* internal_default_instance() {
    return reinterpret_cast<const SpectrumAcqSource*>(
               &_SpectrumAcqSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpectrumAcqSource& a, SpectrumAcqSource& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumAcqSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumAcqSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumAcqSource* New() const final {
    return CreateMaybeMessage<SpectrumAcqSource>(nullptr);
  }

  SpectrumAcqSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumAcqSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumAcqSource& from);
  void MergeFrom(const SpectrumAcqSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumAcqSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource";
  }
  protected:
  explicit SpectrumAcqSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // map<string, string> params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SpectrumAcqSource_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::zb::dcts::source::SourceId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto;
};
// -------------------------------------------------------------------

class FequecyPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.FequecyPoints) */ {
 public:
  inline FequecyPoints() : FequecyPoints(nullptr) {};
  virtual ~FequecyPoints();

  FequecyPoints(const FequecyPoints& from);
  FequecyPoints(FequecyPoints&& from) noexcept
    : FequecyPoints() {
    *this = ::std::move(from);
  }

  inline FequecyPoints& operator=(const FequecyPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline FequecyPoints& operator=(FequecyPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FequecyPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FequecyPoints* internal_default_instance() {
    return reinterpret_cast<const FequecyPoints*>(
               &_FequecyPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FequecyPoints& a, FequecyPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(FequecyPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FequecyPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FequecyPoints* New() const final {
    return CreateMaybeMessage<FequecyPoints>(nullptr);
  }

  FequecyPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FequecyPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FequecyPoints& from);
  void MergeFrom(const FequecyPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FequecyPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.FequecyPoints";
  }
  protected:
  explicit FequecyPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqPointsFieldNumber = 1,
  };
  // repeated double freq_points = 1;
  int freq_points_size() const;
  private:
  int _internal_freq_points_size() const;
  public:
  void clear_freq_points();
  private:
  double _internal_freq_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_freq_points() const;
  void _internal_add_freq_points(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_freq_points();
  public:
  double freq_points(int index) const;
  void set_freq_points(int index, double value);
  void add_freq_points(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      freq_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_freq_points();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > freq_points_;
  mutable std::atomic<int> _freq_points_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto;
};
// -------------------------------------------------------------------

class SpectrumAcqParam_OthersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpectrumAcqParam_OthersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SpectrumAcqParam_OthersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SpectrumAcqParam_OthersEntry_DoNotUse();
  SpectrumAcqParam_OthersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SpectrumAcqParam_OthersEntry_DoNotUse& other);
  static const SpectrumAcqParam_OthersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SpectrumAcqParam_OthersEntry_DoNotUse*>(&_SpectrumAcqParam_OthersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.OthersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.OthersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class SpectrumAcqParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam) */ {
 public:
  inline SpectrumAcqParam() : SpectrumAcqParam(nullptr) {};
  virtual ~SpectrumAcqParam();

  SpectrumAcqParam(const SpectrumAcqParam& from);
  SpectrumAcqParam(SpectrumAcqParam&& from) noexcept
    : SpectrumAcqParam() {
    *this = ::std::move(from);
  }

  inline SpectrumAcqParam& operator=(const SpectrumAcqParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumAcqParam& operator=(SpectrumAcqParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumAcqParam& default_instance();

  enum FrequencyCase {
    kFreqSpan = 2,
    kFreqPoints = 3,
    FREQUENCY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectrumAcqParam* internal_default_instance() {
    return reinterpret_cast<const SpectrumAcqParam*>(
               &_SpectrumAcqParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpectrumAcqParam& a, SpectrumAcqParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumAcqParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumAcqParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumAcqParam* New() const final {
    return CreateMaybeMessage<SpectrumAcqParam>(nullptr);
  }

  SpectrumAcqParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumAcqParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumAcqParam& from);
  void MergeFrom(const SpectrumAcqParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumAcqParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam";
  }
  protected:
  explicit SpectrumAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOthersFieldNumber = 20,
    kWinParamsFieldNumber = 8,
    kModeFieldNumber = 1,
    kDetectModeFieldNumber = 5,
    kRbwFieldNumber = 4,
    kAttenuationGainFieldNumber = 7,
    kChannelModeFieldNumber = 6,
    kResidenceTimeFieldNumber = 11,
    kRfLimitFieldNumber = 9,
    kSearchStepFieldNumber = 10,
    kSampleIntervalFieldNumber = 12,
    kResultIntervalFieldNumber = 13,
    kExpectedPointsFieldNumber = 15,
    kAverageCountFieldNumber = 16,
    kAntennaFieldNumber = 17,
    kAntennaModeFieldNumber = 18,
    kFftDetectModeFieldNumber = 19,
    kFreqSpanFieldNumber = 2,
    kFreqPointsFieldNumber = 3,
  };
  // map<string, string> others = 20;
  int others_size() const;
  private:
  int _internal_others_size() const;
  public:
  void clear_others();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_others() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_others();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      others() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_others();

  // .zb.dcts.source.kh.WindowParams win_params = 8;
  bool has_win_params() const;
  private:
  bool _internal_has_win_params() const;
  public:
  void clear_win_params();
  const ::zb::dcts::source::kh::WindowParams& win_params() const;
  ::zb::dcts::source::kh::WindowParams* release_win_params();
  ::zb::dcts::source::kh::WindowParams* mutable_win_params();
  void set_allocated_win_params(::zb::dcts::source::kh::WindowParams* win_params);
  private:
  const ::zb::dcts::source::kh::WindowParams& _internal_win_params() const;
  ::zb::dcts::source::kh::WindowParams* _internal_mutable_win_params();
  public:
  void unsafe_arena_set_allocated_win_params(
      ::zb::dcts::source::kh::WindowParams* win_params);
  ::zb::dcts::source::kh::WindowParams* unsafe_arena_release_win_params();

  // .zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;
  void clear_mode();
  ::zb::dcts::scenario::kh::commSpectrum::RunMode mode() const;
  void set_mode(::zb::dcts::scenario::kh::commSpectrum::RunMode value);
  private:
  ::zb::dcts::scenario::kh::commSpectrum::RunMode _internal_mode() const;
  void _internal_set_mode(::zb::dcts::scenario::kh::commSpectrum::RunMode value);
  public:

  // .zb.dcts.source.kh.DetectMode detect_mode = 5;
  void clear_detect_mode();
  ::zb::dcts::source::kh::DetectMode detect_mode() const;
  void set_detect_mode(::zb::dcts::source::kh::DetectMode value);
  private:
  ::zb::dcts::source::kh::DetectMode _internal_detect_mode() const;
  void _internal_set_detect_mode(::zb::dcts::source::kh::DetectMode value);
  public:

  // double rbw = 4;
  void clear_rbw();
  double rbw() const;
  void set_rbw(double value);
  private:
  double _internal_rbw() const;
  void _internal_set_rbw(double value);
  public:

  // double attenuation_gain = 7;
  void clear_attenuation_gain();
  double attenuation_gain() const;
  void set_attenuation_gain(double value);
  private:
  double _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(double value);
  public:

  // .zb.dcts.source.kh.ChannelMode channel_mode = 6;
  void clear_channel_mode();
  ::zb::dcts::source::kh::ChannelMode channel_mode() const;
  void set_channel_mode(::zb::dcts::source::kh::ChannelMode value);
  private:
  ::zb::dcts::source::kh::ChannelMode _internal_channel_mode() const;
  void _internal_set_channel_mode(::zb::dcts::source::kh::ChannelMode value);
  public:

  // int32 residence_time = 11;
  void clear_residence_time();
  ::PROTOBUF_NAMESPACE_ID::int32 residence_time() const;
  void set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_residence_time() const;
  void _internal_set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double rf_limit = 9;
  void clear_rf_limit();
  double rf_limit() const;
  void set_rf_limit(double value);
  private:
  double _internal_rf_limit() const;
  void _internal_set_rf_limit(double value);
  public:

  // double search_step = 10;
  void clear_search_step();
  double search_step() const;
  void set_search_step(double value);
  private:
  double _internal_search_step() const;
  void _internal_set_search_step(double value);
  public:

  // int32 sample_interval = 12;
  void clear_sample_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_interval() const;
  void set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_interval() const;
  void _internal_set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result_interval = 13;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 15;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 average_count = 16;
  void clear_average_count();
  ::PROTOBUF_NAMESPACE_ID::int32 average_count() const;
  void set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_count() const;
  void _internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 17;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;
  void clear_antenna_mode();
  ::zb::dcts::source::kh::AntennaControlMode antenna_mode() const;
  void set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value);
  private:
  ::zb::dcts::source::kh::AntennaControlMode _internal_antenna_mode() const;
  void _internal_set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value);
  public:

  // .zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;
  void clear_fft_detect_mode();
  ::zb::dcts::source::kh::FFTDetectMode fft_detect_mode() const;
  void set_fft_detect_mode(::zb::dcts::source::kh::FFTDetectMode value);
  private:
  ::zb::dcts::source::kh::FFTDetectMode _internal_fft_detect_mode() const;
  void _internal_set_fft_detect_mode(::zb::dcts::source::kh::FFTDetectMode value);
  public:

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::scenario::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::scenario::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // .zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;
  bool has_freq_points() const;
  private:
  bool _internal_has_freq_points() const;
  public:
  void clear_freq_points();
  const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints& freq_points() const;
  ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* release_freq_points();
  ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* mutable_freq_points();
  void set_allocated_freq_points(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints& _internal_freq_points() const;
  ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* _internal_mutable_freq_points();
  public:
  void unsafe_arena_set_allocated_freq_points(
      ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points);
  ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* unsafe_arena_release_freq_points();

  void clear_frequency();
  FrequencyCase frequency_case() const;
  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
 private:
  class _Internal;
  void set_has_freq_span();
  void set_has_freq_points();

  inline bool has_frequency() const;
  inline void clear_has_frequency();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SpectrumAcqParam_OthersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > others_;
  ::zb::dcts::source::kh::WindowParams* win_params_;
  int mode_;
  int detect_mode_;
  double rbw_;
  double attenuation_gain_;
  int channel_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 residence_time_;
  double rf_limit_;
  double search_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  int antenna_mode_;
  int fft_detect_mode_;
  union FrequencyUnion {
    FrequencyUnion() {}
    ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
    ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points_;
  } frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto;
};
// -------------------------------------------------------------------

class SpectrumAcqResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult) */ {
 public:
  inline SpectrumAcqResult() : SpectrumAcqResult(nullptr) {};
  virtual ~SpectrumAcqResult();

  SpectrumAcqResult(const SpectrumAcqResult& from);
  SpectrumAcqResult(SpectrumAcqResult&& from) noexcept
    : SpectrumAcqResult() {
    *this = ::std::move(from);
  }

  inline SpectrumAcqResult& operator=(const SpectrumAcqResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumAcqResult& operator=(SpectrumAcqResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumAcqResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectrumAcqResult* internal_default_instance() {
    return reinterpret_cast<const SpectrumAcqResult*>(
               &_SpectrumAcqResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SpectrumAcqResult& a, SpectrumAcqResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumAcqResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumAcqResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumAcqResult* New() const final {
    return CreateMaybeMessage<SpectrumAcqResult>(nullptr);
  }

  SpectrumAcqResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumAcqResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumAcqResult& from);
  void MergeFrom(const SpectrumAcqResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumAcqResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult";
  }
  protected:
  explicit SpectrumAcqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumViewFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kSegHeaderFieldNumber = 4,
    kBandFieldNumber = 5,
  };
  // repeated float spectrum_view = 6;
  int spectrum_view_size() const;
  private:
  int _internal_spectrum_view_size() const;
  public:
  void clear_spectrum_view();
  private:
  float _internal_spectrum_view(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spectrum_view() const;
  void _internal_add_spectrum_view(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spectrum_view();
  public:
  float spectrum_view(int index) const;
  void set_spectrum_view(int index, float value);
  void add_spectrum_view(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spectrum_view() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spectrum_view();

  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  bool has_seg_header() const;
  private:
  bool _internal_has_seg_header() const;
  public:
  void clear_seg_header();
  const ::zb::dcts::scenario::spectrum::SegmentHeader& seg_header() const;
  ::zb::dcts::scenario::spectrum::SegmentHeader* release_seg_header();
  ::zb::dcts::scenario::spectrum::SegmentHeader* mutable_seg_header();
  void set_allocated_seg_header(::zb::dcts::scenario::spectrum::SegmentHeader* seg_header);
  private:
  const ::zb::dcts::scenario::spectrum::SegmentHeader& _internal_seg_header() const;
  ::zb::dcts::scenario::spectrum::SegmentHeader* _internal_mutable_seg_header();
  public:
  void unsafe_arena_set_allocated_seg_header(
      ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header);
  ::zb::dcts::scenario::spectrum::SegmentHeader* unsafe_arena_release_seg_header();

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  bool has_band() const;
  private:
  bool _internal_has_band() const;
  public:
  void clear_band();
  const ::zb::dcts::scenario::spectrum::FrequencyBand& band() const;
  ::zb::dcts::scenario::spectrum::FrequencyBand* release_band();
  ::zb::dcts::scenario::spectrum::FrequencyBand* mutable_band();
  void set_allocated_band(::zb::dcts::scenario::spectrum::FrequencyBand* band);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencyBand& _internal_band() const;
  ::zb::dcts::scenario::spectrum::FrequencyBand* _internal_mutable_band();
  public:
  void unsafe_arena_set_allocated_band(
      ::zb::dcts::scenario::spectrum::FrequencyBand* band);
  ::zb::dcts::scenario::spectrum::FrequencyBand* unsafe_arena_release_band();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spectrum_view_;
  mutable std::atomic<int> _spectrum_view_cached_byte_size_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header_;
  ::zb::dcts::scenario::spectrum::FrequencyBand* band_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SpectrumAcqSource

// .zb.dcts.source.SourceId id = 1;
inline bool SpectrumAcqSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool SpectrumAcqSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& SpectrumAcqSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& SpectrumAcqSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.id)
  return _internal_id();
}
inline void SpectrumAcqSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.id)
}
inline ::zb::dcts::source::SourceId* SpectrumAcqSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* SpectrumAcqSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* SpectrumAcqSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* SpectrumAcqSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.id)
  return _internal_mutable_id();
}
inline void SpectrumAcqSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.id)
}

// map<string, string> params = 6;
inline int SpectrumAcqSource::_internal_params_size() const {
  return params_.size();
}
inline int SpectrumAcqSource::params_size() const {
  return _internal_params_size();
}
inline void SpectrumAcqSource::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SpectrumAcqSource::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SpectrumAcqSource::params() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SpectrumAcqSource::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SpectrumAcqSource::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// FequecyPoints

// repeated double freq_points = 1;
inline int FequecyPoints::_internal_freq_points_size() const {
  return freq_points_.size();
}
inline int FequecyPoints::freq_points_size() const {
  return _internal_freq_points_size();
}
inline void FequecyPoints::clear_freq_points() {
  freq_points_.Clear();
}
inline double FequecyPoints::_internal_freq_points(int index) const {
  return freq_points_.Get(index);
}
inline double FequecyPoints::freq_points(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FequecyPoints.freq_points)
  return _internal_freq_points(index);
}
inline void FequecyPoints::set_freq_points(int index, double value) {
  freq_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.FequecyPoints.freq_points)
}
inline void FequecyPoints::_internal_add_freq_points(double value) {
  freq_points_.Add(value);
}
inline void FequecyPoints::add_freq_points(double value) {
  _internal_add_freq_points(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commSpectrum.FequecyPoints.freq_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FequecyPoints::_internal_freq_points() const {
  return freq_points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FequecyPoints::freq_points() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commSpectrum.FequecyPoints.freq_points)
  return _internal_freq_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FequecyPoints::_internal_mutable_freq_points() {
  return &freq_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FequecyPoints::mutable_freq_points() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commSpectrum.FequecyPoints.freq_points)
  return _internal_mutable_freq_points();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SpectrumAcqParam

// .zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;
inline void SpectrumAcqParam::clear_mode() {
  mode_ = 0;
}
inline ::zb::dcts::scenario::kh::commSpectrum::RunMode SpectrumAcqParam::_internal_mode() const {
  return static_cast< ::zb::dcts::scenario::kh::commSpectrum::RunMode >(mode_);
}
inline ::zb::dcts::scenario::kh::commSpectrum::RunMode SpectrumAcqParam::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.mode)
  return _internal_mode();
}
inline void SpectrumAcqParam::_internal_set_mode(::zb::dcts::scenario::kh::commSpectrum::RunMode value) {
  
  mode_ = value;
}
inline void SpectrumAcqParam::set_mode(::zb::dcts::scenario::kh::commSpectrum::RunMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.mode)
}

// .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
inline bool SpectrumAcqParam::_internal_has_freq_span() const {
  return frequency_case() == kFreqSpan;
}
inline bool SpectrumAcqParam::has_freq_span() const {
  return _internal_has_freq_span();
}
inline void SpectrumAcqParam::set_has_freq_span() {
  _oneof_case_[0] = kFreqSpan;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* SpectrumAcqParam::release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
  if (_internal_has_freq_span()) {
    clear_has_frequency();
      ::zb::dcts::scenario::spectrum::FrequencySpan* temp = frequency_.freq_span_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frequency_.freq_span_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& SpectrumAcqParam::_internal_freq_span() const {
  return _internal_has_freq_span()
      ? *frequency_.freq_span_
      : *reinterpret_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(&::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& SpectrumAcqParam::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
  return _internal_freq_span();
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* SpectrumAcqParam::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
  if (_internal_has_freq_span()) {
    clear_has_frequency();
    ::zb::dcts::scenario::spectrum::FrequencySpan* temp = frequency_.freq_span_;
    frequency_.freq_span_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SpectrumAcqParam::unsafe_arena_set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  clear_frequency();
  if (freq_span) {
    set_has_freq_span();
    frequency_.freq_span_ = freq_span;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* SpectrumAcqParam::_internal_mutable_freq_span() {
  if (!_internal_has_freq_span()) {
    clear_frequency();
    set_has_freq_span();
    frequency_.freq_span_ = CreateMaybeMessage< ::zb::dcts::scenario::spectrum::FrequencySpan >(GetArena());
  }
  return frequency_.freq_span_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* SpectrumAcqParam::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
  return _internal_mutable_freq_span();
}

// .zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;
inline bool SpectrumAcqParam::_internal_has_freq_points() const {
  return frequency_case() == kFreqPoints;
}
inline bool SpectrumAcqParam::has_freq_points() const {
  return _internal_has_freq_points();
}
inline void SpectrumAcqParam::set_has_freq_points() {
  _oneof_case_[0] = kFreqPoints;
}
inline void SpectrumAcqParam::clear_freq_points() {
  if (_internal_has_freq_points()) {
    if (GetArena() == nullptr) {
      delete frequency_.freq_points_;
    }
    clear_has_frequency();
  }
}
inline ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* SpectrumAcqParam::release_freq_points() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
  if (_internal_has_freq_points()) {
    clear_has_frequency();
      ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* temp = frequency_.freq_points_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    frequency_.freq_points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints& SpectrumAcqParam::_internal_freq_points() const {
  return _internal_has_freq_points()
      ? *frequency_.freq_points_
      : *reinterpret_cast< ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints*>(&::zb::dcts::scenario::kh::commSpectrum::_FequecyPoints_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints& SpectrumAcqParam::freq_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
  return _internal_freq_points();
}
inline ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* SpectrumAcqParam::unsafe_arena_release_freq_points() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
  if (_internal_has_freq_points()) {
    clear_has_frequency();
    ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* temp = frequency_.freq_points_;
    frequency_.freq_points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SpectrumAcqParam::unsafe_arena_set_allocated_freq_points(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points) {
  clear_frequency();
  if (freq_points) {
    set_has_freq_points();
    frequency_.freq_points_ = freq_points;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
}
inline ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* SpectrumAcqParam::_internal_mutable_freq_points() {
  if (!_internal_has_freq_points()) {
    clear_frequency();
    set_has_freq_points();
    frequency_.freq_points_ = CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints >(GetArena());
  }
  return frequency_.freq_points_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* SpectrumAcqParam::mutable_freq_points() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
  return _internal_mutable_freq_points();
}

// double rbw = 4;
inline void SpectrumAcqParam::clear_rbw() {
  rbw_ = 0;
}
inline double SpectrumAcqParam::_internal_rbw() const {
  return rbw_;
}
inline double SpectrumAcqParam::rbw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.rbw)
  return _internal_rbw();
}
inline void SpectrumAcqParam::_internal_set_rbw(double value) {
  
  rbw_ = value;
}
inline void SpectrumAcqParam::set_rbw(double value) {
  _internal_set_rbw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.rbw)
}

// .zb.dcts.source.kh.DetectMode detect_mode = 5;
inline void SpectrumAcqParam::clear_detect_mode() {
  detect_mode_ = 0;
}
inline ::zb::dcts::source::kh::DetectMode SpectrumAcqParam::_internal_detect_mode() const {
  return static_cast< ::zb::dcts::source::kh::DetectMode >(detect_mode_);
}
inline ::zb::dcts::source::kh::DetectMode SpectrumAcqParam::detect_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.detect_mode)
  return _internal_detect_mode();
}
inline void SpectrumAcqParam::_internal_set_detect_mode(::zb::dcts::source::kh::DetectMode value) {
  
  detect_mode_ = value;
}
inline void SpectrumAcqParam::set_detect_mode(::zb::dcts::source::kh::DetectMode value) {
  _internal_set_detect_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.detect_mode)
}

// .zb.dcts.source.kh.ChannelMode channel_mode = 6;
inline void SpectrumAcqParam::clear_channel_mode() {
  channel_mode_ = 0;
}
inline ::zb::dcts::source::kh::ChannelMode SpectrumAcqParam::_internal_channel_mode() const {
  return static_cast< ::zb::dcts::source::kh::ChannelMode >(channel_mode_);
}
inline ::zb::dcts::source::kh::ChannelMode SpectrumAcqParam::channel_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.channel_mode)
  return _internal_channel_mode();
}
inline void SpectrumAcqParam::_internal_set_channel_mode(::zb::dcts::source::kh::ChannelMode value) {
  
  channel_mode_ = value;
}
inline void SpectrumAcqParam::set_channel_mode(::zb::dcts::source::kh::ChannelMode value) {
  _internal_set_channel_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.channel_mode)
}

// double attenuation_gain = 7;
inline void SpectrumAcqParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline double SpectrumAcqParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline double SpectrumAcqParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void SpectrumAcqParam::_internal_set_attenuation_gain(double value) {
  
  attenuation_gain_ = value;
}
inline void SpectrumAcqParam::set_attenuation_gain(double value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.attenuation_gain)
}

// .zb.dcts.source.kh.WindowParams win_params = 8;
inline bool SpectrumAcqParam::_internal_has_win_params() const {
  return this != internal_default_instance() && win_params_ != nullptr;
}
inline bool SpectrumAcqParam::has_win_params() const {
  return _internal_has_win_params();
}
inline const ::zb::dcts::source::kh::WindowParams& SpectrumAcqParam::_internal_win_params() const {
  const ::zb::dcts::source::kh::WindowParams* p = win_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::WindowParams*>(
      &::zb::dcts::source::kh::_WindowParams_default_instance_);
}
inline const ::zb::dcts::source::kh::WindowParams& SpectrumAcqParam::win_params() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.win_params)
  return _internal_win_params();
}
inline void SpectrumAcqParam::unsafe_arena_set_allocated_win_params(
    ::zb::dcts::source::kh::WindowParams* win_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params_);
  }
  win_params_ = win_params;
  if (win_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.win_params)
}
inline ::zb::dcts::source::kh::WindowParams* SpectrumAcqParam::release_win_params() {
  auto temp = unsafe_arena_release_win_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::WindowParams* SpectrumAcqParam::unsafe_arena_release_win_params() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.win_params)
  
  ::zb::dcts::source::kh::WindowParams* temp = win_params_;
  win_params_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::WindowParams* SpectrumAcqParam::_internal_mutable_win_params() {
  
  if (win_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::WindowParams>(GetArena());
    win_params_ = p;
  }
  return win_params_;
}
inline ::zb::dcts::source::kh::WindowParams* SpectrumAcqParam::mutable_win_params() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.win_params)
  return _internal_mutable_win_params();
}
inline void SpectrumAcqParam::set_allocated_win_params(::zb::dcts::source::kh::WindowParams* win_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params_);
  }
  if (win_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params)->GetArena();
    if (message_arena != submessage_arena) {
      win_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, win_params, submessage_arena);
    }
    
  } else {
    
  }
  win_params_ = win_params;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.win_params)
}

// double rf_limit = 9;
inline void SpectrumAcqParam::clear_rf_limit() {
  rf_limit_ = 0;
}
inline double SpectrumAcqParam::_internal_rf_limit() const {
  return rf_limit_;
}
inline double SpectrumAcqParam::rf_limit() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.rf_limit)
  return _internal_rf_limit();
}
inline void SpectrumAcqParam::_internal_set_rf_limit(double value) {
  
  rf_limit_ = value;
}
inline void SpectrumAcqParam::set_rf_limit(double value) {
  _internal_set_rf_limit(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.rf_limit)
}

// double search_step = 10;
inline void SpectrumAcqParam::clear_search_step() {
  search_step_ = 0;
}
inline double SpectrumAcqParam::_internal_search_step() const {
  return search_step_;
}
inline double SpectrumAcqParam::search_step() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.search_step)
  return _internal_search_step();
}
inline void SpectrumAcqParam::_internal_set_search_step(double value) {
  
  search_step_ = value;
}
inline void SpectrumAcqParam::set_search_step(double value) {
  _internal_set_search_step(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.search_step)
}

// int32 residence_time = 11;
inline void SpectrumAcqParam::clear_residence_time() {
  residence_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_residence_time() const {
  return residence_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::residence_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.residence_time)
  return _internal_residence_time();
}
inline void SpectrumAcqParam::_internal_set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  residence_time_ = value;
}
inline void SpectrumAcqParam::set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_residence_time(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.residence_time)
}

// int32 sample_interval = 12;
inline void SpectrumAcqParam::clear_sample_interval() {
  sample_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_sample_interval() const {
  return sample_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::sample_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.sample_interval)
  return _internal_sample_interval();
}
inline void SpectrumAcqParam::_internal_set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_interval_ = value;
}
inline void SpectrumAcqParam::set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.sample_interval)
}

// int32 result_interval = 13;
inline void SpectrumAcqParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.result_interval)
  return _internal_result_interval();
}
inline void SpectrumAcqParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void SpectrumAcqParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.result_interval)
}

// int32 expected_points = 15;
inline void SpectrumAcqParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.expected_points)
  return _internal_expected_points();
}
inline void SpectrumAcqParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void SpectrumAcqParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.expected_points)
}

// int32 average_count = 16;
inline void SpectrumAcqParam::clear_average_count() {
  average_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_average_count() const {
  return average_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::average_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.average_count)
  return _internal_average_count();
}
inline void SpectrumAcqParam::_internal_set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_count_ = value;
}
inline void SpectrumAcqParam::set_average_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.average_count)
}

// int32 antenna = 17;
inline void SpectrumAcqParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpectrumAcqParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.antenna)
  return _internal_antenna();
}
inline void SpectrumAcqParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void SpectrumAcqParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.antenna)
}

// .zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;
inline void SpectrumAcqParam::clear_antenna_mode() {
  antenna_mode_ = 0;
}
inline ::zb::dcts::source::kh::AntennaControlMode SpectrumAcqParam::_internal_antenna_mode() const {
  return static_cast< ::zb::dcts::source::kh::AntennaControlMode >(antenna_mode_);
}
inline ::zb::dcts::source::kh::AntennaControlMode SpectrumAcqParam::antenna_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.antenna_mode)
  return _internal_antenna_mode();
}
inline void SpectrumAcqParam::_internal_set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value) {
  
  antenna_mode_ = value;
}
inline void SpectrumAcqParam::set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value) {
  _internal_set_antenna_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.antenna_mode)
}

// .zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;
inline void SpectrumAcqParam::clear_fft_detect_mode() {
  fft_detect_mode_ = 0;
}
inline ::zb::dcts::source::kh::FFTDetectMode SpectrumAcqParam::_internal_fft_detect_mode() const {
  return static_cast< ::zb::dcts::source::kh::FFTDetectMode >(fft_detect_mode_);
}
inline ::zb::dcts::source::kh::FFTDetectMode SpectrumAcqParam::fft_detect_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.fft_detect_mode)
  return _internal_fft_detect_mode();
}
inline void SpectrumAcqParam::_internal_set_fft_detect_mode(::zb::dcts::source::kh::FFTDetectMode value) {
  
  fft_detect_mode_ = value;
}
inline void SpectrumAcqParam::set_fft_detect_mode(::zb::dcts::source::kh::FFTDetectMode value) {
  _internal_set_fft_detect_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.fft_detect_mode)
}

// map<string, string> others = 20;
inline int SpectrumAcqParam::_internal_others_size() const {
  return others_.size();
}
inline int SpectrumAcqParam::others_size() const {
  return _internal_others_size();
}
inline void SpectrumAcqParam::clear_others() {
  others_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SpectrumAcqParam::_internal_others() const {
  return others_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SpectrumAcqParam::others() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.others)
  return _internal_others();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SpectrumAcqParam::_internal_mutable_others() {
  return others_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SpectrumAcqParam::mutable_others() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.others)
  return _internal_mutable_others();
}

inline bool SpectrumAcqParam::has_frequency() const {
  return frequency_case() != FREQUENCY_NOT_SET;
}
inline void SpectrumAcqParam::clear_has_frequency() {
  _oneof_case_[0] = FREQUENCY_NOT_SET;
}
inline SpectrumAcqParam::FrequencyCase SpectrumAcqParam::frequency_case() const {
  return SpectrumAcqParam::FrequencyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SpectrumAcqResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool SpectrumAcqResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SpectrumAcqResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& SpectrumAcqResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& SpectrumAcqResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.header)
  return _internal_header();
}
inline void SpectrumAcqResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* SpectrumAcqResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* SpectrumAcqResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* SpectrumAcqResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* SpectrumAcqResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.header)
  return _internal_mutable_header();
}
inline void SpectrumAcqResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.header)
}

// .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
inline bool SpectrumAcqResult::_internal_has_seg_header() const {
  return this != internal_default_instance() && seg_header_ != nullptr;
}
inline bool SpectrumAcqResult::has_seg_header() const {
  return _internal_has_seg_header();
}
inline const ::zb::dcts::scenario::spectrum::SegmentHeader& SpectrumAcqResult::_internal_seg_header() const {
  const ::zb::dcts::scenario::spectrum::SegmentHeader* p = seg_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SegmentHeader*>(
      &::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SegmentHeader& SpectrumAcqResult::seg_header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.seg_header)
  return _internal_seg_header();
}
inline void SpectrumAcqResult::unsafe_arena_set_allocated_seg_header(
    ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header_);
  }
  seg_header_ = seg_header;
  if (seg_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.seg_header)
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* SpectrumAcqResult::release_seg_header() {
  auto temp = unsafe_arena_release_seg_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* SpectrumAcqResult::unsafe_arena_release_seg_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.seg_header)
  
  ::zb::dcts::scenario::spectrum::SegmentHeader* temp = seg_header_;
  seg_header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* SpectrumAcqResult::_internal_mutable_seg_header() {
  
  if (seg_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SegmentHeader>(GetArena());
    seg_header_ = p;
  }
  return seg_header_;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* SpectrumAcqResult::mutable_seg_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.seg_header)
  return _internal_mutable_seg_header();
}
inline void SpectrumAcqResult::set_allocated_seg_header(::zb::dcts::scenario::spectrum::SegmentHeader* seg_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header_);
  }
  if (seg_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header)->GetArena();
    if (message_arena != submessage_arena) {
      seg_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seg_header, submessage_arena);
    }
    
  } else {
    
  }
  seg_header_ = seg_header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.seg_header)
}

// .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
inline bool SpectrumAcqResult::_internal_has_band() const {
  return this != internal_default_instance() && band_ != nullptr;
}
inline bool SpectrumAcqResult::has_band() const {
  return _internal_has_band();
}
inline const ::zb::dcts::scenario::spectrum::FrequencyBand& SpectrumAcqResult::_internal_band() const {
  const ::zb::dcts::scenario::spectrum::FrequencyBand* p = band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencyBand*>(
      &::zb::dcts::scenario::spectrum::_FrequencyBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencyBand& SpectrumAcqResult::band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.band)
  return _internal_band();
}
inline void SpectrumAcqResult::unsafe_arena_set_allocated_band(
    ::zb::dcts::scenario::spectrum::FrequencyBand* band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_);
  }
  band_ = band;
  if (band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.band)
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* SpectrumAcqResult::release_band() {
  auto temp = unsafe_arena_release_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* SpectrumAcqResult::unsafe_arena_release_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.band)
  
  ::zb::dcts::scenario::spectrum::FrequencyBand* temp = band_;
  band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* SpectrumAcqResult::_internal_mutable_band() {
  
  if (band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyBand>(GetArena());
    band_ = p;
  }
  return band_;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* SpectrumAcqResult::mutable_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.band)
  return _internal_mutable_band();
}
inline void SpectrumAcqResult::set_allocated_band(::zb::dcts::scenario::spectrum::FrequencyBand* band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_);
  }
  if (band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band)->GetArena();
    if (message_arena != submessage_arena) {
      band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band, submessage_arena);
    }
    
  } else {
    
  }
  band_ = band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.band)
}

// repeated float spectrum_view = 6;
inline int SpectrumAcqResult::_internal_spectrum_view_size() const {
  return spectrum_view_.size();
}
inline int SpectrumAcqResult::spectrum_view_size() const {
  return _internal_spectrum_view_size();
}
inline void SpectrumAcqResult::clear_spectrum_view() {
  spectrum_view_.Clear();
}
inline float SpectrumAcqResult::_internal_spectrum_view(int index) const {
  return spectrum_view_.Get(index);
}
inline float SpectrumAcqResult::spectrum_view(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.spectrum_view)
  return _internal_spectrum_view(index);
}
inline void SpectrumAcqResult::set_spectrum_view(int index, float value) {
  spectrum_view_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.spectrum_view)
}
inline void SpectrumAcqResult::_internal_add_spectrum_view(float value) {
  spectrum_view_.Add(value);
}
inline void SpectrumAcqResult::add_spectrum_view(float value) {
  _internal_add_spectrum_view(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.spectrum_view)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumAcqResult::_internal_spectrum_view() const {
  return spectrum_view_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumAcqResult::spectrum_view() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.spectrum_view)
  return _internal_spectrum_view();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumAcqResult::_internal_mutable_spectrum_view() {
  return &spectrum_view_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumAcqResult::mutable_spectrum_view() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult.spectrum_view)
  return _internal_mutable_spectrum_view();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commSpectrum::RunMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commSpectrum::RunMode>() {
  return ::zb::dcts::scenario::kh::commSpectrum::RunMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpectrumAcq_2eproto
