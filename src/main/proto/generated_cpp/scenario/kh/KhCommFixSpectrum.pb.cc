// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommFixSpectrum.proto

#include "scenario/kh/KhCommFixSpectrum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class FixTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixTaskRequest> _instance;
} _FixTaskRequest_default_instance_;
class FixResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixResult> _instance;
} _FixResult_default_instance_;
class IQRecordRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IQRecordRequest> _instance;
} _IQRecordRequest_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::FixResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::FixResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
      &scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
      &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_IQRecordRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhCommFixSpectrum_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenario_2fkh_2fKhCommFixSpectrum_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhCommFixSpectrum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest, detection_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixResult, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixResult, panorama_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FixResult, closeshot_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest, record_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest, length_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest)},
  { 9, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::FixResult)},
  { 18, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_IQRecordRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhCommFixSpectrum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#scenario/kh/KhCommFixSpectrum.proto\022 z"
  "b.dcts.scenario.kh.commSpectrum\032\023source/"
  "source.proto\032\031source/kh/KhContext.proto\032"
  "\027scenario/scenario.proto\032\027scenario/spect"
  "rum.proto\032\030scenario/detection.proto\032\037sce"
  "nario/kh/KhSpectrumAcq.proto\"\227\002\n\016FixTask"
  "Request\022.\n\010scenario\030\001 \001(\0132\034.zb.dcts.scen"
  "ario.ScenarioId\022I\n\014source_param\030\002 \001(\01323."
  "zb.dcts.scenario.kh.commSpectrum.Spectru"
  "mAcqSource\022E\n\tacq_param\030\003 \001(\01322.zb.dcts."
  "scenario.kh.commSpectrum.SpectrumAcqPara"
  "m\022C\n\017detection_param\030\004 \001(\0132*.zb.dcts.sce"
  "nario.detection.DetectionParam\"\343\001\n\tFixRe"
  "sult\0221\n\006header\030\001 \001(\0132!.zb.dcts.scenario."
  "spectrum.Header\0222\n\006status\030\002 \001(\0132\".zb.dct"
  "s.source.kh.OperationStatus\0226\n\rpanorama_"
  "view\030\006 \001(\0132\037.zb.dcts.scenario.spectrum.V"
  "iew\0227\n\016closeshot_view\030\007 \001(\0132\037.zb.dcts.sc"
  "enario.spectrum.View\"f\n\017IQRecordRequest\022"
  "3\n\tresponser\030\001 \001(\0132 .zb.dcts.scenario.Sc"
  "enarioTaskId\022\016\n\006record\030\002 \001(\010\022\016\n\006length\030\003"
  " \001(\0032\277\013\n\022FixSpectrumService\022`\n\tStartTask"
  "\0220.zb.dcts.scenario.kh.commSpectrum.FixT"
  "askRequest\032\037.zb.dcts.scenario.ScenarioRe"
  "ply\"\000\022^\n\tGetResult\022 .zb.dcts.scenario.Sc"
  "enarioTaskId\032+.zb.dcts.scenario.kh.commS"
  "pectrum.FixResult\"\0000\001\022O\n\010StopTask\022 .zb.d"
  "cts.scenario.ScenarioTaskId\032\037.zb.dcts.sc"
  "enario.ScenarioReply\"\000\022Y\n\nOpenZoomIn\022(.z"
  "b.dcts.scenario.spectrum.ZoomInRequest\032\037"
  ".zb.dcts.scenario.ScenarioReply\"\000\022R\n\013Clo"
  "seZoomIn\022 .zb.dcts.scenario.ScenarioTask"
  "Id\032\037.zb.dcts.scenario.ScenarioReply\"\000\022]\n"
  "\014OpenDataHold\022*.zb.dcts.scenario.spectru"
  "m.DataHoldRequest\032\037.zb.dcts.scenario.Sce"
  "narioReply\"\000\022^\n\rResetDataHold\022*.zb.dcts."
  "scenario.spectrum.DataHoldRequest\032\037.zb.d"
  "cts.scenario.ScenarioReply\"\000\022^\n\rCloseDat"
  "aHold\022*.zb.dcts.scenario.spectrum.DataHo"
  "ldRequest\032\037.zb.dcts.scenario.ScenarioRep"
  "ly\"\000\022`\n\rOpenDetection\022,.zb.dcts.scenario"
  ".detection.DetectionRequest\032\037.zb.dcts.sc"
  "enario.ScenarioReply\"\000\022U\n\016CloseDetection"
  "\022 .zb.dcts.scenario.ScenarioTaskId\032\037.zb."
  "dcts.scenario.ScenarioReply\"\000\022\177\n\020QuerySi"
  "gnalTable\0223.zb.dcts.scenario.detection.S"
  "ignalTableQueryRequest\0324.zb.dcts.scenari"
  "o.detection.SignalTableQueryResponse\"\000\022W"
  "\n\020ClearSignalTable\022 .zb.dcts.scenario.Sc"
  "enarioTaskId\032\037.zb.dcts.scenario.Scenario"
  "Reply\"\000\022h\n\017SignalGathering\0222.zb.dcts.sce"
  "nario.detection.SignalGatheringRequest\032\037"
  ".zb.dcts.scenario.ScenarioReply\"\000\022f\n\022Get"
  "GatheringResult\022 .zb.dcts.scenario.Scena"
  "rioTaskId\032,.zb.dcts.scenario.detection.S"
  "ignalSampleList\"\000\022c\n\013IQRecordCmd\0221.zb.dc"
  "ts.scenario.kh.commSpectrum.IQRecordRequ"
  "est\032\037.zb.dcts.scenario.ScenarioReply\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_deps[6] = {
  &::descriptor_table_scenario_2fdetection_2eproto,
  &::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fkh_2fKhContext_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_sccs[3] = {
  &scc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base,
  &scc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base,
  &scc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhCommFixSpectrum_2eproto, "scenario/kh/KhCommFixSpectrum.proto", 2326,
  &descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_once, descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhCommFixSpectrum_2eproto, 3, file_level_enum_descriptors_scenario_2fkh_2fKhCommFixSpectrum_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhCommFixSpectrum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhCommFixSpectrum_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {

// ===================================================================

void FixTaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixTaskRequest_default_instance_._instance.get_mutable()->detection_param_ = const_cast< ::zb::dcts::scenario::detection::DetectionParam*>(
      ::zb::dcts::scenario::detection::DetectionParam::internal_default_instance());
}
class FixTaskRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const FixTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& source_param(const FixTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param(const FixTaskRequest* msg);
  static const ::zb::dcts::scenario::detection::DetectionParam& detection_param(const FixTaskRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
FixTaskRequest::_Internal::scenario(const FixTaskRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource&
FixTaskRequest::_Internal::source_param(const FixTaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam&
FixTaskRequest::_Internal::acq_param(const FixTaskRequest* msg) {
  return *msg->acq_param_;
}
const ::zb::dcts::scenario::detection::DetectionParam&
FixTaskRequest::_Internal::detection_param(const FixTaskRequest* msg) {
  return *msg->detection_param_;
}
void FixTaskRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void FixTaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void FixTaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
void FixTaskRequest::clear_detection_param() {
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
}
FixTaskRequest::FixTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
}
FixTaskRequest::FixTaskRequest(const FixTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::scenario::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
}

void FixTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(detection_param_));
}

FixTaskRequest::~FixTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
  if (this != internal_default_instance()) delete detection_param_;
}

void FixTaskRequest::ArenaDtor(void* object) {
  FixTaskRequest* _this = reinterpret_cast< FixTaskRequest* >(object);
  (void)_this;
}
void FixTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixTaskRequest& FixTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixTaskRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  return *internal_default_instance();
}


void FixTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  return target;
}

size_t FixTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FixTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
    MergeFrom(*source);
  }
}

void FixTaskRequest::MergeFrom(const FixTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::MergeFrom(from._internal_acq_param());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::scenario::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void FixTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixTaskRequest::CopyFrom(const FixTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixTaskRequest::IsInitialized() const {
  return true;
}

void FixTaskRequest::InternalSwap(FixTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixTaskRequest, detection_param_)
      + sizeof(FixTaskRequest::detection_param_)
      - PROTOBUF_FIELD_OFFSET(FixTaskRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::zb::dcts::source::kh::OperationStatus*>(
      ::zb::dcts::source::kh::OperationStatus::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_._instance.get_mutable()->panorama_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_FixResult_default_instance_._instance.get_mutable()->closeshot_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class FixResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const FixResult* msg);
  static const ::zb::dcts::source::kh::OperationStatus& status(const FixResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& panorama_view(const FixResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& closeshot_view(const FixResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
FixResult::_Internal::header(const FixResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::source::kh::OperationStatus&
FixResult::_Internal::status(const FixResult* msg) {
  return *msg->status_;
}
const ::zb::dcts::scenario::spectrum::View&
FixResult::_Internal::panorama_view(const FixResult* msg) {
  return *msg->panorama_view_;
}
const ::zb::dcts::scenario::spectrum::View&
FixResult::_Internal::closeshot_view(const FixResult* msg) {
  return *msg->closeshot_view_;
}
void FixResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void FixResult::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void FixResult::clear_panorama_view() {
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
}
void FixResult::clear_closeshot_view() {
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
}
FixResult::FixResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.FixResult)
}
FixResult::FixResult(const FixResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::zb::dcts::source::kh::OperationStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_panorama_view()) {
    panorama_view_ = new ::zb::dcts::scenario::spectrum::View(*from.panorama_view_);
  } else {
    panorama_view_ = nullptr;
  }
  if (from._internal_has_closeshot_view()) {
    closeshot_view_ = new ::zb::dcts::scenario::spectrum::View(*from.closeshot_view_);
  } else {
    closeshot_view_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.FixResult)
}

void FixResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closeshot_view_) -
      reinterpret_cast<char*>(&header_)) + sizeof(closeshot_view_));
}

FixResult::~FixResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.FixResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FixResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete panorama_view_;
  if (this != internal_default_instance()) delete closeshot_view_;
}

void FixResult::ArenaDtor(void* object) {
  FixResult* _this = reinterpret_cast< FixResult* >(object);
  (void)_this;
}
void FixResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixResult& FixResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixResult_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  return *internal_default_instance();
}


void FixResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FixResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.OperationStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View panorama_view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_panorama_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_closeshot_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::panorama_view(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::closeshot_view(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.FixResult)
  return target;
}

size_t FixResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panorama_view_);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closeshot_view_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FixResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.FixResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.FixResult)
    MergeFrom(*source);
  }
}

void FixResult::MergeFrom(const FixResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::zb::dcts::source::kh::OperationStatus::MergeFrom(from._internal_status());
  }
  if (from.has_panorama_view()) {
    _internal_mutable_panorama_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_panorama_view());
  }
  if (from.has_closeshot_view()) {
    _internal_mutable_closeshot_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_closeshot_view());
  }
}

void FixResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixResult::CopyFrom(const FixResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FixResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixResult::IsInitialized() const {
  return true;
}

void FixResult::InternalSwap(FixResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FixResult, closeshot_view_)
      + sizeof(FixResult::closeshot_view_)
      - PROTOBUF_FIELD_OFFSET(FixResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FixResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IQRecordRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_IQRecordRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
}
class IQRecordRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const IQRecordRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
IQRecordRequest::_Internal::responser(const IQRecordRequest* msg) {
  return *msg->responser_;
}
void IQRecordRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
IQRecordRequest::IQRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
}
IQRecordRequest::IQRecordRequest(const IQRecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_) -
    reinterpret_cast<char*>(&length_)) + sizeof(record_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
}

void IQRecordRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(record_));
}

IQRecordRequest::~IQRecordRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQRecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
}

void IQRecordRequest::ArenaDtor(void* object) {
  IQRecordRequest* _this = reinterpret_cast< IQRecordRequest* >(object);
  (void)_this;
}
void IQRecordRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQRecordRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IQRecordRequest& IQRecordRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IQRecordRequest_scenario_2fkh_2fKhCommFixSpectrum_2eproto.base);
  return *internal_default_instance();
}


void IQRecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_) -
      reinterpret_cast<char*>(&length_)) + sizeof(record_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQRecordRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          record_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQRecordRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // bool record = 2;
  if (this->record() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_record(), target);
  }

  // int64 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  return target;
}

size_t IQRecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // int64 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_length());
  }

  // bool record = 2;
  if (this->record() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQRecordRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IQRecordRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQRecordRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
    MergeFrom(*source);
  }
}

void IQRecordRequest::MergeFrom(const IQRecordRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.record() != 0) {
    _internal_set_record(from._internal_record());
  }
}

void IQRecordRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQRecordRequest::CopyFrom(const IQRecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQRecordRequest::IsInitialized() const {
  return true;
}

void IQRecordRequest::InternalSwap(IQRecordRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IQRecordRequest, record_)
      + sizeof(IQRecordRequest::record_)
      - PROTOBUF_FIELD_OFFSET(IQRecordRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IQRecordRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::FixResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::FixResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::FixResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
