// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/kh/KhCommScanDirection.proto

#include "scenario/kh/KhCommScanDirection.pb.h"
#include "scenario/kh/KhCommScanDirection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {

static const char* CommScanDirectionService_method_names[] = {
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/CreateScenario",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/GetScanResult",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/CloseScenario",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/Change",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/OpenZoomIn",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/CloseZoomIn",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/OpenDataHold",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/ResetDataHold",
  "/zb.dcts.scenario.kh.commDirection.CommScanDirectionService/CloseDataHold",
};

std::unique_ptr< CommScanDirectionService::Stub> CommScanDirectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommScanDirectionService::Stub> stub(new CommScanDirectionService::Stub(channel));
  return stub;
}

CommScanDirectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateScenario_(CommScanDirectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScanResult_(CommScanDirectionService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CloseScenario_(CommScanDirectionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Change_(CommScanDirectionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenZoomIn_(CommScanDirectionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseZoomIn_(CommScanDirectionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenDataHold_(CommScanDirectionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetDataHold_(CommScanDirectionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseDataHold_(CommScanDirectionService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CommScanDirectionService::Stub::CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateScenario_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateScenario_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateScenario_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateScenario_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateScenario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CreateScenario_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CreateScenario_, context, request, false);
}

::grpc::ClientReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* CommScanDirectionService::Stub::GetScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>::Create(channel_.get(), rpcmethod_GetScanResult_, context, request);
}

void CommScanDirectionService::Stub::experimental_async::GetScanResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>::Create(stub_->channel_.get(), stub_->rpcmethod_GetScanResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* CommScanDirectionService::Stub::AsyncGetScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>::Create(channel_.get(), cq, rpcmethod_GetScanResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* CommScanDirectionService::Stub::PrepareAsyncGetScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>::Create(channel_.get(), cq, rpcmethod_GetScanResult_, context, request, false, nullptr);
}

::grpc::Status CommScanDirectionService::Stub::CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseScenario_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseScenario_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseScenario_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseScenario_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseScenario_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseScenario_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseScenario_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Change_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Change_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Change_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::Change(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Change_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::Change(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Change_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_Change_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncChangeRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_Change_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenZoomIn_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenZoomIn_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseZoomIn_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseZoomIn_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDataHold_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDataHold_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetDataHold_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResetDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResetDataHold_, context, request, false);
}

::grpc::Status CommScanDirectionService::Stub::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseDataHold_, context, request, response);
}

void CommScanDirectionService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, std::move(f));
}

void CommScanDirectionService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, reactor);
}

void CommScanDirectionService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::AsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommScanDirectionService::Stub::PrepareAsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDataHold_, context, request, false);
}

CommScanDirectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::CreateScenario), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>(
          std::mem_fn(&CommScanDirectionService::Service::GetScanResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::CloseScenario), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::Change), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::OpenZoomIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::CloseZoomIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::OpenDataHold), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::ResetDataHold), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommScanDirectionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommScanDirectionService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommScanDirectionService::Service::CloseDataHold), this)));
}

CommScanDirectionService::Service::~Service() {
}

::grpc::Status CommScanDirectionService::Service::CreateScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commDirection::CommScanDirectionCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::GetScanResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::CloseScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::Change(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::OpenZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::CloseZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::OpenDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::ResetDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommScanDirectionService::Service::CloseDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace kh
}  // namespace commDirection

