// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhVSA.proto

#include "scenario/kh/KhVSA.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IQData_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commVSA {
class CommVSATaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommVSATaskRequest> _instance;
} _CommVSATaskRequest_default_instance_;
class RecognizeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecognizeState> _instance;
} _RecognizeState_default_instance_;
class RecognizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Recognize> _instance;
} _Recognize_default_instance_;
class AudioBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioBlock> _instance;
} _AudioBlock_default_instance_;
class DecodeResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecodeResult> _instance;
} _DecodeResult_default_instance_;
class CommVSAResult_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommVSAResult_Header> _instance;
} _CommVSAResult_Header_default_instance_;
class CommVSAResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommVSAResult> _instance;
} _CommVSAResult_default_instance_;
}  // namespace commVSA
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_AudioBlock_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::AudioBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::AudioBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto}, {}};

static void InitDefaultsscc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::CommVSAResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto}, {
      &scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto.base,
      &scc_info_IQData_scenario_2fFFP_2fVSA_2eproto.base,
      &scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto.base,
      &scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto.base,}};

static void InitDefaultsscc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_VSAParam_scenario_2fFFP_2fVSA_2eproto.base,}};

static void InitDefaultsscc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_DecodeResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::DecodeResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::DecodeResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto}, {
      &scc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto.base,}};

static void InitDefaultsscc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_Recognize_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::Recognize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::Recognize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto}, {
      &scc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto.base,}};

static void InitDefaultsscc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commVSA::_RecognizeState_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commVSA::RecognizeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commVSA::RecognizeState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhVSA_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhVSA_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhVSA_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhVSA_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest, vas_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::RecognizeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::RecognizeState, symbol_num_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::RecognizeState, matched_num_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::RecognizeState, cur_symbol_num_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::RecognizeState, cur_matched_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::Recognize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::Recognize, state_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::Recognize, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::AudioBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::AudioBlock, pcm_bitstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::DecodeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::DecodeResult, state_info_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::DecodeResult, decode_info_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::DecodeResult, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, demod_result_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, symbols_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, recognize_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commVSA::CommVSAResult, decode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest)},
  { 9, -1, sizeof(::zb::dcts::scenario::kh::commVSA::RecognizeState)},
  { 18, -1, sizeof(::zb::dcts::scenario::kh::commVSA::Recognize)},
  { 25, -1, sizeof(::zb::dcts::scenario::kh::commVSA::AudioBlock)},
  { 31, -1, sizeof(::zb::dcts::scenario::kh::commVSA::DecodeResult)},
  { 39, -1, sizeof(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header)},
  { 48, -1, sizeof(::zb::dcts::scenario::kh::commVSA::CommVSAResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_RecognizeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_Recognize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_AudioBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_DecodeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhVSA_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027scenario/kh/KhVSA.proto\022\033zb.dcts.scena"
  "rio.kh.commVSA\032\ndcts.proto\032\023source/sourc"
  "e.proto\032\027scenario/scenario.proto\032\035scenar"
  "io/kh/KhIQDataAcq.proto\032\026scenario/FFP/VS"
  "A.proto\"\205\002\n\022CommVSATaskRequest\022.\n\010scenar"
  "io\030\001 \001(\0132\034.zb.dcts.scenario.ScenarioId\022E"
  "\n\014source_param\030\002 \001(\0132/.zb.dcts.scenario."
  "kh.commIqData.CommIQAcqSource\022E\n\tacq_par"
  "am\030\003 \001(\01322.zb.dcts.scenario.kh.commIqDat"
  "a.CommIQAcquireParam\0221\n\tvas_param\030\004 \001(\0132"
  "\036.zb.dcts.scenario.FFP.VSAParam\"j\n\016Recog"
  "nizeState\022\022\n\nsymbol_num\030\001 \001(\005\022\023\n\013matched"
  "_num\030\002 \001(\005\022\026\n\016cur_symbol_num\030\003 \001(\005\022\027\n\017cu"
  "r_matched_num\030\004 \001(\005\"\205\001\n\tRecognize\022:\n\005sta"
  "te\030\001 \001(\0132+.zb.dcts.scenario.kh.commVSA.R"
  "ecognizeState\022<\n\006result\030\002 \001(\0162,.zb.dcts."
  "scenario.kh.commVSA.RecognizeResult\"#\n\nA"
  "udioBlock\022\025\n\rpcm_bitstream\030\001 \003(\005\"p\n\014Deco"
  "deResult\022\022\n\nstate_info\030\001 \001(\t\022\023\n\013decode_i"
  "nfo\030\002 \001(\t\0227\n\006blocks\030\003 \003(\0132\'.zb.dcts.scen"
  "ario.kh.commVSA.AudioBlock\"\262\003\n\rCommVSARe"
  "sult\022A\n\006header\030\001 \001(\01321.zb.dcts.scenario."
  "kh.commVSA.CommVSAResult.Header\0222\n\014demod"
  "_result\030\002 \001(\0132\034.zb.dcts.scenario.FFP.IQD"
  "ata\022\017\n\007symbols\030\003 \001(\014\0229\n\trecognize\030\004 \001(\0132"
  "&.zb.dcts.scenario.kh.commVSA.Recognize\022"
  "9\n\006decode\030\005 \001(\0132).zb.dcts.scenario.kh.co"
  "mmVSA.DecodeResult\032\242\001\n\006Header\022-\n\013result_"
  "from\030\001 \001(\0132\030.zb.dcts.source.SourceId\022\027\n\017"
  "sequence_number\030\002 \001(\r\022$\n\ttime_span\030\003 \001(\013"
  "2\021.zb.dcts.TimeSpan\022*\n\017device_position\030\004"
  " \001(\0132\021.zb.dcts.Position*H\n\017RecognizeResu"
  "lt\022\016\n\nRR_INCALID\020\000\022\n\n\006RR_DMR\020\001\022\013\n\007RR_DPM"
  "R\020\002\022\014\n\010RR_TETRA\020\0042\235\002\n\nVSAService\022_\n\tStar"
  "tTask\022/.zb.dcts.scenario.kh.commVSA.Comm"
  "VSATaskRequest\032\037.zb.dcts.scenario.Scenar"
  "ioReply\"\000\022]\n\tGetResult\022 .zb.dcts.scenari"
  "o.ScenarioTaskId\032*.zb.dcts.scenario.kh.c"
  "ommVSA.CommVSAResult\"\0000\001\022O\n\010StopTask\022 .z"
  "b.dcts.scenario.ScenarioTaskId\032\037.zb.dcts"
  ".scenario.ScenarioReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhVSA_2eproto_deps[5] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fFFP_2fVSA_2eproto,
  &::descriptor_table_scenario_2fkh_2fKhIQDataAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhVSA_2eproto_sccs[7] = {
  &scc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto.base,
  &scc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhVSA_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhVSA_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhVSA_2eproto, "scenario/kh/KhVSA.proto", 1633,
  &descriptor_table_scenario_2fkh_2fKhVSA_2eproto_once, descriptor_table_scenario_2fkh_2fKhVSA_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhVSA_2eproto_deps, 7, 5,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhVSA_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhVSA_2eproto, 7, file_level_enum_descriptors_scenario_2fkh_2fKhVSA_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhVSA_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhVSA_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhVSA_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commVSA {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognizeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhVSA_2eproto[0];
}
bool RecognizeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommVSATaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSATaskRequest_default_instance_._instance.get_mutable()->vas_param_ = const_cast< ::zb::dcts::scenario::FFP::VSAParam*>(
      ::zb::dcts::scenario::FFP::VSAParam::internal_default_instance());
}
class CommVSATaskRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const CommVSATaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param(const CommVSATaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param(const CommVSATaskRequest* msg);
  static const ::zb::dcts::scenario::FFP::VSAParam& vas_param(const CommVSATaskRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
CommVSATaskRequest::_Internal::scenario(const CommVSATaskRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource&
CommVSATaskRequest::_Internal::source_param(const CommVSATaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam&
CommVSATaskRequest::_Internal::acq_param(const CommVSATaskRequest* msg) {
  return *msg->acq_param_;
}
const ::zb::dcts::scenario::FFP::VSAParam&
CommVSATaskRequest::_Internal::vas_param(const CommVSATaskRequest* msg) {
  return *msg->vas_param_;
}
void CommVSATaskRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void CommVSATaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void CommVSATaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
void CommVSATaskRequest::clear_vas_param() {
  if (GetArena() == nullptr && vas_param_ != nullptr) {
    delete vas_param_;
  }
  vas_param_ = nullptr;
}
CommVSATaskRequest::CommVSATaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
}
CommVSATaskRequest::CommVSATaskRequest(const CommVSATaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  if (from._internal_has_vas_param()) {
    vas_param_ = new ::zb::dcts::scenario::FFP::VSAParam(*from.vas_param_);
  } else {
    vas_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
}

void CommVSATaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vas_param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(vas_param_));
}

CommVSATaskRequest::~CommVSATaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommVSATaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
  if (this != internal_default_instance()) delete vas_param_;
}

void CommVSATaskRequest::ArenaDtor(void* object) {
  CommVSATaskRequest* _this = reinterpret_cast< CommVSATaskRequest* >(object);
  (void)_this;
}
void CommVSATaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommVSATaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommVSATaskRequest& CommVSATaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommVSATaskRequest_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void CommVSATaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  if (GetArena() == nullptr && vas_param_ != nullptr) {
    delete vas_param_;
  }
  vas_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommVSATaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.VSAParam vas_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vas_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommVSATaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.VSAParam vas_param = 4;
  if (this->has_vas_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vas_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  return target;
}

size_t CommVSATaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.FFP.VSAParam vas_param = 4;
  if (this->has_vas_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vas_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommVSATaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommVSATaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommVSATaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
    MergeFrom(*source);
  }
}

void CommVSATaskRequest::MergeFrom(const CommVSATaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::MergeFrom(from._internal_acq_param());
  }
  if (from.has_vas_param()) {
    _internal_mutable_vas_param()->::zb::dcts::scenario::FFP::VSAParam::MergeFrom(from._internal_vas_param());
  }
}

void CommVSATaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommVSATaskRequest::CopyFrom(const CommVSATaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommVSATaskRequest::IsInitialized() const {
  return true;
}

void CommVSATaskRequest::InternalSwap(CommVSATaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommVSATaskRequest, vas_param_)
      + sizeof(CommVSATaskRequest::vas_param_)
      - PROTOBUF_FIELD_OFFSET(CommVSATaskRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommVSATaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecognizeState::InitAsDefaultInstance() {
}
class RecognizeState::_Internal {
 public:
};

RecognizeState::RecognizeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.RecognizeState)
}
RecognizeState::RecognizeState(const RecognizeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&symbol_num_, &from.symbol_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_matched_num_) -
    reinterpret_cast<char*>(&symbol_num_)) + sizeof(cur_matched_num_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.RecognizeState)
}

void RecognizeState::SharedCtor() {
  ::memset(&symbol_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_matched_num_) -
      reinterpret_cast<char*>(&symbol_num_)) + sizeof(cur_matched_num_));
}

RecognizeState::~RecognizeState() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.RecognizeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecognizeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RecognizeState::ArenaDtor(void* object) {
  RecognizeState* _this = reinterpret_cast< RecognizeState* >(object);
  (void)_this;
}
void RecognizeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecognizeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecognizeState& RecognizeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecognizeState_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void RecognizeState::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&symbol_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_matched_num_) -
      reinterpret_cast<char*>(&symbol_num_)) + sizeof(cur_matched_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecognizeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 symbol_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          symbol_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 matched_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matched_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_symbol_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cur_symbol_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_matched_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_matched_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecognizeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 symbol_num = 1;
  if (this->symbol_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_symbol_num(), target);
  }

  // int32 matched_num = 2;
  if (this->matched_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matched_num(), target);
  }

  // int32 cur_symbol_num = 3;
  if (this->cur_symbol_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cur_symbol_num(), target);
  }

  // int32 cur_matched_num = 4;
  if (this->cur_matched_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_matched_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.RecognizeState)
  return target;
}

size_t RecognizeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 symbol_num = 1;
  if (this->symbol_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_symbol_num());
  }

  // int32 matched_num = 2;
  if (this->matched_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matched_num());
  }

  // int32 cur_symbol_num = 3;
  if (this->cur_symbol_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_symbol_num());
  }

  // int32 cur_matched_num = 4;
  if (this->cur_matched_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur_matched_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecognizeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  GOOGLE_DCHECK_NE(&from, this);
  const RecognizeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecognizeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.RecognizeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.RecognizeState)
    MergeFrom(*source);
  }
}

void RecognizeState::MergeFrom(const RecognizeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol_num() != 0) {
    _internal_set_symbol_num(from._internal_symbol_num());
  }
  if (from.matched_num() != 0) {
    _internal_set_matched_num(from._internal_matched_num());
  }
  if (from.cur_symbol_num() != 0) {
    _internal_set_cur_symbol_num(from._internal_cur_symbol_num());
  }
  if (from.cur_matched_num() != 0) {
    _internal_set_cur_matched_num(from._internal_cur_matched_num());
  }
}

void RecognizeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeState::CopyFrom(const RecognizeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.RecognizeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeState::IsInitialized() const {
  return true;
}

void RecognizeState::InternalSwap(RecognizeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecognizeState, cur_matched_num_)
      + sizeof(RecognizeState::cur_matched_num_)
      - PROTOBUF_FIELD_OFFSET(RecognizeState, symbol_num_)>(
          reinterpret_cast<char*>(&symbol_num_),
          reinterpret_cast<char*>(&other->symbol_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecognizeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Recognize::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commVSA::_Recognize_default_instance_._instance.get_mutable()->state_ = const_cast< ::zb::dcts::scenario::kh::commVSA::RecognizeState*>(
      ::zb::dcts::scenario::kh::commVSA::RecognizeState::internal_default_instance());
}
class Recognize::_Internal {
 public:
  static const ::zb::dcts::scenario::kh::commVSA::RecognizeState& state(const Recognize* msg);
};

const ::zb::dcts::scenario::kh::commVSA::RecognizeState&
Recognize::_Internal::state(const Recognize* msg) {
  return *msg->state_;
}
Recognize::Recognize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.Recognize)
}
Recognize::Recognize(const Recognize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::zb::dcts::scenario::kh::commVSA::RecognizeState(*from.state_);
  } else {
    state_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.Recognize)
}

void Recognize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&state_)) + sizeof(result_));
}

Recognize::~Recognize() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.Recognize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Recognize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete state_;
}

void Recognize::ArenaDtor(void* object) {
  Recognize* _this = reinterpret_cast< Recognize* >(object);
  (void)_this;
}
void Recognize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Recognize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Recognize& Recognize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Recognize_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void Recognize::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.Recognize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recognize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commVSA.RecognizeState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commVSA.RecognizeResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::zb::dcts::scenario::kh::commVSA::RecognizeResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Recognize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.Recognize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commVSA.RecognizeState state = 1;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commVSA.RecognizeResult result = 2;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.Recognize)
  return target;
}

size_t Recognize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.Recognize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commVSA.RecognizeState state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // .zb.dcts.scenario.kh.commVSA.RecognizeResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recognize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.Recognize)
  GOOGLE_DCHECK_NE(&from, this);
  const Recognize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Recognize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.Recognize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.Recognize)
    MergeFrom(*source);
  }
}

void Recognize::MergeFrom(const Recognize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.Recognize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    _internal_mutable_state()->::zb::dcts::scenario::kh::commVSA::RecognizeState::MergeFrom(from._internal_state());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void Recognize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.Recognize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recognize::CopyFrom(const Recognize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.Recognize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recognize::IsInitialized() const {
  return true;
}

void Recognize::InternalSwap(Recognize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Recognize, result_)
      + sizeof(Recognize::result_)
      - PROTOBUF_FIELD_OFFSET(Recognize, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Recognize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioBlock::InitAsDefaultInstance() {
}
class AudioBlock::_Internal {
 public:
};

AudioBlock::AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pcm_bitstream_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.AudioBlock)
}
AudioBlock::AudioBlock(const AudioBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pcm_bitstream_(from.pcm_bitstream_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.AudioBlock)
}

void AudioBlock::SharedCtor() {
}

AudioBlock::~AudioBlock() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.AudioBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AudioBlock::ArenaDtor(void* object) {
  AudioBlock* _this = reinterpret_cast< AudioBlock* >(object);
  (void)_this;
}
void AudioBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioBlock& AudioBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioBlock_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void AudioBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pcm_bitstream_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 pcm_bitstream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pcm_bitstream(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 1;
  {
    int byte_size = _pcm_bitstream_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_pcm_bitstream(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.AudioBlock)
  return target;
}

size_t AudioBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pcm_bitstream = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pcm_bitstream_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pcm_bitstream_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.AudioBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.AudioBlock)
    MergeFrom(*source);
  }
}

void AudioBlock::MergeFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pcm_bitstream_.MergeFrom(from.pcm_bitstream_);
}

void AudioBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioBlock::CopyFrom(const AudioBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.AudioBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioBlock::IsInitialized() const {
  return true;
}

void AudioBlock::InternalSwap(AudioBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pcm_bitstream_.InternalSwap(&other->pcm_bitstream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecodeResult::InitAsDefaultInstance() {
}
class DecodeResult::_Internal {
 public:
};

DecodeResult::DecodeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.DecodeResult)
}
DecodeResult::DecodeResult(const DecodeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_info().empty()) {
    state_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_info(),
      GetArena());
  }
  decode_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decode_info().empty()) {
    decode_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decode_info(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.DecodeResult)
}

void DecodeResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto.base);
  state_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decode_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DecodeResult::~DecodeResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.DecodeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecodeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decode_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecodeResult::ArenaDtor(void* object) {
  DecodeResult* _this = reinterpret_cast< DecodeResult* >(object);
  (void)_this;
}
void DecodeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecodeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecodeResult& DecodeResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecodeResult_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void DecodeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  state_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decode_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecodeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string state_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.kh.commVSA.DecodeResult.state_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string decode_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_decode_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commVSA.AudioBlock blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecodeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state_info = 1;
  if (this->state_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_info().data(), static_cast<int>(this->_internal_state_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.kh.commVSA.DecodeResult.state_info");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state_info(), target);
  }

  // string decode_info = 2;
  if (this->decode_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decode_info().data(), static_cast<int>(this->_internal_decode_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_decode_info(), target);
  }

  // repeated .zb.dcts.scenario.kh.commVSA.AudioBlock blocks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.DecodeResult)
  return target;
}

size_t DecodeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.kh.commVSA.AudioBlock blocks = 3;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string state_info = 1;
  if (this->state_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_info());
  }

  // string decode_info = 2;
  if (this->decode_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decode_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecodeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.DecodeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.DecodeResult)
    MergeFrom(*source);
  }
}

void DecodeResult::MergeFrom(const DecodeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.state_info().size() > 0) {
    _internal_set_state_info(from._internal_state_info());
  }
  if (from.decode_info().size() > 0) {
    _internal_set_decode_info(from._internal_decode_info());
  }
}

void DecodeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeResult::CopyFrom(const DecodeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.DecodeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeResult::IsInitialized() const {
  return true;
}

void DecodeResult::InternalSwap(DecodeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  state_info_.Swap(&other->state_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decode_info_.Swap(&other->decode_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DecodeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommVSAResult_Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class CommVSAResult_Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const CommVSAResult_Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const CommVSAResult_Header* msg);
  static const ::zb::dcts::Position& device_position(const CommVSAResult_Header* msg);
};

const ::zb::dcts::source::SourceId&
CommVSAResult_Header::_Internal::result_from(const CommVSAResult_Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
CommVSAResult_Header::_Internal::time_span(const CommVSAResult_Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
CommVSAResult_Header::_Internal::device_position(const CommVSAResult_Header* msg) {
  return *msg->device_position_;
}
void CommVSAResult_Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void CommVSAResult_Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void CommVSAResult_Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
CommVSAResult_Header::CommVSAResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
}
CommVSAResult_Header::CommVSAResult_Header(const CommVSAResult_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
}

void CommVSAResult_Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

CommVSAResult_Header::~CommVSAResult_Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommVSAResult_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void CommVSAResult_Header::ArenaDtor(void* object) {
  CommVSAResult_Header* _this = reinterpret_cast< CommVSAResult_Header* >(object);
  (void)_this;
}
void CommVSAResult_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommVSAResult_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommVSAResult_Header& CommVSAResult_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommVSAResult_Header_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void CommVSAResult_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommVSAResult_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommVSAResult_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  return target;
}

size_t CommVSAResult_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommVSAResult_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const CommVSAResult_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommVSAResult_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
    MergeFrom(*source);
  }
}

void CommVSAResult_Header::MergeFrom(const CommVSAResult_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void CommVSAResult_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommVSAResult_Header::CopyFrom(const CommVSAResult_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommVSAResult_Header::IsInitialized() const {
  return true;
}

void CommVSAResult_Header::InternalSwap(CommVSAResult_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommVSAResult_Header, sequence_number_)
      + sizeof(CommVSAResult_Header::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(CommVSAResult_Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommVSAResult_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommVSAResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header*>(
      ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_._instance.get_mutable()->demod_result_ = const_cast< ::zb::dcts::scenario::FFP::IQData*>(
      ::zb::dcts::scenario::FFP::IQData::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_._instance.get_mutable()->recognize_ = const_cast< ::zb::dcts::scenario::kh::commVSA::Recognize*>(
      ::zb::dcts::scenario::kh::commVSA::Recognize::internal_default_instance());
  ::zb::dcts::scenario::kh::commVSA::_CommVSAResult_default_instance_._instance.get_mutable()->decode_ = const_cast< ::zb::dcts::scenario::kh::commVSA::DecodeResult*>(
      ::zb::dcts::scenario::kh::commVSA::DecodeResult::internal_default_instance());
}
class CommVSAResult::_Internal {
 public:
  static const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header& header(const CommVSAResult* msg);
  static const ::zb::dcts::scenario::FFP::IQData& demod_result(const CommVSAResult* msg);
  static const ::zb::dcts::scenario::kh::commVSA::Recognize& recognize(const CommVSAResult* msg);
  static const ::zb::dcts::scenario::kh::commVSA::DecodeResult& decode(const CommVSAResult* msg);
};

const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header&
CommVSAResult::_Internal::header(const CommVSAResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::FFP::IQData&
CommVSAResult::_Internal::demod_result(const CommVSAResult* msg) {
  return *msg->demod_result_;
}
const ::zb::dcts::scenario::kh::commVSA::Recognize&
CommVSAResult::_Internal::recognize(const CommVSAResult* msg) {
  return *msg->recognize_;
}
const ::zb::dcts::scenario::kh::commVSA::DecodeResult&
CommVSAResult::_Internal::decode(const CommVSAResult* msg) {
  return *msg->decode_;
}
void CommVSAResult::clear_demod_result() {
  if (GetArena() == nullptr && demod_result_ != nullptr) {
    delete demod_result_;
  }
  demod_result_ = nullptr;
}
CommVSAResult::CommVSAResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commVSA.CommVSAResult)
}
CommVSAResult::CommVSAResult(const CommVSAResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbols().empty()) {
    symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_symbols(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_demod_result()) {
    demod_result_ = new ::zb::dcts::scenario::FFP::IQData(*from.demod_result_);
  } else {
    demod_result_ = nullptr;
  }
  if (from._internal_has_recognize()) {
    recognize_ = new ::zb::dcts::scenario::kh::commVSA::Recognize(*from.recognize_);
  } else {
    recognize_ = nullptr;
  }
  if (from._internal_has_decode()) {
    decode_ = new ::zb::dcts::scenario::kh::commVSA::DecodeResult(*from.decode_);
  } else {
    decode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commVSA.CommVSAResult)
}

void CommVSAResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto.base);
  symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decode_) -
      reinterpret_cast<char*>(&header_)) + sizeof(decode_));
}

CommVSAResult::~CommVSAResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommVSAResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete demod_result_;
  if (this != internal_default_instance()) delete recognize_;
  if (this != internal_default_instance()) delete decode_;
}

void CommVSAResult::ArenaDtor(void* object) {
  CommVSAResult* _this = reinterpret_cast< CommVSAResult* >(object);
  (void)_this;
}
void CommVSAResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommVSAResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommVSAResult& CommVSAResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommVSAResult_scenario_2fkh_2fKhVSA_2eproto.base);
  return *internal_default_instance();
}


void CommVSAResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && demod_result_ != nullptr) {
    delete demod_result_;
  }
  demod_result_ = nullptr;
  if (GetArena() == nullptr && recognize_ != nullptr) {
    delete recognize_;
  }
  recognize_ = nullptr;
  if (GetArena() == nullptr && decode_ != nullptr) {
    delete decode_;
  }
  decode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommVSAResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commVSA.CommVSAResult.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.IQData demod_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_demod_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes symbols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_symbols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commVSA.Recognize recognize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recognize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commVSA.DecodeResult decode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_decode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommVSAResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commVSA.CommVSAResult.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.FFP.IQData demod_result = 2;
  if (this->has_demod_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::demod_result(this), target, stream);
  }

  // bytes symbols = 3;
  if (this->symbols().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_symbols(), target);
  }

  // .zb.dcts.scenario.kh.commVSA.Recognize recognize = 4;
  if (this->has_recognize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recognize(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commVSA.DecodeResult decode = 5;
  if (this->has_decode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::decode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  return target;
}

size_t CommVSAResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes symbols = 3;
  if (this->symbols().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_symbols());
  }

  // .zb.dcts.scenario.kh.commVSA.CommVSAResult.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.FFP.IQData demod_result = 2;
  if (this->has_demod_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *demod_result_);
  }

  // .zb.dcts.scenario.kh.commVSA.Recognize recognize = 4;
  if (this->has_recognize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recognize_);
  }

  // .zb.dcts.scenario.kh.commVSA.DecodeResult decode = 5;
  if (this->has_decode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *decode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommVSAResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommVSAResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommVSAResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commVSA.CommVSAResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commVSA.CommVSAResult)
    MergeFrom(*source);
  }
}

void CommVSAResult::MergeFrom(const CommVSAResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbols().size() > 0) {
    _internal_set_symbols(from._internal_symbols());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header::MergeFrom(from._internal_header());
  }
  if (from.has_demod_result()) {
    _internal_mutable_demod_result()->::zb::dcts::scenario::FFP::IQData::MergeFrom(from._internal_demod_result());
  }
  if (from.has_recognize()) {
    _internal_mutable_recognize()->::zb::dcts::scenario::kh::commVSA::Recognize::MergeFrom(from._internal_recognize());
  }
  if (from.has_decode()) {
    _internal_mutable_decode()->::zb::dcts::scenario::kh::commVSA::DecodeResult::MergeFrom(from._internal_decode());
  }
}

void CommVSAResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommVSAResult::CopyFrom(const CommVSAResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commVSA.CommVSAResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommVSAResult::IsInitialized() const {
  return true;
}

void CommVSAResult::InternalSwap(CommVSAResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  symbols_.Swap(&other->symbols_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommVSAResult, decode_)
      + sizeof(CommVSAResult::decode_)
      - PROTOBUF_FIELD_OFFSET(CommVSAResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommVSAResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commVSA
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::RecognizeState* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::RecognizeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::RecognizeState >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::Recognize* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::Recognize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::Recognize >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::AudioBlock* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::AudioBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::AudioBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::DecodeResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::DecodeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::DecodeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commVSA::CommVSAResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commVSA::CommVSAResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commVSA::CommVSAResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
