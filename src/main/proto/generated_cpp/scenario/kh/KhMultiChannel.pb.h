// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhMultiChannel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "source/kh/KhContext.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
#include "scenario/detection.pb.h"
#include "scenario/kh/KhMultiChannelAcq.pb.h"
#include "scenario/FFP/demodulate.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {
class ChannelChangeRequest;
class ChannelChangeRequestDefaultTypeInternal;
extern ChannelChangeRequestDefaultTypeInternal _ChannelChangeRequest_default_instance_;
class MultiResult;
class MultiResultDefaultTypeInternal;
extern MultiResultDefaultTypeInternal _MultiResult_default_instance_;
class MultiSource;
class MultiSourceDefaultTypeInternal;
extern MultiSourceDefaultTypeInternal _MultiSource_default_instance_;
class MultiSource_ParamsEntry_DoNotUse;
class MultiSource_ParamsEntry_DoNotUseDefaultTypeInternal;
extern MultiSource_ParamsEntry_DoNotUseDefaultTypeInternal _MultiSource_ParamsEntry_DoNotUse_default_instance_;
class MultiTaskStartRequest;
class MultiTaskStartRequestDefaultTypeInternal;
extern MultiTaskStartRequestDefaultTypeInternal _MultiTaskStartRequest_default_instance_;
class NarrowChannelData;
class NarrowChannelDataDefaultTypeInternal;
extern NarrowChannelDataDefaultTypeInternal _NarrowChannelData_default_instance_;
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiSource>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {

enum ParamIndex : int {
  INVALID = 0,
  NB_PARAM = 126,
  ParamIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParamIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParamIndex_IsValid(int value);
constexpr ParamIndex ParamIndex_MIN = INVALID;
constexpr ParamIndex ParamIndex_MAX = NB_PARAM;
constexpr int ParamIndex_ARRAYSIZE = ParamIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor();
template<typename T>
inline const std::string& ParamIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamIndex_descriptor(), enum_t_value);
}
inline bool ParamIndex_Parse(
    const std::string& name, ParamIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamIndex>(
    ParamIndex_descriptor(), name, value);
}
// ===================================================================

class MultiSource_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MultiSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MultiSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MultiSource_ParamsEntry_DoNotUse();
  MultiSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MultiSource_ParamsEntry_DoNotUse& other);
  static const MultiSource_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MultiSource_ParamsEntry_DoNotUse*>(&_MultiSource_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commMultiChannel.MultiSource.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commMultiChannel.MultiSource.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class MultiSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiSource) */ {
 public:
  inline MultiSource() : MultiSource(nullptr) {};
  virtual ~MultiSource();

  MultiSource(const MultiSource& from);
  MultiSource(MultiSource&& from) noexcept
    : MultiSource() {
    *this = ::std::move(from);
  }

  inline MultiSource& operator=(const MultiSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSource& operator=(MultiSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiSource* internal_default_instance() {
    return reinterpret_cast<const MultiSource*>(
               &_MultiSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiSource& a, MultiSource& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiSource* New() const final {
    return CreateMaybeMessage<MultiSource>(nullptr);
  }

  MultiSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiSource& from);
  void MergeFrom(const MultiSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiSource";
  }
  protected:
  explicit MultiSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // map<string, string> params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MultiSource_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::zb::dcts::source::SourceId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto;
};
// -------------------------------------------------------------------

class MultiTaskStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest) */ {
 public:
  inline MultiTaskStartRequest() : MultiTaskStartRequest(nullptr) {};
  virtual ~MultiTaskStartRequest();

  MultiTaskStartRequest(const MultiTaskStartRequest& from);
  MultiTaskStartRequest(MultiTaskStartRequest&& from) noexcept
    : MultiTaskStartRequest() {
    *this = ::std::move(from);
  }

  inline MultiTaskStartRequest& operator=(const MultiTaskStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiTaskStartRequest& operator=(MultiTaskStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiTaskStartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiTaskStartRequest* internal_default_instance() {
    return reinterpret_cast<const MultiTaskStartRequest*>(
               &_MultiTaskStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultiTaskStartRequest& a, MultiTaskStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiTaskStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiTaskStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiTaskStartRequest* New() const final {
    return CreateMaybeMessage<MultiTaskStartRequest>(nullptr);
  }

  MultiTaskStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiTaskStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiTaskStartRequest& from);
  void MergeFrom(const MultiTaskStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiTaskStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest";
  }
  protected:
  explicit MultiTaskStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kDetectionParamFieldNumber = 4,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commMultiChannel.MultiSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource& source_param() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* release_source_param();
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commMultiChannel::MultiSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* source_param);
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  bool has_detection_param() const;
  private:
  bool _internal_has_detection_param() const;
  public:
  void clear_detection_param();
  const ::zb::dcts::scenario::detection::DetectionParam& detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* release_detection_param();
  ::zb::dcts::scenario::detection::DetectionParam* mutable_detection_param();
  void set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param);
  private:
  const ::zb::dcts::scenario::detection::DetectionParam& _internal_detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* _internal_mutable_detection_param();
  public:
  void unsafe_arena_set_allocated_detection_param(
      ::zb::dcts::scenario::detection::DetectionParam* detection_param);
  ::zb::dcts::scenario::detection::DetectionParam* unsafe_arena_release_detection_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* source_param_;
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* acq_param_;
  ::zb::dcts::scenario::detection::DetectionParam* detection_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto;
};
// -------------------------------------------------------------------

class NarrowChannelData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData) */ {
 public:
  inline NarrowChannelData() : NarrowChannelData(nullptr) {};
  virtual ~NarrowChannelData();

  NarrowChannelData(const NarrowChannelData& from);
  NarrowChannelData(NarrowChannelData&& from) noexcept
    : NarrowChannelData() {
    *this = ::std::move(from);
  }

  inline NarrowChannelData& operator=(const NarrowChannelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NarrowChannelData& operator=(NarrowChannelData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NarrowChannelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NarrowChannelData* internal_default_instance() {
    return reinterpret_cast<const NarrowChannelData*>(
               &_NarrowChannelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NarrowChannelData& a, NarrowChannelData& b) {
    a.Swap(&b);
  }
  inline void Swap(NarrowChannelData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NarrowChannelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NarrowChannelData* New() const final {
    return CreateMaybeMessage<NarrowChannelData>(nullptr);
  }

  NarrowChannelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NarrowChannelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NarrowChannelData& from);
  void MergeFrom(const NarrowChannelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NarrowChannelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData";
  }
  protected:
  explicit NarrowChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIFieldNumber = 8,
    kDataQFieldNumber = 9,
    kSpectrumFieldNumber = 11,
    kTimeStampFieldNumber = 7,
    kChannelAudioFieldNumber = 12,
    kCentFreqFieldNumber = 4,
    kSampRateFieldNumber = 6,
    kChannelIdFieldNumber = 2,
  };
  // repeated float data_i = 8;
  int data_i_size() const;
  private:
  int _internal_data_i_size() const;
  public:
  void clear_data_i();
  private:
  float _internal_data_i(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_i() const;
  void _internal_add_data_i(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_i();
  public:
  float data_i(int index) const;
  void set_data_i(int index, float value);
  void add_data_i(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_i();

  // repeated float data_q = 9;
  int data_q_size() const;
  private:
  int _internal_data_q_size() const;
  public:
  void clear_data_q();
  private:
  float _internal_data_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_q() const;
  void _internal_add_data_q(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_q();
  public:
  float data_q(int index) const;
  void set_data_q(int index, float value);
  void add_data_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_q();

  // repeated float spectrum = 11;
  int spectrum_size() const;
  private:
  int _internal_spectrum_size() const;
  public:
  void clear_spectrum();
  private:
  float _internal_spectrum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_spectrum() const;
  void _internal_add_spectrum(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_spectrum();
  public:
  float spectrum(int index) const;
  void set_spectrum(int index, float value);
  void add_spectrum(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      spectrum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_spectrum();

  // .zb.dcts.Timestamp time_stamp = 7;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::zb::dcts::Timestamp& time_stamp() const;
  ::zb::dcts::Timestamp* release_time_stamp();
  ::zb::dcts::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp);
  private:
  const ::zb::dcts::Timestamp& _internal_time_stamp() const;
  ::zb::dcts::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::zb::dcts::Timestamp* time_stamp);
  ::zb::dcts::Timestamp* unsafe_arena_release_time_stamp();

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 12;
  bool has_channel_audio() const;
  private:
  bool _internal_has_channel_audio() const;
  public:
  void clear_channel_audio();
  const ::zb::dcts::scenario::FFP::ChannelAudio& channel_audio() const;
  ::zb::dcts::scenario::FFP::ChannelAudio* release_channel_audio();
  ::zb::dcts::scenario::FFP::ChannelAudio* mutable_channel_audio();
  void set_allocated_channel_audio(::zb::dcts::scenario::FFP::ChannelAudio* channel_audio);
  private:
  const ::zb::dcts::scenario::FFP::ChannelAudio& _internal_channel_audio() const;
  ::zb::dcts::scenario::FFP::ChannelAudio* _internal_mutable_channel_audio();
  public:
  void unsafe_arena_set_allocated_channel_audio(
      ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio);
  ::zb::dcts::scenario::FFP::ChannelAudio* unsafe_arena_release_channel_audio();

  // double cent_freq = 4;
  void clear_cent_freq();
  double cent_freq() const;
  void set_cent_freq(double value);
  private:
  double _internal_cent_freq() const;
  void _internal_set_cent_freq(double value);
  public:

  // double samp_rate = 6;
  void clear_samp_rate();
  double samp_rate() const;
  void set_samp_rate(double value);
  private:
  double _internal_samp_rate() const;
  void _internal_set_samp_rate(double value);
  public:

  // int32 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_i_;
  mutable std::atomic<int> _data_i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_q_;
  mutable std::atomic<int> _data_q_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > spectrum_;
  mutable std::atomic<int> _spectrum_cached_byte_size_;
  ::zb::dcts::Timestamp* time_stamp_;
  ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio_;
  double cent_freq_;
  double samp_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto;
};
// -------------------------------------------------------------------

class MultiResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.MultiResult) */ {
 public:
  inline MultiResult() : MultiResult(nullptr) {};
  virtual ~MultiResult();

  MultiResult(const MultiResult& from);
  MultiResult(MultiResult&& from) noexcept
    : MultiResult() {
    *this = ::std::move(from);
  }

  inline MultiResult& operator=(const MultiResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiResult& operator=(MultiResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiResult* internal_default_instance() {
    return reinterpret_cast<const MultiResult*>(
               &_MultiResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiResult& a, MultiResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiResult* New() const final {
    return CreateMaybeMessage<MultiResult>(nullptr);
  }

  MultiResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiResult& from);
  void MergeFrom(const MultiResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.MultiResult";
  }
  protected:
  explicit MultiResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelDataFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPanoramaViewFieldNumber = 3,
    kCloseshotViewFieldNumber = 4,
  };
  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData channel_data = 5;
  int channel_data_size() const;
  private:
  int _internal_channel_data_size() const;
  public:
  void clear_channel_data();
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* mutable_channel_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >*
      mutable_channel_data();
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData& _internal_channel_data(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* _internal_add_channel_data();
  public:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData& channel_data(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* add_channel_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >&
      channel_data() const;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.source.kh.OperationStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::zb::dcts::source::kh::OperationStatus& status() const;
  ::zb::dcts::source::kh::OperationStatus* release_status();
  ::zb::dcts::source::kh::OperationStatus* mutable_status();
  void set_allocated_status(::zb::dcts::source::kh::OperationStatus* status);
  private:
  const ::zb::dcts::source::kh::OperationStatus& _internal_status() const;
  ::zb::dcts::source::kh::OperationStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::zb::dcts::source::kh::OperationStatus* status);
  ::zb::dcts::source::kh::OperationStatus* unsafe_arena_release_status();

  // .zb.dcts.scenario.spectrum.View panorama_view = 3;
  bool has_panorama_view() const;
  private:
  bool _internal_has_panorama_view() const;
  public:
  void clear_panorama_view();
  const ::zb::dcts::scenario::spectrum::View& panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* release_panorama_view();
  ::zb::dcts::scenario::spectrum::View* mutable_panorama_view();
  void set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_panorama_view();
  public:
  void unsafe_arena_set_allocated_panorama_view(
      ::zb::dcts::scenario::spectrum::View* panorama_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_panorama_view();

  // .zb.dcts.scenario.spectrum.View closeshot_view = 4;
  bool has_closeshot_view() const;
  private:
  bool _internal_has_closeshot_view() const;
  public:
  void clear_closeshot_view();
  const ::zb::dcts::scenario::spectrum::View& closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* release_closeshot_view();
  ::zb::dcts::scenario::spectrum::View* mutable_closeshot_view();
  void set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_closeshot_view();
  public:
  void unsafe_arena_set_allocated_closeshot_view(
      ::zb::dcts::scenario::spectrum::View* closeshot_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_closeshot_view();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData > channel_data_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::source::kh::OperationStatus* status_;
  ::zb::dcts::scenario::spectrum::View* panorama_view_;
  ::zb::dcts::scenario::spectrum::View* closeshot_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto;
};
// -------------------------------------------------------------------

class ChannelChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest) */ {
 public:
  inline ChannelChangeRequest() : ChannelChangeRequest(nullptr) {};
  virtual ~ChannelChangeRequest();

  ChannelChangeRequest(const ChannelChangeRequest& from);
  ChannelChangeRequest(ChannelChangeRequest&& from) noexcept
    : ChannelChangeRequest() {
    *this = ::std::move(from);
  }

  inline ChannelChangeRequest& operator=(const ChannelChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelChangeRequest& operator=(ChannelChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelChangeRequest*>(
               &_ChannelChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelChangeRequest& a, ChannelChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelChangeRequest* New() const final {
    return CreateMaybeMessage<ChannelChangeRequest>(nullptr);
  }

  ChannelChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelChangeRequest& from);
  void MergeFrom(const ChannelChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest";
  }
  protected:
  explicit ChannelChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 4,
    kResponserFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 4;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >*
      mutable_channels();
  private:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& _internal_channels(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* _internal_add_channels();
  public:
  const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& channels(int index) const;
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >&
      channels() const;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.kh.commMultiChannel.ParamIndex index = 2;
  void clear_index();
  ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex index() const;
  void set_index(::zb::dcts::scenario::kh::commMultiChannel::ParamIndex value);
  private:
  ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex _internal_index() const;
  void _internal_set_index(::zb::dcts::scenario::kh::commMultiChannel::ParamIndex value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel > channels_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  int index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MultiSource

// .zb.dcts.source.SourceId id = 1;
inline bool MultiSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool MultiSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& MultiSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& MultiSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiSource.id)
  return _internal_id();
}
inline void MultiSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiSource.id)
}
inline ::zb::dcts::source::SourceId* MultiSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* MultiSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* MultiSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* MultiSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiSource.id)
  return _internal_mutable_id();
}
inline void MultiSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiSource.id)
}

// map<string, string> params = 6;
inline int MultiSource::_internal_params_size() const {
  return params_.size();
}
inline int MultiSource::params_size() const {
  return _internal_params_size();
}
inline void MultiSource::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MultiSource::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MultiSource::params() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.kh.commMultiChannel.MultiSource.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MultiSource::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MultiSource::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.kh.commMultiChannel.MultiSource.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// MultiTaskStartRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool MultiTaskStartRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool MultiTaskStartRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& MultiTaskStartRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& MultiTaskStartRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.scenario)
  return _internal_scenario();
}
inline void MultiTaskStartRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* MultiTaskStartRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* MultiTaskStartRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* MultiTaskStartRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* MultiTaskStartRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.scenario)
  return _internal_mutable_scenario();
}
inline void MultiTaskStartRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.scenario)
}

// .zb.dcts.scenario.kh.commMultiChannel.MultiSource source_param = 2;
inline bool MultiTaskStartRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool MultiTaskStartRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline void MultiTaskStartRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource& MultiTaskStartRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource*>(
      &::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource& MultiTaskStartRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.source_param)
  return _internal_source_param();
}
inline void MultiTaskStartRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* MultiTaskStartRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* MultiTaskStartRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.source_param)
  
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* MultiTaskStartRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* MultiTaskStartRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.source_param)
  return _internal_mutable_source_param();
}
inline void MultiTaskStartRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commMultiChannel::MultiSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_param_;
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source_param);
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.source_param)
}

// .zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam acq_param = 3;
inline bool MultiTaskStartRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool MultiTaskStartRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam& MultiTaskStartRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam*>(
      &::zb::dcts::scenario::kh::commMultiChannel::_MultiAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam& MultiTaskStartRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.acq_param)
  return _internal_acq_param();
}
inline void MultiTaskStartRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* MultiTaskStartRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* MultiTaskStartRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* MultiTaskStartRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* MultiTaskStartRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void MultiTaskStartRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.acq_param)
}

// .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
inline bool MultiTaskStartRequest::_internal_has_detection_param() const {
  return this != internal_default_instance() && detection_param_ != nullptr;
}
inline bool MultiTaskStartRequest::has_detection_param() const {
  return _internal_has_detection_param();
}
inline const ::zb::dcts::scenario::detection::DetectionParam& MultiTaskStartRequest::_internal_detection_param() const {
  const ::zb::dcts::scenario::detection::DetectionParam* p = detection_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::detection::DetectionParam*>(
      &::zb::dcts::scenario::detection::_DetectionParam_default_instance_);
}
inline const ::zb::dcts::scenario::detection::DetectionParam& MultiTaskStartRequest::detection_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.detection_param)
  return _internal_detection_param();
}
inline void MultiTaskStartRequest::unsafe_arena_set_allocated_detection_param(
    ::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  detection_param_ = detection_param;
  if (detection_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.detection_param)
}
inline ::zb::dcts::scenario::detection::DetectionParam* MultiTaskStartRequest::release_detection_param() {
  auto temp = unsafe_arena_release_detection_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* MultiTaskStartRequest::unsafe_arena_release_detection_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.detection_param)
  
  ::zb::dcts::scenario::detection::DetectionParam* temp = detection_param_;
  detection_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* MultiTaskStartRequest::_internal_mutable_detection_param() {
  
  if (detection_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::detection::DetectionParam>(GetArena());
    detection_param_ = p;
  }
  return detection_param_;
}
inline ::zb::dcts::scenario::detection::DetectionParam* MultiTaskStartRequest::mutable_detection_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.detection_param)
  return _internal_mutable_detection_param();
}
inline void MultiTaskStartRequest::set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  if (detection_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param)->GetArena();
    if (message_arena != submessage_arena) {
      detection_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_param, submessage_arena);
    }
    
  } else {
    
  }
  detection_param_ = detection_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest.detection_param)
}

// -------------------------------------------------------------------

// NarrowChannelData

// int32 channel_id = 2;
inline void NarrowChannelData::clear_channel_id() {
  channel_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NarrowChannelData::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NarrowChannelData::channel_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_id)
  return _internal_channel_id();
}
inline void NarrowChannelData::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_id_ = value;
}
inline void NarrowChannelData::set_channel_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_id)
}

// double cent_freq = 4;
inline void NarrowChannelData::clear_cent_freq() {
  cent_freq_ = 0;
}
inline double NarrowChannelData::_internal_cent_freq() const {
  return cent_freq_;
}
inline double NarrowChannelData::cent_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.cent_freq)
  return _internal_cent_freq();
}
inline void NarrowChannelData::_internal_set_cent_freq(double value) {
  
  cent_freq_ = value;
}
inline void NarrowChannelData::set_cent_freq(double value) {
  _internal_set_cent_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.cent_freq)
}

// double samp_rate = 6;
inline void NarrowChannelData::clear_samp_rate() {
  samp_rate_ = 0;
}
inline double NarrowChannelData::_internal_samp_rate() const {
  return samp_rate_;
}
inline double NarrowChannelData::samp_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.samp_rate)
  return _internal_samp_rate();
}
inline void NarrowChannelData::_internal_set_samp_rate(double value) {
  
  samp_rate_ = value;
}
inline void NarrowChannelData::set_samp_rate(double value) {
  _internal_set_samp_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.samp_rate)
}

// .zb.dcts.Timestamp time_stamp = 7;
inline bool NarrowChannelData::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool NarrowChannelData::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::zb::dcts::Timestamp& NarrowChannelData::_internal_time_stamp() const {
  const ::zb::dcts::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Timestamp*>(
      &::zb::dcts::_Timestamp_default_instance_);
}
inline const ::zb::dcts::Timestamp& NarrowChannelData::time_stamp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.time_stamp)
  return _internal_time_stamp();
}
inline void NarrowChannelData::unsafe_arena_set_allocated_time_stamp(
    ::zb::dcts::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.time_stamp)
}
inline ::zb::dcts::Timestamp* NarrowChannelData::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Timestamp* NarrowChannelData::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.time_stamp)
  
  ::zb::dcts::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline ::zb::dcts::Timestamp* NarrowChannelData::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline ::zb::dcts::Timestamp* NarrowChannelData::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void NarrowChannelData::set_allocated_time_stamp(::zb::dcts::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.time_stamp)
}

// repeated float data_i = 8;
inline int NarrowChannelData::_internal_data_i_size() const {
  return data_i_.size();
}
inline int NarrowChannelData::data_i_size() const {
  return _internal_data_i_size();
}
inline void NarrowChannelData::clear_data_i() {
  data_i_.Clear();
}
inline float NarrowChannelData::_internal_data_i(int index) const {
  return data_i_.Get(index);
}
inline float NarrowChannelData::data_i(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_i)
  return _internal_data_i(index);
}
inline void NarrowChannelData::set_data_i(int index, float value) {
  data_i_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_i)
}
inline void NarrowChannelData::_internal_add_data_i(float value) {
  data_i_.Add(value);
}
inline void NarrowChannelData::add_data_i(float value) {
  _internal_add_data_i(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::_internal_data_i() const {
  return data_i_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::data_i() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_i)
  return _internal_data_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::_internal_mutable_data_i() {
  return &data_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::mutable_data_i() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_i)
  return _internal_mutable_data_i();
}

// repeated float data_q = 9;
inline int NarrowChannelData::_internal_data_q_size() const {
  return data_q_.size();
}
inline int NarrowChannelData::data_q_size() const {
  return _internal_data_q_size();
}
inline void NarrowChannelData::clear_data_q() {
  data_q_.Clear();
}
inline float NarrowChannelData::_internal_data_q(int index) const {
  return data_q_.Get(index);
}
inline float NarrowChannelData::data_q(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_q)
  return _internal_data_q(index);
}
inline void NarrowChannelData::set_data_q(int index, float value) {
  data_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_q)
}
inline void NarrowChannelData::_internal_add_data_q(float value) {
  data_q_.Add(value);
}
inline void NarrowChannelData::add_data_q(float value) {
  _internal_add_data_q(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::_internal_data_q() const {
  return data_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::data_q() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_q)
  return _internal_data_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::_internal_mutable_data_q() {
  return &data_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::mutable_data_q() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.data_q)
  return _internal_mutable_data_q();
}

// repeated float spectrum = 11;
inline int NarrowChannelData::_internal_spectrum_size() const {
  return spectrum_.size();
}
inline int NarrowChannelData::spectrum_size() const {
  return _internal_spectrum_size();
}
inline void NarrowChannelData::clear_spectrum() {
  spectrum_.Clear();
}
inline float NarrowChannelData::_internal_spectrum(int index) const {
  return spectrum_.Get(index);
}
inline float NarrowChannelData::spectrum(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.spectrum)
  return _internal_spectrum(index);
}
inline void NarrowChannelData::set_spectrum(int index, float value) {
  spectrum_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.spectrum)
}
inline void NarrowChannelData::_internal_add_spectrum(float value) {
  spectrum_.Add(value);
}
inline void NarrowChannelData::add_spectrum(float value) {
  _internal_add_spectrum(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.spectrum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::_internal_spectrum() const {
  return spectrum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NarrowChannelData::spectrum() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.spectrum)
  return _internal_spectrum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::_internal_mutable_spectrum() {
  return &spectrum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NarrowChannelData::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.spectrum)
  return _internal_mutable_spectrum();
}

// .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 12;
inline bool NarrowChannelData::_internal_has_channel_audio() const {
  return this != internal_default_instance() && channel_audio_ != nullptr;
}
inline bool NarrowChannelData::has_channel_audio() const {
  return _internal_has_channel_audio();
}
inline const ::zb::dcts::scenario::FFP::ChannelAudio& NarrowChannelData::_internal_channel_audio() const {
  const ::zb::dcts::scenario::FFP::ChannelAudio* p = channel_audio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::ChannelAudio*>(
      &::zb::dcts::scenario::FFP::_ChannelAudio_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::ChannelAudio& NarrowChannelData::channel_audio() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_audio)
  return _internal_channel_audio();
}
inline void NarrowChannelData::unsafe_arena_set_allocated_channel_audio(
    ::zb::dcts::scenario::FFP::ChannelAudio* channel_audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_audio_);
  }
  channel_audio_ = channel_audio;
  if (channel_audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_audio)
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* NarrowChannelData::release_channel_audio() {
  auto temp = unsafe_arena_release_channel_audio();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* NarrowChannelData::unsafe_arena_release_channel_audio() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_audio)
  
  ::zb::dcts::scenario::FFP::ChannelAudio* temp = channel_audio_;
  channel_audio_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* NarrowChannelData::_internal_mutable_channel_audio() {
  
  if (channel_audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::ChannelAudio>(GetArena());
    channel_audio_ = p;
  }
  return channel_audio_;
}
inline ::zb::dcts::scenario::FFP::ChannelAudio* NarrowChannelData::mutable_channel_audio() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_audio)
  return _internal_mutable_channel_audio();
}
inline void NarrowChannelData::set_allocated_channel_audio(::zb::dcts::scenario::FFP::ChannelAudio* channel_audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_audio_);
  }
  if (channel_audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_audio)->GetArena();
    if (message_arena != submessage_arena) {
      channel_audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_audio, submessage_arena);
    }
    
  } else {
    
  }
  channel_audio_ = channel_audio;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData.channel_audio)
}

// -------------------------------------------------------------------

// MultiResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool MultiResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MultiResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& MultiResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& MultiResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiResult.header)
  return _internal_header();
}
inline void MultiResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* MultiResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* MultiResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* MultiResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* MultiResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiResult.header)
  return _internal_mutable_header();
}
inline void MultiResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.header)
}

// .zb.dcts.source.kh.OperationStatus status = 2;
inline bool MultiResult::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool MultiResult::has_status() const {
  return _internal_has_status();
}
inline const ::zb::dcts::source::kh::OperationStatus& MultiResult::_internal_status() const {
  const ::zb::dcts::source::kh::OperationStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::OperationStatus*>(
      &::zb::dcts::source::kh::_OperationStatus_default_instance_);
}
inline const ::zb::dcts::source::kh::OperationStatus& MultiResult::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiResult.status)
  return _internal_status();
}
inline void MultiResult::unsafe_arena_set_allocated_status(
    ::zb::dcts::source::kh::OperationStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.status)
}
inline ::zb::dcts::source::kh::OperationStatus* MultiResult::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* MultiResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiResult.status)
  
  ::zb::dcts::source::kh::OperationStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* MultiResult::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::OperationStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::zb::dcts::source::kh::OperationStatus* MultiResult::mutable_status() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiResult.status)
  return _internal_mutable_status();
}
inline void MultiResult::set_allocated_status(::zb::dcts::source::kh::OperationStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.status)
}

// .zb.dcts.scenario.spectrum.View panorama_view = 3;
inline bool MultiResult::_internal_has_panorama_view() const {
  return this != internal_default_instance() && panorama_view_ != nullptr;
}
inline bool MultiResult::has_panorama_view() const {
  return _internal_has_panorama_view();
}
inline const ::zb::dcts::scenario::spectrum::View& MultiResult::_internal_panorama_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = panorama_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& MultiResult::panorama_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiResult.panorama_view)
  return _internal_panorama_view();
}
inline void MultiResult::unsafe_arena_set_allocated_panorama_view(
    ::zb::dcts::scenario::spectrum::View* panorama_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  panorama_view_ = panorama_view;
  if (panorama_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.panorama_view)
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::release_panorama_view() {
  auto temp = unsafe_arena_release_panorama_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::unsafe_arena_release_panorama_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiResult.panorama_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::_internal_mutable_panorama_view() {
  
  if (panorama_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    panorama_view_ = p;
  }
  return panorama_view_;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::mutable_panorama_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiResult.panorama_view)
  return _internal_mutable_panorama_view();
}
inline void MultiResult::set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  if (panorama_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view)->GetArena();
    if (message_arena != submessage_arena) {
      panorama_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panorama_view, submessage_arena);
    }
    
  } else {
    
  }
  panorama_view_ = panorama_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.panorama_view)
}

// .zb.dcts.scenario.spectrum.View closeshot_view = 4;
inline bool MultiResult::_internal_has_closeshot_view() const {
  return this != internal_default_instance() && closeshot_view_ != nullptr;
}
inline bool MultiResult::has_closeshot_view() const {
  return _internal_has_closeshot_view();
}
inline const ::zb::dcts::scenario::spectrum::View& MultiResult::_internal_closeshot_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = closeshot_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& MultiResult::closeshot_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiResult.closeshot_view)
  return _internal_closeshot_view();
}
inline void MultiResult::unsafe_arena_set_allocated_closeshot_view(
    ::zb::dcts::scenario::spectrum::View* closeshot_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  closeshot_view_ = closeshot_view;
  if (closeshot_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.closeshot_view)
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::release_closeshot_view() {
  auto temp = unsafe_arena_release_closeshot_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::unsafe_arena_release_closeshot_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.MultiResult.closeshot_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::_internal_mutable_closeshot_view() {
  
  if (closeshot_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    closeshot_view_ = p;
  }
  return closeshot_view_;
}
inline ::zb::dcts::scenario::spectrum::View* MultiResult::mutable_closeshot_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiResult.closeshot_view)
  return _internal_mutable_closeshot_view();
}
inline void MultiResult::set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  if (closeshot_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view)->GetArena();
    if (message_arena != submessage_arena) {
      closeshot_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closeshot_view, submessage_arena);
    }
    
  } else {
    
  }
  closeshot_view_ = closeshot_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.MultiResult.closeshot_view)
}

// repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData channel_data = 5;
inline int MultiResult::_internal_channel_data_size() const {
  return channel_data_.size();
}
inline int MultiResult::channel_data_size() const {
  return _internal_channel_data_size();
}
inline void MultiResult::clear_channel_data() {
  channel_data_.Clear();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* MultiResult::mutable_channel_data(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.MultiResult.channel_data)
  return channel_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >*
MultiResult::mutable_channel_data() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.MultiResult.channel_data)
  return &channel_data_;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData& MultiResult::_internal_channel_data(int index) const {
  return channel_data_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData& MultiResult::channel_data(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.MultiResult.channel_data)
  return _internal_channel_data(index);
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* MultiResult::_internal_add_channel_data() {
  return channel_data_.Add();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* MultiResult::add_channel_data() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.MultiResult.channel_data)
  return _internal_add_channel_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >&
MultiResult::channel_data() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.MultiResult.channel_data)
  return channel_data_;
}

// -------------------------------------------------------------------

// ChannelChangeRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ChannelChangeRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ChannelChangeRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChannelChangeRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChannelChangeRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.responser)
  return _internal_responser();
}
inline void ChannelChangeRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChannelChangeRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChannelChangeRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChannelChangeRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChannelChangeRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.responser)
  return _internal_mutable_responser();
}
inline void ChannelChangeRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.responser)
}

// .zb.dcts.scenario.kh.commMultiChannel.ParamIndex index = 2;
inline void ChannelChangeRequest::clear_index() {
  index_ = 0;
}
inline ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex ChannelChangeRequest::_internal_index() const {
  return static_cast< ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex >(index_);
}
inline ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex ChannelChangeRequest::index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.index)
  return _internal_index();
}
inline void ChannelChangeRequest::_internal_set_index(::zb::dcts::scenario::kh::commMultiChannel::ParamIndex value) {
  
  index_ = value;
}
inline void ChannelChangeRequest::set_index(::zb::dcts::scenario::kh::commMultiChannel::ParamIndex value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.index)
}

// repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 4;
inline int ChannelChangeRequest::_internal_channels_size() const {
  return channels_.size();
}
inline int ChannelChangeRequest::channels_size() const {
  return _internal_channels_size();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* ChannelChangeRequest::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >*
ChannelChangeRequest::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.channels)
  return &channels_;
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& ChannelChangeRequest::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel& ChannelChangeRequest::channels(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.channels)
  return _internal_channels(index);
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* ChannelChangeRequest::_internal_add_channels() {
  return channels_.Add();
}
inline ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel* ChannelChangeRequest::add_channels() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannel >&
ChannelChangeRequest::channels() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex>() {
  return ::zb::dcts::scenario::kh::commMultiChannel::ParamIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhMultiChannel_2eproto
