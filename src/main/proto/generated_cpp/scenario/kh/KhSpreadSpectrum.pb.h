// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhSpreadSpectrum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpreadSpectrum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpreadSpectrum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
#include "scenario/kh/KhIQDataAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpreadSpectrum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhSpreadSpectrum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpreadSpectrum {
class CommSpreadSpectrumResult;
class CommSpreadSpectrumResultDefaultTypeInternal;
extern CommSpreadSpectrumResultDefaultTypeInternal _CommSpreadSpectrumResult_default_instance_;
class CommSpreadSpectrumTaskRequest;
class CommSpreadSpectrumTaskRequestDefaultTypeInternal;
extern CommSpreadSpectrumTaskRequestDefaultTypeInternal _CommSpreadSpectrumTaskRequest_default_instance_;
}  // namespace commSpreadSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpreadSpectrum {

// ===================================================================

class CommSpreadSpectrumTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest) */ {
 public:
  inline CommSpreadSpectrumTaskRequest() : CommSpreadSpectrumTaskRequest(nullptr) {};
  virtual ~CommSpreadSpectrumTaskRequest();

  CommSpreadSpectrumTaskRequest(const CommSpreadSpectrumTaskRequest& from);
  CommSpreadSpectrumTaskRequest(CommSpreadSpectrumTaskRequest&& from) noexcept
    : CommSpreadSpectrumTaskRequest() {
    *this = ::std::move(from);
  }

  inline CommSpreadSpectrumTaskRequest& operator=(const CommSpreadSpectrumTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommSpreadSpectrumTaskRequest& operator=(CommSpreadSpectrumTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommSpreadSpectrumTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommSpreadSpectrumTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommSpreadSpectrumTaskRequest*>(
               &_CommSpreadSpectrumTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommSpreadSpectrumTaskRequest& a, CommSpreadSpectrumTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommSpreadSpectrumTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommSpreadSpectrumTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommSpreadSpectrumTaskRequest* New() const final {
    return CreateMaybeMessage<CommSpreadSpectrumTaskRequest>(nullptr);
  }

  CommSpreadSpectrumTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommSpreadSpectrumTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommSpreadSpectrumTaskRequest& from);
  void MergeFrom(const CommSpreadSpectrumTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommSpreadSpectrumTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest";
  }
  protected:
  explicit CommSpreadSpectrumTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* release_acq_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* unsafe_arena_release_acq_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhSpreadSpectrum_2eproto;
};
// -------------------------------------------------------------------

class CommSpreadSpectrumResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult) */ {
 public:
  inline CommSpreadSpectrumResult() : CommSpreadSpectrumResult(nullptr) {};
  virtual ~CommSpreadSpectrumResult();

  CommSpreadSpectrumResult(const CommSpreadSpectrumResult& from);
  CommSpreadSpectrumResult(CommSpreadSpectrumResult&& from) noexcept
    : CommSpreadSpectrumResult() {
    *this = ::std::move(from);
  }

  inline CommSpreadSpectrumResult& operator=(const CommSpreadSpectrumResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommSpreadSpectrumResult& operator=(CommSpreadSpectrumResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommSpreadSpectrumResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommSpreadSpectrumResult* internal_default_instance() {
    return reinterpret_cast<const CommSpreadSpectrumResult*>(
               &_CommSpreadSpectrumResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommSpreadSpectrumResult& a, CommSpreadSpectrumResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommSpreadSpectrumResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommSpreadSpectrumResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommSpreadSpectrumResult* New() const final {
    return CreateMaybeMessage<CommSpreadSpectrumResult>(nullptr);
  }

  CommSpreadSpectrumResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommSpreadSpectrumResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommSpreadSpectrumResult& from);
  void MergeFrom(const CommSpreadSpectrumResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommSpreadSpectrumResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult";
  }
  protected:
  explicit CommSpreadSpectrumResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSpectrumFieldNumber = 2,
    kFreqFieldNumber = 3,
    kCodeSpeedFieldNumber = 4,
    kLevelFieldNumber = 6,
    kBwFieldNumber = 7,
    kPnPeriodFieldNumber = 8,
    kPnLengthFieldNumber = 9,
    kPnChipRateFieldNumber = 10,
    kSignalTypeFieldNumber = 5,
  };
  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.spectrum.View spectrum = 2;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::scenario::spectrum::View& spectrum() const;
  ::zb::dcts::scenario::spectrum::View* release_spectrum();
  ::zb::dcts::scenario::spectrum::View* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::scenario::spectrum::View* spectrum);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_spectrum() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::scenario::spectrum::View* spectrum);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_spectrum();

  // double freq = 3;
  void clear_freq();
  double freq() const;
  void set_freq(double value);
  private:
  double _internal_freq() const;
  void _internal_set_freq(double value);
  public:

  // double code_speed = 4;
  void clear_code_speed();
  double code_speed() const;
  void set_code_speed(double value);
  private:
  double _internal_code_speed() const;
  void _internal_set_code_speed(double value);
  public:

  // double level = 6;
  void clear_level();
  double level() const;
  void set_level(double value);
  private:
  double _internal_level() const;
  void _internal_set_level(double value);
  public:

  // double bw = 7;
  void clear_bw();
  double bw() const;
  void set_bw(double value);
  private:
  double _internal_bw() const;
  void _internal_set_bw(double value);
  public:

  // double pn_period = 8;
  void clear_pn_period();
  double pn_period() const;
  void set_pn_period(double value);
  private:
  double _internal_pn_period() const;
  void _internal_set_pn_period(double value);
  public:

  // int64 pn_length = 9;
  void clear_pn_length();
  ::PROTOBUF_NAMESPACE_ID::int64 pn_length() const;
  void set_pn_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pn_length() const;
  void _internal_set_pn_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double pn_chip_rate = 10;
  void clear_pn_chip_rate();
  double pn_chip_rate() const;
  void set_pn_chip_rate(double value);
  private:
  double _internal_pn_chip_rate() const;
  void _internal_set_pn_chip_rate(double value);
  public:

  // int32 signal_type = 5;
  void clear_signal_type();
  ::PROTOBUF_NAMESPACE_ID::int32 signal_type() const;
  void set_signal_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal_type() const;
  void _internal_set_signal_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::scenario::spectrum::View* spectrum_;
  double freq_;
  double code_speed_;
  double level_;
  double bw_;
  double pn_period_;
  ::PROTOBUF_NAMESPACE_ID::int64 pn_length_;
  double pn_chip_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhSpreadSpectrum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommSpreadSpectrumTaskRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool CommSpreadSpectrumTaskRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool CommSpreadSpectrumTaskRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& CommSpreadSpectrumTaskRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& CommSpreadSpectrumTaskRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.scenario)
  return _internal_scenario();
}
inline void CommSpreadSpectrumTaskRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* CommSpreadSpectrumTaskRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommSpreadSpectrumTaskRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommSpreadSpectrumTaskRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* CommSpreadSpectrumTaskRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.scenario)
  return _internal_mutable_scenario();
}
inline void CommSpreadSpectrumTaskRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.scenario)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
inline bool CommSpreadSpectrumTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommSpreadSpectrumTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommSpreadSpectrumTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommSpreadSpectrumTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.source_param)
  return _internal_source_param();
}
inline void CommSpreadSpectrumTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommSpreadSpectrumTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommSpreadSpectrumTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommSpreadSpectrumTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommSpreadSpectrumTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommSpreadSpectrumTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
inline bool CommSpreadSpectrumTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommSpreadSpectrumTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommSpreadSpectrumTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcquireParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommSpreadSpectrumTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommSpreadSpectrumTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommSpreadSpectrumTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommSpreadSpectrumTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommSpreadSpectrumTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommSpreadSpectrumTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommSpreadSpectrumTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest.acq_param)
}

// -------------------------------------------------------------------

// CommSpreadSpectrumResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool CommSpreadSpectrumResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommSpreadSpectrumResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& CommSpreadSpectrumResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& CommSpreadSpectrumResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.header)
  return _internal_header();
}
inline void CommSpreadSpectrumResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* CommSpreadSpectrumResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommSpreadSpectrumResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommSpreadSpectrumResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* CommSpreadSpectrumResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.header)
  return _internal_mutable_header();
}
inline void CommSpreadSpectrumResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.header)
}

// .zb.dcts.scenario.spectrum.View spectrum = 2;
inline bool CommSpreadSpectrumResult::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool CommSpreadSpectrumResult::has_spectrum() const {
  return _internal_has_spectrum();
}
inline const ::zb::dcts::scenario::spectrum::View& CommSpreadSpectrumResult::_internal_spectrum() const {
  const ::zb::dcts::scenario::spectrum::View* p = spectrum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& CommSpreadSpectrumResult::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.spectrum)
  return _internal_spectrum();
}
inline void CommSpreadSpectrumResult::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::scenario::spectrum::View* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.spectrum)
}
inline ::zb::dcts::scenario::spectrum::View* CommSpreadSpectrumResult::release_spectrum() {
  auto temp = unsafe_arena_release_spectrum();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommSpreadSpectrumResult::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.spectrum)
  
  ::zb::dcts::scenario::spectrum::View* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommSpreadSpectrumResult::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::scenario::spectrum::View* CommSpreadSpectrumResult::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.spectrum)
  return _internal_mutable_spectrum();
}
inline void CommSpreadSpectrumResult::set_allocated_spectrum(::zb::dcts::scenario::spectrum::View* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum)->GetArena();
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.spectrum)
}

// double freq = 3;
inline void CommSpreadSpectrumResult::clear_freq() {
  freq_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_freq() const {
  return freq_;
}
inline double CommSpreadSpectrumResult::freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.freq)
  return _internal_freq();
}
inline void CommSpreadSpectrumResult::_internal_set_freq(double value) {
  
  freq_ = value;
}
inline void CommSpreadSpectrumResult::set_freq(double value) {
  _internal_set_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.freq)
}

// double code_speed = 4;
inline void CommSpreadSpectrumResult::clear_code_speed() {
  code_speed_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_code_speed() const {
  return code_speed_;
}
inline double CommSpreadSpectrumResult::code_speed() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.code_speed)
  return _internal_code_speed();
}
inline void CommSpreadSpectrumResult::_internal_set_code_speed(double value) {
  
  code_speed_ = value;
}
inline void CommSpreadSpectrumResult::set_code_speed(double value) {
  _internal_set_code_speed(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.code_speed)
}

// int32 signal_type = 5;
inline void CommSpreadSpectrumResult::clear_signal_type() {
  signal_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommSpreadSpectrumResult::_internal_signal_type() const {
  return signal_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommSpreadSpectrumResult::signal_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.signal_type)
  return _internal_signal_type();
}
inline void CommSpreadSpectrumResult::_internal_set_signal_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signal_type_ = value;
}
inline void CommSpreadSpectrumResult::set_signal_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.signal_type)
}

// double level = 6;
inline void CommSpreadSpectrumResult::clear_level() {
  level_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_level() const {
  return level_;
}
inline double CommSpreadSpectrumResult::level() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.level)
  return _internal_level();
}
inline void CommSpreadSpectrumResult::_internal_set_level(double value) {
  
  level_ = value;
}
inline void CommSpreadSpectrumResult::set_level(double value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.level)
}

// double bw = 7;
inline void CommSpreadSpectrumResult::clear_bw() {
  bw_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_bw() const {
  return bw_;
}
inline double CommSpreadSpectrumResult::bw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.bw)
  return _internal_bw();
}
inline void CommSpreadSpectrumResult::_internal_set_bw(double value) {
  
  bw_ = value;
}
inline void CommSpreadSpectrumResult::set_bw(double value) {
  _internal_set_bw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.bw)
}

// double pn_period = 8;
inline void CommSpreadSpectrumResult::clear_pn_period() {
  pn_period_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_pn_period() const {
  return pn_period_;
}
inline double CommSpreadSpectrumResult::pn_period() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_period)
  return _internal_pn_period();
}
inline void CommSpreadSpectrumResult::_internal_set_pn_period(double value) {
  
  pn_period_ = value;
}
inline void CommSpreadSpectrumResult::set_pn_period(double value) {
  _internal_set_pn_period(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_period)
}

// int64 pn_length = 9;
inline void CommSpreadSpectrumResult::clear_pn_length() {
  pn_length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommSpreadSpectrumResult::_internal_pn_length() const {
  return pn_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommSpreadSpectrumResult::pn_length() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_length)
  return _internal_pn_length();
}
inline void CommSpreadSpectrumResult::_internal_set_pn_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pn_length_ = value;
}
inline void CommSpreadSpectrumResult::set_pn_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pn_length(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_length)
}

// double pn_chip_rate = 10;
inline void CommSpreadSpectrumResult::clear_pn_chip_rate() {
  pn_chip_rate_ = 0;
}
inline double CommSpreadSpectrumResult::_internal_pn_chip_rate() const {
  return pn_chip_rate_;
}
inline double CommSpreadSpectrumResult::pn_chip_rate() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_chip_rate)
  return _internal_pn_chip_rate();
}
inline void CommSpreadSpectrumResult::_internal_set_pn_chip_rate(double value) {
  
  pn_chip_rate_ = value;
}
inline void CommSpreadSpectrumResult::set_pn_chip_rate(double value) {
  _internal_set_pn_chip_rate(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult.pn_chip_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commSpreadSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhSpreadSpectrum_2eproto
