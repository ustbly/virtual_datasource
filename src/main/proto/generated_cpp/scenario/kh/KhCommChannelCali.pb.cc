// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommChannelCali.proto

#include "scenario/kh/KhCommChannelCali.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class CommChannelCaliTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommChannelCaliTaskRequest> _instance;
} _CommChannelCaliTaskRequest_default_instance_;
class ChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeRequest> _instance;
} _ChangeRequest_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_ChangeRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,}};

static void InitDefaultsscc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_CommChannelCaliTaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
      &scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhCommChannelCali_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhCommChannelCali_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, source_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, cal_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, channel_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, dac_crystal_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, dac_v1_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest, dac_phase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, param_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, dac_crystal_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, dac_v1_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, dac_phase_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest, center_freq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest)},
  { 13, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::ChangeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_CommChannelCaliTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_ChangeRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhCommChannelCali_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#scenario/kh/KhCommChannelCali.proto\022 z"
  "b.dcts.scenario.kh.commSpectrum\032\023source/"
  "source.proto\032\027scenario/scenario.proto\032\037s"
  "cenario/kh/KhSpectrumAcq.proto\"\225\003\n\032CommC"
  "hannelCaliTaskRequest\022+\n\tsource_id\030\001 \001(\013"
  "2\030.zb.dcts.source.SourceId\022I\n\014source_par"
  "am\030\002 \001(\01323.zb.dcts.scenario.kh.commSpect"
  "rum.SpectrumAcqSource\022E\n\tacq_param\030\003 \001(\013"
  "22.zb.dcts.scenario.kh.commSpectrum.Spec"
  "trumAcqParam\022;\n\010cal_type\030\004 \001(\0162).zb.dcts"
  ".scenario.kh.commSpectrum.CalType\022C\n\014cha"
  "nnel_type\030\005 \001(\0162-.zb.dcts.scenario.kh.co"
  "mmSpectrum.ChannelType\022\023\n\013dac_crystal\030\006 "
  "\001(\005\022\016\n\006dac_v1\030\007 \001(\005\022\021\n\tdac_phase\030\010 \001(\005\"\233"
  "\002\n\rChangeRequest\0223\n\tresponser\030\001 \001(\0132 .zb"
  ".dcts.scenario.ScenarioTaskId\022A\n\013param_i"
  "ndex\030\002 \001(\0162,.zb.dcts.scenario.kh.commSpe"
  "ctrum.ParamIndex\022E\n\tacq_param\030\003 \001(\01322.zb"
  ".dcts.scenario.kh.commSpectrum.SpectrumA"
  "cqParam\022\023\n\013dac_crystal\030\006 \001(\005\022\016\n\006dac_v1\030\007"
  " \001(\005\022\021\n\tdac_phase\030\010 \001(\005\022\023\n\013center_freq\030\t"
  " \001(\001*\240\001\n\007CalType\022\025\n\021CRYSTAL_CALIBRATE\020\000\022"
  "\021\n\rFREQ_RESPONSE\020\001\022\020\n\014IN_BAND_FLAT\020\002\022\024\n\020"
  "RF_FREQ_RESPONSE\020\003\022\017\n\013WINDOW_FUNC\020\004\022\017\n\013M"
  "ODULE_TEST\020\005\022\022\n\016BANDWIDTH_GAIN\020\006\022\r\n\tZERO"
  "_FREQ\020\007**\n\013ChannelType\022\014\n\010SPECTRUM\020\000\022\r\n\t"
  "DIRECTION\020\001*\221\001\n\nParamIndex\022\007\n\003ALL\020\000\022\014\n\010A"
  "TT_GAIN\020\001\022\016\n\nFREQ_RANGE\020\002\022\014\n\010FREQ_RBW\020\003\022"
  "\016\n\nFREQ_TUNER\020\004\022\017\n\013CENTER_FREQ\020\005\022\017\n\013CRYS"
  "TAL_DAC\020\006\022\014\n\010ZERO_DAC\020\007\022\016\n\nCHANNEL_ID\020\0102"
  "\235\003\n\026CommChannelCaliService\022l\n\tStartTask\022"
  "<.zb.dcts.scenario.kh.commSpectrum.CommC"
  "hannelCaliTaskRequest\032\037.zb.dcts.scenario"
  ".ScenarioReply\"\000\022f\n\tGetResult\022 .zb.dcts."
  "scenario.ScenarioTaskId\0323.zb.dcts.scenar"
  "io.kh.commSpectrum.SpectrumAcqResult\"\0000\001"
  "\022O\n\010StopTask\022 .zb.dcts.scenario.Scenario"
  "TaskId\032\037.zb.dcts.scenario.ScenarioReply\""
  "\000\022\\\n\006Change\022/.zb.dcts.scenario.kh.commSp"
  "ectrum.ChangeRequest\032\037.zb.dcts.scenario."
  "ScenarioReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_deps[3] = {
  &::descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_sccs[2] = {
  &scc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base,
  &scc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhCommChannelCali_2eproto, "scenario/kh/KhCommChannelCali.proto", 1623,
  &descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_once, descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhCommChannelCali_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhCommChannelCali_2eproto, 2, file_level_enum_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhCommChannelCali_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto[0];
}
bool CalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto[1];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommChannelCali_2eproto[2];
}
bool ParamIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommChannelCaliTaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_CommChannelCaliTaskRequest_default_instance_._instance.get_mutable()->source_id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_CommChannelCaliTaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_CommChannelCaliTaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::internal_default_instance());
}
class CommChannelCaliTaskRequest::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& source_id(const CommChannelCaliTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& source_param(const CommChannelCaliTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param(const CommChannelCaliTaskRequest* msg);
};

const ::zb::dcts::source::SourceId&
CommChannelCaliTaskRequest::_Internal::source_id(const CommChannelCaliTaskRequest* msg) {
  return *msg->source_id_;
}
const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource&
CommChannelCaliTaskRequest::_Internal::source_param(const CommChannelCaliTaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam&
CommChannelCaliTaskRequest::_Internal::acq_param(const CommChannelCaliTaskRequest* msg) {
  return *msg->acq_param_;
}
void CommChannelCaliTaskRequest::clear_source_id() {
  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
}
void CommChannelCaliTaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void CommChannelCaliTaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
CommChannelCaliTaskRequest::CommChannelCaliTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
}
CommChannelCaliTaskRequest::CommChannelCaliTaskRequest(const CommChannelCaliTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_id()) {
    source_id_ = new ::zb::dcts::source::SourceId(*from.source_id_);
  } else {
    source_id_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  ::memcpy(&cal_type_, &from.cal_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dac_phase_) -
    reinterpret_cast<char*>(&cal_type_)) + sizeof(dac_phase_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
}

void CommChannelCaliTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base);
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dac_phase_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(dac_phase_));
}

CommChannelCaliTaskRequest::~CommChannelCaliTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommChannelCaliTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_id_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
}

void CommChannelCaliTaskRequest::ArenaDtor(void* object) {
  CommChannelCaliTaskRequest* _this = reinterpret_cast< CommChannelCaliTaskRequest* >(object);
  (void)_this;
}
void CommChannelCaliTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommChannelCaliTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommChannelCaliTaskRequest& CommChannelCaliTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommChannelCaliTaskRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base);
  return *internal_default_instance();
}


void CommChannelCaliTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_id_ != nullptr) {
    delete source_id_;
  }
  source_id_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  ::memset(&cal_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dac_phase_) -
      reinterpret_cast<char*>(&cal_type_)) + sizeof(dac_phase_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommChannelCaliTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.CalType cal_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_type(static_cast<::zb::dcts::scenario::kh::commSpectrum::CalType>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.ChannelType channel_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel_type(static_cast<::zb::dcts::scenario::kh::commSpectrum::ChannelType>(val));
        } else goto handle_unusual;
        continue;
      // int32 dac_crystal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dac_crystal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dac_v1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dac_v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dac_phase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dac_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommChannelCaliTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source_id(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.CalType cal_type = 4;
  if (this->cal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cal_type(), target);
  }

  // .zb.dcts.scenario.kh.commSpectrum.ChannelType channel_type = 5;
  if (this->channel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_channel_type(), target);
  }

  // int32 dac_crystal = 6;
  if (this->dac_crystal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dac_crystal(), target);
  }

  // int32 dac_v1 = 7;
  if (this->dac_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dac_v1(), target);
  }

  // int32 dac_phase = 8;
  if (this->dac_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dac_phase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  return target;
}

size_t CommChannelCaliTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId source_id = 1;
  if (this->has_source_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_id_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.CalType cal_type = 4;
  if (this->cal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_type());
  }

  // .zb.dcts.scenario.kh.commSpectrum.ChannelType channel_type = 5;
  if (this->channel_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
  }

  // int32 dac_crystal = 6;
  if (this->dac_crystal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_crystal());
  }

  // int32 dac_v1 = 7;
  if (this->dac_v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_v1());
  }

  // int32 dac_phase = 8;
  if (this->dac_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_phase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommChannelCaliTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommChannelCaliTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommChannelCaliTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
    MergeFrom(*source);
  }
}

void CommChannelCaliTaskRequest::MergeFrom(const CommChannelCaliTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    _internal_mutable_source_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_source_id());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::MergeFrom(from._internal_acq_param());
  }
  if (from.cal_type() != 0) {
    _internal_set_cal_type(from._internal_cal_type());
  }
  if (from.channel_type() != 0) {
    _internal_set_channel_type(from._internal_channel_type());
  }
  if (from.dac_crystal() != 0) {
    _internal_set_dac_crystal(from._internal_dac_crystal());
  }
  if (from.dac_v1() != 0) {
    _internal_set_dac_v1(from._internal_dac_v1());
  }
  if (from.dac_phase() != 0) {
    _internal_set_dac_phase(from._internal_dac_phase());
  }
}

void CommChannelCaliTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommChannelCaliTaskRequest::CopyFrom(const CommChannelCaliTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommChannelCaliTaskRequest::IsInitialized() const {
  return true;
}

void CommChannelCaliTaskRequest::InternalSwap(CommChannelCaliTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommChannelCaliTaskRequest, dac_phase_)
      + sizeof(CommChannelCaliTaskRequest::dac_phase_)
      - PROTOBUF_FIELD_OFFSET(CommChannelCaliTaskRequest, source_id_)>(
          reinterpret_cast<char*>(&source_id_),
          reinterpret_cast<char*>(&other->source_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommChannelCaliTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangeRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_ChangeRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_ChangeRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::internal_default_instance());
}
class ChangeRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ChangeRequest* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param(const ChangeRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ChangeRequest::_Internal::responser(const ChangeRequest* msg) {
  return *msg->responser_;
}
const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam&
ChangeRequest::_Internal::acq_param(const ChangeRequest* msg) {
  return *msg->acq_param_;
}
void ChangeRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
void ChangeRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
ChangeRequest::ChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
}
ChangeRequest::ChangeRequest(const ChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  ::memcpy(&param_index_, &from.param_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&center_freq_) -
    reinterpret_cast<char*>(&param_index_)) + sizeof(center_freq_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
}

void ChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_freq_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(center_freq_));
}

ChangeRequest::~ChangeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
  if (this != internal_default_instance()) delete acq_param_;
}

void ChangeRequest::ArenaDtor(void* object) {
  ChangeRequest* _this = reinterpret_cast< ChangeRequest* >(object);
  (void)_this;
}
void ChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeRequest& ChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeRequest_scenario_2fkh_2fKhCommChannelCali_2eproto.base);
  return *internal_default_instance();
}


void ChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  ::memset(&param_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_freq_) -
      reinterpret_cast<char*>(&param_index_)) + sizeof(center_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.ParamIndex param_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_param_index(static_cast<::zb::dcts::scenario::kh::commSpectrum::ParamIndex>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dac_crystal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dac_crystal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dac_v1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dac_v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dac_phase = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dac_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double center_freq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          center_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_param_index(), target);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // int32 dac_crystal = 6;
  if (this->dac_crystal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dac_crystal(), target);
  }

  // int32 dac_v1 = 7;
  if (this->dac_v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dac_v1(), target);
  }

  // int32 dac_phase = 8;
  if (this->dac_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dac_phase(), target);
  }

  // double center_freq = 9;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_center_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  return target;
}

size_t ChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param_index());
  }

  // int32 dac_crystal = 6;
  if (this->dac_crystal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_crystal());
  }

  // int32 dac_v1 = 7;
  if (this->dac_v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_v1());
  }

  // int32 dac_phase = 8;
  if (this->dac_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dac_phase());
  }

  // double center_freq = 9;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
    MergeFrom(*source);
  }
}

void ChangeRequest::MergeFrom(const ChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::MergeFrom(from._internal_acq_param());
  }
  if (from.param_index() != 0) {
    _internal_set_param_index(from._internal_param_index());
  }
  if (from.dac_crystal() != 0) {
    _internal_set_dac_crystal(from._internal_dac_crystal());
  }
  if (from.dac_v1() != 0) {
    _internal_set_dac_v1(from._internal_dac_v1());
  }
  if (from.dac_phase() != 0) {
    _internal_set_dac_phase(from._internal_dac_phase());
  }
  if (!(from.center_freq() <= 0 && from.center_freq() >= 0)) {
    _internal_set_center_freq(from._internal_center_freq());
  }
}

void ChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRequest::CopyFrom(const ChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRequest::IsInitialized() const {
  return true;
}

void ChangeRequest::InternalSwap(ChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeRequest, center_freq_)
      + sizeof(ChangeRequest::center_freq_)
      - PROTOBUF_FIELD_OFFSET(ChangeRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
