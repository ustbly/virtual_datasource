// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/kh/KhComSystemIdentify.proto

#include "scenario/kh/KhComSystemIdentify.pb.h"
#include "scenario/kh/KhComSystemIdentify.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace CommSystemIdentify {

static const char* CommSystemIdentifyService_method_names[] = {
  "/zb.dcts.scenario.kh.CommSystemIdentify.CommSystemIdentifyService/StartTask",
  "/zb.dcts.scenario.kh.CommSystemIdentify.CommSystemIdentifyService/GetResult",
  "/zb.dcts.scenario.kh.CommSystemIdentify.CommSystemIdentifyService/StopTask",
};

std::unique_ptr< CommSystemIdentifyService::Stub> CommSystemIdentifyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommSystemIdentifyService::Stub> stub(new CommSystemIdentifyService::Stub(channel));
  return stub;
}

CommSystemIdentifyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartTask_(CommSystemIdentifyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResult_(CommSystemIdentifyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTask_(CommSystemIdentifyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CommSystemIdentifyService::Stub::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartTask_, context, request, response);
}

void CommSystemIdentifyService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, reactor);
}

void CommSystemIdentifyService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommSystemIdentifyService::Stub::AsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommSystemIdentifyService::Stub::PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartTask_, context, request, false);
}

::grpc::Status CommSystemIdentifyService::Stub::GetResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetResult_, context, request, response);
}

void CommSystemIdentifyService::Stub::experimental_async::GetResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetResult_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::GetResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetResult_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::GetResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetResult_, context, request, response, reactor);
}

void CommSystemIdentifyService::Stub::experimental_async::GetResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult>* CommSystemIdentifyService::Stub::AsyncGetResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult>::Create(channel_.get(), cq, rpcmethod_GetResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult>* CommSystemIdentifyService::Stub::PrepareAsyncGetResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::FFP::ComSystemIdentifyResult>::Create(channel_.get(), cq, rpcmethod_GetResult_, context, request, false);
}

::grpc::Status CommSystemIdentifyService::Stub::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopTask_, context, request, response);
}

void CommSystemIdentifyService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, std::move(f));
}

void CommSystemIdentifyService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, reactor);
}

void CommSystemIdentifyService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommSystemIdentifyService::Stub::AsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* CommSystemIdentifyService::Stub::PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopTask_, context, request, false);
}

CommSystemIdentifyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommSystemIdentifyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommSystemIdentifyService::Service, ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommSystemIdentifyService::Service::StartTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommSystemIdentifyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommSystemIdentifyService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult>(
          std::mem_fn(&CommSystemIdentifyService::Service::GetResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommSystemIdentifyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommSystemIdentifyService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&CommSystemIdentifyService::Service::StopTask), this)));
}

CommSystemIdentifyService::Service::~Service() {
}

::grpc::Status CommSystemIdentifyService::Service::StartTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::CommSystemIdentify::CommSystemIdentifyTaskRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommSystemIdentifyService::Service::GetResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::FFP::ComSystemIdentifyResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommSystemIdentifyService::Service::StopTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace kh
}  // namespace CommSystemIdentify

