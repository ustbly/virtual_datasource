// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommDirectionCali.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionCali_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionCali_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/kh/KhCommDirectionAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommDirectionCali_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhCommDirectionCali_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommDirectionCali_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {
class CaliChangeRequest;
class CaliChangeRequestDefaultTypeInternal;
extern CaliChangeRequestDefaultTypeInternal _CaliChangeRequest_default_instance_;
class CommDirectionCaliTaskRequest;
class CommDirectionCaliTaskRequestDefaultTypeInternal;
extern CommDirectionCaliTaskRequestDefaultTypeInternal _CommDirectionCaliTaskRequest_default_instance_;
}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commDirection::CaliChangeRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CaliChangeRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionCaliTaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {

enum CaliParamIndex : int {
  ALL = 0,
  ATT_GAIN_C = 1,
  FREQ_RANGE = 2,
  FREQ_RBW = 3,
  FREQ_TUNER = 4,
  CENTER_FREQ_C = 5,
  OUTPUT_POW = 6,
  CaliParamIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CaliParamIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CaliParamIndex_IsValid(int value);
constexpr CaliParamIndex CaliParamIndex_MIN = ALL;
constexpr CaliParamIndex CaliParamIndex_MAX = OUTPUT_POW;
constexpr int CaliParamIndex_ARRAYSIZE = CaliParamIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CaliParamIndex_descriptor();
template<typename T>
inline const std::string& CaliParamIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CaliParamIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CaliParamIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CaliParamIndex_descriptor(), enum_t_value);
}
inline bool CaliParamIndex_Parse(
    const std::string& name, CaliParamIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CaliParamIndex>(
    CaliParamIndex_descriptor(), name, value);
}
// ===================================================================

class CommDirectionCaliTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest) */ {
 public:
  inline CommDirectionCaliTaskRequest() : CommDirectionCaliTaskRequest(nullptr) {};
  virtual ~CommDirectionCaliTaskRequest();

  CommDirectionCaliTaskRequest(const CommDirectionCaliTaskRequest& from);
  CommDirectionCaliTaskRequest(CommDirectionCaliTaskRequest&& from) noexcept
    : CommDirectionCaliTaskRequest() {
    *this = ::std::move(from);
  }

  inline CommDirectionCaliTaskRequest& operator=(const CommDirectionCaliTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDirectionCaliTaskRequest& operator=(CommDirectionCaliTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDirectionCaliTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDirectionCaliTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommDirectionCaliTaskRequest*>(
               &_CommDirectionCaliTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommDirectionCaliTaskRequest& a, CommDirectionCaliTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDirectionCaliTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDirectionCaliTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDirectionCaliTaskRequest* New() const final {
    return CreateMaybeMessage<CommDirectionCaliTaskRequest>(nullptr);
  }

  CommDirectionCaliTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDirectionCaliTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDirectionCaliTaskRequest& from);
  void MergeFrom(const CommDirectionCaliTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDirectionCaliTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest";
  }
  protected:
  explicit CommDirectionCaliTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionCali_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionCali_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
  };
  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* source_param);
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* unsafe_arena_release_acq_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionCali_2eproto;
};
// -------------------------------------------------------------------

class CaliChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.CaliChangeRequest) */ {
 public:
  inline CaliChangeRequest() : CaliChangeRequest(nullptr) {};
  virtual ~CaliChangeRequest();

  CaliChangeRequest(const CaliChangeRequest& from);
  CaliChangeRequest(CaliChangeRequest&& from) noexcept
    : CaliChangeRequest() {
    *this = ::std::move(from);
  }

  inline CaliChangeRequest& operator=(const CaliChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaliChangeRequest& operator=(CaliChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaliChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaliChangeRequest* internal_default_instance() {
    return reinterpret_cast<const CaliChangeRequest*>(
               &_CaliChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CaliChangeRequest& a, CaliChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CaliChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaliChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaliChangeRequest* New() const final {
    return CreateMaybeMessage<CaliChangeRequest>(nullptr);
  }

  CaliChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaliChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaliChangeRequest& from);
  void MergeFrom(const CaliChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaliChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.CaliChangeRequest";
  }
  protected:
  explicit CaliChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionCali_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionCali_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kAcqParamFieldNumber = 3,
    kCenterFreqFieldNumber = 4,
    kParamIndexFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* unsafe_arena_release_acq_param();

  // double center_freq = 4;
  void clear_center_freq();
  double center_freq() const;
  void set_center_freq(double value);
  private:
  double _internal_center_freq() const;
  void _internal_set_center_freq(double value);
  public:

  // .zb.dcts.scenario.kh.commDirection.CaliParamIndex param_index = 2;
  void clear_param_index();
  ::zb::dcts::scenario::kh::commDirection::CaliParamIndex param_index() const;
  void set_param_index(::zb::dcts::scenario::kh::commDirection::CaliParamIndex value);
  private:
  ::zb::dcts::scenario::kh::commDirection::CaliParamIndex _internal_param_index() const;
  void _internal_set_param_index(::zb::dcts::scenario::kh::commDirection::CaliParamIndex value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CaliChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param_;
  double center_freq_;
  int param_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionCali_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommDirectionCaliTaskRequest

// .zb.dcts.source.SourceId source_id = 1;
inline bool CommDirectionCaliTaskRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool CommDirectionCaliTaskRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline const ::zb::dcts::source::SourceId& CommDirectionCaliTaskRequest::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& CommDirectionCaliTaskRequest::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_id)
  return _internal_source_id();
}
inline void CommDirectionCaliTaskRequest::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_id)
}
inline ::zb::dcts::source::SourceId* CommDirectionCaliTaskRequest::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* CommDirectionCaliTaskRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* CommDirectionCaliTaskRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* CommDirectionCaliTaskRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_id)
  return _internal_mutable_source_id();
}
inline void CommDirectionCaliTaskRequest::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id)->GetArena();
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_id)
}

// .zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource source_param = 2;
inline bool CommDirectionCaliTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommDirectionCaliTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource& CommDirectionCaliTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource*>(
      &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource& CommDirectionCaliTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_param)
  return _internal_source_param();
}
inline void CommDirectionCaliTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* CommDirectionCaliTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* CommDirectionCaliTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* CommDirectionCaliTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* CommDirectionCaliTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommDirectionCaliTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam acq_param = 3;
inline bool CommDirectionCaliTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommDirectionCaliTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& CommDirectionCaliTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam*>(
      &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& CommDirectionCaliTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommDirectionCaliTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CommDirectionCaliTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CommDirectionCaliTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CommDirectionCaliTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CommDirectionCaliTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommDirectionCaliTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionCaliTaskRequest.acq_param)
}

// -------------------------------------------------------------------

// CaliChangeRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool CaliChangeRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool CaliChangeRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& CaliChangeRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& CaliChangeRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.responser)
  return _internal_responser();
}
inline void CaliChangeRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* CaliChangeRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* CaliChangeRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* CaliChangeRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* CaliChangeRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.responser)
  return _internal_mutable_responser();
}
inline void CaliChangeRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.responser)
}

// .zb.dcts.scenario.kh.commDirection.CaliParamIndex param_index = 2;
inline void CaliChangeRequest::clear_param_index() {
  param_index_ = 0;
}
inline ::zb::dcts::scenario::kh::commDirection::CaliParamIndex CaliChangeRequest::_internal_param_index() const {
  return static_cast< ::zb::dcts::scenario::kh::commDirection::CaliParamIndex >(param_index_);
}
inline ::zb::dcts::scenario::kh::commDirection::CaliParamIndex CaliChangeRequest::param_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.param_index)
  return _internal_param_index();
}
inline void CaliChangeRequest::_internal_set_param_index(::zb::dcts::scenario::kh::commDirection::CaliParamIndex value) {
  
  param_index_ = value;
}
inline void CaliChangeRequest::set_param_index(::zb::dcts::scenario::kh::commDirection::CaliParamIndex value) {
  _internal_set_param_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.param_index)
}

// .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam acq_param = 3;
inline bool CaliChangeRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CaliChangeRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& CaliChangeRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam*>(
      &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& CaliChangeRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.acq_param)
  return _internal_acq_param();
}
inline void CaliChangeRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CaliChangeRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CaliChangeRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CaliChangeRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* CaliChangeRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CaliChangeRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.acq_param)
}

// double center_freq = 4;
inline void CaliChangeRequest::clear_center_freq() {
  center_freq_ = 0;
}
inline double CaliChangeRequest::_internal_center_freq() const {
  return center_freq_;
}
inline double CaliChangeRequest::center_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.center_freq)
  return _internal_center_freq();
}
inline void CaliChangeRequest::_internal_set_center_freq(double value) {
  
  center_freq_ = value;
}
inline void CaliChangeRequest::set_center_freq(double value) {
  _internal_set_center_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CaliChangeRequest.center_freq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commDirection::CaliParamIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commDirection::CaliParamIndex>() {
  return ::zb::dcts::scenario::kh::commDirection::CaliParamIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionCali_2eproto
