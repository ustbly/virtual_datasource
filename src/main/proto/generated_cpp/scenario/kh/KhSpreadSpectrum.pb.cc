// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhSpreadSpectrum.proto

#include "scenario/kh/KhSpreadSpectrum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpreadSpectrum {
class CommSpreadSpectrumTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommSpreadSpectrumTaskRequest> _instance;
} _CommSpreadSpectrumTaskRequest_default_instance_;
class CommSpreadSpectrumResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommSpreadSpectrumResult> _instance;
} _CommSpreadSpectrumResult_default_instance_;
}  // namespace commSpreadSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumTaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhSpreadSpectrum_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scenario_2fkh_2fKhSpreadSpectrum_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhSpreadSpectrum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhSpreadSpectrum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest, acq_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, spectrum_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, code_speed_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, signal_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, level_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, bw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, pn_period_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, pn_length_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult, pn_chip_rate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest)},
  { 8, -1, sizeof(::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhSpreadSpectrum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"scenario/kh/KhSpreadSpectrum.proto\022&zb"
  ".dcts.scenario.kh.commSpreadSpectrum\032\027sc"
  "enario/scenario.proto\032\027scenario/spectrum"
  ".proto\032\035scenario/kh/KhIQDataAcq.proto\"\335\001"
  "\n\035CommSpreadSpectrumTaskRequest\022.\n\010scena"
  "rio\030\001 \001(\0132\034.zb.dcts.scenario.ScenarioId\022"
  "E\n\014source_param\030\002 \001(\0132/.zb.dcts.scenario"
  ".kh.commIqData.CommIQAcqSource\022E\n\tacq_pa"
  "ram\030\003 \001(\01322.zb.dcts.scenario.kh.commIqDa"
  "ta.CommIQAcquireParam\"\216\002\n\030CommSpreadSpec"
  "trumResult\0221\n\006header\030\001 \001(\0132!.zb.dcts.sce"
  "nario.spectrum.Header\0221\n\010spectrum\030\002 \001(\0132"
  "\037.zb.dcts.scenario.spectrum.View\022\014\n\004freq"
  "\030\003 \001(\001\022\022\n\ncode_speed\030\004 \001(\001\022\023\n\013signal_typ"
  "e\030\005 \001(\005\022\r\n\005level\030\006 \001(\001\022\n\n\002bw\030\007 \001(\001\022\021\n\tpn"
  "_period\030\010 \001(\001\022\021\n\tpn_length\030\t \001(\003\022\024\n\014pn_c"
  "hip_rate\030\n \001(\0012\330\002\n\031CommSpreadSpectrumSer"
  "vice\022u\n\tStartTask\022E.zb.dcts.scenario.kh."
  "commSpreadSpectrum.CommSpreadSpectrumTas"
  "kRequest\032\037.zb.dcts.scenario.ScenarioRepl"
  "y\"\000\022s\n\tGetResult\022 .zb.dcts.scenario.Scen"
  "arioTaskId\032@.zb.dcts.scenario.kh.commSpr"
  "eadSpectrum.CommSpreadSpectrumResult\"\0000\001"
  "\022O\n\010StopTask\022 .zb.dcts.scenario.Scenario"
  "TaskId\032\037.zb.dcts.scenario.ScenarioReply\""
  "\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_deps[3] = {
  &::descriptor_table_scenario_2fkh_2fKhIQDataAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_sccs[2] = {
  &scc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base,
  &scc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhSpreadSpectrum_2eproto, "scenario/kh/KhSpreadSpectrum.proto", 1009,
  &descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_once, descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhSpreadSpectrum_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhSpreadSpectrum_2eproto, 2, file_level_enum_descriptors_scenario_2fkh_2fKhSpreadSpectrum_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhSpreadSpectrum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhSpreadSpectrum_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhSpreadSpectrum_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpreadSpectrum {

// ===================================================================

void CommSpreadSpectrumTaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumTaskRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumTaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumTaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::internal_default_instance());
}
class CommSpreadSpectrumTaskRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const CommSpreadSpectrumTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param(const CommSpreadSpectrumTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param(const CommSpreadSpectrumTaskRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
CommSpreadSpectrumTaskRequest::_Internal::scenario(const CommSpreadSpectrumTaskRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource&
CommSpreadSpectrumTaskRequest::_Internal::source_param(const CommSpreadSpectrumTaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam&
CommSpreadSpectrumTaskRequest::_Internal::acq_param(const CommSpreadSpectrumTaskRequest* msg) {
  return *msg->acq_param_;
}
void CommSpreadSpectrumTaskRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void CommSpreadSpectrumTaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void CommSpreadSpectrumTaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
CommSpreadSpectrumTaskRequest::CommSpreadSpectrumTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
}
CommSpreadSpectrumTaskRequest::CommSpreadSpectrumTaskRequest(const CommSpreadSpectrumTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
}

void CommSpreadSpectrumTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acq_param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(acq_param_));
}

CommSpreadSpectrumTaskRequest::~CommSpreadSpectrumTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommSpreadSpectrumTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
}

void CommSpreadSpectrumTaskRequest::ArenaDtor(void* object) {
  CommSpreadSpectrumTaskRequest* _this = reinterpret_cast< CommSpreadSpectrumTaskRequest* >(object);
  (void)_this;
}
void CommSpreadSpectrumTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommSpreadSpectrumTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommSpreadSpectrumTaskRequest& CommSpreadSpectrumTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommSpreadSpectrumTaskRequest_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base);
  return *internal_default_instance();
}


void CommSpreadSpectrumTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommSpreadSpectrumTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommSpreadSpectrumTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  return target;
}

size_t CommSpreadSpectrumTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommSpreadSpectrumTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommSpreadSpectrumTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommSpreadSpectrumTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
    MergeFrom(*source);
  }
}

void CommSpreadSpectrumTaskRequest::MergeFrom(const CommSpreadSpectrumTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::MergeFrom(from._internal_acq_param());
  }
}

void CommSpreadSpectrumTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommSpreadSpectrumTaskRequest::CopyFrom(const CommSpreadSpectrumTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommSpreadSpectrumTaskRequest::IsInitialized() const {
  return true;
}

void CommSpreadSpectrumTaskRequest::InternalSwap(CommSpreadSpectrumTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommSpreadSpectrumTaskRequest, acq_param_)
      + sizeof(CommSpreadSpectrumTaskRequest::acq_param_)
      - PROTOBUF_FIELD_OFFSET(CommSpreadSpectrumTaskRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommSpreadSpectrumTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommSpreadSpectrumResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpreadSpectrum::_CommSpreadSpectrumResult_default_instance_._instance.get_mutable()->spectrum_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class CommSpreadSpectrumResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const CommSpreadSpectrumResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& spectrum(const CommSpreadSpectrumResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
CommSpreadSpectrumResult::_Internal::header(const CommSpreadSpectrumResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::spectrum::View&
CommSpreadSpectrumResult::_Internal::spectrum(const CommSpreadSpectrumResult* msg) {
  return *msg->spectrum_;
}
void CommSpreadSpectrumResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CommSpreadSpectrumResult::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
CommSpreadSpectrumResult::CommSpreadSpectrumResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
}
CommSpreadSpectrumResult::CommSpreadSpectrumResult(const CommSpreadSpectrumResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::scenario::spectrum::View(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  ::memcpy(&freq_, &from.freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&freq_)) + sizeof(signal_type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
}

void CommSpreadSpectrumResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(signal_type_));
}

CommSpreadSpectrumResult::~CommSpreadSpectrumResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommSpreadSpectrumResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete spectrum_;
}

void CommSpreadSpectrumResult::ArenaDtor(void* object) {
  CommSpreadSpectrumResult* _this = reinterpret_cast< CommSpreadSpectrumResult* >(object);
  (void)_this;
}
void CommSpreadSpectrumResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommSpreadSpectrumResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommSpreadSpectrumResult& CommSpreadSpectrumResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommSpreadSpectrumResult_scenario_2fkh_2fKhSpreadSpectrum_2eproto.base);
  return *internal_default_instance();
}


void CommSpreadSpectrumResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(signal_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommSpreadSpectrumResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View spectrum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double code_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          code_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 signal_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          signal_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          bw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pn_period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pn_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 pn_length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pn_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pn_chip_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          pn_chip_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommSpreadSpectrumResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View spectrum = 2;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spectrum(this), target, stream);
  }

  // double freq = 3;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_freq(), target);
  }

  // double code_speed = 4;
  if (!(this->code_speed() <= 0 && this->code_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_code_speed(), target);
  }

  // int32 signal_type = 5;
  if (this->signal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_signal_type(), target);
  }

  // double level = 6;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_level(), target);
  }

  // double bw = 7;
  if (!(this->bw() <= 0 && this->bw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_bw(), target);
  }

  // double pn_period = 8;
  if (!(this->pn_period() <= 0 && this->pn_period() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pn_period(), target);
  }

  // int64 pn_length = 9;
  if (this->pn_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_pn_length(), target);
  }

  // double pn_chip_rate = 10;
  if (!(this->pn_chip_rate() <= 0 && this->pn_chip_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_pn_chip_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  return target;
}

size_t CommSpreadSpectrumResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.spectrum.View spectrum = 2;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  // double freq = 3;
  if (!(this->freq() <= 0 && this->freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double code_speed = 4;
  if (!(this->code_speed() <= 0 && this->code_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double level = 6;
  if (!(this->level() <= 0 && this->level() >= 0)) {
    total_size += 1 + 8;
  }

  // double bw = 7;
  if (!(this->bw() <= 0 && this->bw() >= 0)) {
    total_size += 1 + 8;
  }

  // double pn_period = 8;
  if (!(this->pn_period() <= 0 && this->pn_period() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 pn_length = 9;
  if (this->pn_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pn_length());
  }

  // double pn_chip_rate = 10;
  if (!(this->pn_chip_rate() <= 0 && this->pn_chip_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 signal_type = 5;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_signal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommSpreadSpectrumResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommSpreadSpectrumResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommSpreadSpectrumResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
    MergeFrom(*source);
  }
}

void CommSpreadSpectrumResult::MergeFrom(const CommSpreadSpectrumResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_spectrum());
  }
  if (!(from.freq() <= 0 && from.freq() >= 0)) {
    _internal_set_freq(from._internal_freq());
  }
  if (!(from.code_speed() <= 0 && from.code_speed() >= 0)) {
    _internal_set_code_speed(from._internal_code_speed());
  }
  if (!(from.level() <= 0 && from.level() >= 0)) {
    _internal_set_level(from._internal_level());
  }
  if (!(from.bw() <= 0 && from.bw() >= 0)) {
    _internal_set_bw(from._internal_bw());
  }
  if (!(from.pn_period() <= 0 && from.pn_period() >= 0)) {
    _internal_set_pn_period(from._internal_pn_period());
  }
  if (from.pn_length() != 0) {
    _internal_set_pn_length(from._internal_pn_length());
  }
  if (!(from.pn_chip_rate() <= 0 && from.pn_chip_rate() >= 0)) {
    _internal_set_pn_chip_rate(from._internal_pn_chip_rate());
  }
  if (from.signal_type() != 0) {
    _internal_set_signal_type(from._internal_signal_type());
  }
}

void CommSpreadSpectrumResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommSpreadSpectrumResult::CopyFrom(const CommSpreadSpectrumResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpreadSpectrum.CommSpreadSpectrumResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommSpreadSpectrumResult::IsInitialized() const {
  return true;
}

void CommSpreadSpectrumResult::InternalSwap(CommSpreadSpectrumResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommSpreadSpectrumResult, signal_type_)
      + sizeof(CommSpreadSpectrumResult::signal_type_)
      - PROTOBUF_FIELD_OFFSET(CommSpreadSpectrumResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommSpreadSpectrumResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commSpreadSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpreadSpectrum::CommSpreadSpectrumResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
