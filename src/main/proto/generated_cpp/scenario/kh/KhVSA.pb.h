// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhVSA.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhVSA_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhVSA_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/kh/KhIQDataAcq.pb.h"
#include "scenario/FFP/VSA.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhVSA_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhVSA_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhVSA_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commVSA {
class AudioBlock;
class AudioBlockDefaultTypeInternal;
extern AudioBlockDefaultTypeInternal _AudioBlock_default_instance_;
class CommVSAResult;
class CommVSAResultDefaultTypeInternal;
extern CommVSAResultDefaultTypeInternal _CommVSAResult_default_instance_;
class CommVSAResult_Header;
class CommVSAResult_HeaderDefaultTypeInternal;
extern CommVSAResult_HeaderDefaultTypeInternal _CommVSAResult_Header_default_instance_;
class CommVSATaskRequest;
class CommVSATaskRequestDefaultTypeInternal;
extern CommVSATaskRequestDefaultTypeInternal _CommVSATaskRequest_default_instance_;
class DecodeResult;
class DecodeResultDefaultTypeInternal;
extern DecodeResultDefaultTypeInternal _DecodeResult_default_instance_;
class Recognize;
class RecognizeDefaultTypeInternal;
extern RecognizeDefaultTypeInternal _Recognize_default_instance_;
class RecognizeState;
class RecognizeStateDefaultTypeInternal;
extern RecognizeStateDefaultTypeInternal _RecognizeState_default_instance_;
}  // namespace commVSA
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commVSA::AudioBlock* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::AudioBlock>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::CommVSAResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::CommVSAResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::CommVSATaskRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::DecodeResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::DecodeResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::Recognize* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::Recognize>(Arena*);
template<> ::zb::dcts::scenario::kh::commVSA::RecognizeState* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::RecognizeState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commVSA {

enum RecognizeResult : int {
  RR_INCALID = 0,
  RR_DMR = 1,
  RR_DPMR = 2,
  RR_TETRA = 4,
  RecognizeResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RecognizeResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RecognizeResult_IsValid(int value);
constexpr RecognizeResult RecognizeResult_MIN = RR_INCALID;
constexpr RecognizeResult RecognizeResult_MAX = RR_TETRA;
constexpr int RecognizeResult_ARRAYSIZE = RecognizeResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecognizeResult_descriptor();
template<typename T>
inline const std::string& RecognizeResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecognizeResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecognizeResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecognizeResult_descriptor(), enum_t_value);
}
inline bool RecognizeResult_Parse(
    const std::string& name, RecognizeResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecognizeResult>(
    RecognizeResult_descriptor(), name, value);
}
// ===================================================================

class CommVSATaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest) */ {
 public:
  inline CommVSATaskRequest() : CommVSATaskRequest(nullptr) {};
  virtual ~CommVSATaskRequest();

  CommVSATaskRequest(const CommVSATaskRequest& from);
  CommVSATaskRequest(CommVSATaskRequest&& from) noexcept
    : CommVSATaskRequest() {
    *this = ::std::move(from);
  }

  inline CommVSATaskRequest& operator=(const CommVSATaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommVSATaskRequest& operator=(CommVSATaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommVSATaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommVSATaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommVSATaskRequest*>(
               &_CommVSATaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommVSATaskRequest& a, CommVSATaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommVSATaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommVSATaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommVSATaskRequest* New() const final {
    return CreateMaybeMessage<CommVSATaskRequest>(nullptr);
  }

  CommVSATaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommVSATaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommVSATaskRequest& from);
  void MergeFrom(const CommVSATaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommVSATaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.CommVSATaskRequest";
  }
  protected:
  explicit CommVSATaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kVasParamFieldNumber = 4,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* release_acq_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.FFP.VSAParam vas_param = 4;
  bool has_vas_param() const;
  private:
  bool _internal_has_vas_param() const;
  public:
  void clear_vas_param();
  const ::zb::dcts::scenario::FFP::VSAParam& vas_param() const;
  ::zb::dcts::scenario::FFP::VSAParam* release_vas_param();
  ::zb::dcts::scenario::FFP::VSAParam* mutable_vas_param();
  void set_allocated_vas_param(::zb::dcts::scenario::FFP::VSAParam* vas_param);
  private:
  const ::zb::dcts::scenario::FFP::VSAParam& _internal_vas_param() const;
  ::zb::dcts::scenario::FFP::VSAParam* _internal_mutable_vas_param();
  public:
  void unsafe_arena_set_allocated_vas_param(
      ::zb::dcts::scenario::FFP::VSAParam* vas_param);
  ::zb::dcts::scenario::FFP::VSAParam* unsafe_arena_release_vas_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param_;
  ::zb::dcts::scenario::FFP::VSAParam* vas_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class RecognizeState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.RecognizeState) */ {
 public:
  inline RecognizeState() : RecognizeState(nullptr) {};
  virtual ~RecognizeState();

  RecognizeState(const RecognizeState& from);
  RecognizeState(RecognizeState&& from) noexcept
    : RecognizeState() {
    *this = ::std::move(from);
  }

  inline RecognizeState& operator=(const RecognizeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecognizeState& operator=(RecognizeState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecognizeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecognizeState* internal_default_instance() {
    return reinterpret_cast<const RecognizeState*>(
               &_RecognizeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RecognizeState& a, RecognizeState& b) {
    a.Swap(&b);
  }
  inline void Swap(RecognizeState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecognizeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecognizeState* New() const final {
    return CreateMaybeMessage<RecognizeState>(nullptr);
  }

  RecognizeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecognizeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecognizeState& from);
  void MergeFrom(const RecognizeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecognizeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.RecognizeState";
  }
  protected:
  explicit RecognizeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolNumFieldNumber = 1,
    kMatchedNumFieldNumber = 2,
    kCurSymbolNumFieldNumber = 3,
    kCurMatchedNumFieldNumber = 4,
  };
  // int32 symbol_num = 1;
  void clear_symbol_num();
  ::PROTOBUF_NAMESPACE_ID::int32 symbol_num() const;
  void set_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_symbol_num() const;
  void _internal_set_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 matched_num = 2;
  void clear_matched_num();
  ::PROTOBUF_NAMESPACE_ID::int32 matched_num() const;
  void set_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matched_num() const;
  void _internal_set_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_symbol_num = 3;
  void clear_cur_symbol_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_symbol_num() const;
  void set_cur_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_symbol_num() const;
  void _internal_set_cur_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur_matched_num = 4;
  void clear_cur_matched_num();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_matched_num() const;
  void set_cur_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_matched_num() const;
  void _internal_set_cur_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.RecognizeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 symbol_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 matched_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_symbol_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_matched_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class Recognize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.Recognize) */ {
 public:
  inline Recognize() : Recognize(nullptr) {};
  virtual ~Recognize();

  Recognize(const Recognize& from);
  Recognize(Recognize&& from) noexcept
    : Recognize() {
    *this = ::std::move(from);
  }

  inline Recognize& operator=(const Recognize& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recognize& operator=(Recognize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Recognize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Recognize* internal_default_instance() {
    return reinterpret_cast<const Recognize*>(
               &_Recognize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Recognize& a, Recognize& b) {
    a.Swap(&b);
  }
  inline void Swap(Recognize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recognize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Recognize* New() const final {
    return CreateMaybeMessage<Recognize>(nullptr);
  }

  Recognize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Recognize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Recognize& from);
  void MergeFrom(const Recognize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recognize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.Recognize";
  }
  protected:
  explicit Recognize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .zb.dcts.scenario.kh.commVSA.RecognizeState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::zb::dcts::scenario::kh::commVSA::RecognizeState& state() const;
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* release_state();
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* mutable_state();
  void set_allocated_state(::zb::dcts::scenario::kh::commVSA::RecognizeState* state);
  private:
  const ::zb::dcts::scenario::kh::commVSA::RecognizeState& _internal_state() const;
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::zb::dcts::scenario::kh::commVSA::RecognizeState* state);
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* unsafe_arena_release_state();

  // .zb.dcts.scenario.kh.commVSA.RecognizeResult result = 2;
  void clear_result();
  ::zb::dcts::scenario::kh::commVSA::RecognizeResult result() const;
  void set_result(::zb::dcts::scenario::kh::commVSA::RecognizeResult value);
  private:
  ::zb::dcts::scenario::kh::commVSA::RecognizeResult _internal_result() const;
  void _internal_set_result(::zb::dcts::scenario::kh::commVSA::RecognizeResult value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.Recognize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* state_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class AudioBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.AudioBlock) */ {
 public:
  inline AudioBlock() : AudioBlock(nullptr) {};
  virtual ~AudioBlock();

  AudioBlock(const AudioBlock& from);
  AudioBlock(AudioBlock&& from) noexcept
    : AudioBlock() {
    *this = ::std::move(from);
  }

  inline AudioBlock& operator=(const AudioBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioBlock& operator=(AudioBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioBlock* internal_default_instance() {
    return reinterpret_cast<const AudioBlock*>(
               &_AudioBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AudioBlock& a, AudioBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioBlock* New() const final {
    return CreateMaybeMessage<AudioBlock>(nullptr);
  }

  AudioBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioBlock& from);
  void MergeFrom(const AudioBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.AudioBlock";
  }
  protected:
  explicit AudioBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcmBitstreamFieldNumber = 1,
  };
  // repeated int32 pcm_bitstream = 1;
  int pcm_bitstream_size() const;
  private:
  int _internal_pcm_bitstream_size() const;
  public:
  void clear_pcm_bitstream();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pcm_bitstream(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pcm_bitstream() const;
  void _internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pcm_bitstream();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pcm_bitstream(int index) const;
  void set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pcm_bitstream() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pcm_bitstream();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.AudioBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pcm_bitstream_;
  mutable std::atomic<int> _pcm_bitstream_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class DecodeResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.DecodeResult) */ {
 public:
  inline DecodeResult() : DecodeResult(nullptr) {};
  virtual ~DecodeResult();

  DecodeResult(const DecodeResult& from);
  DecodeResult(DecodeResult&& from) noexcept
    : DecodeResult() {
    *this = ::std::move(from);
  }

  inline DecodeResult& operator=(const DecodeResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecodeResult& operator=(DecodeResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecodeResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeResult* internal_default_instance() {
    return reinterpret_cast<const DecodeResult*>(
               &_DecodeResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DecodeResult& a, DecodeResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DecodeResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecodeResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecodeResult* New() const final {
    return CreateMaybeMessage<DecodeResult>(nullptr);
  }

  DecodeResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecodeResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecodeResult& from);
  void MergeFrom(const DecodeResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.DecodeResult";
  }
  protected:
  explicit DecodeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 3,
    kStateInfoFieldNumber = 1,
    kDecodeInfoFieldNumber = 2,
  };
  // repeated .zb.dcts.scenario.kh.commVSA.AudioBlock blocks = 3;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::zb::dcts::scenario::kh::commVSA::AudioBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commVSA::AudioBlock >*
      mutable_blocks();
  private:
  const ::zb::dcts::scenario::kh::commVSA::AudioBlock& _internal_blocks(int index) const;
  ::zb::dcts::scenario::kh::commVSA::AudioBlock* _internal_add_blocks();
  public:
  const ::zb::dcts::scenario::kh::commVSA::AudioBlock& blocks(int index) const;
  ::zb::dcts::scenario::kh::commVSA::AudioBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commVSA::AudioBlock >&
      blocks() const;

  // string state_info = 1;
  void clear_state_info();
  const std::string& state_info() const;
  void set_state_info(const std::string& value);
  void set_state_info(std::string&& value);
  void set_state_info(const char* value);
  void set_state_info(const char* value, size_t size);
  std::string* mutable_state_info();
  std::string* release_state_info();
  void set_allocated_state_info(std::string* state_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state_info(
      std::string* state_info);
  private:
  const std::string& _internal_state_info() const;
  void _internal_set_state_info(const std::string& value);
  std::string* _internal_mutable_state_info();
  public:

  // string decode_info = 2;
  void clear_decode_info();
  const std::string& decode_info() const;
  void set_decode_info(const std::string& value);
  void set_decode_info(std::string&& value);
  void set_decode_info(const char* value);
  void set_decode_info(const char* value, size_t size);
  std::string* mutable_decode_info();
  std::string* release_decode_info();
  void set_allocated_decode_info(std::string* decode_info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_decode_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_decode_info(
      std::string* decode_info);
  private:
  const std::string& _internal_decode_info() const;
  void _internal_set_decode_info(const std::string& value);
  std::string* _internal_mutable_decode_info();
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.DecodeResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commVSA::AudioBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decode_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class CommVSAResult_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header) */ {
 public:
  inline CommVSAResult_Header() : CommVSAResult_Header(nullptr) {};
  virtual ~CommVSAResult_Header();

  CommVSAResult_Header(const CommVSAResult_Header& from);
  CommVSAResult_Header(CommVSAResult_Header&& from) noexcept
    : CommVSAResult_Header() {
    *this = ::std::move(from);
  }

  inline CommVSAResult_Header& operator=(const CommVSAResult_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommVSAResult_Header& operator=(CommVSAResult_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommVSAResult_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommVSAResult_Header* internal_default_instance() {
    return reinterpret_cast<const CommVSAResult_Header*>(
               &_CommVSAResult_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommVSAResult_Header& a, CommVSAResult_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(CommVSAResult_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommVSAResult_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommVSAResult_Header* New() const final {
    return CreateMaybeMessage<CommVSAResult_Header>(nullptr);
  }

  CommVSAResult_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommVSAResult_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommVSAResult_Header& from);
  void MergeFrom(const CommVSAResult_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommVSAResult_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.CommVSAResult.Header";
  }
  protected:
  explicit CommVSAResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kDevicePositionFieldNumber = 4,
    kSequenceNumberFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 4;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// -------------------------------------------------------------------

class CommVSAResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commVSA.CommVSAResult) */ {
 public:
  inline CommVSAResult() : CommVSAResult(nullptr) {};
  virtual ~CommVSAResult();

  CommVSAResult(const CommVSAResult& from);
  CommVSAResult(CommVSAResult&& from) noexcept
    : CommVSAResult() {
    *this = ::std::move(from);
  }

  inline CommVSAResult& operator=(const CommVSAResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommVSAResult& operator=(CommVSAResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommVSAResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommVSAResult* internal_default_instance() {
    return reinterpret_cast<const CommVSAResult*>(
               &_CommVSAResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommVSAResult& a, CommVSAResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommVSAResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommVSAResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommVSAResult* New() const final {
    return CreateMaybeMessage<CommVSAResult>(nullptr);
  }

  CommVSAResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommVSAResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommVSAResult& from);
  void MergeFrom(const CommVSAResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommVSAResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commVSA.CommVSAResult";
  }
  protected:
  explicit CommVSAResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhVSA_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhVSA_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommVSAResult_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kDemodResultFieldNumber = 2,
    kRecognizeFieldNumber = 4,
    kDecodeFieldNumber = 5,
  };
  // bytes symbols = 3;
  void clear_symbols();
  const std::string& symbols() const;
  void set_symbols(const std::string& value);
  void set_symbols(std::string&& value);
  void set_symbols(const char* value);
  void set_symbols(const void* value, size_t size);
  std::string* mutable_symbols();
  std::string* release_symbols();
  void set_allocated_symbols(std::string* symbols);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_symbols();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_symbols(
      std::string* symbols);
  private:
  const std::string& _internal_symbols() const;
  void _internal_set_symbols(const std::string& value);
  std::string* _internal_mutable_symbols();
  public:

  // .zb.dcts.scenario.kh.commVSA.CommVSAResult.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header& header() const;
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* release_header();
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* header);
  private:
  const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header& _internal_header() const;
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* header);
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.FFP.IQData demod_result = 2;
  bool has_demod_result() const;
  private:
  bool _internal_has_demod_result() const;
  public:
  void clear_demod_result();
  const ::zb::dcts::scenario::FFP::IQData& demod_result() const;
  ::zb::dcts::scenario::FFP::IQData* release_demod_result();
  ::zb::dcts::scenario::FFP::IQData* mutable_demod_result();
  void set_allocated_demod_result(::zb::dcts::scenario::FFP::IQData* demod_result);
  private:
  const ::zb::dcts::scenario::FFP::IQData& _internal_demod_result() const;
  ::zb::dcts::scenario::FFP::IQData* _internal_mutable_demod_result();
  public:
  void unsafe_arena_set_allocated_demod_result(
      ::zb::dcts::scenario::FFP::IQData* demod_result);
  ::zb::dcts::scenario::FFP::IQData* unsafe_arena_release_demod_result();

  // .zb.dcts.scenario.kh.commVSA.Recognize recognize = 4;
  bool has_recognize() const;
  private:
  bool _internal_has_recognize() const;
  public:
  void clear_recognize();
  const ::zb::dcts::scenario::kh::commVSA::Recognize& recognize() const;
  ::zb::dcts::scenario::kh::commVSA::Recognize* release_recognize();
  ::zb::dcts::scenario::kh::commVSA::Recognize* mutable_recognize();
  void set_allocated_recognize(::zb::dcts::scenario::kh::commVSA::Recognize* recognize);
  private:
  const ::zb::dcts::scenario::kh::commVSA::Recognize& _internal_recognize() const;
  ::zb::dcts::scenario::kh::commVSA::Recognize* _internal_mutable_recognize();
  public:
  void unsafe_arena_set_allocated_recognize(
      ::zb::dcts::scenario::kh::commVSA::Recognize* recognize);
  ::zb::dcts::scenario::kh::commVSA::Recognize* unsafe_arena_release_recognize();

  // .zb.dcts.scenario.kh.commVSA.DecodeResult decode = 5;
  bool has_decode() const;
  private:
  bool _internal_has_decode() const;
  public:
  void clear_decode();
  const ::zb::dcts::scenario::kh::commVSA::DecodeResult& decode() const;
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* release_decode();
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* mutable_decode();
  void set_allocated_decode(::zb::dcts::scenario::kh::commVSA::DecodeResult* decode);
  private:
  const ::zb::dcts::scenario::kh::commVSA::DecodeResult& _internal_decode() const;
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* _internal_mutable_decode();
  public:
  void unsafe_arena_set_allocated_decode(
      ::zb::dcts::scenario::kh::commVSA::DecodeResult* decode);
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* unsafe_arena_release_decode();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commVSA.CommVSAResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbols_;
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* header_;
  ::zb::dcts::scenario::FFP::IQData* demod_result_;
  ::zb::dcts::scenario::kh::commVSA::Recognize* recognize_;
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* decode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhVSA_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommVSATaskRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool CommVSATaskRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool CommVSATaskRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& CommVSATaskRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& CommVSATaskRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.scenario)
  return _internal_scenario();
}
inline void CommVSATaskRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* CommVSATaskRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommVSATaskRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommVSATaskRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* CommVSATaskRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.scenario)
  return _internal_mutable_scenario();
}
inline void CommVSATaskRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.scenario)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
inline bool CommVSATaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommVSATaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommVSATaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommVSATaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.source_param)
  return _internal_source_param();
}
inline void CommVSATaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommVSATaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommVSATaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommVSATaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommVSATaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommVSATaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
inline bool CommVSATaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommVSATaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommVSATaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcquireParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommVSATaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommVSATaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommVSATaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommVSATaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommVSATaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommVSATaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommVSATaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.acq_param)
}

// .zb.dcts.scenario.FFP.VSAParam vas_param = 4;
inline bool CommVSATaskRequest::_internal_has_vas_param() const {
  return this != internal_default_instance() && vas_param_ != nullptr;
}
inline bool CommVSATaskRequest::has_vas_param() const {
  return _internal_has_vas_param();
}
inline const ::zb::dcts::scenario::FFP::VSAParam& CommVSATaskRequest::_internal_vas_param() const {
  const ::zb::dcts::scenario::FFP::VSAParam* p = vas_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::VSAParam*>(
      &::zb::dcts::scenario::FFP::_VSAParam_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::VSAParam& CommVSATaskRequest::vas_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.vas_param)
  return _internal_vas_param();
}
inline void CommVSATaskRequest::unsafe_arena_set_allocated_vas_param(
    ::zb::dcts::scenario::FFP::VSAParam* vas_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vas_param_);
  }
  vas_param_ = vas_param;
  if (vas_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.vas_param)
}
inline ::zb::dcts::scenario::FFP::VSAParam* CommVSATaskRequest::release_vas_param() {
  auto temp = unsafe_arena_release_vas_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::VSAParam* CommVSATaskRequest::unsafe_arena_release_vas_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.vas_param)
  
  ::zb::dcts::scenario::FFP::VSAParam* temp = vas_param_;
  vas_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::VSAParam* CommVSATaskRequest::_internal_mutable_vas_param() {
  
  if (vas_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::VSAParam>(GetArena());
    vas_param_ = p;
  }
  return vas_param_;
}
inline ::zb::dcts::scenario::FFP::VSAParam* CommVSATaskRequest::mutable_vas_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.vas_param)
  return _internal_mutable_vas_param();
}
inline void CommVSATaskRequest::set_allocated_vas_param(::zb::dcts::scenario::FFP::VSAParam* vas_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vas_param_);
  }
  if (vas_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vas_param)->GetArena();
    if (message_arena != submessage_arena) {
      vas_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vas_param, submessage_arena);
    }
    
  } else {
    
  }
  vas_param_ = vas_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSATaskRequest.vas_param)
}

// -------------------------------------------------------------------

// RecognizeState

// int32 symbol_num = 1;
inline void RecognizeState::clear_symbol_num() {
  symbol_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::_internal_symbol_num() const {
  return symbol_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::symbol_num() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.RecognizeState.symbol_num)
  return _internal_symbol_num();
}
inline void RecognizeState::_internal_set_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  symbol_num_ = value;
}
inline void RecognizeState::set_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_symbol_num(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.RecognizeState.symbol_num)
}

// int32 matched_num = 2;
inline void RecognizeState::clear_matched_num() {
  matched_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::_internal_matched_num() const {
  return matched_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::matched_num() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.RecognizeState.matched_num)
  return _internal_matched_num();
}
inline void RecognizeState::_internal_set_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matched_num_ = value;
}
inline void RecognizeState::set_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matched_num(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.RecognizeState.matched_num)
}

// int32 cur_symbol_num = 3;
inline void RecognizeState::clear_cur_symbol_num() {
  cur_symbol_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::_internal_cur_symbol_num() const {
  return cur_symbol_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::cur_symbol_num() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.RecognizeState.cur_symbol_num)
  return _internal_cur_symbol_num();
}
inline void RecognizeState::_internal_set_cur_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_symbol_num_ = value;
}
inline void RecognizeState::set_cur_symbol_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_symbol_num(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.RecognizeState.cur_symbol_num)
}

// int32 cur_matched_num = 4;
inline void RecognizeState::clear_cur_matched_num() {
  cur_matched_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::_internal_cur_matched_num() const {
  return cur_matched_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecognizeState::cur_matched_num() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.RecognizeState.cur_matched_num)
  return _internal_cur_matched_num();
}
inline void RecognizeState::_internal_set_cur_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_matched_num_ = value;
}
inline void RecognizeState::set_cur_matched_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_matched_num(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.RecognizeState.cur_matched_num)
}

// -------------------------------------------------------------------

// Recognize

// .zb.dcts.scenario.kh.commVSA.RecognizeState state = 1;
inline bool Recognize::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Recognize::has_state() const {
  return _internal_has_state();
}
inline void Recognize::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commVSA::RecognizeState& Recognize::_internal_state() const {
  const ::zb::dcts::scenario::kh::commVSA::RecognizeState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commVSA::RecognizeState*>(
      &::zb::dcts::scenario::kh::commVSA::_RecognizeState_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commVSA::RecognizeState& Recognize::state() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.Recognize.state)
  return _internal_state();
}
inline void Recognize::unsafe_arena_set_allocated_state(
    ::zb::dcts::scenario::kh::commVSA::RecognizeState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.Recognize.state)
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeState* Recognize::release_state() {
  auto temp = unsafe_arena_release_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeState* Recognize::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.Recognize.state)
  
  ::zb::dcts::scenario::kh::commVSA::RecognizeState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeState* Recognize::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::RecognizeState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeState* Recognize::mutable_state() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.Recognize.state)
  return _internal_mutable_state();
}
inline void Recognize::set_allocated_state(::zb::dcts::scenario::kh::commVSA::RecognizeState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.Recognize.state)
}

// .zb.dcts.scenario.kh.commVSA.RecognizeResult result = 2;
inline void Recognize::clear_result() {
  result_ = 0;
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeResult Recognize::_internal_result() const {
  return static_cast< ::zb::dcts::scenario::kh::commVSA::RecognizeResult >(result_);
}
inline ::zb::dcts::scenario::kh::commVSA::RecognizeResult Recognize::result() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.Recognize.result)
  return _internal_result();
}
inline void Recognize::_internal_set_result(::zb::dcts::scenario::kh::commVSA::RecognizeResult value) {
  
  result_ = value;
}
inline void Recognize::set_result(::zb::dcts::scenario::kh::commVSA::RecognizeResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.Recognize.result)
}

// -------------------------------------------------------------------

// AudioBlock

// repeated int32 pcm_bitstream = 1;
inline int AudioBlock::_internal_pcm_bitstream_size() const {
  return pcm_bitstream_.size();
}
inline int AudioBlock::pcm_bitstream_size() const {
  return _internal_pcm_bitstream_size();
}
inline void AudioBlock::clear_pcm_bitstream() {
  pcm_bitstream_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::_internal_pcm_bitstream(int index) const {
  return pcm_bitstream_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AudioBlock::pcm_bitstream(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream(index);
}
inline void AudioBlock::set_pcm_bitstream(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.AudioBlock.pcm_bitstream)
}
inline void AudioBlock::_internal_add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pcm_bitstream_.Add(value);
}
inline void AudioBlock::add_pcm_bitstream(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pcm_bitstream(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commVSA.AudioBlock.pcm_bitstream)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::_internal_pcm_bitstream() const {
  return pcm_bitstream_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AudioBlock::pcm_bitstream() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commVSA.AudioBlock.pcm_bitstream)
  return _internal_pcm_bitstream();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::_internal_mutable_pcm_bitstream() {
  return &pcm_bitstream_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AudioBlock::mutable_pcm_bitstream() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commVSA.AudioBlock.pcm_bitstream)
  return _internal_mutable_pcm_bitstream();
}

// -------------------------------------------------------------------

// DecodeResult

// string state_info = 1;
inline void DecodeResult::clear_state_info() {
  state_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DecodeResult::state_info() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
  return _internal_state_info();
}
inline void DecodeResult::set_state_info(const std::string& value) {
  _internal_set_state_info(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}
inline std::string* DecodeResult::mutable_state_info() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
  return _internal_mutable_state_info();
}
inline const std::string& DecodeResult::_internal_state_info() const {
  return state_info_.Get();
}
inline void DecodeResult::_internal_set_state_info(const std::string& value) {
  
  state_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DecodeResult::set_state_info(std::string&& value) {
  
  state_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}
inline void DecodeResult::set_state_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}
inline void DecodeResult::set_state_info(const char* value,
    size_t size) {
  
  state_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}
inline std::string* DecodeResult::_internal_mutable_state_info() {
  
  return state_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DecodeResult::release_state_info() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
  return state_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecodeResult::set_allocated_state_info(std::string* state_info) {
  if (state_info != nullptr) {
    
  } else {
    
  }
  state_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}
inline std::string* DecodeResult::unsafe_arena_release_state_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DecodeResult::unsafe_arena_set_allocated_state_info(
    std::string* state_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state_info != nullptr) {
    
  } else {
    
  }
  state_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.DecodeResult.state_info)
}

// string decode_info = 2;
inline void DecodeResult::clear_decode_info() {
  decode_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DecodeResult::decode_info() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
  return _internal_decode_info();
}
inline void DecodeResult::set_decode_info(const std::string& value) {
  _internal_set_decode_info(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}
inline std::string* DecodeResult::mutable_decode_info() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
  return _internal_mutable_decode_info();
}
inline const std::string& DecodeResult::_internal_decode_info() const {
  return decode_info_.Get();
}
inline void DecodeResult::_internal_set_decode_info(const std::string& value) {
  
  decode_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DecodeResult::set_decode_info(std::string&& value) {
  
  decode_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}
inline void DecodeResult::set_decode_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  decode_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}
inline void DecodeResult::set_decode_info(const char* value,
    size_t size) {
  
  decode_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}
inline std::string* DecodeResult::_internal_mutable_decode_info() {
  
  return decode_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DecodeResult::release_decode_info() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
  return decode_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DecodeResult::set_allocated_decode_info(std::string* decode_info) {
  if (decode_info != nullptr) {
    
  } else {
    
  }
  decode_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decode_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}
inline std::string* DecodeResult::unsafe_arena_release_decode_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return decode_info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DecodeResult::unsafe_arena_set_allocated_decode_info(
    std::string* decode_info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (decode_info != nullptr) {
    
  } else {
    
  }
  decode_info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      decode_info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.DecodeResult.decode_info)
}

// repeated .zb.dcts.scenario.kh.commVSA.AudioBlock blocks = 3;
inline int DecodeResult::_internal_blocks_size() const {
  return blocks_.size();
}
inline int DecodeResult::blocks_size() const {
  return _internal_blocks_size();
}
inline void DecodeResult::clear_blocks() {
  blocks_.Clear();
}
inline ::zb::dcts::scenario::kh::commVSA::AudioBlock* DecodeResult::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.DecodeResult.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commVSA::AudioBlock >*
DecodeResult::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commVSA.DecodeResult.blocks)
  return &blocks_;
}
inline const ::zb::dcts::scenario::kh::commVSA::AudioBlock& DecodeResult::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::zb::dcts::scenario::kh::commVSA::AudioBlock& DecodeResult::blocks(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.DecodeResult.blocks)
  return _internal_blocks(index);
}
inline ::zb::dcts::scenario::kh::commVSA::AudioBlock* DecodeResult::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::zb::dcts::scenario::kh::commVSA::AudioBlock* DecodeResult::add_blocks() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commVSA.DecodeResult.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::commVSA::AudioBlock >&
DecodeResult::blocks() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commVSA.DecodeResult.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// CommVSAResult_Header

// .zb.dcts.source.SourceId result_from = 1;
inline bool CommVSAResult_Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool CommVSAResult_Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& CommVSAResult_Header::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& CommVSAResult_Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.result_from)
  return _internal_result_from();
}
inline void CommVSAResult_Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.result_from)
}
inline ::zb::dcts::source::SourceId* CommVSAResult_Header::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* CommVSAResult_Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* CommVSAResult_Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* CommVSAResult_Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.result_from)
  return _internal_mutable_result_from();
}
inline void CommVSAResult_Header::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.result_from)
}

// uint32 sequence_number = 2;
inline void CommVSAResult_Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommVSAResult_Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommVSAResult_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.sequence_number)
  return _internal_sequence_number();
}
inline void CommVSAResult_Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void CommVSAResult_Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.sequence_number)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool CommVSAResult_Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool CommVSAResult_Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& CommVSAResult_Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& CommVSAResult_Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.time_span)
  return _internal_time_span();
}
inline void CommVSAResult_Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.time_span)
}
inline ::zb::dcts::TimeSpan* CommVSAResult_Header::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* CommVSAResult_Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* CommVSAResult_Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* CommVSAResult_Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.time_span)
  return _internal_mutable_time_span();
}
inline void CommVSAResult_Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.time_span)
}

// .zb.dcts.Position device_position = 4;
inline bool CommVSAResult_Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool CommVSAResult_Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& CommVSAResult_Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& CommVSAResult_Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.device_position)
  return _internal_device_position();
}
inline void CommVSAResult_Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.device_position)
}
inline ::zb::dcts::Position* CommVSAResult_Header::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* CommVSAResult_Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* CommVSAResult_Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* CommVSAResult_Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.device_position)
  return _internal_mutable_device_position();
}
inline void CommVSAResult_Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.Header.device_position)
}

// -------------------------------------------------------------------

// CommVSAResult

// .zb.dcts.scenario.kh.commVSA.CommVSAResult.Header header = 1;
inline bool CommVSAResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommVSAResult::has_header() const {
  return _internal_has_header();
}
inline void CommVSAResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header& CommVSAResult::_internal_header() const {
  const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header*>(
      &::zb::dcts::scenario::kh::commVSA::_CommVSAResult_Header_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header& CommVSAResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.header)
  return _internal_header();
}
inline void CommVSAResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.header)
}
inline ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* CommVSAResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* CommVSAResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.header)
  
  ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* CommVSAResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* CommVSAResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.header)
  return _internal_mutable_header();
}
inline void CommVSAResult::set_allocated_header(::zb::dcts::scenario::kh::commVSA::CommVSAResult_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.header)
}

// .zb.dcts.scenario.FFP.IQData demod_result = 2;
inline bool CommVSAResult::_internal_has_demod_result() const {
  return this != internal_default_instance() && demod_result_ != nullptr;
}
inline bool CommVSAResult::has_demod_result() const {
  return _internal_has_demod_result();
}
inline const ::zb::dcts::scenario::FFP::IQData& CommVSAResult::_internal_demod_result() const {
  const ::zb::dcts::scenario::FFP::IQData* p = demod_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::FFP::IQData*>(
      &::zb::dcts::scenario::FFP::_IQData_default_instance_);
}
inline const ::zb::dcts::scenario::FFP::IQData& CommVSAResult::demod_result() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.demod_result)
  return _internal_demod_result();
}
inline void CommVSAResult::unsafe_arena_set_allocated_demod_result(
    ::zb::dcts::scenario::FFP::IQData* demod_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(demod_result_);
  }
  demod_result_ = demod_result;
  if (demod_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.demod_result)
}
inline ::zb::dcts::scenario::FFP::IQData* CommVSAResult::release_demod_result() {
  auto temp = unsafe_arena_release_demod_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::FFP::IQData* CommVSAResult::unsafe_arena_release_demod_result() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.demod_result)
  
  ::zb::dcts::scenario::FFP::IQData* temp = demod_result_;
  demod_result_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::FFP::IQData* CommVSAResult::_internal_mutable_demod_result() {
  
  if (demod_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::FFP::IQData>(GetArena());
    demod_result_ = p;
  }
  return demod_result_;
}
inline ::zb::dcts::scenario::FFP::IQData* CommVSAResult::mutable_demod_result() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.demod_result)
  return _internal_mutable_demod_result();
}
inline void CommVSAResult::set_allocated_demod_result(::zb::dcts::scenario::FFP::IQData* demod_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(demod_result_);
  }
  if (demod_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(demod_result)->GetArena();
    if (message_arena != submessage_arena) {
      demod_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demod_result, submessage_arena);
    }
    
  } else {
    
  }
  demod_result_ = demod_result;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.demod_result)
}

// bytes symbols = 3;
inline void CommVSAResult::clear_symbols() {
  symbols_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommVSAResult::symbols() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
  return _internal_symbols();
}
inline void CommVSAResult::set_symbols(const std::string& value) {
  _internal_set_symbols(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}
inline std::string* CommVSAResult::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
  return _internal_mutable_symbols();
}
inline const std::string& CommVSAResult::_internal_symbols() const {
  return symbols_.Get();
}
inline void CommVSAResult::_internal_set_symbols(const std::string& value) {
  
  symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommVSAResult::set_symbols(std::string&& value) {
  
  symbols_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}
inline void CommVSAResult::set_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}
inline void CommVSAResult::set_symbols(const void* value,
    size_t size) {
  
  symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}
inline std::string* CommVSAResult::_internal_mutable_symbols() {
  
  return symbols_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommVSAResult::release_symbols() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
  return symbols_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommVSAResult::set_allocated_symbols(std::string* symbols) {
  if (symbols != nullptr) {
    
  } else {
    
  }
  symbols_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbols,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}
inline std::string* CommVSAResult::unsafe_arena_release_symbols() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return symbols_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommVSAResult::unsafe_arena_set_allocated_symbols(
    std::string* symbols) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (symbols != nullptr) {
    
  } else {
    
  }
  symbols_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      symbols, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.symbols)
}

// .zb.dcts.scenario.kh.commVSA.Recognize recognize = 4;
inline bool CommVSAResult::_internal_has_recognize() const {
  return this != internal_default_instance() && recognize_ != nullptr;
}
inline bool CommVSAResult::has_recognize() const {
  return _internal_has_recognize();
}
inline void CommVSAResult::clear_recognize() {
  if (GetArena() == nullptr && recognize_ != nullptr) {
    delete recognize_;
  }
  recognize_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commVSA::Recognize& CommVSAResult::_internal_recognize() const {
  const ::zb::dcts::scenario::kh::commVSA::Recognize* p = recognize_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commVSA::Recognize*>(
      &::zb::dcts::scenario::kh::commVSA::_Recognize_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commVSA::Recognize& CommVSAResult::recognize() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.recognize)
  return _internal_recognize();
}
inline void CommVSAResult::unsafe_arena_set_allocated_recognize(
    ::zb::dcts::scenario::kh::commVSA::Recognize* recognize) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognize_);
  }
  recognize_ = recognize;
  if (recognize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.recognize)
}
inline ::zb::dcts::scenario::kh::commVSA::Recognize* CommVSAResult::release_recognize() {
  auto temp = unsafe_arena_release_recognize();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::Recognize* CommVSAResult::unsafe_arena_release_recognize() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.recognize)
  
  ::zb::dcts::scenario::kh::commVSA::Recognize* temp = recognize_;
  recognize_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::Recognize* CommVSAResult::_internal_mutable_recognize() {
  
  if (recognize_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::Recognize>(GetArena());
    recognize_ = p;
  }
  return recognize_;
}
inline ::zb::dcts::scenario::kh::commVSA::Recognize* CommVSAResult::mutable_recognize() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.recognize)
  return _internal_mutable_recognize();
}
inline void CommVSAResult::set_allocated_recognize(::zb::dcts::scenario::kh::commVSA::Recognize* recognize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recognize_;
  }
  if (recognize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recognize);
    if (message_arena != submessage_arena) {
      recognize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognize, submessage_arena);
    }
    
  } else {
    
  }
  recognize_ = recognize;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.recognize)
}

// .zb.dcts.scenario.kh.commVSA.DecodeResult decode = 5;
inline bool CommVSAResult::_internal_has_decode() const {
  return this != internal_default_instance() && decode_ != nullptr;
}
inline bool CommVSAResult::has_decode() const {
  return _internal_has_decode();
}
inline void CommVSAResult::clear_decode() {
  if (GetArena() == nullptr && decode_ != nullptr) {
    delete decode_;
  }
  decode_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commVSA::DecodeResult& CommVSAResult::_internal_decode() const {
  const ::zb::dcts::scenario::kh::commVSA::DecodeResult* p = decode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commVSA::DecodeResult*>(
      &::zb::dcts::scenario::kh::commVSA::_DecodeResult_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commVSA::DecodeResult& CommVSAResult::decode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commVSA.CommVSAResult.decode)
  return _internal_decode();
}
inline void CommVSAResult::unsafe_arena_set_allocated_decode(
    ::zb::dcts::scenario::kh::commVSA::DecodeResult* decode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decode_);
  }
  decode_ = decode;
  if (decode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.decode)
}
inline ::zb::dcts::scenario::kh::commVSA::DecodeResult* CommVSAResult::release_decode() {
  auto temp = unsafe_arena_release_decode();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::DecodeResult* CommVSAResult::unsafe_arena_release_decode() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commVSA.CommVSAResult.decode)
  
  ::zb::dcts::scenario::kh::commVSA::DecodeResult* temp = decode_;
  decode_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commVSA::DecodeResult* CommVSAResult::_internal_mutable_decode() {
  
  if (decode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commVSA::DecodeResult>(GetArena());
    decode_ = p;
  }
  return decode_;
}
inline ::zb::dcts::scenario::kh::commVSA::DecodeResult* CommVSAResult::mutable_decode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commVSA.CommVSAResult.decode)
  return _internal_mutable_decode();
}
inline void CommVSAResult::set_allocated_decode(::zb::dcts::scenario::kh::commVSA::DecodeResult* decode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete decode_;
  }
  if (decode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decode);
    if (message_arena != submessage_arena) {
      decode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decode, submessage_arena);
    }
    
  } else {
    
  }
  decode_ = decode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commVSA.CommVSAResult.decode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commVSA
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commVSA::RecognizeResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commVSA::RecognizeResult>() {
  return ::zb::dcts::scenario::kh::commVSA::RecognizeResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhVSA_2eproto
