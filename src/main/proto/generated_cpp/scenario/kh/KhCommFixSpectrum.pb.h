// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommFixSpectrum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommFixSpectrum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommFixSpectrum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "source/source.pb.h"
#include "source/kh/KhContext.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
#include "scenario/detection.pb.h"
#include "scenario/kh/KhSpectrumAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommFixSpectrum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class FixResult;
class FixResultDefaultTypeInternal;
extern FixResultDefaultTypeInternal _FixResult_default_instance_;
class FixTaskRequest;
class FixTaskRequestDefaultTypeInternal;
extern FixTaskRequestDefaultTypeInternal _FixTaskRequest_default_instance_;
class IQRecordRequest;
class IQRecordRequestDefaultTypeInternal;
extern IQRecordRequestDefaultTypeInternal _IQRecordRequest_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commSpectrum::FixResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::FixResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::FixTaskRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::IQRecordRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {

// ===================================================================

class FixTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest) */ {
 public:
  inline FixTaskRequest() : FixTaskRequest(nullptr) {};
  virtual ~FixTaskRequest();

  FixTaskRequest(const FixTaskRequest& from);
  FixTaskRequest(FixTaskRequest&& from) noexcept
    : FixTaskRequest() {
    *this = ::std::move(from);
  }

  inline FixTaskRequest& operator=(const FixTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixTaskRequest& operator=(FixTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixTaskRequest* internal_default_instance() {
    return reinterpret_cast<const FixTaskRequest*>(
               &_FixTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FixTaskRequest& a, FixTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FixTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixTaskRequest* New() const final {
    return CreateMaybeMessage<FixTaskRequest>(nullptr);
  }

  FixTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixTaskRequest& from);
  void MergeFrom(const FixTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.FixTaskRequest";
  }
  protected:
  explicit FixTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kDetectionParamFieldNumber = 4,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  bool has_detection_param() const;
  private:
  bool _internal_has_detection_param() const;
  public:
  void clear_detection_param();
  const ::zb::dcts::scenario::detection::DetectionParam& detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* release_detection_param();
  ::zb::dcts::scenario::detection::DetectionParam* mutable_detection_param();
  void set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param);
  private:
  const ::zb::dcts::scenario::detection::DetectionParam& _internal_detection_param() const;
  ::zb::dcts::scenario::detection::DetectionParam* _internal_mutable_detection_param();
  public:
  void unsafe_arena_set_allocated_detection_param(
      ::zb::dcts::scenario::detection::DetectionParam* detection_param);
  ::zb::dcts::scenario::detection::DetectionParam* unsafe_arena_release_detection_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param_;
  ::zb::dcts::scenario::detection::DetectionParam* detection_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto;
};
// -------------------------------------------------------------------

class FixResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.FixResult) */ {
 public:
  inline FixResult() : FixResult(nullptr) {};
  virtual ~FixResult();

  FixResult(const FixResult& from);
  FixResult(FixResult&& from) noexcept
    : FixResult() {
    *this = ::std::move(from);
  }

  inline FixResult& operator=(const FixResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixResult& operator=(FixResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixResult* internal_default_instance() {
    return reinterpret_cast<const FixResult*>(
               &_FixResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FixResult& a, FixResult& b) {
    a.Swap(&b);
  }
  inline void Swap(FixResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixResult* New() const final {
    return CreateMaybeMessage<FixResult>(nullptr);
  }

  FixResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixResult& from);
  void MergeFrom(const FixResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.FixResult";
  }
  protected:
  explicit FixResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kPanoramaViewFieldNumber = 6,
    kCloseshotViewFieldNumber = 7,
  };
  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.source.kh.OperationStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::zb::dcts::source::kh::OperationStatus& status() const;
  ::zb::dcts::source::kh::OperationStatus* release_status();
  ::zb::dcts::source::kh::OperationStatus* mutable_status();
  void set_allocated_status(::zb::dcts::source::kh::OperationStatus* status);
  private:
  const ::zb::dcts::source::kh::OperationStatus& _internal_status() const;
  ::zb::dcts::source::kh::OperationStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::zb::dcts::source::kh::OperationStatus* status);
  ::zb::dcts::source::kh::OperationStatus* unsafe_arena_release_status();

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  bool has_panorama_view() const;
  private:
  bool _internal_has_panorama_view() const;
  public:
  void clear_panorama_view();
  const ::zb::dcts::scenario::spectrum::View& panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* release_panorama_view();
  ::zb::dcts::scenario::spectrum::View* mutable_panorama_view();
  void set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_panorama_view();
  public:
  void unsafe_arena_set_allocated_panorama_view(
      ::zb::dcts::scenario::spectrum::View* panorama_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_panorama_view();

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  bool has_closeshot_view() const;
  private:
  bool _internal_has_closeshot_view() const;
  public:
  void clear_closeshot_view();
  const ::zb::dcts::scenario::spectrum::View& closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* release_closeshot_view();
  ::zb::dcts::scenario::spectrum::View* mutable_closeshot_view();
  void set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_closeshot_view();
  public:
  void unsafe_arena_set_allocated_closeshot_view(
      ::zb::dcts::scenario::spectrum::View* closeshot_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_closeshot_view();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.FixResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::source::kh::OperationStatus* status_;
  ::zb::dcts::scenario::spectrum::View* panorama_view_;
  ::zb::dcts::scenario::spectrum::View* closeshot_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto;
};
// -------------------------------------------------------------------

class IQRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest) */ {
 public:
  inline IQRecordRequest() : IQRecordRequest(nullptr) {};
  virtual ~IQRecordRequest();

  IQRecordRequest(const IQRecordRequest& from);
  IQRecordRequest(IQRecordRequest&& from) noexcept
    : IQRecordRequest() {
    *this = ::std::move(from);
  }

  inline IQRecordRequest& operator=(const IQRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IQRecordRequest& operator=(IQRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IQRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IQRecordRequest* internal_default_instance() {
    return reinterpret_cast<const IQRecordRequest*>(
               &_IQRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IQRecordRequest& a, IQRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IQRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IQRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IQRecordRequest* New() const final {
    return CreateMaybeMessage<IQRecordRequest>(nullptr);
  }

  IQRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IQRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IQRecordRequest& from);
  void MergeFrom(const IQRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IQRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.IQRecordRequest";
  }
  protected:
  explicit IQRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommFixSpectrum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kLengthFieldNumber = 3,
    kRecordFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // int64 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool record = 2;
  void clear_record();
  bool record() const;
  void set_record(bool value);
  private:
  bool _internal_record() const;
  void _internal_set_record(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_;
  bool record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommFixSpectrum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FixTaskRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool FixTaskRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool FixTaskRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& FixTaskRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& FixTaskRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.scenario)
  return _internal_scenario();
}
inline void FixTaskRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* FixTaskRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* FixTaskRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* FixTaskRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* FixTaskRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.scenario)
  return _internal_mutable_scenario();
}
inline void FixTaskRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.scenario)
}

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
inline bool FixTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool FixTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& FixTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& FixTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.source_param)
  return _internal_source_param();
}
inline void FixTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* FixTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* FixTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* FixTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* FixTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void FixTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
inline bool FixTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool FixTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& FixTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& FixTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void FixTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* FixTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* FixTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* FixTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* FixTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void FixTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.acq_param)
}

// .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
inline bool FixTaskRequest::_internal_has_detection_param() const {
  return this != internal_default_instance() && detection_param_ != nullptr;
}
inline bool FixTaskRequest::has_detection_param() const {
  return _internal_has_detection_param();
}
inline const ::zb::dcts::scenario::detection::DetectionParam& FixTaskRequest::_internal_detection_param() const {
  const ::zb::dcts::scenario::detection::DetectionParam* p = detection_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::detection::DetectionParam*>(
      &::zb::dcts::scenario::detection::_DetectionParam_default_instance_);
}
inline const ::zb::dcts::scenario::detection::DetectionParam& FixTaskRequest::detection_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.detection_param)
  return _internal_detection_param();
}
inline void FixTaskRequest::unsafe_arena_set_allocated_detection_param(
    ::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  detection_param_ = detection_param;
  if (detection_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.detection_param)
}
inline ::zb::dcts::scenario::detection::DetectionParam* FixTaskRequest::release_detection_param() {
  auto temp = unsafe_arena_release_detection_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* FixTaskRequest::unsafe_arena_release_detection_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.detection_param)
  
  ::zb::dcts::scenario::detection::DetectionParam* temp = detection_param_;
  detection_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::detection::DetectionParam* FixTaskRequest::_internal_mutable_detection_param() {
  
  if (detection_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::detection::DetectionParam>(GetArena());
    detection_param_ = p;
  }
  return detection_param_;
}
inline ::zb::dcts::scenario::detection::DetectionParam* FixTaskRequest::mutable_detection_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.detection_param)
  return _internal_mutable_detection_param();
}
inline void FixTaskRequest::set_allocated_detection_param(::zb::dcts::scenario::detection::DetectionParam* detection_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param_);
  }
  if (detection_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detection_param)->GetArena();
    if (message_arena != submessage_arena) {
      detection_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detection_param, submessage_arena);
    }
    
  } else {
    
  }
  detection_param_ = detection_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixTaskRequest.detection_param)
}

// -------------------------------------------------------------------

// FixResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool FixResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool FixResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& FixResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& FixResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixResult.header)
  return _internal_header();
}
inline void FixResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* FixResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* FixResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* FixResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* FixResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixResult.header)
  return _internal_mutable_header();
}
inline void FixResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.header)
}

// .zb.dcts.source.kh.OperationStatus status = 2;
inline bool FixResult::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FixResult::has_status() const {
  return _internal_has_status();
}
inline const ::zb::dcts::source::kh::OperationStatus& FixResult::_internal_status() const {
  const ::zb::dcts::source::kh::OperationStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::OperationStatus*>(
      &::zb::dcts::source::kh::_OperationStatus_default_instance_);
}
inline const ::zb::dcts::source::kh::OperationStatus& FixResult::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixResult.status)
  return _internal_status();
}
inline void FixResult::unsafe_arena_set_allocated_status(
    ::zb::dcts::source::kh::OperationStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.status)
}
inline ::zb::dcts::source::kh::OperationStatus* FixResult::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* FixResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixResult.status)
  
  ::zb::dcts::source::kh::OperationStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* FixResult::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::OperationStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::zb::dcts::source::kh::OperationStatus* FixResult::mutable_status() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixResult.status)
  return _internal_mutable_status();
}
inline void FixResult::set_allocated_status(::zb::dcts::source::kh::OperationStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.status)
}

// .zb.dcts.scenario.spectrum.View panorama_view = 6;
inline bool FixResult::_internal_has_panorama_view() const {
  return this != internal_default_instance() && panorama_view_ != nullptr;
}
inline bool FixResult::has_panorama_view() const {
  return _internal_has_panorama_view();
}
inline const ::zb::dcts::scenario::spectrum::View& FixResult::_internal_panorama_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = panorama_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& FixResult::panorama_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixResult.panorama_view)
  return _internal_panorama_view();
}
inline void FixResult::unsafe_arena_set_allocated_panorama_view(
    ::zb::dcts::scenario::spectrum::View* panorama_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  panorama_view_ = panorama_view;
  if (panorama_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.panorama_view)
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::release_panorama_view() {
  auto temp = unsafe_arena_release_panorama_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::unsafe_arena_release_panorama_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixResult.panorama_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::_internal_mutable_panorama_view() {
  
  if (panorama_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    panorama_view_ = p;
  }
  return panorama_view_;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::mutable_panorama_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixResult.panorama_view)
  return _internal_mutable_panorama_view();
}
inline void FixResult::set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  if (panorama_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view)->GetArena();
    if (message_arena != submessage_arena) {
      panorama_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panorama_view, submessage_arena);
    }
    
  } else {
    
  }
  panorama_view_ = panorama_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.panorama_view)
}

// .zb.dcts.scenario.spectrum.View closeshot_view = 7;
inline bool FixResult::_internal_has_closeshot_view() const {
  return this != internal_default_instance() && closeshot_view_ != nullptr;
}
inline bool FixResult::has_closeshot_view() const {
  return _internal_has_closeshot_view();
}
inline const ::zb::dcts::scenario::spectrum::View& FixResult::_internal_closeshot_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = closeshot_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& FixResult::closeshot_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.FixResult.closeshot_view)
  return _internal_closeshot_view();
}
inline void FixResult::unsafe_arena_set_allocated_closeshot_view(
    ::zb::dcts::scenario::spectrum::View* closeshot_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  closeshot_view_ = closeshot_view;
  if (closeshot_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.closeshot_view)
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::release_closeshot_view() {
  auto temp = unsafe_arena_release_closeshot_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::unsafe_arena_release_closeshot_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.FixResult.closeshot_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::_internal_mutable_closeshot_view() {
  
  if (closeshot_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    closeshot_view_ = p;
  }
  return closeshot_view_;
}
inline ::zb::dcts::scenario::spectrum::View* FixResult::mutable_closeshot_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.FixResult.closeshot_view)
  return _internal_mutable_closeshot_view();
}
inline void FixResult::set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  if (closeshot_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view)->GetArena();
    if (message_arena != submessage_arena) {
      closeshot_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closeshot_view, submessage_arena);
    }
    
  } else {
    
  }
  closeshot_view_ = closeshot_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.FixResult.closeshot_view)
}

// -------------------------------------------------------------------

// IQRecordRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool IQRecordRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool IQRecordRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& IQRecordRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& IQRecordRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.responser)
  return _internal_responser();
}
inline void IQRecordRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* IQRecordRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* IQRecordRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* IQRecordRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* IQRecordRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.responser)
  return _internal_mutable_responser();
}
inline void IQRecordRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.responser)
}

// bool record = 2;
inline void IQRecordRequest::clear_record() {
  record_ = false;
}
inline bool IQRecordRequest::_internal_record() const {
  return record_;
}
inline bool IQRecordRequest::record() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.record)
  return _internal_record();
}
inline void IQRecordRequest::_internal_set_record(bool value) {
  
  record_ = value;
}
inline void IQRecordRequest::set_record(bool value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.record)
}

// int64 length = 3;
inline void IQRecordRequest::clear_length() {
  length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IQRecordRequest::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IQRecordRequest::length() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.length)
  return _internal_length();
}
inline void IQRecordRequest::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  length_ = value;
}
inline void IQRecordRequest::set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.IQRecordRequest.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommFixSpectrum_2eproto
