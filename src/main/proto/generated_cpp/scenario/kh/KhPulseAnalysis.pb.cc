// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhPulseAnalysis.proto

#include "scenario/kh/KhPulseAnalysis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhIQDataAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhPulseAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhPulseAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhPulseAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhPulseAnalysis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace pulseAnalysis {
class AnalysisParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalysisParam> _instance;
} _AnalysisParam_default_instance_;
class CommPulseAnalysisTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommPulseAnalysisTaskRequest> _instance;
} _CommPulseAnalysisTaskRequest_default_instance_;
class ChangePulseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePulseRequest> _instance;
} _ChangePulseRequest_default_instance_;
class PulseParamsAnalysisResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulseParamsAnalysisResult> _instance;
} _PulseParamsAnalysisResult_default_instance_;
class PulseTransientAnalysisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulseTransientAnalysisData> _instance;
} _PulseTransientAnalysisData_default_instance_;
class CommPulseResult_HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommPulseResult_Header> _instance;
} _CommPulseResult_Header_default_instance_;
class CommPulseResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommPulseResult> _instance;
} _CommPulseResult_default_instance_;
}  // namespace pulseAnalysis
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_AnalysisParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_ChangePulseRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {
      &scc_info_TaskId_scenario_2fscenario_2eproto.base,
      &scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_CommIQAcqSource_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_CommIQAcquireParam_scenario_2fkh_2fKhIQDataAcq_2eproto.base,
      &scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {
      &scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
      &scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,}};

static void InitDefaultsscc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_TimeSpan_dcts_2eproto.base,
      &scc_info_Position_dcts_2eproto.base,}};

static void InitDefaultsscc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_PulseParamsAnalysisResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {}};

static void InitDefaultsscc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::pulseAnalysis::_PulseTransientAnalysisData_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto}, {
      &scc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhPulseAnalysis_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, maxwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, minwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, lvlmode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, lvldata_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, maxpulse_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, histogrambins_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, start_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam, stop_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest, analysis_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest, param_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest, analysis_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, peakpower_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, minpower_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, avgonpower_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, risetime_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, falltime_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, pw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, pri_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult, toa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData, amplitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData, phase_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData, frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData, paramsresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header, result_from_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header, time_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header, device_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult, raw_trace_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult, transient_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam)},
  { 13, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest)},
  { 22, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest)},
  { 30, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult)},
  { 43, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData)},
  { 52, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header)},
  { 61, -1, sizeof(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_AnalysisParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_ChangePulseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_PulseParamsAnalysisResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_PulseTransientAnalysisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhPulseAnalysis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!scenario/kh/KhPulseAnalysis.proto\022!zb."
  "dcts.scenario.kh.pulseAnalysis\032\ndcts.pro"
  "to\032\023source/source.proto\032\027scenario/scenar"
  "io.proto\032\035scenario/kh/KhIQDataAcq.proto\""
  "\331\001\n\rAnalysisParam\022\020\n\010maxwidth\030\004 \001(\001\022\020\n\010m"
  "inwidth\030\005 \001(\001\022=\n\007lvlmode\030\006 \001(\0162,.zb.dcts"
  ".scenario.kh.pulseAnalysis.LevelMode\022\017\n\007"
  "lvldata\030\007 \001(\002\022\026\n\016maxpulse_count\030\010 \001(\005\022\025\n"
  "\rhistogrambins\030\t \001(\r\022\022\n\nstart_time\030\n \001(\001"
  "\022\021\n\tstop_time\030\013 \001(\001\"\246\002\n\034CommPulseAnalysi"
  "sTaskRequest\022.\n\010scenario\030\001 \001(\0132\034.zb.dcts"
  ".scenario.ScenarioId\022E\n\014source_param\030\002 \001"
  "(\0132/.zb.dcts.scenario.kh.commIqData.Comm"
  "IQAcqSource\022E\n\tacq_param\030\003 \001(\01322.zb.dcts"
  ".scenario.kh.commIqData.CommIQAcquirePar"
  "am\022H\n\016analysis_param\030\004 \001(\01320.zb.dcts.sce"
  "nario.kh.pulseAnalysis.AnalysisParam\"\315\001\n"
  "\022ChangePulseRequest\022)\n\007task_id\030\001 \001(\0132\030.z"
  "b.dcts.scenario.TaskId\022B\n\013param_index\030\002 "
  "\001(\0162-.zb.dcts.scenario.kh.pulseAnalysis."
  "ParamIndex\022H\n\016analysis_param\030\003 \001(\01320.zb."
  "dcts.scenario.kh.pulseAnalysis.AnalysisP"
  "aram\"\236\001\n\031PulseParamsAnalysisResult\022\021\n\tpe"
  "akPower\030\001 \001(\002\022\020\n\010minPower\030\002 \001(\002\022\022\n\navgOn"
  "Power\030\003 \001(\002\022\020\n\010riseTime\030\004 \001(\001\022\020\n\010fallTim"
  "e\030\005 \001(\001\022\n\n\002PW\030\006 \001(\001\022\013\n\003PRI\030\007 \001(\001\022\013\n\003TOA\030"
  "\010 \001(\004\"\245\001\n\032PulseTransientAnalysisData\022\021\n\t"
  "amplitude\030\001 \003(\002\022\r\n\005phase\030\002 \003(\002\022\021\n\tfreque"
  "ncy\030\003 \003(\002\022R\n\014paramsResult\030\004 \003(\0132<.zb.dct"
  "s.scenario.kh.pulseAnalysis.PulseParamsA"
  "nalysisResult\"\353\002\n\017CommPulseResult\022I\n\006hea"
  "der\030\001 \001(\01329.zb.dcts.scenario.kh.pulseAna"
  "lysis.CommPulseResult.Header\022\021\n\traw_trac"
  "e\030\002 \003(\002\022U\n\016transient_data\030\003 \001(\0132=.zb.dct"
  "s.scenario.kh.pulseAnalysis.PulseTransie"
  "ntAnalysisData\032\242\001\n\006Header\022-\n\013result_from"
  "\030\001 \001(\0132\030.zb.dcts.source.SourceId\022\027\n\017sequ"
  "ence_number\030\002 \001(\r\022$\n\ttime_span\030\003 \001(\0132\021.z"
  "b.dcts.TimeSpan\022*\n\017device_position\030\004 \001(\013"
  "2\021.zb.dcts.Position*)\n\tLevelMode\022\010\n\004PEAK"
  "\020\000\022\t\n\005NOISE\020\001\022\007\n\003ABS\020\002* \n\nParamIndex\022\022\n\016"
  "ANALYSIS_PARAM\020\0002\250\003\n\024PulseAnalysisServic"
  "e\022o\n\tStartTask\022\?.zb.dcts.scenario.kh.pul"
  "seAnalysis.CommPulseAnalysisTaskRequest\032"
  "\037.zb.dcts.scenario.ScenarioReply\"\000\022e\n\tGe"
  "tResult\022 .zb.dcts.scenario.ScenarioTaskI"
  "d\0322.zb.dcts.scenario.kh.pulseAnalysis.Co"
  "mmPulseResult\"\0000\001\022g\n\013ChangeParam\0225.zb.dc"
  "ts.scenario.kh.pulseAnalysis.ChangePulse"
  "Request\032\037.zb.dcts.scenario.ScenarioReply"
  "\"\000\022O\n\010StopTask\022 .zb.dcts.scenario.Scenar"
  "ioTaskId\032\037.zb.dcts.scenario.ScenarioRepl"
  "y\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_deps[4] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fkh_2fKhIQDataAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_sccs[7] = {
  &scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
  &scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhPulseAnalysis_2eproto, "scenario/kh/KhPulseAnalysis.proto", 2091,
  &descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_once, descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhPulseAnalysis_2eproto, 7, file_level_enum_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhPulseAnalysis_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace pulseAnalysis {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto[0];
}
bool LevelMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhPulseAnalysis_2eproto[1];
}
bool ParamIndex_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AnalysisParam::InitAsDefaultInstance() {
}
class AnalysisParam::_Internal {
 public:
};

AnalysisParam::AnalysisParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
}
AnalysisParam::AnalysisParam(const AnalysisParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxwidth_, &from.maxwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_time_) -
    reinterpret_cast<char*>(&maxwidth_)) + sizeof(stop_time_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
}

void AnalysisParam::SharedCtor() {
  ::memset(&maxwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_time_) -
      reinterpret_cast<char*>(&maxwidth_)) + sizeof(stop_time_));
}

AnalysisParam::~AnalysisParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnalysisParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnalysisParam::ArenaDtor(void* object) {
  AnalysisParam* _this = reinterpret_cast< AnalysisParam* >(object);
  (void)_this;
}
void AnalysisParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalysisParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalysisParam& AnalysisParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalysisParam_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void AnalysisParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maxwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_time_) -
      reinterpret_cast<char*>(&maxwidth_)) + sizeof(stop_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalysisParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double maxwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          maxwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double minwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          minwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.pulseAnalysis.LevelMode lvlmode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lvlmode(static_cast<::zb::dcts::scenario::kh::pulseAnalysis::LevelMode>(val));
        } else goto handle_unusual;
        continue;
      // float lvldata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          lvldata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 maxpulse_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxpulse_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 histogrambins = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          histogrambins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalysisParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double maxwidth = 4;
  if (!(this->maxwidth() <= 0 && this->maxwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_maxwidth(), target);
  }

  // double minwidth = 5;
  if (!(this->minwidth() <= 0 && this->minwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_minwidth(), target);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.LevelMode lvlmode = 6;
  if (this->lvlmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_lvlmode(), target);
  }

  // float lvldata = 7;
  if (!(this->lvldata() <= 0 && this->lvldata() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_lvldata(), target);
  }

  // int32 maxpulse_count = 8;
  if (this->maxpulse_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxpulse_count(), target);
  }

  // uint32 histogrambins = 9;
  if (this->histogrambins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_histogrambins(), target);
  }

  // double start_time = 10;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_start_time(), target);
  }

  // double stop_time = 11;
  if (!(this->stop_time() <= 0 && this->stop_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_stop_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  return target;
}

size_t AnalysisParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double maxwidth = 4;
  if (!(this->maxwidth() <= 0 && this->maxwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double minwidth = 5;
  if (!(this->minwidth() <= 0 && this->minwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.LevelMode lvlmode = 6;
  if (this->lvlmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lvlmode());
  }

  // float lvldata = 7;
  if (!(this->lvldata() <= 0 && this->lvldata() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 maxpulse_count = 8;
  if (this->maxpulse_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxpulse_count());
  }

  // uint32 histogrambins = 9;
  if (this->histogrambins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_histogrambins());
  }

  // double start_time = 10;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_time = 11;
  if (!(this->stop_time() <= 0 && this->stop_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalysisParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalysisParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalysisParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
    MergeFrom(*source);
  }
}

void AnalysisParam::MergeFrom(const AnalysisParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.maxwidth() <= 0 && from.maxwidth() >= 0)) {
    _internal_set_maxwidth(from._internal_maxwidth());
  }
  if (!(from.minwidth() <= 0 && from.minwidth() >= 0)) {
    _internal_set_minwidth(from._internal_minwidth());
  }
  if (from.lvlmode() != 0) {
    _internal_set_lvlmode(from._internal_lvlmode());
  }
  if (!(from.lvldata() <= 0 && from.lvldata() >= 0)) {
    _internal_set_lvldata(from._internal_lvldata());
  }
  if (from.maxpulse_count() != 0) {
    _internal_set_maxpulse_count(from._internal_maxpulse_count());
  }
  if (from.histogrambins() != 0) {
    _internal_set_histogrambins(from._internal_histogrambins());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (!(from.stop_time() <= 0 && from.stop_time() >= 0)) {
    _internal_set_stop_time(from._internal_stop_time());
  }
}

void AnalysisParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisParam::CopyFrom(const AnalysisParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisParam::IsInitialized() const {
  return true;
}

void AnalysisParam::InternalSwap(AnalysisParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalysisParam, stop_time_)
      + sizeof(AnalysisParam::stop_time_)
      - PROTOBUF_FIELD_OFFSET(AnalysisParam, maxwidth_)>(
          reinterpret_cast<char*>(&maxwidth_),
          reinterpret_cast<char*>(&other->maxwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalysisParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommPulseAnalysisTaskRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseAnalysisTaskRequest_default_instance_._instance.get_mutable()->analysis_param_ = const_cast< ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam*>(
      ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam::internal_default_instance());
}
class CommPulseAnalysisTaskRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const CommPulseAnalysisTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param(const CommPulseAnalysisTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param(const CommPulseAnalysisTaskRequest* msg);
  static const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& analysis_param(const CommPulseAnalysisTaskRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
CommPulseAnalysisTaskRequest::_Internal::scenario(const CommPulseAnalysisTaskRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource&
CommPulseAnalysisTaskRequest::_Internal::source_param(const CommPulseAnalysisTaskRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam&
CommPulseAnalysisTaskRequest::_Internal::acq_param(const CommPulseAnalysisTaskRequest* msg) {
  return *msg->acq_param_;
}
const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam&
CommPulseAnalysisTaskRequest::_Internal::analysis_param(const CommPulseAnalysisTaskRequest* msg) {
  return *msg->analysis_param_;
}
void CommPulseAnalysisTaskRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void CommPulseAnalysisTaskRequest::clear_source_param() {
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
}
void CommPulseAnalysisTaskRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
CommPulseAnalysisTaskRequest::CommPulseAnalysisTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
}
CommPulseAnalysisTaskRequest::CommPulseAnalysisTaskRequest(const CommPulseAnalysisTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  if (from._internal_has_analysis_param()) {
    analysis_param_ = new ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam(*from.analysis_param_);
  } else {
    analysis_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
}

void CommPulseAnalysisTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&analysis_param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(analysis_param_));
}

CommPulseAnalysisTaskRequest::~CommPulseAnalysisTaskRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommPulseAnalysisTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
  if (this != internal_default_instance()) delete analysis_param_;
}

void CommPulseAnalysisTaskRequest::ArenaDtor(void* object) {
  CommPulseAnalysisTaskRequest* _this = reinterpret_cast< CommPulseAnalysisTaskRequest* >(object);
  (void)_this;
}
void CommPulseAnalysisTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommPulseAnalysisTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommPulseAnalysisTaskRequest& CommPulseAnalysisTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommPulseAnalysisTaskRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void CommPulseAnalysisTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  if (GetArena() == nullptr && analysis_param_ != nullptr) {
    delete analysis_param_;
  }
  analysis_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommPulseAnalysisTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommPulseAnalysisTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 4;
  if (this->has_analysis_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::analysis_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  return target;
}

size_t CommPulseAnalysisTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 4;
  if (this->has_analysis_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *analysis_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommPulseAnalysisTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommPulseAnalysisTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommPulseAnalysisTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
    MergeFrom(*source);
  }
}

void CommPulseAnalysisTaskRequest::MergeFrom(const CommPulseAnalysisTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcqSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam::MergeFrom(from._internal_acq_param());
  }
  if (from.has_analysis_param()) {
    _internal_mutable_analysis_param()->::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam::MergeFrom(from._internal_analysis_param());
  }
}

void CommPulseAnalysisTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommPulseAnalysisTaskRequest::CopyFrom(const CommPulseAnalysisTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommPulseAnalysisTaskRequest::IsInitialized() const {
  return true;
}

void CommPulseAnalysisTaskRequest::InternalSwap(CommPulseAnalysisTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommPulseAnalysisTaskRequest, analysis_param_)
      + sizeof(CommPulseAnalysisTaskRequest::analysis_param_)
      - PROTOBUF_FIELD_OFFSET(CommPulseAnalysisTaskRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommPulseAnalysisTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePulseRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::pulseAnalysis::_ChangePulseRequest_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::zb::dcts::scenario::TaskId*>(
      ::zb::dcts::scenario::TaskId::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_ChangePulseRequest_default_instance_._instance.get_mutable()->analysis_param_ = const_cast< ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam*>(
      ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam::internal_default_instance());
}
class ChangePulseRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::TaskId& task_id(const ChangePulseRequest* msg);
  static const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& analysis_param(const ChangePulseRequest* msg);
};

const ::zb::dcts::scenario::TaskId&
ChangePulseRequest::_Internal::task_id(const ChangePulseRequest* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam&
ChangePulseRequest::_Internal::analysis_param(const ChangePulseRequest* msg) {
  return *msg->analysis_param_;
}
void ChangePulseRequest::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
ChangePulseRequest::ChangePulseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
}
ChangePulseRequest::ChangePulseRequest(const ChangePulseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::scenario::TaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_analysis_param()) {
    analysis_param_ = new ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam(*from.analysis_param_);
  } else {
    analysis_param_ = nullptr;
  }
  param_index_ = from.param_index_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
}

void ChangePulseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_index_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(param_index_));
}

ChangePulseRequest::~ChangePulseRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChangePulseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete analysis_param_;
}

void ChangePulseRequest::ArenaDtor(void* object) {
  ChangePulseRequest* _this = reinterpret_cast< ChangePulseRequest* >(object);
  (void)_this;
}
void ChangePulseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangePulseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePulseRequest& ChangePulseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePulseRequest_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void ChangePulseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && analysis_param_ != nullptr) {
    delete analysis_param_;
  }
  analysis_param_ = nullptr;
  param_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangePulseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.TaskId task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.pulseAnalysis.ParamIndex param_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_param_index(static_cast<::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_analysis_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePulseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.TaskId task_id = 1;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_id(this), target, stream);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_param_index(), target);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 3;
  if (this->has_analysis_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::analysis_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  return target;
}

size_t ChangePulseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.TaskId task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 3;
  if (this->has_analysis_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *analysis_param_);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePulseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePulseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePulseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
    MergeFrom(*source);
  }
}

void ChangePulseRequest::MergeFrom(const ChangePulseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::scenario::TaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_analysis_param()) {
    _internal_mutable_analysis_param()->::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam::MergeFrom(from._internal_analysis_param());
  }
  if (from.param_index() != 0) {
    _internal_set_param_index(from._internal_param_index());
  }
}

void ChangePulseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePulseRequest::CopyFrom(const ChangePulseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePulseRequest::IsInitialized() const {
  return true;
}

void ChangePulseRequest::InternalSwap(ChangePulseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePulseRequest, param_index_)
      + sizeof(ChangePulseRequest::param_index_)
      - PROTOBUF_FIELD_OFFSET(ChangePulseRequest, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePulseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PulseParamsAnalysisResult::InitAsDefaultInstance() {
}
class PulseParamsAnalysisResult::_Internal {
 public:
};

PulseParamsAnalysisResult::PulseParamsAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
}
PulseParamsAnalysisResult::PulseParamsAnalysisResult(const PulseParamsAnalysisResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&peakpower_, &from.peakpower_,
    static_cast<size_t>(reinterpret_cast<char*>(&avgonpower_) -
    reinterpret_cast<char*>(&peakpower_)) + sizeof(avgonpower_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
}

void PulseParamsAnalysisResult::SharedCtor() {
  ::memset(&peakpower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avgonpower_) -
      reinterpret_cast<char*>(&peakpower_)) + sizeof(avgonpower_));
}

PulseParamsAnalysisResult::~PulseParamsAnalysisResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulseParamsAnalysisResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PulseParamsAnalysisResult::ArenaDtor(void* object) {
  PulseParamsAnalysisResult* _this = reinterpret_cast< PulseParamsAnalysisResult* >(object);
  (void)_this;
}
void PulseParamsAnalysisResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulseParamsAnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulseParamsAnalysisResult& PulseParamsAnalysisResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulseParamsAnalysisResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void PulseParamsAnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&peakpower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avgonpower_) -
      reinterpret_cast<char*>(&peakpower_)) + sizeof(avgonpower_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulseParamsAnalysisResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float peakPower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          peakpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float minPower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          minpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float avgOnPower = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          avgonpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double riseTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          risetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fallTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          falltime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PW = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double PRI = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          pri_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 TOA = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          toa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulseParamsAnalysisResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float peakPower = 1;
  if (!(this->peakpower() <= 0 && this->peakpower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_peakpower(), target);
  }

  // float minPower = 2;
  if (!(this->minpower() <= 0 && this->minpower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_minpower(), target);
  }

  // float avgOnPower = 3;
  if (!(this->avgonpower() <= 0 && this->avgonpower() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_avgonpower(), target);
  }

  // double riseTime = 4;
  if (!(this->risetime() <= 0 && this->risetime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_risetime(), target);
  }

  // double fallTime = 5;
  if (!(this->falltime() <= 0 && this->falltime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_falltime(), target);
  }

  // double PW = 6;
  if (!(this->pw() <= 0 && this->pw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pw(), target);
  }

  // double PRI = 7;
  if (!(this->pri() <= 0 && this->pri() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pri(), target);
  }

  // uint64 TOA = 8;
  if (this->toa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_toa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  return target;
}

size_t PulseParamsAnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float peakPower = 1;
  if (!(this->peakpower() <= 0 && this->peakpower() >= 0)) {
    total_size += 1 + 4;
  }

  // float minPower = 2;
  if (!(this->minpower() <= 0 && this->minpower() >= 0)) {
    total_size += 1 + 4;
  }

  // double riseTime = 4;
  if (!(this->risetime() <= 0 && this->risetime() >= 0)) {
    total_size += 1 + 8;
  }

  // double fallTime = 5;
  if (!(this->falltime() <= 0 && this->falltime() >= 0)) {
    total_size += 1 + 8;
  }

  // double PW = 6;
  if (!(this->pw() <= 0 && this->pw() >= 0)) {
    total_size += 1 + 8;
  }

  // double PRI = 7;
  if (!(this->pri() <= 0 && this->pri() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 TOA = 8;
  if (this->toa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_toa());
  }

  // float avgOnPower = 3;
  if (!(this->avgonpower() <= 0 && this->avgonpower() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulseParamsAnalysisResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseParamsAnalysisResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulseParamsAnalysisResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
    MergeFrom(*source);
  }
}

void PulseParamsAnalysisResult::MergeFrom(const PulseParamsAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.peakpower() <= 0 && from.peakpower() >= 0)) {
    _internal_set_peakpower(from._internal_peakpower());
  }
  if (!(from.minpower() <= 0 && from.minpower() >= 0)) {
    _internal_set_minpower(from._internal_minpower());
  }
  if (!(from.risetime() <= 0 && from.risetime() >= 0)) {
    _internal_set_risetime(from._internal_risetime());
  }
  if (!(from.falltime() <= 0 && from.falltime() >= 0)) {
    _internal_set_falltime(from._internal_falltime());
  }
  if (!(from.pw() <= 0 && from.pw() >= 0)) {
    _internal_set_pw(from._internal_pw());
  }
  if (!(from.pri() <= 0 && from.pri() >= 0)) {
    _internal_set_pri(from._internal_pri());
  }
  if (from.toa() != 0) {
    _internal_set_toa(from._internal_toa());
  }
  if (!(from.avgonpower() <= 0 && from.avgonpower() >= 0)) {
    _internal_set_avgonpower(from._internal_avgonpower());
  }
}

void PulseParamsAnalysisResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseParamsAnalysisResult::CopyFrom(const PulseParamsAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseParamsAnalysisResult::IsInitialized() const {
  return true;
}

void PulseParamsAnalysisResult::InternalSwap(PulseParamsAnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PulseParamsAnalysisResult, avgonpower_)
      + sizeof(PulseParamsAnalysisResult::avgonpower_)
      - PROTOBUF_FIELD_OFFSET(PulseParamsAnalysisResult, peakpower_)>(
          reinterpret_cast<char*>(&peakpower_),
          reinterpret_cast<char*>(&other->peakpower_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PulseParamsAnalysisResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PulseTransientAnalysisData::InitAsDefaultInstance() {
}
class PulseTransientAnalysisData::_Internal {
 public:
};

PulseTransientAnalysisData::PulseTransientAnalysisData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amplitude_(arena),
  phase_(arena),
  frequency_(arena),
  paramsresult_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
}
PulseTransientAnalysisData::PulseTransientAnalysisData(const PulseTransientAnalysisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amplitude_(from.amplitude_),
      phase_(from.phase_),
      frequency_(from.frequency_),
      paramsresult_(from.paramsresult_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
}

void PulseTransientAnalysisData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
}

PulseTransientAnalysisData::~PulseTransientAnalysisData() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PulseTransientAnalysisData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PulseTransientAnalysisData::ArenaDtor(void* object) {
  PulseTransientAnalysisData* _this = reinterpret_cast< PulseTransientAnalysisData* >(object);
  (void)_this;
}
void PulseTransientAnalysisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PulseTransientAnalysisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulseTransientAnalysisData& PulseTransientAnalysisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulseTransientAnalysisData_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void PulseTransientAnalysisData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amplitude_.Clear();
  phase_.Clear();
  frequency_.Clear();
  paramsresult_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PulseTransientAnalysisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float amplitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_amplitude(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_amplitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float phase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_phase(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_phase(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_frequency(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_frequency(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult paramsResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paramsresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PulseTransientAnalysisData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float amplitude = 1;
  if (this->_internal_amplitude_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_amplitude(), target);
  }

  // repeated float phase = 2;
  if (this->_internal_phase_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_phase(), target);
  }

  // repeated float frequency = 3;
  if (this->_internal_frequency_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_frequency(), target);
  }

  // repeated .zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult paramsResult = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paramsresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_paramsresult(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  return target;
}

size_t PulseTransientAnalysisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float amplitude = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_amplitude_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _amplitude_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float phase = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_phase_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _phase_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float frequency = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_frequency_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _frequency_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult paramsResult = 4;
  total_size += 1UL * this->_internal_paramsresult_size();
  for (const auto& msg : this->paramsresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulseTransientAnalysisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  GOOGLE_DCHECK_NE(&from, this);
  const PulseTransientAnalysisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PulseTransientAnalysisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
    MergeFrom(*source);
  }
}

void PulseTransientAnalysisData::MergeFrom(const PulseTransientAnalysisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amplitude_.MergeFrom(from.amplitude_);
  phase_.MergeFrom(from.phase_);
  frequency_.MergeFrom(from.frequency_);
  paramsresult_.MergeFrom(from.paramsresult_);
}

void PulseTransientAnalysisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PulseTransientAnalysisData::CopyFrom(const PulseTransientAnalysisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulseTransientAnalysisData::IsInitialized() const {
  return true;
}

void PulseTransientAnalysisData::InternalSwap(PulseTransientAnalysisData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amplitude_.InternalSwap(&other->amplitude_);
  phase_.InternalSwap(&other->phase_);
  frequency_.InternalSwap(&other->frequency_);
  paramsresult_.InternalSwap(&other->paramsresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PulseTransientAnalysisData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommPulseResult_Header::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_._instance.get_mutable()->result_from_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_._instance.get_mutable()->time_span_ = const_cast< ::zb::dcts::TimeSpan*>(
      ::zb::dcts::TimeSpan::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_._instance.get_mutable()->device_position_ = const_cast< ::zb::dcts::Position*>(
      ::zb::dcts::Position::internal_default_instance());
}
class CommPulseResult_Header::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& result_from(const CommPulseResult_Header* msg);
  static const ::zb::dcts::TimeSpan& time_span(const CommPulseResult_Header* msg);
  static const ::zb::dcts::Position& device_position(const CommPulseResult_Header* msg);
};

const ::zb::dcts::source::SourceId&
CommPulseResult_Header::_Internal::result_from(const CommPulseResult_Header* msg) {
  return *msg->result_from_;
}
const ::zb::dcts::TimeSpan&
CommPulseResult_Header::_Internal::time_span(const CommPulseResult_Header* msg) {
  return *msg->time_span_;
}
const ::zb::dcts::Position&
CommPulseResult_Header::_Internal::device_position(const CommPulseResult_Header* msg) {
  return *msg->device_position_;
}
void CommPulseResult_Header::clear_result_from() {
  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
}
void CommPulseResult_Header::clear_time_span() {
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
}
void CommPulseResult_Header::clear_device_position() {
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
}
CommPulseResult_Header::CommPulseResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
}
CommPulseResult_Header::CommPulseResult_Header(const CommPulseResult_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_from()) {
    result_from_ = new ::zb::dcts::source::SourceId(*from.result_from_);
  } else {
    result_from_ = nullptr;
  }
  if (from._internal_has_time_span()) {
    time_span_ = new ::zb::dcts::TimeSpan(*from.time_span_);
  } else {
    time_span_ = nullptr;
  }
  if (from._internal_has_device_position()) {
    device_position_ = new ::zb::dcts::Position(*from.device_position_);
  } else {
    device_position_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
}

void CommPulseResult_Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  ::memset(&result_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&result_from_)) + sizeof(sequence_number_));
}

CommPulseResult_Header::~CommPulseResult_Header() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommPulseResult_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_from_;
  if (this != internal_default_instance()) delete time_span_;
  if (this != internal_default_instance()) delete device_position_;
}

void CommPulseResult_Header::ArenaDtor(void* object) {
  CommPulseResult_Header* _this = reinterpret_cast< CommPulseResult_Header* >(object);
  (void)_this;
}
void CommPulseResult_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommPulseResult_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommPulseResult_Header& CommPulseResult_Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommPulseResult_Header_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void CommPulseResult_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_from_ != nullptr) {
    delete result_from_;
  }
  result_from_ = nullptr;
  if (GetArena() == nullptr && time_span_ != nullptr) {
    delete time_span_;
  }
  time_span_ = nullptr;
  if (GetArena() == nullptr && device_position_ != nullptr) {
    delete device_position_;
  }
  device_position_ = nullptr;
  sequence_number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommPulseResult_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId result_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.TimeSpan time_span = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Position device_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommPulseResult_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result_from(this), target, stream);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_span(this), target, stream);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  return target;
}

size_t CommPulseResult_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId result_from = 1;
  if (this->has_result_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_from_);
  }

  // .zb.dcts.TimeSpan time_span = 3;
  if (this->has_time_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_span_);
  }

  // .zb.dcts.Position device_position = 4;
  if (this->has_device_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_position_);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommPulseResult_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const CommPulseResult_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommPulseResult_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
    MergeFrom(*source);
  }
}

void CommPulseResult_Header::MergeFrom(const CommPulseResult_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result_from()) {
    _internal_mutable_result_from()->::zb::dcts::source::SourceId::MergeFrom(from._internal_result_from());
  }
  if (from.has_time_span()) {
    _internal_mutable_time_span()->::zb::dcts::TimeSpan::MergeFrom(from._internal_time_span());
  }
  if (from.has_device_position()) {
    _internal_mutable_device_position()->::zb::dcts::Position::MergeFrom(from._internal_device_position());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void CommPulseResult_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommPulseResult_Header::CopyFrom(const CommPulseResult_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommPulseResult_Header::IsInitialized() const {
  return true;
}

void CommPulseResult_Header::InternalSwap(CommPulseResult_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommPulseResult_Header, sequence_number_)
      + sizeof(CommPulseResult_Header::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(CommPulseResult_Header, result_from_)>(
          reinterpret_cast<char*>(&result_from_),
          reinterpret_cast<char*>(&other->result_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommPulseResult_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommPulseResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header*>(
      ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header::internal_default_instance());
  ::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_default_instance_._instance.get_mutable()->transient_data_ = const_cast< ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData*>(
      ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData::internal_default_instance());
}
class CommPulseResult::_Internal {
 public:
  static const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header& header(const CommPulseResult* msg);
  static const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData& transient_data(const CommPulseResult* msg);
};

const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header&
CommPulseResult::_Internal::header(const CommPulseResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData&
CommPulseResult::_Internal::transient_data(const CommPulseResult* msg) {
  return *msg->transient_data_;
}
CommPulseResult::CommPulseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
}
CommPulseResult::CommPulseResult(const CommPulseResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      raw_trace_(from.raw_trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_transient_data()) {
    transient_data_ = new ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData(*from.transient_data_);
  } else {
    transient_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
}

void CommPulseResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transient_data_) -
      reinterpret_cast<char*>(&header_)) + sizeof(transient_data_));
}

CommPulseResult::~CommPulseResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommPulseResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete transient_data_;
}

void CommPulseResult::ArenaDtor(void* object) {
  CommPulseResult* _this = reinterpret_cast< CommPulseResult* >(object);
  (void)_this;
}
void CommPulseResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommPulseResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommPulseResult& CommPulseResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommPulseResult_scenario_2fkh_2fKhPulseAnalysis_2eproto.base);
  return *internal_default_instance();
}


void CommPulseResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_trace_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && transient_data_ != nullptr) {
    delete transient_data_;
  }
  transient_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommPulseResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float raw_trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_raw_trace(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_raw_trace(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData transient_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transient_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommPulseResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated float raw_trace = 2;
  if (this->_internal_raw_trace_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_raw_trace(), target);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData transient_data = 3;
  if (this->has_transient_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transient_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  return target;
}

size_t CommPulseResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float raw_trace = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_raw_trace_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _raw_trace_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData transient_data = 3;
  if (this->has_transient_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transient_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommPulseResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommPulseResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommPulseResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
    MergeFrom(*source);
  }
}

void CommPulseResult::MergeFrom(const CommPulseResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_trace_.MergeFrom(from.raw_trace_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header::MergeFrom(from._internal_header());
  }
  if (from.has_transient_data()) {
    _internal_mutable_transient_data()->::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData::MergeFrom(from._internal_transient_data());
  }
}

void CommPulseResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommPulseResult::CopyFrom(const CommPulseResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommPulseResult::IsInitialized() const {
  return true;
}

void CommPulseResult::InternalSwap(CommPulseResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  raw_trace_.InternalSwap(&other->raw_trace_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommPulseResult, transient_data_)
      + sizeof(CommPulseResult::transient_data_)
      - PROTOBUF_FIELD_OFFSET(CommPulseResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommPulseResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pulseAnalysis
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
