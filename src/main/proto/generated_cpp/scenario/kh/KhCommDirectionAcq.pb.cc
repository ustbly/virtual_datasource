// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommDirectionAcq.proto

#include "scenario/kh/KhCommDirectionAcq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommDirectionAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommDirectionAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencyBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SegmentHeader_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GainControlParam_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowParams_source_2fkh_2fKhContext_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {
class CommDirectionAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDirectionAcqSource_ParamsEntry_DoNotUse> _instance;
} _CommDirectionAcqSource_ParamsEntry_DoNotUse_default_instance_;
class CommDirectionAcqSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDirectionAcqSource> _instance;
} _CommDirectionAcqSource_default_instance_;
class CommDirectionAcqParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDirectionAcqParam> _instance;
} _CommDirectionAcqParam_default_instance_;
class DirectionChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectionChangeRequest> _instance;
} _DirectionChangeRequest_default_instance_;
class CommDirectionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommDirectionResult> _instance;
} _CommDirectionResult_default_instance_;
}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
      &scc_info_GainControlParam_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_WindowParams_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,}};

static void InitDefaultsscc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse();
  }
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto}, {}};

static void InitDefaultsscc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commDirection::CommDirectionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commDirection::CommDirectionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_SegmentHeader_scenario_2fspectrum_2eproto.base,
      &scc_info_FrequencyBand_scenario_2fspectrum_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,
      &scc_info_TargetDirection_source_2fkh_2fKhContext_2eproto.base,}};

static void InitDefaultsscc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commDirection::_DirectionChangeRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhCommDirectionAcq_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, freq_span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, rbw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, df_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, detect_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, channel_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, antenna_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, gc_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, gain_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, threshold_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, threshold_value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, output_pow_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, win_params_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, average_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, rf_limit_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, search_step_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, residence_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, sample_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, expected_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam, df_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, task_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, param_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, task_params_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest, center_freq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, seg_header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, panorama_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, closeshot_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, courseangle_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, target_detection_before_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, target_detection_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, lofrequencykhzs_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, scanindexs_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, target_ids_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, cal_diff_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, ant_diff_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commDirection::CommDirectionResult, center_freq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse)},
  { 9, -1, sizeof(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource)},
  { 16, -1, sizeof(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam)},
  { 44, -1, sizeof(::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest)},
  { 53, -1, sizeof(::zb::dcts::scenario::kh::commDirection::CommDirectionResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commDirection::_DirectionChangeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhCommDirectionAcq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$scenario/kh/KhCommDirectionAcq.proto\022!"
  "zb.dcts.scenario.kh.commDirection\032\023sourc"
  "e/source.proto\032\031source/kh/KhContext.prot"
  "o\032\027scenario/scenario.proto\032\027scenario/spe"
  "ctrum.proto\"\304\001\n\026CommDirectionAcqSource\022$"
  "\n\002id\030\001 \001(\0132\030.zb.dcts.source.SourceId\022U\n\006"
  "params\030\006 \003(\0132E.zb.dcts.scenario.kh.commD"
  "irection.CommDirectionAcqSource.ParamsEn"
  "try\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\327\006\n\025CommDirectionAcqParam\022>\n\004"
  "mode\030\001 \001(\01620.zb.dcts.scenario.kh.commDir"
  "ection.DirectionMode\022;\n\tfreq_span\030\002 \001(\0132"
  "(.zb.dcts.scenario.spectrum.FrequencySpa"
  "n\022\013\n\003rbw\030\004 \001(\001\022\024\n\014df_bandwidth\030\005 \001(\001\0222\n\013"
  "detect_mode\030\006 \001(\0162\035.zb.dcts.source.kh.De"
  "tectMode\0224\n\014channel_mode\030\007 \001(\0162\036.zb.dcts"
  ".source.kh.ChannelMode\022\030\n\020attenuation_ga"
  "in\030\010 \001(\001\022;\n\014antenna_mode\030\t \001(\0162%.zb.dcts"
  ".source.kh.AntennaControlMode\0223\n\007gc_mode"
  "\030\n \001(\0162\".zb.dcts.source.kh.GainControlMo"
  "de\0227\n\ngain_param\030\013 \001(\0132#.zb.dcts.source."
  "kh.GainControlParam\022J\n\016threshold_mode\030\014 "
  "\001(\01622.zb.dcts.scenario.kh.commDirection."
  "DFThresholdMode\022\027\n\017threshold_value\030\r \001(\005"
  "\022\022\n\noutput_pow\030\016 \001(\005\0223\n\nwin_params\030\017 \001(\013"
  "2\037.zb.dcts.source.kh.WindowParams\022\024\n\014ave"
  "rage_time\030\020 \001(\005\022\020\n\010rf_limit\030\021 \001(\001\022\023\n\013sea"
  "rch_step\030\022 \001(\001\022\026\n\016residence_time\030\023 \001(\005\022\027"
  "\n\017sample_interval\030\024 \001(\005\022\027\n\017result_interv"
  "al\030\025 \001(\005\022\027\n\017expected_points\030\026 \001(\005\022\017\n\007ant"
  "enna\030\027 \001(\005\022\020\n\010df_times\030\030 \001(\005\"\363\001\n\026Directi"
  "onChangeRequest\0221\n\007task_id\030\001 \001(\0132 .zb.dc"
  "ts.scenario.ScenarioTaskId\022B\n\013param_inde"
  "x\030\002 \001(\0162-.zb.dcts.scenario.kh.commDirect"
  "ion.ParamIndex\022M\n\013task_params\030\003 \001(\01328.zb"
  ".dcts.scenario.kh.commDirection.CommDire"
  "ctionAcqParam\022\023\n\013center_freq\030\004 \001(\001\"\365\004\n\023C"
  "ommDirectionResult\0221\n\006header\030\001 \001(\0132!.zb."
  "dcts.scenario.spectrum.Header\0222\n\006status\030"
  "\002 \001(\0132\".zb.dcts.source.kh.OperationStatu"
  "s\022<\n\nseg_header\030\004 \001(\0132(.zb.dcts.scenario"
  ".spectrum.SegmentHeader\0226\n\004band\030\005 \001(\0132(."
  "zb.dcts.scenario.spectrum.FrequencyBand\022"
  "6\n\rpanorama_view\030\006 \001(\0132\037.zb.dcts.scenari"
  "o.spectrum.View\0227\n\016closeshot_view\030\007 \001(\0132"
  "\037.zb.dcts.scenario.spectrum.View\022\023\n\013cour"
  "seAngle\030\010 \001(\001\022C\n\027target_detection_before"
  "\030\t \003(\0132\".zb.dcts.source.kh.TargetDirecti"
  "on\022<\n\020target_detection\030\n \003(\0132\".zb.dcts.s"
  "ource.kh.TargetDirection\022\027\n\017LOFrequencyk"
  "Hzs\030\013 \003(\r\022\022\n\nscanIndexs\030\014 \003(\r\022\022\n\ntarget_"
  "ids\030\r \003(\r\022\020\n\010cal_diff\030\016 \003(\002\022\020\n\010ant_diff\030"
  "\017 \003(\002\022\023\n\013center_freq\030\020 \001(\001*\?\n\rDirectionM"
  "ode\022\n\n\006SINGLE\020\000\022\014\n\010MULTIPLE\020\001\022\010\n\004SCAN\020\002\022"
  "\n\n\006SEARCH\020\003*3\n\017DFThresholdMode\022\010\n\004AUTO\020\000"
  "\022\n\n\006MANUAL\020\001\022\n\n\006NORMAL\020\002*\251\001\n\nParamIndex\022"
  "\023\n\017THRESHOLD_VALUE\020\000\022\022\n\016THRESHOLD_MODE\020\001"
  "\022\020\n\014AVERAGE_TIME\020\002\022\017\n\013CENTER_FREQ\020\003\022\020\n\014A"
  "NTENNA_MODE\020\004\022\020\n\014CHANNEL_MODE\020\005\022\r\n\tGIAN_"
  "MODE\020\006\022\014\n\010ATT_GAIN\020\007\022\016\n\nGAIN_PARAM\020\010b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_deps[4] = {
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fkh_2fKhContext_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_sccs[5] = {
  &scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,
  &scc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,
  &scc_info_CommDirectionAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,
  &scc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,
  &scc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhCommDirectionAcq_2eproto, "scenario/kh/KhCommDirectionAcq.proto", 2404,
  &descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_once, descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto_deps, 5, 4,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhCommDirectionAcq_2eproto, 5, file_level_enum_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhCommDirectionAcq_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirectionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto[0];
}
bool DirectionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFThresholdMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto[1];
}
bool DFThresholdMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhCommDirectionAcq_2eproto[2];
}
bool ParamIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

CommDirectionAcqSource_ParamsEntry_DoNotUse::CommDirectionAcqSource_ParamsEntry_DoNotUse() {}
CommDirectionAcqSource_ParamsEntry_DoNotUse::CommDirectionAcqSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CommDirectionAcqSource_ParamsEntry_DoNotUse::MergeFrom(const CommDirectionAcqSource_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CommDirectionAcqSource_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CommDirectionAcqSource_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CommDirectionAcqSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class CommDirectionAcqSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const CommDirectionAcqSource* msg);
};

const ::zb::dcts::source::SourceId&
CommDirectionAcqSource::_Internal::id(const CommDirectionAcqSource* msg) {
  return *msg->id_;
}
void CommDirectionAcqSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
CommDirectionAcqSource::CommDirectionAcqSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
}
CommDirectionAcqSource::CommDirectionAcqSource(const CommDirectionAcqSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
}

void CommDirectionAcqSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  id_ = nullptr;
}

CommDirectionAcqSource::~CommDirectionAcqSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommDirectionAcqSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void CommDirectionAcqSource::ArenaDtor(void* object) {
  CommDirectionAcqSource* _this = reinterpret_cast< CommDirectionAcqSource* >(object);
  (void)_this;
}
void CommDirectionAcqSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommDirectionAcqSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommDirectionAcqSource& CommDirectionAcqSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommDirectionAcqSource_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  return *internal_default_instance();
}


void CommDirectionAcqSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommDirectionAcqSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommDirectionAcqSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // map<string, string> params = 6;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CommDirectionAcqSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = CommDirectionAcqSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  return target;
}

size_t CommDirectionAcqSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += CommDirectionAcqSource_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommDirectionAcqSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CommDirectionAcqSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommDirectionAcqSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
    MergeFrom(*source);
  }
}

void CommDirectionAcqSource::MergeFrom(const CommDirectionAcqSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
}

void CommDirectionAcqSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommDirectionAcqSource::CopyFrom(const CommDirectionAcqSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommDirectionAcqSource::IsInitialized() const {
  return true;
}

void CommDirectionAcqSource::InternalSwap(CommDirectionAcqSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommDirectionAcqSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommDirectionAcqParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_._instance.get_mutable()->freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_._instance.get_mutable()->gain_param_ = const_cast< ::zb::dcts::source::kh::GainControlParam*>(
      ::zb::dcts::source::kh::GainControlParam::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_._instance.get_mutable()->win_params_ = const_cast< ::zb::dcts::source::kh::WindowParams*>(
      ::zb::dcts::source::kh::WindowParams::internal_default_instance());
}
class CommDirectionAcqParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const CommDirectionAcqParam* msg);
  static const ::zb::dcts::source::kh::GainControlParam& gain_param(const CommDirectionAcqParam* msg);
  static const ::zb::dcts::source::kh::WindowParams& win_params(const CommDirectionAcqParam* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
CommDirectionAcqParam::_Internal::freq_span(const CommDirectionAcqParam* msg) {
  return *msg->freq_span_;
}
const ::zb::dcts::source::kh::GainControlParam&
CommDirectionAcqParam::_Internal::gain_param(const CommDirectionAcqParam* msg) {
  return *msg->gain_param_;
}
const ::zb::dcts::source::kh::WindowParams&
CommDirectionAcqParam::_Internal::win_params(const CommDirectionAcqParam* msg) {
  return *msg->win_params_;
}
void CommDirectionAcqParam::clear_freq_span() {
  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
}
void CommDirectionAcqParam::clear_gain_param() {
  if (GetArena() == nullptr && gain_param_ != nullptr) {
    delete gain_param_;
  }
  gain_param_ = nullptr;
}
void CommDirectionAcqParam::clear_win_params() {
  if (GetArena() == nullptr && win_params_ != nullptr) {
    delete win_params_;
  }
  win_params_ = nullptr;
}
CommDirectionAcqParam::CommDirectionAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
}
CommDirectionAcqParam::CommDirectionAcqParam(const CommDirectionAcqParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_freq_span()) {
    freq_span_ = new ::zb::dcts::scenario::spectrum::FrequencySpan(*from.freq_span_);
  } else {
    freq_span_ = nullptr;
  }
  if (from._internal_has_gain_param()) {
    gain_param_ = new ::zb::dcts::source::kh::GainControlParam(*from.gain_param_);
  } else {
    gain_param_ = nullptr;
  }
  if (from._internal_has_win_params()) {
    win_params_ = new ::zb::dcts::source::kh::WindowParams(*from.win_params_);
  } else {
    win_params_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&df_times_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(df_times_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
}

void CommDirectionAcqParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  ::memset(&freq_span_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&df_times_) -
      reinterpret_cast<char*>(&freq_span_)) + sizeof(df_times_));
}

CommDirectionAcqParam::~CommDirectionAcqParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommDirectionAcqParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete freq_span_;
  if (this != internal_default_instance()) delete gain_param_;
  if (this != internal_default_instance()) delete win_params_;
}

void CommDirectionAcqParam::ArenaDtor(void* object) {
  CommDirectionAcqParam* _this = reinterpret_cast< CommDirectionAcqParam* >(object);
  (void)_this;
}
void CommDirectionAcqParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommDirectionAcqParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommDirectionAcqParam& CommDirectionAcqParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommDirectionAcqParam_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  return *internal_default_instance();
}


void CommDirectionAcqParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && freq_span_ != nullptr) {
    delete freq_span_;
  }
  freq_span_ = nullptr;
  if (GetArena() == nullptr && gain_param_ != nullptr) {
    delete gain_param_;
  }
  gain_param_ = nullptr;
  if (GetArena() == nullptr && win_params_ != nullptr) {
    delete win_params_;
  }
  win_params_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&df_times_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(df_times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommDirectionAcqParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::zb::dcts::scenario::kh::commDirection::DirectionMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rbw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double df_bandwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          df_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.DetectMode detect_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_detect_mode(static_cast<::zb::dcts::source::kh::DetectMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.ChannelMode channel_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel_mode(static_cast<::zb::dcts::source::kh::ChannelMode>(val));
        } else goto handle_unusual;
        continue;
      // double attenuation_gain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_antenna_mode(static_cast<::zb::dcts::source::kh::AntennaControlMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.GainControlMode gc_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gc_mode(static_cast<::zb::dcts::source::kh::GainControlMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.GainControlParam gain_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gain_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_threshold_mode(static_cast<::zb::dcts::scenario::kh::commDirection::DFThresholdMode>(val));
        } else goto handle_unusual;
        continue;
      // int32 threshold_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          threshold_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_pow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          output_pow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.WindowParams win_params = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_win_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          average_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rf_limit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          rf_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double search_step = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          search_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 residence_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          residence_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_interval = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sample_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 df_times = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          df_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommDirectionAcqParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
  if (this->has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::freq_span(this), target, stream);
  }

  // double rbw = 4;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rbw(), target);
  }

  // double df_bandwidth = 5;
  if (!(this->df_bandwidth() <= 0 && this->df_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_df_bandwidth(), target);
  }

  // .zb.dcts.source.kh.DetectMode detect_mode = 6;
  if (this->detect_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_detect_mode(), target);
  }

  // .zb.dcts.source.kh.ChannelMode channel_mode = 7;
  if (this->channel_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_channel_mode(), target);
  }

  // double attenuation_gain = 8;
  if (!(this->attenuation_gain() <= 0 && this->attenuation_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_attenuation_gain(), target);
  }

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;
  if (this->antenna_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_antenna_mode(), target);
  }

  // .zb.dcts.source.kh.GainControlMode gc_mode = 10;
  if (this->gc_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_gc_mode(), target);
  }

  // .zb.dcts.source.kh.GainControlParam gain_param = 11;
  if (this->has_gain_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::gain_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;
  if (this->threshold_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_threshold_mode(), target);
  }

  // int32 threshold_value = 13;
  if (this->threshold_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_threshold_value(), target);
  }

  // int32 output_pow = 14;
  if (this->output_pow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_output_pow(), target);
  }

  // .zb.dcts.source.kh.WindowParams win_params = 15;
  if (this->has_win_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::win_params(this), target, stream);
  }

  // int32 average_time = 16;
  if (this->average_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_average_time(), target);
  }

  // double rf_limit = 17;
  if (!(this->rf_limit() <= 0 && this->rf_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_rf_limit(), target);
  }

  // double search_step = 18;
  if (!(this->search_step() <= 0 && this->search_step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_search_step(), target);
  }

  // int32 residence_time = 19;
  if (this->residence_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_residence_time(), target);
  }

  // int32 sample_interval = 20;
  if (this->sample_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_sample_interval(), target);
  }

  // int32 result_interval = 21;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_result_interval(), target);
  }

  // int32 expected_points = 22;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_expected_points(), target);
  }

  // int32 antenna = 23;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_antenna(), target);
  }

  // int32 df_times = 24;
  if (this->df_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_df_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  return target;
}

size_t CommDirectionAcqParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
  if (this->has_freq_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *freq_span_);
  }

  // .zb.dcts.source.kh.GainControlParam gain_param = 11;
  if (this->has_gain_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gain_param_);
  }

  // .zb.dcts.source.kh.WindowParams win_params = 15;
  if (this->has_win_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *win_params_);
  }

  // .zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .zb.dcts.source.kh.DetectMode detect_mode = 6;
  if (this->detect_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_detect_mode());
  }

  // double rbw = 4;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    total_size += 1 + 8;
  }

  // double df_bandwidth = 5;
  if (!(this->df_bandwidth() <= 0 && this->df_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double attenuation_gain = 8;
  if (!(this->attenuation_gain() <= 0 && this->attenuation_gain() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.source.kh.ChannelMode channel_mode = 7;
  if (this->channel_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_mode());
  }

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;
  if (this->antenna_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_antenna_mode());
  }

  // .zb.dcts.source.kh.GainControlMode gc_mode = 10;
  if (this->gc_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gc_mode());
  }

  // .zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;
  if (this->threshold_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_threshold_mode());
  }

  // int32 threshold_value = 13;
  if (this->threshold_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threshold_value());
  }

  // int32 output_pow = 14;
  if (this->output_pow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_pow());
  }

  // double rf_limit = 17;
  if (!(this->rf_limit() <= 0 && this->rf_limit() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 average_time = 16;
  if (this->average_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_time());
  }

  // int32 residence_time = 19;
  if (this->residence_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_residence_time());
  }

  // double search_step = 18;
  if (!(this->search_step() <= 0 && this->search_step() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 sample_interval = 20;
  if (this->sample_interval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_interval());
  }

  // int32 result_interval = 21;
  if (this->result_interval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 expected_points = 22;
  if (this->expected_points() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  // int32 antenna = 23;
  if (this->antenna() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // int32 df_times = 24;
  if (this->df_times() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_df_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommDirectionAcqParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CommDirectionAcqParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommDirectionAcqParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
    MergeFrom(*source);
  }
}

void CommDirectionAcqParam::MergeFrom(const CommDirectionAcqParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_freq_span()) {
    _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
  }
  if (from.has_gain_param()) {
    _internal_mutable_gain_param()->::zb::dcts::source::kh::GainControlParam::MergeFrom(from._internal_gain_param());
  }
  if (from.has_win_params()) {
    _internal_mutable_win_params()->::zb::dcts::source::kh::WindowParams::MergeFrom(from._internal_win_params());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.detect_mode() != 0) {
    _internal_set_detect_mode(from._internal_detect_mode());
  }
  if (!(from.rbw() <= 0 && from.rbw() >= 0)) {
    _internal_set_rbw(from._internal_rbw());
  }
  if (!(from.df_bandwidth() <= 0 && from.df_bandwidth() >= 0)) {
    _internal_set_df_bandwidth(from._internal_df_bandwidth());
  }
  if (!(from.attenuation_gain() <= 0 && from.attenuation_gain() >= 0)) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.channel_mode() != 0) {
    _internal_set_channel_mode(from._internal_channel_mode());
  }
  if (from.antenna_mode() != 0) {
    _internal_set_antenna_mode(from._internal_antenna_mode());
  }
  if (from.gc_mode() != 0) {
    _internal_set_gc_mode(from._internal_gc_mode());
  }
  if (from.threshold_mode() != 0) {
    _internal_set_threshold_mode(from._internal_threshold_mode());
  }
  if (from.threshold_value() != 0) {
    _internal_set_threshold_value(from._internal_threshold_value());
  }
  if (from.output_pow() != 0) {
    _internal_set_output_pow(from._internal_output_pow());
  }
  if (!(from.rf_limit() <= 0 && from.rf_limit() >= 0)) {
    _internal_set_rf_limit(from._internal_rf_limit());
  }
  if (from.average_time() != 0) {
    _internal_set_average_time(from._internal_average_time());
  }
  if (from.residence_time() != 0) {
    _internal_set_residence_time(from._internal_residence_time());
  }
  if (!(from.search_step() <= 0 && from.search_step() >= 0)) {
    _internal_set_search_step(from._internal_search_step());
  }
  if (from.sample_interval() != 0) {
    _internal_set_sample_interval(from._internal_sample_interval());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.df_times() != 0) {
    _internal_set_df_times(from._internal_df_times());
  }
}

void CommDirectionAcqParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommDirectionAcqParam::CopyFrom(const CommDirectionAcqParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommDirectionAcqParam::IsInitialized() const {
  return true;
}

void CommDirectionAcqParam::InternalSwap(CommDirectionAcqParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommDirectionAcqParam, df_times_)
      + sizeof(CommDirectionAcqParam::df_times_)
      - PROTOBUF_FIELD_OFFSET(CommDirectionAcqParam, freq_span_)>(
          reinterpret_cast<char*>(&freq_span_),
          reinterpret_cast<char*>(&other->freq_span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommDirectionAcqParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectionChangeRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commDirection::_DirectionChangeRequest_default_instance_._instance.get_mutable()->task_id_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_DirectionChangeRequest_default_instance_._instance.get_mutable()->task_params_ = const_cast< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam*>(
      ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam::internal_default_instance());
}
class DirectionChangeRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& task_id(const DirectionChangeRequest* msg);
  static const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& task_params(const DirectionChangeRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
DirectionChangeRequest::_Internal::task_id(const DirectionChangeRequest* msg) {
  return *msg->task_id_;
}
const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam&
DirectionChangeRequest::_Internal::task_params(const DirectionChangeRequest* msg) {
  return *msg->task_params_;
}
void DirectionChangeRequest::clear_task_id() {
  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
}
DirectionChangeRequest::DirectionChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
}
DirectionChangeRequest::DirectionChangeRequest(const DirectionChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_task_params()) {
    task_params_ = new ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam(*from.task_params_);
  } else {
    task_params_ = nullptr;
  }
  ::memcpy(&center_freq_, &from.center_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_index_) -
    reinterpret_cast<char*>(&center_freq_)) + sizeof(param_index_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
}

void DirectionChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  ::memset(&task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_index_) -
      reinterpret_cast<char*>(&task_id_)) + sizeof(param_index_));
}

DirectionChangeRequest::~DirectionChangeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete task_params_;
}

void DirectionChangeRequest::ArenaDtor(void* object) {
  DirectionChangeRequest* _this = reinterpret_cast< DirectionChangeRequest* >(object);
  (void)_this;
}
void DirectionChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectionChangeRequest& DirectionChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectionChangeRequest_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  return *internal_default_instance();
}


void DirectionChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && task_id_ != nullptr) {
    delete task_id_;
  }
  task_id_ = nullptr;
  if (GetArena() == nullptr && task_params_ != nullptr) {
    delete task_params_;
  }
  task_params_ = nullptr;
  ::memset(&center_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_index_) -
      reinterpret_cast<char*>(&center_freq_)) + sizeof(param_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_param_index(static_cast<::zb::dcts::scenario::kh::commDirection::ParamIndex>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double center_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          center_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId task_id = 1;
  if (this->has_task_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_id(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_param_index(), target);
  }

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;
  if (this->has_task_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::task_params(this), target, stream);
  }

  // double center_freq = 4;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_center_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  return target;
}

size_t DirectionChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId task_id = 1;
  if (this->has_task_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_id_);
  }

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;
  if (this->has_task_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_params_);
  }

  // double center_freq = 4;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_param_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
    MergeFrom(*source);
  }
}

void DirectionChangeRequest::MergeFrom(const DirectionChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    _internal_mutable_task_id()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_task_id());
  }
  if (from.has_task_params()) {
    _internal_mutable_task_params()->::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam::MergeFrom(from._internal_task_params());
  }
  if (!(from.center_freq() <= 0 && from.center_freq() >= 0)) {
    _internal_set_center_freq(from._internal_center_freq());
  }
  if (from.param_index() != 0) {
    _internal_set_param_index(from._internal_param_index());
  }
}

void DirectionChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionChangeRequest::CopyFrom(const DirectionChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionChangeRequest::IsInitialized() const {
  return true;
}

void DirectionChangeRequest::InternalSwap(DirectionChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionChangeRequest, param_index_)
      + sizeof(DirectionChangeRequest::param_index_)
      - PROTOBUF_FIELD_OFFSET(DirectionChangeRequest, task_id_)>(
          reinterpret_cast<char*>(&task_id_),
          reinterpret_cast<char*>(&other->task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommDirectionResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::zb::dcts::source::kh::OperationStatus*>(
      ::zb::dcts::source::kh::OperationStatus::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->seg_header_ = const_cast< ::zb::dcts::scenario::spectrum::SegmentHeader*>(
      ::zb::dcts::scenario::spectrum::SegmentHeader::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->band_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencyBand*>(
      ::zb::dcts::scenario::spectrum::FrequencyBand::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->panorama_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
  ::zb::dcts::scenario::kh::commDirection::_CommDirectionResult_default_instance_._instance.get_mutable()->closeshot_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class CommDirectionResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const CommDirectionResult* msg);
  static const ::zb::dcts::source::kh::OperationStatus& status(const CommDirectionResult* msg);
  static const ::zb::dcts::scenario::spectrum::SegmentHeader& seg_header(const CommDirectionResult* msg);
  static const ::zb::dcts::scenario::spectrum::FrequencyBand& band(const CommDirectionResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& panorama_view(const CommDirectionResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& closeshot_view(const CommDirectionResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
CommDirectionResult::_Internal::header(const CommDirectionResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::source::kh::OperationStatus&
CommDirectionResult::_Internal::status(const CommDirectionResult* msg) {
  return *msg->status_;
}
const ::zb::dcts::scenario::spectrum::SegmentHeader&
CommDirectionResult::_Internal::seg_header(const CommDirectionResult* msg) {
  return *msg->seg_header_;
}
const ::zb::dcts::scenario::spectrum::FrequencyBand&
CommDirectionResult::_Internal::band(const CommDirectionResult* msg) {
  return *msg->band_;
}
const ::zb::dcts::scenario::spectrum::View&
CommDirectionResult::_Internal::panorama_view(const CommDirectionResult* msg) {
  return *msg->panorama_view_;
}
const ::zb::dcts::scenario::spectrum::View&
CommDirectionResult::_Internal::closeshot_view(const CommDirectionResult* msg) {
  return *msg->closeshot_view_;
}
void CommDirectionResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CommDirectionResult::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void CommDirectionResult::clear_seg_header() {
  if (GetArena() == nullptr && seg_header_ != nullptr) {
    delete seg_header_;
  }
  seg_header_ = nullptr;
}
void CommDirectionResult::clear_band() {
  if (GetArena() == nullptr && band_ != nullptr) {
    delete band_;
  }
  band_ = nullptr;
}
void CommDirectionResult::clear_panorama_view() {
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
}
void CommDirectionResult::clear_closeshot_view() {
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
}
void CommDirectionResult::clear_target_detection_before() {
  target_detection_before_.Clear();
}
void CommDirectionResult::clear_target_detection() {
  target_detection_.Clear();
}
CommDirectionResult::CommDirectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_detection_before_(arena),
  target_detection_(arena),
  lofrequencykhzs_(arena),
  scanindexs_(arena),
  target_ids_(arena),
  cal_diff_(arena),
  ant_diff_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
}
CommDirectionResult::CommDirectionResult(const CommDirectionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_detection_before_(from.target_detection_before_),
      target_detection_(from.target_detection_),
      lofrequencykhzs_(from.lofrequencykhzs_),
      scanindexs_(from.scanindexs_),
      target_ids_(from.target_ids_),
      cal_diff_(from.cal_diff_),
      ant_diff_(from.ant_diff_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::zb::dcts::source::kh::OperationStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_seg_header()) {
    seg_header_ = new ::zb::dcts::scenario::spectrum::SegmentHeader(*from.seg_header_);
  } else {
    seg_header_ = nullptr;
  }
  if (from._internal_has_band()) {
    band_ = new ::zb::dcts::scenario::spectrum::FrequencyBand(*from.band_);
  } else {
    band_ = nullptr;
  }
  if (from._internal_has_panorama_view()) {
    panorama_view_ = new ::zb::dcts::scenario::spectrum::View(*from.panorama_view_);
  } else {
    panorama_view_ = nullptr;
  }
  if (from._internal_has_closeshot_view()) {
    closeshot_view_ = new ::zb::dcts::scenario::spectrum::View(*from.closeshot_view_);
  } else {
    closeshot_view_ = nullptr;
  }
  ::memcpy(&courseangle_, &from.courseangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&center_freq_) -
    reinterpret_cast<char*>(&courseangle_)) + sizeof(center_freq_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
}

void CommDirectionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_freq_) -
      reinterpret_cast<char*>(&header_)) + sizeof(center_freq_));
}

CommDirectionResult::~CommDirectionResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommDirectionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete seg_header_;
  if (this != internal_default_instance()) delete band_;
  if (this != internal_default_instance()) delete panorama_view_;
  if (this != internal_default_instance()) delete closeshot_view_;
}

void CommDirectionResult::ArenaDtor(void* object) {
  CommDirectionResult* _this = reinterpret_cast< CommDirectionResult* >(object);
  (void)_this;
}
void CommDirectionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommDirectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommDirectionResult& CommDirectionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommDirectionResult_scenario_2fkh_2fKhCommDirectionAcq_2eproto.base);
  return *internal_default_instance();
}


void CommDirectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_detection_before_.Clear();
  target_detection_.Clear();
  lofrequencykhzs_.Clear();
  scanindexs_.Clear();
  target_ids_.Clear();
  cal_diff_.Clear();
  ant_diff_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && seg_header_ != nullptr) {
    delete seg_header_;
  }
  seg_header_ = nullptr;
  if (GetArena() == nullptr && band_ != nullptr) {
    delete band_;
  }
  band_ = nullptr;
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
  ::memset(&courseangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_freq_) -
      reinterpret_cast<char*>(&courseangle_)) + sizeof(center_freq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommDirectionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.OperationStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_seg_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View panorama_view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_panorama_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_closeshot_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double courseAngle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          courseangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_detection_before(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 LOFrequencykHzs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lofrequencykhzs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_lofrequencykhzs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 scanIndexs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_scanindexs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_scanindexs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 target_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_target_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_target_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cal_diff = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cal_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117) {
          _internal_add_cal_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float ant_diff = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ant_diff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          _internal_add_ant_diff(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double center_freq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          center_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommDirectionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  if (this->has_seg_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::seg_header(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  if (this->has_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::band(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::panorama_view(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::closeshot_view(this), target, stream);
  }

  // double courseAngle = 8;
  if (!(this->courseangle() <= 0 && this->courseangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_courseangle(), target);
  }

  // repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_detection_before_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_target_detection_before(i), target, stream);
  }

  // repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_detection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_target_detection(i), target, stream);
  }

  // repeated uint32 LOFrequencykHzs = 11;
  {
    int byte_size = _lofrequencykhzs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_lofrequencykhzs(), byte_size, target);
    }
  }

  // repeated uint32 scanIndexs = 12;
  {
    int byte_size = _scanindexs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_scanindexs(), byte_size, target);
    }
  }

  // repeated uint32 target_ids = 13;
  {
    int byte_size = _target_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_target_ids(), byte_size, target);
    }
  }

  // repeated float cal_diff = 14;
  if (this->_internal_cal_diff_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_cal_diff(), target);
  }

  // repeated float ant_diff = 15;
  if (this->_internal_ant_diff_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_ant_diff(), target);
  }

  // double center_freq = 16;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_center_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  return target;
}

size_t CommDirectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;
  total_size += 1UL * this->_internal_target_detection_before_size();
  for (const auto& msg : this->target_detection_before_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;
  total_size += 1UL * this->_internal_target_detection_size();
  for (const auto& msg : this->target_detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 LOFrequencykHzs = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->lofrequencykhzs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lofrequencykhzs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 scanIndexs = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->scanindexs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scanindexs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 target_ids = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->target_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float cal_diff = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cal_diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cal_diff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float ant_diff = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ant_diff_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ant_diff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  if (this->has_seg_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seg_header_);
  }

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  if (this->has_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  if (this->has_panorama_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panorama_view_);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  if (this->has_closeshot_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closeshot_view_);
  }

  // double courseAngle = 8;
  if (!(this->courseangle() <= 0 && this->courseangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double center_freq = 16;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommDirectionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommDirectionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommDirectionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
    MergeFrom(*source);
  }
}

void CommDirectionResult::MergeFrom(const CommDirectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_detection_before_.MergeFrom(from.target_detection_before_);
  target_detection_.MergeFrom(from.target_detection_);
  lofrequencykhzs_.MergeFrom(from.lofrequencykhzs_);
  scanindexs_.MergeFrom(from.scanindexs_);
  target_ids_.MergeFrom(from.target_ids_);
  cal_diff_.MergeFrom(from.cal_diff_);
  ant_diff_.MergeFrom(from.ant_diff_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::zb::dcts::source::kh::OperationStatus::MergeFrom(from._internal_status());
  }
  if (from.has_seg_header()) {
    _internal_mutable_seg_header()->::zb::dcts::scenario::spectrum::SegmentHeader::MergeFrom(from._internal_seg_header());
  }
  if (from.has_band()) {
    _internal_mutable_band()->::zb::dcts::scenario::spectrum::FrequencyBand::MergeFrom(from._internal_band());
  }
  if (from.has_panorama_view()) {
    _internal_mutable_panorama_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_panorama_view());
  }
  if (from.has_closeshot_view()) {
    _internal_mutable_closeshot_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_closeshot_view());
  }
  if (!(from.courseangle() <= 0 && from.courseangle() >= 0)) {
    _internal_set_courseangle(from._internal_courseangle());
  }
  if (!(from.center_freq() <= 0 && from.center_freq() >= 0)) {
    _internal_set_center_freq(from._internal_center_freq());
  }
}

void CommDirectionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommDirectionResult::CopyFrom(const CommDirectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommDirectionResult::IsInitialized() const {
  return true;
}

void CommDirectionResult::InternalSwap(CommDirectionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_detection_before_.InternalSwap(&other->target_detection_before_);
  target_detection_.InternalSwap(&other->target_detection_);
  lofrequencykhzs_.InternalSwap(&other->lofrequencykhzs_);
  scanindexs_.InternalSwap(&other->scanindexs_);
  target_ids_.InternalSwap(&other->target_ids_);
  cal_diff_.InternalSwap(&other->cal_diff_);
  ant_diff_.InternalSwap(&other->ant_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommDirectionResult, center_freq_)
      + sizeof(CommDirectionResult::center_freq_)
      - PROTOBUF_FIELD_OFFSET(CommDirectionResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommDirectionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commDirection::CommDirectionResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commDirection::CommDirectionResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
