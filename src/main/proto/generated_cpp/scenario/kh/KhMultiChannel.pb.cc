// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhMultiChannel.proto

#include "scenario/kh/KhMultiChannel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fFFP_2fdemodulate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScenarioId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fscenario_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScenarioTaskId_scenario_2fscenario_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fdetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectionParam_scenario_2fdetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannelAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhMultiChannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {
class MultiSource_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSource_ParamsEntry_DoNotUse> _instance;
} _MultiSource_ParamsEntry_DoNotUse_default_instance_;
class MultiSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiSource> _instance;
} _MultiSource_default_instance_;
class MultiTaskStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiTaskStartRequest> _instance;
} _MultiTaskStartRequest_default_instance_;
class NarrowChannelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NarrowChannelData> _instance;
} _NarrowChannelData_default_instance_;
class MultiResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiResult> _instance;
} _MultiResult_default_instance_;
class ChannelChangeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelChangeRequest> _instance;
} _ChannelChangeRequest_default_instance_;
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_ChannelChangeRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto}, {
      &scc_info_ScenarioTaskId_scenario_2fscenario_2eproto.base,
      &scc_info_NarrowChannel_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,}};

static void InitDefaultsscc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_OperationStatus_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_View_scenario_2fspectrum_2eproto.base,
      &scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto.base,}};

static void InitDefaultsscc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto.base,}};

static void InitDefaultsscc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse();
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto}, {}};

static void InitDefaultsscc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto}, {
      &scc_info_ScenarioId_scenario_2fscenario_2eproto.base,
      &scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto.base,
      &scc_info_MultiAcqParam_scenario_2fkh_2fKhMultiChannelAcq_2eproto.base,
      &scc_info_DetectionParam_scenario_2fdetection_2eproto.base,}};

static void InitDefaultsscc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannelData_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,
      &scc_info_ChannelAudio_scenario_2fFFP_2fdemodulate_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhMultiChannel_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhMultiChannel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhMultiChannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiSource, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, scenario_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, source_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, acq_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, detection_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, channel_id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, cent_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, samp_rate_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, data_i_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, data_q_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, spectrum_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData, channel_audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, panorama_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, closeshot_view_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::MultiResult, channel_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest, responser_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest, index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest, channels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse)},
  { 9, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiSource)},
  { 16, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest)},
  { 25, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData)},
  { 38, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::MultiResult)},
  { 48, -1, sizeof(::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commMultiChannel::_ChannelChangeRequest_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhMultiChannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n scenario/kh/KhMultiChannel.proto\022$zb.d"
  "cts.scenario.kh.commMultiChannel\032\ndcts.p"
  "roto\032\023source/source.proto\032\031source/kh/KhC"
  "ontext.proto\032\027scenario/scenario.proto\032\027s"
  "cenario/spectrum.proto\032\030scenario/detecti"
  "on.proto\032#scenario/kh/KhMultiChannelAcq."
  "proto\032\035scenario/FFP/demodulate.proto\"\261\001\n"
  "\013MultiSource\022$\n\002id\030\001 \001(\0132\030.zb.dcts.sourc"
  "e.SourceId\022M\n\006params\030\006 \003(\0132=.zb.dcts.sce"
  "nario.kh.commMultiChannel.MultiSource.Pa"
  "ramsEntry\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"\235\002\n\025MultiTaskStartReque"
  "st\022.\n\010scenario\030\001 \001(\0132\034.zb.dcts.scenario."
  "ScenarioId\022G\n\014source_param\030\002 \001(\01321.zb.dc"
  "ts.scenario.kh.commMultiChannel.MultiSou"
  "rce\022F\n\tacq_param\030\003 \001(\01323.zb.dcts.scenari"
  "o.kh.commMultiChannel.MultiAcqParam\022C\n\017d"
  "etection_param\030\004 \001(\0132*.zb.dcts.scenario."
  "detection.DetectionParam\"\342\001\n\021NarrowChann"
  "elData\022\022\n\nchannel_id\030\002 \001(\005\022\021\n\tcent_freq\030"
  "\004 \001(\001\022\021\n\tsamp_rate\030\006 \001(\001\022&\n\ntime_stamp\030\007"
  " \001(\0132\022.zb.dcts.Timestamp\022\016\n\006data_i\030\010 \003(\002"
  "\022\016\n\006data_q\030\t \003(\002\022\020\n\010spectrum\030\013 \003(\002\0229\n\rch"
  "annel_audio\030\014 \001(\0132\".zb.dcts.scenario.FFP"
  ".ChannelAudio\"\264\002\n\013MultiResult\0221\n\006header\030"
  "\001 \001(\0132!.zb.dcts.scenario.spectrum.Header"
  "\0222\n\006status\030\002 \001(\0132\".zb.dcts.source.kh.Ope"
  "rationStatus\0226\n\rpanorama_view\030\003 \001(\0132\037.zb"
  ".dcts.scenario.spectrum.View\0227\n\016closesho"
  "t_view\030\004 \001(\0132\037.zb.dcts.scenario.spectrum"
  ".View\022M\n\014channel_data\030\005 \003(\01327.zb.dcts.sc"
  "enario.kh.commMultiChannel.NarrowChannel"
  "Data\"\323\001\n\024ChannelChangeRequest\0223\n\trespons"
  "er\030\001 \001(\0132 .zb.dcts.scenario.ScenarioTask"
  "Id\022\?\n\005index\030\002 \001(\01620.zb.dcts.scenario.kh."
  "commMultiChannel.ParamIndex\022E\n\010channels\030"
  "\004 \003(\01323.zb.dcts.scenario.kh.commMultiCha"
  "nnel.NarrowChannel*\'\n\nParamIndex\022\013\n\007INVA"
  "LID\020\000\022\014\n\010NB_PARAM\020~2\332\013\n\023MultiChannelServ"
  "ice\022k\n\tStartTask\022;.zb.dcts.scenario.kh.c"
  "ommMultiChannel.MultiTaskStartRequest\032\037."
  "zb.dcts.scenario.ScenarioReply\"\000\022d\n\tGetR"
  "esult\022 .zb.dcts.scenario.ScenarioTaskId\032"
  "1.zb.dcts.scenario.kh.commMultiChannel.M"
  "ultiResult\"\0000\001\022l\n\013ChangeParam\022:.zb.dcts."
  "scenario.kh.commMultiChannel.ChannelChan"
  "geRequest\032\037.zb.dcts.scenario.ScenarioRep"
  "ly\"\000\022O\n\010StopTask\022 .zb.dcts.scenario.Scen"
  "arioTaskId\032\037.zb.dcts.scenario.ScenarioRe"
  "ply\"\000\022Y\n\nOpenZoomIn\022(.zb.dcts.scenario.s"
  "pectrum.ZoomInRequest\032\037.zb.dcts.scenario"
  ".ScenarioReply\"\000\022R\n\013CloseZoomIn\022 .zb.dct"
  "s.scenario.ScenarioTaskId\032\037.zb.dcts.scen"
  "ario.ScenarioReply\"\000\022]\n\014OpenDataHold\022*.z"
  "b.dcts.scenario.spectrum.DataHoldRequest"
  "\032\037.zb.dcts.scenario.ScenarioReply\"\000\022^\n\rR"
  "esetDataHold\022*.zb.dcts.scenario.spectrum"
  ".DataHoldRequest\032\037.zb.dcts.scenario.Scen"
  "arioReply\"\000\022^\n\rCloseDataHold\022*.zb.dcts.s"
  "cenario.spectrum.DataHoldRequest\032\037.zb.dc"
  "ts.scenario.ScenarioReply\"\000\022`\n\rOpenDetec"
  "tion\022,.zb.dcts.scenario.detection.Detect"
  "ionRequest\032\037.zb.dcts.scenario.ScenarioRe"
  "ply\"\000\022U\n\016CloseDetection\022 .zb.dcts.scenar"
  "io.ScenarioTaskId\032\037.zb.dcts.scenario.Sce"
  "narioReply\"\000\022\177\n\020QuerySignalTable\0223.zb.dc"
  "ts.scenario.detection.SignalTableQueryRe"
  "quest\0324.zb.dcts.scenario.detection.Signa"
  "lTableQueryResponse\"\000\022W\n\020ClearSignalTabl"
  "e\022 .zb.dcts.scenario.ScenarioTaskId\032\037.zb"
  ".dcts.scenario.ScenarioReply\"\000\022h\n\017Signal"
  "Gathering\0222.zb.dcts.scenario.detection.S"
  "ignalGatheringRequest\032\037.zb.dcts.scenario"
  ".ScenarioReply\"\000\022f\n\022GetGatheringResult\022 "
  ".zb.dcts.scenario.ScenarioTaskId\032,.zb.dc"
  "ts.scenario.detection.SignalSampleList\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_deps[8] = {
  &::descriptor_table_dcts_2eproto,
  &::descriptor_table_scenario_2fFFP_2fdemodulate_2eproto,
  &::descriptor_table_scenario_2fdetection_2eproto,
  &::descriptor_table_scenario_2fkh_2fKhMultiChannelAcq_2eproto,
  &::descriptor_table_scenario_2fscenario_2eproto,
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fkh_2fKhContext_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_sccs[6] = {
  &scc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base,
  &scc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto.base,
  &scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto.base,
  &scc_info_MultiSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhMultiChannel_2eproto.base,
  &scc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base,
  &scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhMultiChannel_2eproto, "scenario/kh/KhMultiChannel.proto", 3048,
  &descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_once, descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto_deps, 6, 8,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhMultiChannel_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhMultiChannel_2eproto, 6, file_level_enum_descriptors_scenario_2fkh_2fKhMultiChannel_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhMultiChannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhMultiChannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhMultiChannel_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhMultiChannel_2eproto[0];
}
bool ParamIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 126:
      return true;
    default:
      return false;
  }
}


// ===================================================================

MultiSource_ParamsEntry_DoNotUse::MultiSource_ParamsEntry_DoNotUse() {}
MultiSource_ParamsEntry_DoNotUse::MultiSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MultiSource_ParamsEntry_DoNotUse::MergeFrom(const MultiSource_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MultiSource_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MultiSource_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MultiSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class MultiSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const MultiSource* msg);
};

const ::zb::dcts::source::SourceId&
MultiSource::_Internal::id(const MultiSource* msg) {
  return *msg->id_;
}
void MultiSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
MultiSource::MultiSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
}
MultiSource::MultiSource(const MultiSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
}

void MultiSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  id_ = nullptr;
}

MultiSource::~MultiSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void MultiSource::ArenaDtor(void* object) {
  MultiSource* _this = reinterpret_cast< MultiSource* >(object);
  (void)_this;
}
void MultiSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiSource& MultiSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiSource_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  return *internal_default_instance();
}


void MultiSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // map<string, string> params = 6;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commMultiChannel.MultiSource.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commMultiChannel.MultiSource.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MultiSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = MultiSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  return target;
}

size_t MultiSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += MultiSource_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
    MergeFrom(*source);
  }
}

void MultiSource::MergeFrom(const MultiSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
}

void MultiSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSource::CopyFrom(const MultiSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSource::IsInitialized() const {
  return true;
}

void MultiSource::InternalSwap(MultiSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiTaskStartRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_._instance.get_mutable()->scenario_ = const_cast< ::zb::dcts::scenario::ScenarioId*>(
      ::zb::dcts::scenario::ScenarioId::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_._instance.get_mutable()->source_param_ = const_cast< ::zb::dcts::scenario::kh::commMultiChannel::MultiSource*>(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiSource::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_._instance.get_mutable()->acq_param_ = const_cast< ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam*>(
      ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiTaskStartRequest_default_instance_._instance.get_mutable()->detection_param_ = const_cast< ::zb::dcts::scenario::detection::DetectionParam*>(
      ::zb::dcts::scenario::detection::DetectionParam::internal_default_instance());
}
class MultiTaskStartRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioId& scenario(const MultiTaskStartRequest* msg);
  static const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource& source_param(const MultiTaskStartRequest* msg);
  static const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam& acq_param(const MultiTaskStartRequest* msg);
  static const ::zb::dcts::scenario::detection::DetectionParam& detection_param(const MultiTaskStartRequest* msg);
};

const ::zb::dcts::scenario::ScenarioId&
MultiTaskStartRequest::_Internal::scenario(const MultiTaskStartRequest* msg) {
  return *msg->scenario_;
}
const ::zb::dcts::scenario::kh::commMultiChannel::MultiSource&
MultiTaskStartRequest::_Internal::source_param(const MultiTaskStartRequest* msg) {
  return *msg->source_param_;
}
const ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam&
MultiTaskStartRequest::_Internal::acq_param(const MultiTaskStartRequest* msg) {
  return *msg->acq_param_;
}
const ::zb::dcts::scenario::detection::DetectionParam&
MultiTaskStartRequest::_Internal::detection_param(const MultiTaskStartRequest* msg) {
  return *msg->detection_param_;
}
void MultiTaskStartRequest::clear_scenario() {
  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
void MultiTaskStartRequest::clear_acq_param() {
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
}
void MultiTaskStartRequest::clear_detection_param() {
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
}
MultiTaskStartRequest::MultiTaskStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
}
MultiTaskStartRequest::MultiTaskStartRequest(const MultiTaskStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scenario()) {
    scenario_ = new ::zb::dcts::scenario::ScenarioId(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  if (from._internal_has_source_param()) {
    source_param_ = new ::zb::dcts::scenario::kh::commMultiChannel::MultiSource(*from.source_param_);
  } else {
    source_param_ = nullptr;
  }
  if (from._internal_has_acq_param()) {
    acq_param_ = new ::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam(*from.acq_param_);
  } else {
    acq_param_ = nullptr;
  }
  if (from._internal_has_detection_param()) {
    detection_param_ = new ::zb::dcts::scenario::detection::DetectionParam(*from.detection_param_);
  } else {
    detection_param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
}

void MultiTaskStartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  ::memset(&scenario_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_param_) -
      reinterpret_cast<char*>(&scenario_)) + sizeof(detection_param_));
}

MultiTaskStartRequest::~MultiTaskStartRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiTaskStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scenario_;
  if (this != internal_default_instance()) delete source_param_;
  if (this != internal_default_instance()) delete acq_param_;
  if (this != internal_default_instance()) delete detection_param_;
}

void MultiTaskStartRequest::ArenaDtor(void* object) {
  MultiTaskStartRequest* _this = reinterpret_cast< MultiTaskStartRequest* >(object);
  (void)_this;
}
void MultiTaskStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiTaskStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiTaskStartRequest& MultiTaskStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiTaskStartRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  return *internal_default_instance();
}


void MultiTaskStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  if (GetArena() == nullptr && source_param_ != nullptr) {
    delete source_param_;
  }
  source_param_ = nullptr;
  if (GetArena() == nullptr && acq_param_ != nullptr) {
    delete acq_param_;
  }
  acq_param_ = nullptr;
  if (GetArena() == nullptr && detection_param_ != nullptr) {
    delete detection_param_;
  }
  detection_param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiTaskStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioId scenario = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commMultiChannel.MultiSource source_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam acq_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_acq_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detection_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiTaskStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scenario(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.MultiSource source_param = 2;
  if (this->has_source_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source_param(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::acq_param(this), target, stream);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  if (this->has_detection_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::detection_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  return target;
}

size_t MultiTaskStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioId scenario = 1;
  if (this->has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.MultiSource source_param = 2;
  if (this->has_source_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_param_);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam acq_param = 3;
  if (this->has_acq_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acq_param_);
  }

  // .zb.dcts.scenario.detection.DetectionParam detection_param = 4;
  if (this->has_detection_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detection_param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiTaskStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiTaskStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiTaskStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
    MergeFrom(*source);
  }
}

void MultiTaskStartRequest::MergeFrom(const MultiTaskStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario()) {
    _internal_mutable_scenario()->::zb::dcts::scenario::ScenarioId::MergeFrom(from._internal_scenario());
  }
  if (from.has_source_param()) {
    _internal_mutable_source_param()->::zb::dcts::scenario::kh::commMultiChannel::MultiSource::MergeFrom(from._internal_source_param());
  }
  if (from.has_acq_param()) {
    _internal_mutable_acq_param()->::zb::dcts::scenario::kh::commMultiChannel::MultiAcqParam::MergeFrom(from._internal_acq_param());
  }
  if (from.has_detection_param()) {
    _internal_mutable_detection_param()->::zb::dcts::scenario::detection::DetectionParam::MergeFrom(from._internal_detection_param());
  }
}

void MultiTaskStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiTaskStartRequest::CopyFrom(const MultiTaskStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiTaskStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiTaskStartRequest::IsInitialized() const {
  return true;
}

void MultiTaskStartRequest::InternalSwap(MultiTaskStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiTaskStartRequest, detection_param_)
      + sizeof(MultiTaskStartRequest::detection_param_)
      - PROTOBUF_FIELD_OFFSET(MultiTaskStartRequest, scenario_)>(
          reinterpret_cast<char*>(&scenario_),
          reinterpret_cast<char*>(&other->scenario_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiTaskStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NarrowChannelData::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannelData_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_NarrowChannelData_default_instance_._instance.get_mutable()->channel_audio_ = const_cast< ::zb::dcts::scenario::FFP::ChannelAudio*>(
      ::zb::dcts::scenario::FFP::ChannelAudio::internal_default_instance());
}
class NarrowChannelData::_Internal {
 public:
  static const ::zb::dcts::Timestamp& time_stamp(const NarrowChannelData* msg);
  static const ::zb::dcts::scenario::FFP::ChannelAudio& channel_audio(const NarrowChannelData* msg);
};

const ::zb::dcts::Timestamp&
NarrowChannelData::_Internal::time_stamp(const NarrowChannelData* msg) {
  return *msg->time_stamp_;
}
const ::zb::dcts::scenario::FFP::ChannelAudio&
NarrowChannelData::_Internal::channel_audio(const NarrowChannelData* msg) {
  return *msg->channel_audio_;
}
void NarrowChannelData::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void NarrowChannelData::clear_channel_audio() {
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
}
NarrowChannelData::NarrowChannelData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_i_(arena),
  data_q_(arena),
  spectrum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
}
NarrowChannelData::NarrowChannelData(const NarrowChannelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_i_(from.data_i_),
      data_q_(from.data_q_),
      spectrum_(from.spectrum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new ::zb::dcts::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_channel_audio()) {
    channel_audio_ = new ::zb::dcts::scenario::FFP::ChannelAudio(*from.channel_audio_);
  } else {
    channel_audio_ = nullptr;
  }
  ::memcpy(&cent_freq_, &from.cent_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&cent_freq_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
}

void NarrowChannelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(channel_id_));
}

NarrowChannelData::~NarrowChannelData() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NarrowChannelData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete channel_audio_;
}

void NarrowChannelData::ArenaDtor(void* object) {
  NarrowChannelData* _this = reinterpret_cast< NarrowChannelData* >(object);
  (void)_this;
}
void NarrowChannelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NarrowChannelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NarrowChannelData& NarrowChannelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NarrowChannelData_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  return *internal_default_instance();
}


void NarrowChannelData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_i_.Clear();
  data_q_.Clear();
  spectrum_.Clear();
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && channel_audio_ != nullptr) {
    delete channel_audio_;
  }
  channel_audio_ = nullptr;
  ::memset(&cent_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&cent_freq_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NarrowChannelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cent_freq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          cent_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double samp_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          samp_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data_i = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_data_i(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float data_q = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_data_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float spectrum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_spectrum(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NarrowChannelData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel_id(), target);
  }

  // double cent_freq = 4;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cent_freq(), target);
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_samp_rate(), target);
  }

  // .zb.dcts.Timestamp time_stamp = 7;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::time_stamp(this), target, stream);
  }

  // repeated float data_i = 8;
  if (this->_internal_data_i_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_data_i(), target);
  }

  // repeated float data_q = 9;
  if (this->_internal_data_q_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_data_q(), target);
  }

  // repeated float spectrum = 11;
  if (this->_internal_spectrum_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_spectrum(), target);
  }

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 12;
  if (this->has_channel_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::channel_audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  return target;
}

size_t NarrowChannelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data_i = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_i_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float data_q = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_q_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float spectrum = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.Timestamp time_stamp = 7;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .zb.dcts.scenario.FFP.ChannelAudio channel_audio = 12;
  if (this->has_channel_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_audio_);
  }

  // double cent_freq = 4;
  if (!(this->cent_freq() <= 0 && this->cent_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double samp_rate = 6;
  if (!(this->samp_rate() <= 0 && this->samp_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NarrowChannelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  const NarrowChannelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NarrowChannelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
    MergeFrom(*source);
  }
}

void NarrowChannelData::MergeFrom(const NarrowChannelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_i_.MergeFrom(from.data_i_);
  data_q_.MergeFrom(from.data_q_);
  spectrum_.MergeFrom(from.spectrum_);
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->::zb::dcts::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_channel_audio()) {
    _internal_mutable_channel_audio()->::zb::dcts::scenario::FFP::ChannelAudio::MergeFrom(from._internal_channel_audio());
  }
  if (!(from.cent_freq() <= 0 && from.cent_freq() >= 0)) {
    _internal_set_cent_freq(from._internal_cent_freq());
  }
  if (!(from.samp_rate() <= 0 && from.samp_rate() >= 0)) {
    _internal_set_samp_rate(from._internal_samp_rate());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void NarrowChannelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NarrowChannelData::CopyFrom(const NarrowChannelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NarrowChannelData::IsInitialized() const {
  return true;
}

void NarrowChannelData::InternalSwap(NarrowChannelData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_i_.InternalSwap(&other->data_i_);
  data_q_.InternalSwap(&other->data_q_);
  spectrum_.InternalSwap(&other->spectrum_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NarrowChannelData, channel_id_)
      + sizeof(NarrowChannelData::channel_id_)
      - PROTOBUF_FIELD_OFFSET(NarrowChannelData, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NarrowChannelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_._instance.get_mutable()->status_ = const_cast< ::zb::dcts::source::kh::OperationStatus*>(
      ::zb::dcts::source::kh::OperationStatus::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_._instance.get_mutable()->panorama_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
  ::zb::dcts::scenario::kh::commMultiChannel::_MultiResult_default_instance_._instance.get_mutable()->closeshot_view_ = const_cast< ::zb::dcts::scenario::spectrum::View*>(
      ::zb::dcts::scenario::spectrum::View::internal_default_instance());
}
class MultiResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const MultiResult* msg);
  static const ::zb::dcts::source::kh::OperationStatus& status(const MultiResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& panorama_view(const MultiResult* msg);
  static const ::zb::dcts::scenario::spectrum::View& closeshot_view(const MultiResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
MultiResult::_Internal::header(const MultiResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::source::kh::OperationStatus&
MultiResult::_Internal::status(const MultiResult* msg) {
  return *msg->status_;
}
const ::zb::dcts::scenario::spectrum::View&
MultiResult::_Internal::panorama_view(const MultiResult* msg) {
  return *msg->panorama_view_;
}
const ::zb::dcts::scenario::spectrum::View&
MultiResult::_Internal::closeshot_view(const MultiResult* msg) {
  return *msg->closeshot_view_;
}
void MultiResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void MultiResult::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void MultiResult::clear_panorama_view() {
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
}
void MultiResult::clear_closeshot_view() {
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
}
MultiResult::MultiResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channel_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
}
MultiResult::MultiResult(const MultiResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_data_(from.channel_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::zb::dcts::source::kh::OperationStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_panorama_view()) {
    panorama_view_ = new ::zb::dcts::scenario::spectrum::View(*from.panorama_view_);
  } else {
    panorama_view_ = nullptr;
  }
  if (from._internal_has_closeshot_view()) {
    closeshot_view_ = new ::zb::dcts::scenario::spectrum::View(*from.closeshot_view_);
  } else {
    closeshot_view_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
}

void MultiResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closeshot_view_) -
      reinterpret_cast<char*>(&header_)) + sizeof(closeshot_view_));
}

MultiResult::~MultiResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete panorama_view_;
  if (this != internal_default_instance()) delete closeshot_view_;
}

void MultiResult::ArenaDtor(void* object) {
  MultiResult* _this = reinterpret_cast< MultiResult* >(object);
  (void)_this;
}
void MultiResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiResult& MultiResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiResult_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  return *internal_default_instance();
}


void MultiResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_data_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && panorama_view_ != nullptr) {
    delete panorama_view_;
  }
  panorama_view_ = nullptr;
  if (GetArena() == nullptr && closeshot_view_ != nullptr) {
    delete closeshot_view_;
  }
  closeshot_view_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.OperationStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View panorama_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_panorama_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.View closeshot_view = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_closeshot_view(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData channel_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 3;
  if (this->has_panorama_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::panorama_view(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 4;
  if (this->has_closeshot_view()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::closeshot_view(this), target, stream);
  }

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData channel_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_channel_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  return target;
}

size_t MultiResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannelData channel_data = 5;
  total_size += 1UL * this->_internal_channel_data_size();
  for (const auto& msg : this->channel_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.source.kh.OperationStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .zb.dcts.scenario.spectrum.View panorama_view = 3;
  if (this->has_panorama_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *panorama_view_);
  }

  // .zb.dcts.scenario.spectrum.View closeshot_view = 4;
  if (this->has_closeshot_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *closeshot_view_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
    MergeFrom(*source);
  }
}

void MultiResult::MergeFrom(const MultiResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_data_.MergeFrom(from.channel_data_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::zb::dcts::source::kh::OperationStatus::MergeFrom(from._internal_status());
  }
  if (from.has_panorama_view()) {
    _internal_mutable_panorama_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_panorama_view());
  }
  if (from.has_closeshot_view()) {
    _internal_mutable_closeshot_view()->::zb::dcts::scenario::spectrum::View::MergeFrom(from._internal_closeshot_view());
  }
}

void MultiResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiResult::CopyFrom(const MultiResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.MultiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiResult::IsInitialized() const {
  return true;
}

void MultiResult::InternalSwap(MultiResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_data_.InternalSwap(&other->channel_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiResult, closeshot_view_)
      + sizeof(MultiResult::closeshot_view_)
      - PROTOBUF_FIELD_OFFSET(MultiResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelChangeRequest::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commMultiChannel::_ChannelChangeRequest_default_instance_._instance.get_mutable()->responser_ = const_cast< ::zb::dcts::scenario::ScenarioTaskId*>(
      ::zb::dcts::scenario::ScenarioTaskId::internal_default_instance());
}
class ChannelChangeRequest::_Internal {
 public:
  static const ::zb::dcts::scenario::ScenarioTaskId& responser(const ChannelChangeRequest* msg);
};

const ::zb::dcts::scenario::ScenarioTaskId&
ChannelChangeRequest::_Internal::responser(const ChannelChangeRequest* msg) {
  return *msg->responser_;
}
void ChannelChangeRequest::clear_responser() {
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
}
void ChannelChangeRequest::clear_channels() {
  channels_.Clear();
}
ChannelChangeRequest::ChannelChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
}
ChannelChangeRequest::ChannelChangeRequest(const ChannelChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_responser()) {
    responser_ = new ::zb::dcts::scenario::ScenarioTaskId(*from.responser_);
  } else {
    responser_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
}

void ChannelChangeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  ::memset(&responser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&responser_)) + sizeof(index_));
}

ChannelChangeRequest::~ChannelChangeRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete responser_;
}

void ChannelChangeRequest::ArenaDtor(void* object) {
  ChannelChangeRequest* _this = reinterpret_cast< ChannelChangeRequest* >(object);
  (void)_this;
}
void ChannelChangeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelChangeRequest& ChannelChangeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelChangeRequest_scenario_2fkh_2fKhMultiChannel_2eproto.base);
  return *internal_default_instance();
}


void ChannelChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArena() == nullptr && responser_ != nullptr) {
    delete responser_;
  }
  responser_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelChangeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.ScenarioTaskId responser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_responser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commMultiChannel.ParamIndex index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::zb::dcts::scenario::kh::commMultiChannel::ParamIndex>(val));
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelChangeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::responser(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.ParamIndex index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_index(), target);
  }

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  return target;
}

size_t ChannelChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  if (this->has_responser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responser_);
  }

  // .zb.dcts.scenario.kh.commMultiChannel.ParamIndex index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelChangeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelChangeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelChangeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
    MergeFrom(*source);
  }
}

void ChannelChangeRequest::MergeFrom(const ChannelChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.has_responser()) {
    _internal_mutable_responser()->::zb::dcts::scenario::ScenarioTaskId::MergeFrom(from._internal_responser());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ChannelChangeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelChangeRequest::CopyFrom(const ChannelChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commMultiChannel.ChannelChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelChangeRequest::IsInitialized() const {
  return true;
}

void ChannelChangeRequest::InternalSwap(ChannelChangeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelChangeRequest, index_)
      + sizeof(ChannelChangeRequest::index_)
      - PROTOBUF_FIELD_OFFSET(ChannelChangeRequest, responser_)>(
          reinterpret_cast<char*>(&responser_),
          reinterpret_cast<char*>(&other->responser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelChangeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commMultiChannel
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiSource_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::NarrowChannelData >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::MultiResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
