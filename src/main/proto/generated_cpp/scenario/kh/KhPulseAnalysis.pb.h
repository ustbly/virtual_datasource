// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhPulseAnalysis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhPulseAnalysis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhPulseAnalysis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcts.pb.h"
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/kh/KhIQDataAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhPulseAnalysis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace pulseAnalysis {
class AnalysisParam;
class AnalysisParamDefaultTypeInternal;
extern AnalysisParamDefaultTypeInternal _AnalysisParam_default_instance_;
class ChangePulseRequest;
class ChangePulseRequestDefaultTypeInternal;
extern ChangePulseRequestDefaultTypeInternal _ChangePulseRequest_default_instance_;
class CommPulseAnalysisTaskRequest;
class CommPulseAnalysisTaskRequestDefaultTypeInternal;
extern CommPulseAnalysisTaskRequestDefaultTypeInternal _CommPulseAnalysisTaskRequest_default_instance_;
class CommPulseResult;
class CommPulseResultDefaultTypeInternal;
extern CommPulseResultDefaultTypeInternal _CommPulseResult_default_instance_;
class CommPulseResult_Header;
class CommPulseResult_HeaderDefaultTypeInternal;
extern CommPulseResult_HeaderDefaultTypeInternal _CommPulseResult_Header_default_instance_;
class PulseParamsAnalysisResult;
class PulseParamsAnalysisResultDefaultTypeInternal;
extern PulseParamsAnalysisResultDefaultTypeInternal _PulseParamsAnalysisResult_default_instance_;
class PulseTransientAnalysisData;
class PulseTransientAnalysisDataDefaultTypeInternal;
extern PulseTransientAnalysisDataDefaultTypeInternal _PulseTransientAnalysisData_default_instance_;
}  // namespace pulseAnalysis
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::ChangePulseRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::CommPulseAnalysisTaskRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult>(Arena*);
template<> ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace pulseAnalysis {

enum LevelMode : int {
  PEAK = 0,
  NOISE = 1,
  ABS = 2,
  LevelMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LevelMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LevelMode_IsValid(int value);
constexpr LevelMode LevelMode_MIN = PEAK;
constexpr LevelMode LevelMode_MAX = ABS;
constexpr int LevelMode_ARRAYSIZE = LevelMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelMode_descriptor();
template<typename T>
inline const std::string& LevelMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LevelMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LevelMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LevelMode_descriptor(), enum_t_value);
}
inline bool LevelMode_Parse(
    const std::string& name, LevelMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LevelMode>(
    LevelMode_descriptor(), name, value);
}
enum ParamIndex : int {
  ANALYSIS_PARAM = 0,
  ParamIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParamIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParamIndex_IsValid(int value);
constexpr ParamIndex ParamIndex_MIN = ANALYSIS_PARAM;
constexpr ParamIndex ParamIndex_MAX = ANALYSIS_PARAM;
constexpr int ParamIndex_ARRAYSIZE = ParamIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor();
template<typename T>
inline const std::string& ParamIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamIndex_descriptor(), enum_t_value);
}
inline bool ParamIndex_Parse(
    const std::string& name, ParamIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamIndex>(
    ParamIndex_descriptor(), name, value);
}
// ===================================================================

class AnalysisParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam) */ {
 public:
  inline AnalysisParam() : AnalysisParam(nullptr) {};
  virtual ~AnalysisParam();

  AnalysisParam(const AnalysisParam& from);
  AnalysisParam(AnalysisParam&& from) noexcept
    : AnalysisParam() {
    *this = ::std::move(from);
  }

  inline AnalysisParam& operator=(const AnalysisParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalysisParam& operator=(AnalysisParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnalysisParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnalysisParam* internal_default_instance() {
    return reinterpret_cast<const AnalysisParam*>(
               &_AnalysisParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AnalysisParam& a, AnalysisParam& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalysisParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalysisParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnalysisParam* New() const final {
    return CreateMaybeMessage<AnalysisParam>(nullptr);
  }

  AnalysisParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnalysisParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnalysisParam& from);
  void MergeFrom(const AnalysisParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalysisParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam";
  }
  protected:
  explicit AnalysisParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxwidthFieldNumber = 4,
    kMinwidthFieldNumber = 5,
    kLvlmodeFieldNumber = 6,
    kLvldataFieldNumber = 7,
    kMaxpulseCountFieldNumber = 8,
    kHistogrambinsFieldNumber = 9,
    kStartTimeFieldNumber = 10,
    kStopTimeFieldNumber = 11,
  };
  // double maxwidth = 4;
  void clear_maxwidth();
  double maxwidth() const;
  void set_maxwidth(double value);
  private:
  double _internal_maxwidth() const;
  void _internal_set_maxwidth(double value);
  public:

  // double minwidth = 5;
  void clear_minwidth();
  double minwidth() const;
  void set_minwidth(double value);
  private:
  double _internal_minwidth() const;
  void _internal_set_minwidth(double value);
  public:

  // .zb.dcts.scenario.kh.pulseAnalysis.LevelMode lvlmode = 6;
  void clear_lvlmode();
  ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode lvlmode() const;
  void set_lvlmode(::zb::dcts::scenario::kh::pulseAnalysis::LevelMode value);
  private:
  ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode _internal_lvlmode() const;
  void _internal_set_lvlmode(::zb::dcts::scenario::kh::pulseAnalysis::LevelMode value);
  public:

  // float lvldata = 7;
  void clear_lvldata();
  float lvldata() const;
  void set_lvldata(float value);
  private:
  float _internal_lvldata() const;
  void _internal_set_lvldata(float value);
  public:

  // int32 maxpulse_count = 8;
  void clear_maxpulse_count();
  ::PROTOBUF_NAMESPACE_ID::int32 maxpulse_count() const;
  void set_maxpulse_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxpulse_count() const;
  void _internal_set_maxpulse_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 histogrambins = 9;
  void clear_histogrambins();
  ::PROTOBUF_NAMESPACE_ID::uint32 histogrambins() const;
  void set_histogrambins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_histogrambins() const;
  void _internal_set_histogrambins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double start_time = 10;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double stop_time = 11;
  void clear_stop_time();
  double stop_time() const;
  void set_stop_time(double value);
  private:
  double _internal_stop_time() const;
  void _internal_set_stop_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double maxwidth_;
  double minwidth_;
  int lvlmode_;
  float lvldata_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxpulse_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 histogrambins_;
  double start_time_;
  double stop_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class CommPulseAnalysisTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest) */ {
 public:
  inline CommPulseAnalysisTaskRequest() : CommPulseAnalysisTaskRequest(nullptr) {};
  virtual ~CommPulseAnalysisTaskRequest();

  CommPulseAnalysisTaskRequest(const CommPulseAnalysisTaskRequest& from);
  CommPulseAnalysisTaskRequest(CommPulseAnalysisTaskRequest&& from) noexcept
    : CommPulseAnalysisTaskRequest() {
    *this = ::std::move(from);
  }

  inline CommPulseAnalysisTaskRequest& operator=(const CommPulseAnalysisTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommPulseAnalysisTaskRequest& operator=(CommPulseAnalysisTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommPulseAnalysisTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommPulseAnalysisTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommPulseAnalysisTaskRequest*>(
               &_CommPulseAnalysisTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommPulseAnalysisTaskRequest& a, CommPulseAnalysisTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommPulseAnalysisTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommPulseAnalysisTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommPulseAnalysisTaskRequest* New() const final {
    return CreateMaybeMessage<CommPulseAnalysisTaskRequest>(nullptr);
  }

  CommPulseAnalysisTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommPulseAnalysisTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommPulseAnalysisTaskRequest& from);
  void MergeFrom(const CommPulseAnalysisTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommPulseAnalysisTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest";
  }
  protected:
  explicit CommPulseAnalysisTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kAnalysisParamFieldNumber = 4,
  };
  // .zb.dcts.scenario.ScenarioId scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const ::zb::dcts::scenario::ScenarioId& scenario() const;
  ::zb::dcts::scenario::ScenarioId* release_scenario();
  ::zb::dcts::scenario::ScenarioId* mutable_scenario();
  void set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario);
  private:
  const ::zb::dcts::scenario::ScenarioId& _internal_scenario() const;
  ::zb::dcts::scenario::ScenarioId* _internal_mutable_scenario();
  public:
  void unsafe_arena_set_allocated_scenario(
      ::zb::dcts::scenario::ScenarioId* scenario);
  ::zb::dcts::scenario::ScenarioId* unsafe_arena_release_scenario();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* release_acq_param();
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param);
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 4;
  bool has_analysis_param() const;
  private:
  bool _internal_has_analysis_param() const;
  public:
  void clear_analysis_param();
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& analysis_param() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* release_analysis_param();
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* mutable_analysis_param();
  void set_allocated_analysis_param(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param);
  private:
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& _internal_analysis_param() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* _internal_mutable_analysis_param();
  public:
  void unsafe_arena_set_allocated_analysis_param(
      ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param);
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* unsafe_arena_release_analysis_param();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioId* scenario_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param_;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class ChangePulseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest) */ {
 public:
  inline ChangePulseRequest() : ChangePulseRequest(nullptr) {};
  virtual ~ChangePulseRequest();

  ChangePulseRequest(const ChangePulseRequest& from);
  ChangePulseRequest(ChangePulseRequest&& from) noexcept
    : ChangePulseRequest() {
    *this = ::std::move(from);
  }

  inline ChangePulseRequest& operator=(const ChangePulseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePulseRequest& operator=(ChangePulseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePulseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePulseRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePulseRequest*>(
               &_ChangePulseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChangePulseRequest& a, ChangePulseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePulseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePulseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePulseRequest* New() const final {
    return CreateMaybeMessage<ChangePulseRequest>(nullptr);
  }

  ChangePulseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePulseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePulseRequest& from);
  void MergeFrom(const ChangePulseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePulseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest";
  }
  protected:
  explicit ChangePulseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kAnalysisParamFieldNumber = 3,
    kParamIndexFieldNumber = 2,
  };
  // .zb.dcts.scenario.TaskId task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::zb::dcts::scenario::TaskId& task_id() const;
  ::zb::dcts::scenario::TaskId* release_task_id();
  ::zb::dcts::scenario::TaskId* mutable_task_id();
  void set_allocated_task_id(::zb::dcts::scenario::TaskId* task_id);
  private:
  const ::zb::dcts::scenario::TaskId& _internal_task_id() const;
  ::zb::dcts::scenario::TaskId* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::zb::dcts::scenario::TaskId* task_id);
  ::zb::dcts::scenario::TaskId* unsafe_arena_release_task_id();

  // .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 3;
  bool has_analysis_param() const;
  private:
  bool _internal_has_analysis_param() const;
  public:
  void clear_analysis_param();
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& analysis_param() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* release_analysis_param();
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* mutable_analysis_param();
  void set_allocated_analysis_param(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param);
  private:
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& _internal_analysis_param() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* _internal_mutable_analysis_param();
  public:
  void unsafe_arena_set_allocated_analysis_param(
      ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param);
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* unsafe_arena_release_analysis_param();

  // .zb.dcts.scenario.kh.pulseAnalysis.ParamIndex param_index = 2;
  void clear_param_index();
  ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex param_index() const;
  void set_param_index(::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex value);
  private:
  ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex _internal_param_index() const;
  void _internal_set_param_index(::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::TaskId* task_id_;
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param_;
  int param_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class PulseParamsAnalysisResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult) */ {
 public:
  inline PulseParamsAnalysisResult() : PulseParamsAnalysisResult(nullptr) {};
  virtual ~PulseParamsAnalysisResult();

  PulseParamsAnalysisResult(const PulseParamsAnalysisResult& from);
  PulseParamsAnalysisResult(PulseParamsAnalysisResult&& from) noexcept
    : PulseParamsAnalysisResult() {
    *this = ::std::move(from);
  }

  inline PulseParamsAnalysisResult& operator=(const PulseParamsAnalysisResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulseParamsAnalysisResult& operator=(PulseParamsAnalysisResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PulseParamsAnalysisResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulseParamsAnalysisResult* internal_default_instance() {
    return reinterpret_cast<const PulseParamsAnalysisResult*>(
               &_PulseParamsAnalysisResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PulseParamsAnalysisResult& a, PulseParamsAnalysisResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PulseParamsAnalysisResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PulseParamsAnalysisResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulseParamsAnalysisResult* New() const final {
    return CreateMaybeMessage<PulseParamsAnalysisResult>(nullptr);
  }

  PulseParamsAnalysisResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulseParamsAnalysisResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PulseParamsAnalysisResult& from);
  void MergeFrom(const PulseParamsAnalysisResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PulseParamsAnalysisResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult";
  }
  protected:
  explicit PulseParamsAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeakPowerFieldNumber = 1,
    kMinPowerFieldNumber = 2,
    kRiseTimeFieldNumber = 4,
    kFallTimeFieldNumber = 5,
    kPWFieldNumber = 6,
    kPRIFieldNumber = 7,
    kTOAFieldNumber = 8,
    kAvgOnPowerFieldNumber = 3,
  };
  // float peakPower = 1;
  void clear_peakpower();
  float peakpower() const;
  void set_peakpower(float value);
  private:
  float _internal_peakpower() const;
  void _internal_set_peakpower(float value);
  public:

  // float minPower = 2;
  void clear_minpower();
  float minpower() const;
  void set_minpower(float value);
  private:
  float _internal_minpower() const;
  void _internal_set_minpower(float value);
  public:

  // double riseTime = 4;
  void clear_risetime();
  double risetime() const;
  void set_risetime(double value);
  private:
  double _internal_risetime() const;
  void _internal_set_risetime(double value);
  public:

  // double fallTime = 5;
  void clear_falltime();
  double falltime() const;
  void set_falltime(double value);
  private:
  double _internal_falltime() const;
  void _internal_set_falltime(double value);
  public:

  // double PW = 6;
  void clear_pw();
  double pw() const;
  void set_pw(double value);
  private:
  double _internal_pw() const;
  void _internal_set_pw(double value);
  public:

  // double PRI = 7;
  void clear_pri();
  double pri() const;
  void set_pri(double value);
  private:
  double _internal_pri() const;
  void _internal_set_pri(double value);
  public:

  // uint64 TOA = 8;
  void clear_toa();
  ::PROTOBUF_NAMESPACE_ID::uint64 toa() const;
  void set_toa(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_toa() const;
  void _internal_set_toa(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float avgOnPower = 3;
  void clear_avgonpower();
  float avgonpower() const;
  void set_avgonpower(float value);
  private:
  float _internal_avgonpower() const;
  void _internal_set_avgonpower(float value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float peakpower_;
  float minpower_;
  double risetime_;
  double falltime_;
  double pw_;
  double pri_;
  ::PROTOBUF_NAMESPACE_ID::uint64 toa_;
  float avgonpower_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class PulseTransientAnalysisData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData) */ {
 public:
  inline PulseTransientAnalysisData() : PulseTransientAnalysisData(nullptr) {};
  virtual ~PulseTransientAnalysisData();

  PulseTransientAnalysisData(const PulseTransientAnalysisData& from);
  PulseTransientAnalysisData(PulseTransientAnalysisData&& from) noexcept
    : PulseTransientAnalysisData() {
    *this = ::std::move(from);
  }

  inline PulseTransientAnalysisData& operator=(const PulseTransientAnalysisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulseTransientAnalysisData& operator=(PulseTransientAnalysisData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PulseTransientAnalysisData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulseTransientAnalysisData* internal_default_instance() {
    return reinterpret_cast<const PulseTransientAnalysisData*>(
               &_PulseTransientAnalysisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PulseTransientAnalysisData& a, PulseTransientAnalysisData& b) {
    a.Swap(&b);
  }
  inline void Swap(PulseTransientAnalysisData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PulseTransientAnalysisData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulseTransientAnalysisData* New() const final {
    return CreateMaybeMessage<PulseTransientAnalysisData>(nullptr);
  }

  PulseTransientAnalysisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulseTransientAnalysisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PulseTransientAnalysisData& from);
  void MergeFrom(const PulseTransientAnalysisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PulseTransientAnalysisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData";
  }
  protected:
  explicit PulseTransientAnalysisData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 1,
    kPhaseFieldNumber = 2,
    kFrequencyFieldNumber = 3,
    kParamsResultFieldNumber = 4,
  };
  // repeated float amplitude = 1;
  int amplitude_size() const;
  private:
  int _internal_amplitude_size() const;
  public:
  void clear_amplitude();
  private:
  float _internal_amplitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_amplitude() const;
  void _internal_add_amplitude(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_amplitude();
  public:
  float amplitude(int index) const;
  void set_amplitude(int index, float value);
  void add_amplitude(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      amplitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_amplitude();

  // repeated float phase = 2;
  int phase_size() const;
  private:
  int _internal_phase_size() const;
  public:
  void clear_phase();
  private:
  float _internal_phase(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_phase() const;
  void _internal_add_phase(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_phase();
  public:
  float phase(int index) const;
  void set_phase(int index, float value);
  void add_phase(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      phase() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_phase();

  // repeated float frequency = 3;
  int frequency_size() const;
  private:
  int _internal_frequency_size() const;
  public:
  void clear_frequency();
  private:
  float _internal_frequency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_frequency() const;
  void _internal_add_frequency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_frequency();
  public:
  float frequency(int index) const;
  void set_frequency(int index, float value);
  void add_frequency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      frequency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_frequency();

  // repeated .zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult paramsResult = 4;
  int paramsresult_size() const;
  private:
  int _internal_paramsresult_size() const;
  public:
  void clear_paramsresult();
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* mutable_paramsresult(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >*
      mutable_paramsresult();
  private:
  const ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult& _internal_paramsresult(int index) const;
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* _internal_add_paramsresult();
  public:
  const ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult& paramsresult(int index) const;
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* add_paramsresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >&
      paramsresult() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > amplitude_;
  mutable std::atomic<int> _amplitude_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > phase_;
  mutable std::atomic<int> _phase_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > frequency_;
  mutable std::atomic<int> _frequency_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult > paramsresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class CommPulseResult_Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header) */ {
 public:
  inline CommPulseResult_Header() : CommPulseResult_Header(nullptr) {};
  virtual ~CommPulseResult_Header();

  CommPulseResult_Header(const CommPulseResult_Header& from);
  CommPulseResult_Header(CommPulseResult_Header&& from) noexcept
    : CommPulseResult_Header() {
    *this = ::std::move(from);
  }

  inline CommPulseResult_Header& operator=(const CommPulseResult_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommPulseResult_Header& operator=(CommPulseResult_Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommPulseResult_Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommPulseResult_Header* internal_default_instance() {
    return reinterpret_cast<const CommPulseResult_Header*>(
               &_CommPulseResult_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommPulseResult_Header& a, CommPulseResult_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(CommPulseResult_Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommPulseResult_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommPulseResult_Header* New() const final {
    return CreateMaybeMessage<CommPulseResult_Header>(nullptr);
  }

  CommPulseResult_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommPulseResult_Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommPulseResult_Header& from);
  void MergeFrom(const CommPulseResult_Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommPulseResult_Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header";
  }
  protected:
  explicit CommPulseResult_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFromFieldNumber = 1,
    kTimeSpanFieldNumber = 3,
    kDevicePositionFieldNumber = 4,
    kSequenceNumberFieldNumber = 2,
  };
  // .zb.dcts.source.SourceId result_from = 1;
  bool has_result_from() const;
  private:
  bool _internal_has_result_from() const;
  public:
  void clear_result_from();
  const ::zb::dcts::source::SourceId& result_from() const;
  ::zb::dcts::source::SourceId* release_result_from();
  ::zb::dcts::source::SourceId* mutable_result_from();
  void set_allocated_result_from(::zb::dcts::source::SourceId* result_from);
  private:
  const ::zb::dcts::source::SourceId& _internal_result_from() const;
  ::zb::dcts::source::SourceId* _internal_mutable_result_from();
  public:
  void unsafe_arena_set_allocated_result_from(
      ::zb::dcts::source::SourceId* result_from);
  ::zb::dcts::source::SourceId* unsafe_arena_release_result_from();

  // .zb.dcts.TimeSpan time_span = 3;
  bool has_time_span() const;
  private:
  bool _internal_has_time_span() const;
  public:
  void clear_time_span();
  const ::zb::dcts::TimeSpan& time_span() const;
  ::zb::dcts::TimeSpan* release_time_span();
  ::zb::dcts::TimeSpan* mutable_time_span();
  void set_allocated_time_span(::zb::dcts::TimeSpan* time_span);
  private:
  const ::zb::dcts::TimeSpan& _internal_time_span() const;
  ::zb::dcts::TimeSpan* _internal_mutable_time_span();
  public:
  void unsafe_arena_set_allocated_time_span(
      ::zb::dcts::TimeSpan* time_span);
  ::zb::dcts::TimeSpan* unsafe_arena_release_time_span();

  // .zb.dcts.Position device_position = 4;
  bool has_device_position() const;
  private:
  bool _internal_has_device_position() const;
  public:
  void clear_device_position();
  const ::zb::dcts::Position& device_position() const;
  ::zb::dcts::Position* release_device_position();
  ::zb::dcts::Position* mutable_device_position();
  void set_allocated_device_position(::zb::dcts::Position* device_position);
  private:
  const ::zb::dcts::Position& _internal_device_position() const;
  ::zb::dcts::Position* _internal_mutable_device_position();
  public:
  void unsafe_arena_set_allocated_device_position(
      ::zb::dcts::Position* device_position);
  ::zb::dcts::Position* unsafe_arena_release_device_position();

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* result_from_;
  ::zb::dcts::TimeSpan* time_span_;
  ::zb::dcts::Position* device_position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// -------------------------------------------------------------------

class CommPulseResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult) */ {
 public:
  inline CommPulseResult() : CommPulseResult(nullptr) {};
  virtual ~CommPulseResult();

  CommPulseResult(const CommPulseResult& from);
  CommPulseResult(CommPulseResult&& from) noexcept
    : CommPulseResult() {
    *this = ::std::move(from);
  }

  inline CommPulseResult& operator=(const CommPulseResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommPulseResult& operator=(CommPulseResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommPulseResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommPulseResult* internal_default_instance() {
    return reinterpret_cast<const CommPulseResult*>(
               &_CommPulseResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommPulseResult& a, CommPulseResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommPulseResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommPulseResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommPulseResult* New() const final {
    return CreateMaybeMessage<CommPulseResult>(nullptr);
  }

  CommPulseResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommPulseResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommPulseResult& from);
  void MergeFrom(const CommPulseResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommPulseResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult";
  }
  protected:
  explicit CommPulseResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhPulseAnalysis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommPulseResult_Header Header;

  // accessors -------------------------------------------------------

  enum : int {
    kRawTraceFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTransientDataFieldNumber = 3,
  };
  // repeated float raw_trace = 2;
  int raw_trace_size() const;
  private:
  int _internal_raw_trace_size() const;
  public:
  void clear_raw_trace();
  private:
  float _internal_raw_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_raw_trace() const;
  void _internal_add_raw_trace(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_raw_trace();
  public:
  float raw_trace(int index) const;
  void set_raw_trace(int index, float value);
  void add_raw_trace(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      raw_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_raw_trace();

  // .zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header& header() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* release_header();
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* header);
  private:
  const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header& _internal_header() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* header);
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* unsafe_arena_release_header();

  // .zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData transient_data = 3;
  bool has_transient_data() const;
  private:
  bool _internal_has_transient_data() const;
  public:
  void clear_transient_data();
  const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData& transient_data() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* release_transient_data();
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* mutable_transient_data();
  void set_allocated_transient_data(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* transient_data);
  private:
  const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData& _internal_transient_data() const;
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* _internal_mutable_transient_data();
  public:
  void unsafe_arena_set_allocated_transient_data(
      ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* transient_data);
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* unsafe_arena_release_transient_data();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > raw_trace_;
  mutable std::atomic<int> _raw_trace_cached_byte_size_;
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* header_;
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* transient_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhPulseAnalysis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AnalysisParam

// double maxwidth = 4;
inline void AnalysisParam::clear_maxwidth() {
  maxwidth_ = 0;
}
inline double AnalysisParam::_internal_maxwidth() const {
  return maxwidth_;
}
inline double AnalysisParam::maxwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.maxwidth)
  return _internal_maxwidth();
}
inline void AnalysisParam::_internal_set_maxwidth(double value) {
  
  maxwidth_ = value;
}
inline void AnalysisParam::set_maxwidth(double value) {
  _internal_set_maxwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.maxwidth)
}

// double minwidth = 5;
inline void AnalysisParam::clear_minwidth() {
  minwidth_ = 0;
}
inline double AnalysisParam::_internal_minwidth() const {
  return minwidth_;
}
inline double AnalysisParam::minwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.minwidth)
  return _internal_minwidth();
}
inline void AnalysisParam::_internal_set_minwidth(double value) {
  
  minwidth_ = value;
}
inline void AnalysisParam::set_minwidth(double value) {
  _internal_set_minwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.minwidth)
}

// .zb.dcts.scenario.kh.pulseAnalysis.LevelMode lvlmode = 6;
inline void AnalysisParam::clear_lvlmode() {
  lvlmode_ = 0;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode AnalysisParam::_internal_lvlmode() const {
  return static_cast< ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode >(lvlmode_);
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode AnalysisParam::lvlmode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.lvlmode)
  return _internal_lvlmode();
}
inline void AnalysisParam::_internal_set_lvlmode(::zb::dcts::scenario::kh::pulseAnalysis::LevelMode value) {
  
  lvlmode_ = value;
}
inline void AnalysisParam::set_lvlmode(::zb::dcts::scenario::kh::pulseAnalysis::LevelMode value) {
  _internal_set_lvlmode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.lvlmode)
}

// float lvldata = 7;
inline void AnalysisParam::clear_lvldata() {
  lvldata_ = 0;
}
inline float AnalysisParam::_internal_lvldata() const {
  return lvldata_;
}
inline float AnalysisParam::lvldata() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.lvldata)
  return _internal_lvldata();
}
inline void AnalysisParam::_internal_set_lvldata(float value) {
  
  lvldata_ = value;
}
inline void AnalysisParam::set_lvldata(float value) {
  _internal_set_lvldata(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.lvldata)
}

// int32 maxpulse_count = 8;
inline void AnalysisParam::clear_maxpulse_count() {
  maxpulse_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalysisParam::_internal_maxpulse_count() const {
  return maxpulse_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AnalysisParam::maxpulse_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.maxpulse_count)
  return _internal_maxpulse_count();
}
inline void AnalysisParam::_internal_set_maxpulse_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxpulse_count_ = value;
}
inline void AnalysisParam::set_maxpulse_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxpulse_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.maxpulse_count)
}

// uint32 histogrambins = 9;
inline void AnalysisParam::clear_histogrambins() {
  histogrambins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalysisParam::_internal_histogrambins() const {
  return histogrambins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AnalysisParam::histogrambins() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.histogrambins)
  return _internal_histogrambins();
}
inline void AnalysisParam::_internal_set_histogrambins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  histogrambins_ = value;
}
inline void AnalysisParam::set_histogrambins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_histogrambins(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.histogrambins)
}

// double start_time = 10;
inline void AnalysisParam::clear_start_time() {
  start_time_ = 0;
}
inline double AnalysisParam::_internal_start_time() const {
  return start_time_;
}
inline double AnalysisParam::start_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.start_time)
  return _internal_start_time();
}
inline void AnalysisParam::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void AnalysisParam::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.start_time)
}

// double stop_time = 11;
inline void AnalysisParam::clear_stop_time() {
  stop_time_ = 0;
}
inline double AnalysisParam::_internal_stop_time() const {
  return stop_time_;
}
inline double AnalysisParam::stop_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.stop_time)
  return _internal_stop_time();
}
inline void AnalysisParam::_internal_set_stop_time(double value) {
  
  stop_time_ = value;
}
inline void AnalysisParam::set_stop_time(double value) {
  _internal_set_stop_time(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam.stop_time)
}

// -------------------------------------------------------------------

// CommPulseAnalysisTaskRequest

// .zb.dcts.scenario.ScenarioId scenario = 1;
inline bool CommPulseAnalysisTaskRequest::_internal_has_scenario() const {
  return this != internal_default_instance() && scenario_ != nullptr;
}
inline bool CommPulseAnalysisTaskRequest::has_scenario() const {
  return _internal_has_scenario();
}
inline const ::zb::dcts::scenario::ScenarioId& CommPulseAnalysisTaskRequest::_internal_scenario() const {
  const ::zb::dcts::scenario::ScenarioId* p = scenario_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioId*>(
      &::zb::dcts::scenario::_ScenarioId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioId& CommPulseAnalysisTaskRequest::scenario() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.scenario)
  return _internal_scenario();
}
inline void CommPulseAnalysisTaskRequest::unsafe_arena_set_allocated_scenario(
    ::zb::dcts::scenario::ScenarioId* scenario) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  scenario_ = scenario;
  if (scenario) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.scenario)
}
inline ::zb::dcts::scenario::ScenarioId* CommPulseAnalysisTaskRequest::release_scenario() {
  auto temp = unsafe_arena_release_scenario();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommPulseAnalysisTaskRequest::unsafe_arena_release_scenario() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.scenario)
  
  ::zb::dcts::scenario::ScenarioId* temp = scenario_;
  scenario_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioId* CommPulseAnalysisTaskRequest::_internal_mutable_scenario() {
  
  if (scenario_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioId>(GetArena());
    scenario_ = p;
  }
  return scenario_;
}
inline ::zb::dcts::scenario::ScenarioId* CommPulseAnalysisTaskRequest::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.scenario)
  return _internal_mutable_scenario();
}
inline void CommPulseAnalysisTaskRequest::set_allocated_scenario(::zb::dcts::scenario::ScenarioId* scenario) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario)->GetArena();
    if (message_arena != submessage_arena) {
      scenario = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    
  } else {
    
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.scenario)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcqSource source_param = 2;
inline bool CommPulseAnalysisTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommPulseAnalysisTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommPulseAnalysisTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource& CommPulseAnalysisTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.source_param)
  return _internal_source_param();
}
inline void CommPulseAnalysisTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommPulseAnalysisTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommPulseAnalysisTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommPulseAnalysisTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* CommPulseAnalysisTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommPulseAnalysisTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commIqData::CommIQAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commIqData.CommIQAcquireParam acq_param = 3;
inline bool CommPulseAnalysisTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommPulseAnalysisTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommPulseAnalysisTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam*>(
      &::zb::dcts::scenario::kh::commIqData::_CommIQAcquireParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam& CommPulseAnalysisTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommPulseAnalysisTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommPulseAnalysisTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommPulseAnalysisTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommPulseAnalysisTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* CommPulseAnalysisTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommPulseAnalysisTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commIqData::CommIQAcquireParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.acq_param)
}

// .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 4;
inline bool CommPulseAnalysisTaskRequest::_internal_has_analysis_param() const {
  return this != internal_default_instance() && analysis_param_ != nullptr;
}
inline bool CommPulseAnalysisTaskRequest::has_analysis_param() const {
  return _internal_has_analysis_param();
}
inline void CommPulseAnalysisTaskRequest::clear_analysis_param() {
  if (GetArena() == nullptr && analysis_param_ != nullptr) {
    delete analysis_param_;
  }
  analysis_param_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& CommPulseAnalysisTaskRequest::_internal_analysis_param() const {
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* p = analysis_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam*>(
      &::zb::dcts::scenario::kh::pulseAnalysis::_AnalysisParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& CommPulseAnalysisTaskRequest::analysis_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.analysis_param)
  return _internal_analysis_param();
}
inline void CommPulseAnalysisTaskRequest::unsafe_arena_set_allocated_analysis_param(
    ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_param_);
  }
  analysis_param_ = analysis_param;
  if (analysis_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.analysis_param)
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* CommPulseAnalysisTaskRequest::release_analysis_param() {
  auto temp = unsafe_arena_release_analysis_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* CommPulseAnalysisTaskRequest::unsafe_arena_release_analysis_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.analysis_param)
  
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* temp = analysis_param_;
  analysis_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* CommPulseAnalysisTaskRequest::_internal_mutable_analysis_param() {
  
  if (analysis_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam>(GetArena());
    analysis_param_ = p;
  }
  return analysis_param_;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* CommPulseAnalysisTaskRequest::mutable_analysis_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.analysis_param)
  return _internal_mutable_analysis_param();
}
inline void CommPulseAnalysisTaskRequest::set_allocated_analysis_param(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete analysis_param_;
  }
  if (analysis_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(analysis_param);
    if (message_arena != submessage_arena) {
      analysis_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_param, submessage_arena);
    }
    
  } else {
    
  }
  analysis_param_ = analysis_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseAnalysisTaskRequest.analysis_param)
}

// -------------------------------------------------------------------

// ChangePulseRequest

// .zb.dcts.scenario.TaskId task_id = 1;
inline bool ChangePulseRequest::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool ChangePulseRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline const ::zb::dcts::scenario::TaskId& ChangePulseRequest::_internal_task_id() const {
  const ::zb::dcts::scenario::TaskId* p = task_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::TaskId*>(
      &::zb::dcts::scenario::_TaskId_default_instance_);
}
inline const ::zb::dcts::scenario::TaskId& ChangePulseRequest::task_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.task_id)
  return _internal_task_id();
}
inline void ChangePulseRequest::unsafe_arena_set_allocated_task_id(
    ::zb::dcts::scenario::TaskId* task_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.task_id)
}
inline ::zb::dcts::scenario::TaskId* ChangePulseRequest::release_task_id() {
  auto temp = unsafe_arena_release_task_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::TaskId* ChangePulseRequest::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.task_id)
  
  ::zb::dcts::scenario::TaskId* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::TaskId* ChangePulseRequest::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::TaskId>(GetArena());
    task_id_ = p;
  }
  return task_id_;
}
inline ::zb::dcts::scenario::TaskId* ChangePulseRequest::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.task_id)
  return _internal_mutable_task_id();
}
inline void ChangePulseRequest::set_allocated_task_id(::zb::dcts::scenario::TaskId* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id)->GetArena();
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.task_id)
}

// .zb.dcts.scenario.kh.pulseAnalysis.ParamIndex param_index = 2;
inline void ChangePulseRequest::clear_param_index() {
  param_index_ = 0;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex ChangePulseRequest::_internal_param_index() const {
  return static_cast< ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex >(param_index_);
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex ChangePulseRequest::param_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.param_index)
  return _internal_param_index();
}
inline void ChangePulseRequest::_internal_set_param_index(::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex value) {
  
  param_index_ = value;
}
inline void ChangePulseRequest::set_param_index(::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex value) {
  _internal_set_param_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.param_index)
}

// .zb.dcts.scenario.kh.pulseAnalysis.AnalysisParam analysis_param = 3;
inline bool ChangePulseRequest::_internal_has_analysis_param() const {
  return this != internal_default_instance() && analysis_param_ != nullptr;
}
inline bool ChangePulseRequest::has_analysis_param() const {
  return _internal_has_analysis_param();
}
inline void ChangePulseRequest::clear_analysis_param() {
  if (GetArena() == nullptr && analysis_param_ != nullptr) {
    delete analysis_param_;
  }
  analysis_param_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& ChangePulseRequest::_internal_analysis_param() const {
  const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* p = analysis_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam*>(
      &::zb::dcts::scenario::kh::pulseAnalysis::_AnalysisParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam& ChangePulseRequest::analysis_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.analysis_param)
  return _internal_analysis_param();
}
inline void ChangePulseRequest::unsafe_arena_set_allocated_analysis_param(
    ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(analysis_param_);
  }
  analysis_param_ = analysis_param;
  if (analysis_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.analysis_param)
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* ChangePulseRequest::release_analysis_param() {
  auto temp = unsafe_arena_release_analysis_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* ChangePulseRequest::unsafe_arena_release_analysis_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.analysis_param)
  
  ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* temp = analysis_param_;
  analysis_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* ChangePulseRequest::_internal_mutable_analysis_param() {
  
  if (analysis_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam>(GetArena());
    analysis_param_ = p;
  }
  return analysis_param_;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* ChangePulseRequest::mutable_analysis_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.analysis_param)
  return _internal_mutable_analysis_param();
}
inline void ChangePulseRequest::set_allocated_analysis_param(::zb::dcts::scenario::kh::pulseAnalysis::AnalysisParam* analysis_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete analysis_param_;
  }
  if (analysis_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(analysis_param);
    if (message_arena != submessage_arena) {
      analysis_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analysis_param, submessage_arena);
    }
    
  } else {
    
  }
  analysis_param_ = analysis_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.ChangePulseRequest.analysis_param)
}

// -------------------------------------------------------------------

// PulseParamsAnalysisResult

// float peakPower = 1;
inline void PulseParamsAnalysisResult::clear_peakpower() {
  peakpower_ = 0;
}
inline float PulseParamsAnalysisResult::_internal_peakpower() const {
  return peakpower_;
}
inline float PulseParamsAnalysisResult::peakpower() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.peakPower)
  return _internal_peakpower();
}
inline void PulseParamsAnalysisResult::_internal_set_peakpower(float value) {
  
  peakpower_ = value;
}
inline void PulseParamsAnalysisResult::set_peakpower(float value) {
  _internal_set_peakpower(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.peakPower)
}

// float minPower = 2;
inline void PulseParamsAnalysisResult::clear_minpower() {
  minpower_ = 0;
}
inline float PulseParamsAnalysisResult::_internal_minpower() const {
  return minpower_;
}
inline float PulseParamsAnalysisResult::minpower() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.minPower)
  return _internal_minpower();
}
inline void PulseParamsAnalysisResult::_internal_set_minpower(float value) {
  
  minpower_ = value;
}
inline void PulseParamsAnalysisResult::set_minpower(float value) {
  _internal_set_minpower(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.minPower)
}

// float avgOnPower = 3;
inline void PulseParamsAnalysisResult::clear_avgonpower() {
  avgonpower_ = 0;
}
inline float PulseParamsAnalysisResult::_internal_avgonpower() const {
  return avgonpower_;
}
inline float PulseParamsAnalysisResult::avgonpower() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.avgOnPower)
  return _internal_avgonpower();
}
inline void PulseParamsAnalysisResult::_internal_set_avgonpower(float value) {
  
  avgonpower_ = value;
}
inline void PulseParamsAnalysisResult::set_avgonpower(float value) {
  _internal_set_avgonpower(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.avgOnPower)
}

// double riseTime = 4;
inline void PulseParamsAnalysisResult::clear_risetime() {
  risetime_ = 0;
}
inline double PulseParamsAnalysisResult::_internal_risetime() const {
  return risetime_;
}
inline double PulseParamsAnalysisResult::risetime() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.riseTime)
  return _internal_risetime();
}
inline void PulseParamsAnalysisResult::_internal_set_risetime(double value) {
  
  risetime_ = value;
}
inline void PulseParamsAnalysisResult::set_risetime(double value) {
  _internal_set_risetime(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.riseTime)
}

// double fallTime = 5;
inline void PulseParamsAnalysisResult::clear_falltime() {
  falltime_ = 0;
}
inline double PulseParamsAnalysisResult::_internal_falltime() const {
  return falltime_;
}
inline double PulseParamsAnalysisResult::falltime() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.fallTime)
  return _internal_falltime();
}
inline void PulseParamsAnalysisResult::_internal_set_falltime(double value) {
  
  falltime_ = value;
}
inline void PulseParamsAnalysisResult::set_falltime(double value) {
  _internal_set_falltime(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.fallTime)
}

// double PW = 6;
inline void PulseParamsAnalysisResult::clear_pw() {
  pw_ = 0;
}
inline double PulseParamsAnalysisResult::_internal_pw() const {
  return pw_;
}
inline double PulseParamsAnalysisResult::pw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.PW)
  return _internal_pw();
}
inline void PulseParamsAnalysisResult::_internal_set_pw(double value) {
  
  pw_ = value;
}
inline void PulseParamsAnalysisResult::set_pw(double value) {
  _internal_set_pw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.PW)
}

// double PRI = 7;
inline void PulseParamsAnalysisResult::clear_pri() {
  pri_ = 0;
}
inline double PulseParamsAnalysisResult::_internal_pri() const {
  return pri_;
}
inline double PulseParamsAnalysisResult::pri() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.PRI)
  return _internal_pri();
}
inline void PulseParamsAnalysisResult::_internal_set_pri(double value) {
  
  pri_ = value;
}
inline void PulseParamsAnalysisResult::set_pri(double value) {
  _internal_set_pri(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.PRI)
}

// uint64 TOA = 8;
inline void PulseParamsAnalysisResult::clear_toa() {
  toa_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PulseParamsAnalysisResult::_internal_toa() const {
  return toa_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PulseParamsAnalysisResult::toa() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.TOA)
  return _internal_toa();
}
inline void PulseParamsAnalysisResult::_internal_set_toa(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  toa_ = value;
}
inline void PulseParamsAnalysisResult::set_toa(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_toa(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult.TOA)
}

// -------------------------------------------------------------------

// PulseTransientAnalysisData

// repeated float amplitude = 1;
inline int PulseTransientAnalysisData::_internal_amplitude_size() const {
  return amplitude_.size();
}
inline int PulseTransientAnalysisData::amplitude_size() const {
  return _internal_amplitude_size();
}
inline void PulseTransientAnalysisData::clear_amplitude() {
  amplitude_.Clear();
}
inline float PulseTransientAnalysisData::_internal_amplitude(int index) const {
  return amplitude_.Get(index);
}
inline float PulseTransientAnalysisData::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.amplitude)
  return _internal_amplitude(index);
}
inline void PulseTransientAnalysisData::set_amplitude(int index, float value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.amplitude)
}
inline void PulseTransientAnalysisData::_internal_add_amplitude(float value) {
  amplitude_.Add(value);
}
inline void PulseTransientAnalysisData::add_amplitude(float value) {
  _internal_add_amplitude(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.amplitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::_internal_amplitude() const {
  return amplitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::amplitude() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.amplitude)
  return _internal_amplitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::_internal_mutable_amplitude() {
  return &amplitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.amplitude)
  return _internal_mutable_amplitude();
}

// repeated float phase = 2;
inline int PulseTransientAnalysisData::_internal_phase_size() const {
  return phase_.size();
}
inline int PulseTransientAnalysisData::phase_size() const {
  return _internal_phase_size();
}
inline void PulseTransientAnalysisData::clear_phase() {
  phase_.Clear();
}
inline float PulseTransientAnalysisData::_internal_phase(int index) const {
  return phase_.Get(index);
}
inline float PulseTransientAnalysisData::phase(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.phase)
  return _internal_phase(index);
}
inline void PulseTransientAnalysisData::set_phase(int index, float value) {
  phase_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.phase)
}
inline void PulseTransientAnalysisData::_internal_add_phase(float value) {
  phase_.Add(value);
}
inline void PulseTransientAnalysisData::add_phase(float value) {
  _internal_add_phase(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.phase)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::_internal_phase() const {
  return phase_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::phase() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.phase)
  return _internal_phase();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::_internal_mutable_phase() {
  return &phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::mutable_phase() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.phase)
  return _internal_mutable_phase();
}

// repeated float frequency = 3;
inline int PulseTransientAnalysisData::_internal_frequency_size() const {
  return frequency_.size();
}
inline int PulseTransientAnalysisData::frequency_size() const {
  return _internal_frequency_size();
}
inline void PulseTransientAnalysisData::clear_frequency() {
  frequency_.Clear();
}
inline float PulseTransientAnalysisData::_internal_frequency(int index) const {
  return frequency_.Get(index);
}
inline float PulseTransientAnalysisData::frequency(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.frequency)
  return _internal_frequency(index);
}
inline void PulseTransientAnalysisData::set_frequency(int index, float value) {
  frequency_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.frequency)
}
inline void PulseTransientAnalysisData::_internal_add_frequency(float value) {
  frequency_.Add(value);
}
inline void PulseTransientAnalysisData::add_frequency(float value) {
  _internal_add_frequency(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.frequency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::_internal_frequency() const {
  return frequency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PulseTransientAnalysisData::frequency() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.frequency)
  return _internal_frequency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::_internal_mutable_frequency() {
  return &frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PulseTransientAnalysisData::mutable_frequency() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.frequency)
  return _internal_mutable_frequency();
}

// repeated .zb.dcts.scenario.kh.pulseAnalysis.PulseParamsAnalysisResult paramsResult = 4;
inline int PulseTransientAnalysisData::_internal_paramsresult_size() const {
  return paramsresult_.size();
}
inline int PulseTransientAnalysisData::paramsresult_size() const {
  return _internal_paramsresult_size();
}
inline void PulseTransientAnalysisData::clear_paramsresult() {
  paramsresult_.Clear();
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* PulseTransientAnalysisData::mutable_paramsresult(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.paramsResult)
  return paramsresult_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >*
PulseTransientAnalysisData::mutable_paramsresult() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.paramsResult)
  return &paramsresult_;
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult& PulseTransientAnalysisData::_internal_paramsresult(int index) const {
  return paramsresult_.Get(index);
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult& PulseTransientAnalysisData::paramsresult(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.paramsResult)
  return _internal_paramsresult(index);
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* PulseTransientAnalysisData::_internal_add_paramsresult() {
  return paramsresult_.Add();
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult* PulseTransientAnalysisData::add_paramsresult() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.paramsResult)
  return _internal_add_paramsresult();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::scenario::kh::pulseAnalysis::PulseParamsAnalysisResult >&
PulseTransientAnalysisData::paramsresult() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData.paramsResult)
  return paramsresult_;
}

// -------------------------------------------------------------------

// CommPulseResult_Header

// .zb.dcts.source.SourceId result_from = 1;
inline bool CommPulseResult_Header::_internal_has_result_from() const {
  return this != internal_default_instance() && result_from_ != nullptr;
}
inline bool CommPulseResult_Header::has_result_from() const {
  return _internal_has_result_from();
}
inline const ::zb::dcts::source::SourceId& CommPulseResult_Header::_internal_result_from() const {
  const ::zb::dcts::source::SourceId* p = result_from_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& CommPulseResult_Header::result_from() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.result_from)
  return _internal_result_from();
}
inline void CommPulseResult_Header::unsafe_arena_set_allocated_result_from(
    ::zb::dcts::source::SourceId* result_from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  result_from_ = result_from;
  if (result_from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.result_from)
}
inline ::zb::dcts::source::SourceId* CommPulseResult_Header::release_result_from() {
  auto temp = unsafe_arena_release_result_from();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* CommPulseResult_Header::unsafe_arena_release_result_from() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.result_from)
  
  ::zb::dcts::source::SourceId* temp = result_from_;
  result_from_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* CommPulseResult_Header::_internal_mutable_result_from() {
  
  if (result_from_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    result_from_ = p;
  }
  return result_from_;
}
inline ::zb::dcts::source::SourceId* CommPulseResult_Header::mutable_result_from() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.result_from)
  return _internal_mutable_result_from();
}
inline void CommPulseResult_Header::set_allocated_result_from(::zb::dcts::source::SourceId* result_from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from_);
  }
  if (result_from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_from)->GetArena();
    if (message_arena != submessage_arena) {
      result_from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_from, submessage_arena);
    }
    
  } else {
    
  }
  result_from_ = result_from;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.result_from)
}

// uint32 sequence_number = 2;
inline void CommPulseResult_Header::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommPulseResult_Header::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommPulseResult_Header::sequence_number() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.sequence_number)
  return _internal_sequence_number();
}
inline void CommPulseResult_Header::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void CommPulseResult_Header::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.sequence_number)
}

// .zb.dcts.TimeSpan time_span = 3;
inline bool CommPulseResult_Header::_internal_has_time_span() const {
  return this != internal_default_instance() && time_span_ != nullptr;
}
inline bool CommPulseResult_Header::has_time_span() const {
  return _internal_has_time_span();
}
inline const ::zb::dcts::TimeSpan& CommPulseResult_Header::_internal_time_span() const {
  const ::zb::dcts::TimeSpan* p = time_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::TimeSpan*>(
      &::zb::dcts::_TimeSpan_default_instance_);
}
inline const ::zb::dcts::TimeSpan& CommPulseResult_Header::time_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.time_span)
  return _internal_time_span();
}
inline void CommPulseResult_Header::unsafe_arena_set_allocated_time_span(
    ::zb::dcts::TimeSpan* time_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  time_span_ = time_span;
  if (time_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.time_span)
}
inline ::zb::dcts::TimeSpan* CommPulseResult_Header::release_time_span() {
  auto temp = unsafe_arena_release_time_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::TimeSpan* CommPulseResult_Header::unsafe_arena_release_time_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.time_span)
  
  ::zb::dcts::TimeSpan* temp = time_span_;
  time_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::TimeSpan* CommPulseResult_Header::_internal_mutable_time_span() {
  
  if (time_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::TimeSpan>(GetArena());
    time_span_ = p;
  }
  return time_span_;
}
inline ::zb::dcts::TimeSpan* CommPulseResult_Header::mutable_time_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.time_span)
  return _internal_mutable_time_span();
}
inline void CommPulseResult_Header::set_allocated_time_span(::zb::dcts::TimeSpan* time_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span_);
  }
  if (time_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_span)->GetArena();
    if (message_arena != submessage_arena) {
      time_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_span, submessage_arena);
    }
    
  } else {
    
  }
  time_span_ = time_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.time_span)
}

// .zb.dcts.Position device_position = 4;
inline bool CommPulseResult_Header::_internal_has_device_position() const {
  return this != internal_default_instance() && device_position_ != nullptr;
}
inline bool CommPulseResult_Header::has_device_position() const {
  return _internal_has_device_position();
}
inline const ::zb::dcts::Position& CommPulseResult_Header::_internal_device_position() const {
  const ::zb::dcts::Position* p = device_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::Position*>(
      &::zb::dcts::_Position_default_instance_);
}
inline const ::zb::dcts::Position& CommPulseResult_Header::device_position() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.device_position)
  return _internal_device_position();
}
inline void CommPulseResult_Header::unsafe_arena_set_allocated_device_position(
    ::zb::dcts::Position* device_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  device_position_ = device_position;
  if (device_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.device_position)
}
inline ::zb::dcts::Position* CommPulseResult_Header::release_device_position() {
  auto temp = unsafe_arena_release_device_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::Position* CommPulseResult_Header::unsafe_arena_release_device_position() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.device_position)
  
  ::zb::dcts::Position* temp = device_position_;
  device_position_ = nullptr;
  return temp;
}
inline ::zb::dcts::Position* CommPulseResult_Header::_internal_mutable_device_position() {
  
  if (device_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::Position>(GetArena());
    device_position_ = p;
  }
  return device_position_;
}
inline ::zb::dcts::Position* CommPulseResult_Header::mutable_device_position() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.device_position)
  return _internal_mutable_device_position();
}
inline void CommPulseResult_Header::set_allocated_device_position(::zb::dcts::Position* device_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position_);
  }
  if (device_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_position)->GetArena();
    if (message_arena != submessage_arena) {
      device_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_position, submessage_arena);
    }
    
  } else {
    
  }
  device_position_ = device_position;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header.device_position)
}

// -------------------------------------------------------------------

// CommPulseResult

// .zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.Header header = 1;
inline bool CommPulseResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommPulseResult::has_header() const {
  return _internal_has_header();
}
inline void CommPulseResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header& CommPulseResult::_internal_header() const {
  const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header*>(
      &::zb::dcts::scenario::kh::pulseAnalysis::_CommPulseResult_Header_default_instance_);
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header& CommPulseResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.header)
  return _internal_header();
}
inline void CommPulseResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.header)
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* CommPulseResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* CommPulseResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.header)
  
  ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* CommPulseResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* CommPulseResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.header)
  return _internal_mutable_header();
}
inline void CommPulseResult::set_allocated_header(::zb::dcts::scenario::kh::pulseAnalysis::CommPulseResult_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.header)
}

// repeated float raw_trace = 2;
inline int CommPulseResult::_internal_raw_trace_size() const {
  return raw_trace_.size();
}
inline int CommPulseResult::raw_trace_size() const {
  return _internal_raw_trace_size();
}
inline void CommPulseResult::clear_raw_trace() {
  raw_trace_.Clear();
}
inline float CommPulseResult::_internal_raw_trace(int index) const {
  return raw_trace_.Get(index);
}
inline float CommPulseResult::raw_trace(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.raw_trace)
  return _internal_raw_trace(index);
}
inline void CommPulseResult::set_raw_trace(int index, float value) {
  raw_trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.raw_trace)
}
inline void CommPulseResult::_internal_add_raw_trace(float value) {
  raw_trace_.Add(value);
}
inline void CommPulseResult::add_raw_trace(float value) {
  _internal_add_raw_trace(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.raw_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommPulseResult::_internal_raw_trace() const {
  return raw_trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommPulseResult::raw_trace() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.raw_trace)
  return _internal_raw_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommPulseResult::_internal_mutable_raw_trace() {
  return &raw_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommPulseResult::mutable_raw_trace() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.raw_trace)
  return _internal_mutable_raw_trace();
}

// .zb.dcts.scenario.kh.pulseAnalysis.PulseTransientAnalysisData transient_data = 3;
inline bool CommPulseResult::_internal_has_transient_data() const {
  return this != internal_default_instance() && transient_data_ != nullptr;
}
inline bool CommPulseResult::has_transient_data() const {
  return _internal_has_transient_data();
}
inline void CommPulseResult::clear_transient_data() {
  if (GetArena() == nullptr && transient_data_ != nullptr) {
    delete transient_data_;
  }
  transient_data_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData& CommPulseResult::_internal_transient_data() const {
  const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* p = transient_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData*>(
      &::zb::dcts::scenario::kh::pulseAnalysis::_PulseTransientAnalysisData_default_instance_);
}
inline const ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData& CommPulseResult::transient_data() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.transient_data)
  return _internal_transient_data();
}
inline void CommPulseResult::unsafe_arena_set_allocated_transient_data(
    ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* transient_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transient_data_);
  }
  transient_data_ = transient_data;
  if (transient_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.transient_data)
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* CommPulseResult::release_transient_data() {
  auto temp = unsafe_arena_release_transient_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* CommPulseResult::unsafe_arena_release_transient_data() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.transient_data)
  
  ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* temp = transient_data_;
  transient_data_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* CommPulseResult::_internal_mutable_transient_data() {
  
  if (transient_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData>(GetArena());
    transient_data_ = p;
  }
  return transient_data_;
}
inline ::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* CommPulseResult::mutable_transient_data() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.transient_data)
  return _internal_mutable_transient_data();
}
inline void CommPulseResult::set_allocated_transient_data(::zb::dcts::scenario::kh::pulseAnalysis::PulseTransientAnalysisData* transient_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transient_data_;
  }
  if (transient_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transient_data);
    if (message_arena != submessage_arena) {
      transient_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transient_data, submessage_arena);
    }
    
  } else {
    
  }
  transient_data_ = transient_data;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.pulseAnalysis.CommPulseResult.transient_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pulseAnalysis
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode>() {
  return ::zb::dcts::scenario::kh::pulseAnalysis::LevelMode_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex>() {
  return ::zb::dcts::scenario::kh::pulseAnalysis::ParamIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhPulseAnalysis_2eproto
