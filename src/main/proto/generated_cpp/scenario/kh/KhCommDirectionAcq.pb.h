// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommDirectionAcq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionAcq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionAcq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "source/source.pb.h"
#include "source/kh/KhContext.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/spectrum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommDirectionAcq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {
class CommDirectionAcqParam;
class CommDirectionAcqParamDefaultTypeInternal;
extern CommDirectionAcqParamDefaultTypeInternal _CommDirectionAcqParam_default_instance_;
class CommDirectionAcqSource;
class CommDirectionAcqSourceDefaultTypeInternal;
extern CommDirectionAcqSourceDefaultTypeInternal _CommDirectionAcqSource_default_instance_;
class CommDirectionAcqSource_ParamsEntry_DoNotUse;
class CommDirectionAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal;
extern CommDirectionAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal _CommDirectionAcqSource_ParamsEntry_DoNotUse_default_instance_;
class CommDirectionResult;
class CommDirectionResultDefaultTypeInternal;
extern CommDirectionResultDefaultTypeInternal _CommDirectionResult_default_instance_;
class DirectionChangeRequest;
class DirectionChangeRequestDefaultTypeInternal;
extern DirectionChangeRequestDefaultTypeInternal _DirectionChangeRequest_default_instance_;
}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam>(Arena*);
template<> ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource>(Arena*);
template<> ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqSource_ParamsEntry_DoNotUse>(Arena*);
template<> ::zb::dcts::scenario::kh::commDirection::CommDirectionResult* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionResult>(Arena*);
template<> ::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::DirectionChangeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commDirection {

enum DirectionMode : int {
  SINGLE = 0,
  MULTIPLE = 1,
  SCAN = 2,
  SEARCH = 3,
  DirectionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DirectionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DirectionMode_IsValid(int value);
constexpr DirectionMode DirectionMode_MIN = SINGLE;
constexpr DirectionMode DirectionMode_MAX = SEARCH;
constexpr int DirectionMode_ARRAYSIZE = DirectionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirectionMode_descriptor();
template<typename T>
inline const std::string& DirectionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DirectionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DirectionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DirectionMode_descriptor(), enum_t_value);
}
inline bool DirectionMode_Parse(
    const std::string& name, DirectionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DirectionMode>(
    DirectionMode_descriptor(), name, value);
}
enum DFThresholdMode : int {
  AUTO = 0,
  MANUAL = 1,
  NORMAL = 2,
  DFThresholdMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DFThresholdMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DFThresholdMode_IsValid(int value);
constexpr DFThresholdMode DFThresholdMode_MIN = AUTO;
constexpr DFThresholdMode DFThresholdMode_MAX = NORMAL;
constexpr int DFThresholdMode_ARRAYSIZE = DFThresholdMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFThresholdMode_descriptor();
template<typename T>
inline const std::string& DFThresholdMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DFThresholdMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DFThresholdMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DFThresholdMode_descriptor(), enum_t_value);
}
inline bool DFThresholdMode_Parse(
    const std::string& name, DFThresholdMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DFThresholdMode>(
    DFThresholdMode_descriptor(), name, value);
}
enum ParamIndex : int {
  THRESHOLD_VALUE = 0,
  THRESHOLD_MODE = 1,
  AVERAGE_TIME = 2,
  CENTER_FREQ = 3,
  ANTENNA_MODE = 4,
  CHANNEL_MODE = 5,
  GIAN_MODE = 6,
  ATT_GAIN = 7,
  GAIN_PARAM = 8,
  ParamIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParamIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParamIndex_IsValid(int value);
constexpr ParamIndex ParamIndex_MIN = THRESHOLD_VALUE;
constexpr ParamIndex ParamIndex_MAX = GAIN_PARAM;
constexpr int ParamIndex_ARRAYSIZE = ParamIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor();
template<typename T>
inline const std::string& ParamIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamIndex_descriptor(), enum_t_value);
}
inline bool ParamIndex_Parse(
    const std::string& name, ParamIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamIndex>(
    ParamIndex_descriptor(), name, value);
}
// ===================================================================

class CommDirectionAcqSource_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommDirectionAcqSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommDirectionAcqSource_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  CommDirectionAcqSource_ParamsEntry_DoNotUse();
  CommDirectionAcqSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommDirectionAcqSource_ParamsEntry_DoNotUse& other);
  static const CommDirectionAcqSource_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommDirectionAcqSource_ParamsEntry_DoNotUse*>(&_CommDirectionAcqSource_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class CommDirectionAcqSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource) */ {
 public:
  inline CommDirectionAcqSource() : CommDirectionAcqSource(nullptr) {};
  virtual ~CommDirectionAcqSource();

  CommDirectionAcqSource(const CommDirectionAcqSource& from);
  CommDirectionAcqSource(CommDirectionAcqSource&& from) noexcept
    : CommDirectionAcqSource() {
    *this = ::std::move(from);
  }

  inline CommDirectionAcqSource& operator=(const CommDirectionAcqSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDirectionAcqSource& operator=(CommDirectionAcqSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDirectionAcqSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDirectionAcqSource* internal_default_instance() {
    return reinterpret_cast<const CommDirectionAcqSource*>(
               &_CommDirectionAcqSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommDirectionAcqSource& a, CommDirectionAcqSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDirectionAcqSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDirectionAcqSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDirectionAcqSource* New() const final {
    return CreateMaybeMessage<CommDirectionAcqSource>(nullptr);
  }

  CommDirectionAcqSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDirectionAcqSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDirectionAcqSource& from);
  void MergeFrom(const CommDirectionAcqSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDirectionAcqSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource";
  }
  protected:
  explicit CommDirectionAcqSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // map<string, string> params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // .zb.dcts.source.SourceId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::zb::dcts::source::SourceId& id() const;
  ::zb::dcts::source::SourceId* release_id();
  ::zb::dcts::source::SourceId* mutable_id();
  void set_allocated_id(::zb::dcts::source::SourceId* id);
  private:
  const ::zb::dcts::source::SourceId& _internal_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::zb::dcts::source::SourceId* id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommDirectionAcqSource_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  ::zb::dcts::source::SourceId* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
};
// -------------------------------------------------------------------

class CommDirectionAcqParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam) */ {
 public:
  inline CommDirectionAcqParam() : CommDirectionAcqParam(nullptr) {};
  virtual ~CommDirectionAcqParam();

  CommDirectionAcqParam(const CommDirectionAcqParam& from);
  CommDirectionAcqParam(CommDirectionAcqParam&& from) noexcept
    : CommDirectionAcqParam() {
    *this = ::std::move(from);
  }

  inline CommDirectionAcqParam& operator=(const CommDirectionAcqParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDirectionAcqParam& operator=(CommDirectionAcqParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDirectionAcqParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDirectionAcqParam* internal_default_instance() {
    return reinterpret_cast<const CommDirectionAcqParam*>(
               &_CommDirectionAcqParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommDirectionAcqParam& a, CommDirectionAcqParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDirectionAcqParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDirectionAcqParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDirectionAcqParam* New() const final {
    return CreateMaybeMessage<CommDirectionAcqParam>(nullptr);
  }

  CommDirectionAcqParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDirectionAcqParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDirectionAcqParam& from);
  void MergeFrom(const CommDirectionAcqParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDirectionAcqParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam";
  }
  protected:
  explicit CommDirectionAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqSpanFieldNumber = 2,
    kGainParamFieldNumber = 11,
    kWinParamsFieldNumber = 15,
    kModeFieldNumber = 1,
    kDetectModeFieldNumber = 6,
    kRbwFieldNumber = 4,
    kDfBandwidthFieldNumber = 5,
    kAttenuationGainFieldNumber = 8,
    kChannelModeFieldNumber = 7,
    kAntennaModeFieldNumber = 9,
    kGcModeFieldNumber = 10,
    kThresholdModeFieldNumber = 12,
    kThresholdValueFieldNumber = 13,
    kOutputPowFieldNumber = 14,
    kRfLimitFieldNumber = 17,
    kAverageTimeFieldNumber = 16,
    kResidenceTimeFieldNumber = 19,
    kSearchStepFieldNumber = 18,
    kSampleIntervalFieldNumber = 20,
    kResultIntervalFieldNumber = 21,
    kExpectedPointsFieldNumber = 22,
    kAntennaFieldNumber = 23,
    kDfTimesFieldNumber = 24,
  };
  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
  bool has_freq_span() const;
  private:
  bool _internal_has_freq_span() const;
  public:
  void clear_freq_span();
  const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* release_freq_span();
  ::zb::dcts::scenario::spectrum::FrequencySpan* mutable_freq_span();
  void set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencySpan& _internal_freq_span() const;
  ::zb::dcts::scenario::spectrum::FrequencySpan* _internal_mutable_freq_span();
  public:
  void unsafe_arena_set_allocated_freq_span(
      ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span);
  ::zb::dcts::scenario::spectrum::FrequencySpan* unsafe_arena_release_freq_span();

  // .zb.dcts.source.kh.GainControlParam gain_param = 11;
  bool has_gain_param() const;
  private:
  bool _internal_has_gain_param() const;
  public:
  void clear_gain_param();
  const ::zb::dcts::source::kh::GainControlParam& gain_param() const;
  ::zb::dcts::source::kh::GainControlParam* release_gain_param();
  ::zb::dcts::source::kh::GainControlParam* mutable_gain_param();
  void set_allocated_gain_param(::zb::dcts::source::kh::GainControlParam* gain_param);
  private:
  const ::zb::dcts::source::kh::GainControlParam& _internal_gain_param() const;
  ::zb::dcts::source::kh::GainControlParam* _internal_mutable_gain_param();
  public:
  void unsafe_arena_set_allocated_gain_param(
      ::zb::dcts::source::kh::GainControlParam* gain_param);
  ::zb::dcts::source::kh::GainControlParam* unsafe_arena_release_gain_param();

  // .zb.dcts.source.kh.WindowParams win_params = 15;
  bool has_win_params() const;
  private:
  bool _internal_has_win_params() const;
  public:
  void clear_win_params();
  const ::zb::dcts::source::kh::WindowParams& win_params() const;
  ::zb::dcts::source::kh::WindowParams* release_win_params();
  ::zb::dcts::source::kh::WindowParams* mutable_win_params();
  void set_allocated_win_params(::zb::dcts::source::kh::WindowParams* win_params);
  private:
  const ::zb::dcts::source::kh::WindowParams& _internal_win_params() const;
  ::zb::dcts::source::kh::WindowParams* _internal_mutable_win_params();
  public:
  void unsafe_arena_set_allocated_win_params(
      ::zb::dcts::source::kh::WindowParams* win_params);
  ::zb::dcts::source::kh::WindowParams* unsafe_arena_release_win_params();

  // .zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;
  void clear_mode();
  ::zb::dcts::scenario::kh::commDirection::DirectionMode mode() const;
  void set_mode(::zb::dcts::scenario::kh::commDirection::DirectionMode value);
  private:
  ::zb::dcts::scenario::kh::commDirection::DirectionMode _internal_mode() const;
  void _internal_set_mode(::zb::dcts::scenario::kh::commDirection::DirectionMode value);
  public:

  // .zb.dcts.source.kh.DetectMode detect_mode = 6;
  void clear_detect_mode();
  ::zb::dcts::source::kh::DetectMode detect_mode() const;
  void set_detect_mode(::zb::dcts::source::kh::DetectMode value);
  private:
  ::zb::dcts::source::kh::DetectMode _internal_detect_mode() const;
  void _internal_set_detect_mode(::zb::dcts::source::kh::DetectMode value);
  public:

  // double rbw = 4;
  void clear_rbw();
  double rbw() const;
  void set_rbw(double value);
  private:
  double _internal_rbw() const;
  void _internal_set_rbw(double value);
  public:

  // double df_bandwidth = 5;
  void clear_df_bandwidth();
  double df_bandwidth() const;
  void set_df_bandwidth(double value);
  private:
  double _internal_df_bandwidth() const;
  void _internal_set_df_bandwidth(double value);
  public:

  // double attenuation_gain = 8;
  void clear_attenuation_gain();
  double attenuation_gain() const;
  void set_attenuation_gain(double value);
  private:
  double _internal_attenuation_gain() const;
  void _internal_set_attenuation_gain(double value);
  public:

  // .zb.dcts.source.kh.ChannelMode channel_mode = 7;
  void clear_channel_mode();
  ::zb::dcts::source::kh::ChannelMode channel_mode() const;
  void set_channel_mode(::zb::dcts::source::kh::ChannelMode value);
  private:
  ::zb::dcts::source::kh::ChannelMode _internal_channel_mode() const;
  void _internal_set_channel_mode(::zb::dcts::source::kh::ChannelMode value);
  public:

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;
  void clear_antenna_mode();
  ::zb::dcts::source::kh::AntennaControlMode antenna_mode() const;
  void set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value);
  private:
  ::zb::dcts::source::kh::AntennaControlMode _internal_antenna_mode() const;
  void _internal_set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value);
  public:

  // .zb.dcts.source.kh.GainControlMode gc_mode = 10;
  void clear_gc_mode();
  ::zb::dcts::source::kh::GainControlMode gc_mode() const;
  void set_gc_mode(::zb::dcts::source::kh::GainControlMode value);
  private:
  ::zb::dcts::source::kh::GainControlMode _internal_gc_mode() const;
  void _internal_set_gc_mode(::zb::dcts::source::kh::GainControlMode value);
  public:

  // .zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;
  void clear_threshold_mode();
  ::zb::dcts::scenario::kh::commDirection::DFThresholdMode threshold_mode() const;
  void set_threshold_mode(::zb::dcts::scenario::kh::commDirection::DFThresholdMode value);
  private:
  ::zb::dcts::scenario::kh::commDirection::DFThresholdMode _internal_threshold_mode() const;
  void _internal_set_threshold_mode(::zb::dcts::scenario::kh::commDirection::DFThresholdMode value);
  public:

  // int32 threshold_value = 13;
  void clear_threshold_value();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_value() const;
  void set_threshold_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold_value() const;
  void _internal_set_threshold_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 output_pow = 14;
  void clear_output_pow();
  ::PROTOBUF_NAMESPACE_ID::int32 output_pow() const;
  void set_output_pow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_pow() const;
  void _internal_set_output_pow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double rf_limit = 17;
  void clear_rf_limit();
  double rf_limit() const;
  void set_rf_limit(double value);
  private:
  double _internal_rf_limit() const;
  void _internal_set_rf_limit(double value);
  public:

  // int32 average_time = 16;
  void clear_average_time();
  ::PROTOBUF_NAMESPACE_ID::int32 average_time() const;
  void set_average_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average_time() const;
  void _internal_set_average_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 residence_time = 19;
  void clear_residence_time();
  ::PROTOBUF_NAMESPACE_ID::int32 residence_time() const;
  void set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_residence_time() const;
  void _internal_set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double search_step = 18;
  void clear_search_step();
  double search_step() const;
  void set_search_step(double value);
  private:
  double _internal_search_step() const;
  void _internal_set_search_step(double value);
  public:

  // int32 sample_interval = 20;
  void clear_sample_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_interval() const;
  void set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_interval() const;
  void _internal_set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result_interval = 21;
  void clear_result_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval() const;
  void set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_interval() const;
  void _internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expected_points = 22;
  void clear_expected_points();
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points() const;
  void set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expected_points() const;
  void _internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 antenna = 23;
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 df_times = 24;
  void clear_df_times();
  ::PROTOBUF_NAMESPACE_ID::int32 df_times() const;
  void set_df_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_df_times() const;
  void _internal_set_df_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
  ::zb::dcts::source::kh::GainControlParam* gain_param_;
  ::zb::dcts::source::kh::WindowParams* win_params_;
  int mode_;
  int detect_mode_;
  double rbw_;
  double df_bandwidth_;
  double attenuation_gain_;
  int channel_mode_;
  int antenna_mode_;
  int gc_mode_;
  int threshold_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_pow_;
  double rf_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 residence_time_;
  double search_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 expected_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::int32 df_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
};
// -------------------------------------------------------------------

class DirectionChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest) */ {
 public:
  inline DirectionChangeRequest() : DirectionChangeRequest(nullptr) {};
  virtual ~DirectionChangeRequest();

  DirectionChangeRequest(const DirectionChangeRequest& from);
  DirectionChangeRequest(DirectionChangeRequest&& from) noexcept
    : DirectionChangeRequest() {
    *this = ::std::move(from);
  }

  inline DirectionChangeRequest& operator=(const DirectionChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionChangeRequest& operator=(DirectionChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectionChangeRequest* internal_default_instance() {
    return reinterpret_cast<const DirectionChangeRequest*>(
               &_DirectionChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DirectionChangeRequest& a, DirectionChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionChangeRequest* New() const final {
    return CreateMaybeMessage<DirectionChangeRequest>(nullptr);
  }

  DirectionChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionChangeRequest& from);
  void MergeFrom(const DirectionChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.DirectionChangeRequest";
  }
  protected:
  explicit DirectionChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kTaskParamsFieldNumber = 3,
    kCenterFreqFieldNumber = 4,
    kParamIndexFieldNumber = 2,
  };
  // .zb.dcts.scenario.ScenarioTaskId task_id = 1;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  const ::zb::dcts::scenario::ScenarioTaskId& task_id() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_task_id();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_task_id();
  void set_allocated_task_id(::zb::dcts::scenario::ScenarioTaskId* task_id);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_task_id() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_task_id();
  public:
  void unsafe_arena_set_allocated_task_id(
      ::zb::dcts::scenario::ScenarioTaskId* task_id);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_task_id();

  // .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;
  bool has_task_params() const;
  private:
  bool _internal_has_task_params() const;
  public:
  void clear_task_params();
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& task_params() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* release_task_params();
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* mutable_task_params();
  void set_allocated_task_params(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* task_params);
  private:
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& _internal_task_params() const;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* _internal_mutable_task_params();
  public:
  void unsafe_arena_set_allocated_task_params(
      ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* task_params);
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* unsafe_arena_release_task_params();

  // double center_freq = 4;
  void clear_center_freq();
  double center_freq() const;
  void set_center_freq(double value);
  private:
  double _internal_center_freq() const;
  void _internal_set_center_freq(double value);
  public:

  // .zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;
  void clear_param_index();
  ::zb::dcts::scenario::kh::commDirection::ParamIndex param_index() const;
  void set_param_index(::zb::dcts::scenario::kh::commDirection::ParamIndex value);
  private:
  ::zb::dcts::scenario::kh::commDirection::ParamIndex _internal_param_index() const;
  void _internal_set_param_index(::zb::dcts::scenario::kh::commDirection::ParamIndex value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* task_id_;
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* task_params_;
  double center_freq_;
  int param_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
};
// -------------------------------------------------------------------

class CommDirectionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commDirection.CommDirectionResult) */ {
 public:
  inline CommDirectionResult() : CommDirectionResult(nullptr) {};
  virtual ~CommDirectionResult();

  CommDirectionResult(const CommDirectionResult& from);
  CommDirectionResult(CommDirectionResult&& from) noexcept
    : CommDirectionResult() {
    *this = ::std::move(from);
  }

  inline CommDirectionResult& operator=(const CommDirectionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDirectionResult& operator=(CommDirectionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommDirectionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommDirectionResult* internal_default_instance() {
    return reinterpret_cast<const CommDirectionResult*>(
               &_CommDirectionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommDirectionResult& a, CommDirectionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDirectionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDirectionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommDirectionResult* New() const final {
    return CreateMaybeMessage<CommDirectionResult>(nullptr);
  }

  CommDirectionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommDirectionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommDirectionResult& from);
  void MergeFrom(const CommDirectionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDirectionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commDirection.CommDirectionResult";
  }
  protected:
  explicit CommDirectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommDirectionAcq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetDetectionBeforeFieldNumber = 9,
    kTargetDetectionFieldNumber = 10,
    kLOFrequencykHzsFieldNumber = 11,
    kScanIndexsFieldNumber = 12,
    kTargetIdsFieldNumber = 13,
    kCalDiffFieldNumber = 14,
    kAntDiffFieldNumber = 15,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kSegHeaderFieldNumber = 4,
    kBandFieldNumber = 5,
    kPanoramaViewFieldNumber = 6,
    kCloseshotViewFieldNumber = 7,
    kCourseAngleFieldNumber = 8,
    kCenterFreqFieldNumber = 16,
  };
  // repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;
  int target_detection_before_size() const;
  private:
  int _internal_target_detection_before_size() const;
  public:
  void clear_target_detection_before();
  ::zb::dcts::source::kh::TargetDirection* mutable_target_detection_before(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >*
      mutable_target_detection_before();
  private:
  const ::zb::dcts::source::kh::TargetDirection& _internal_target_detection_before(int index) const;
  ::zb::dcts::source::kh::TargetDirection* _internal_add_target_detection_before();
  public:
  const ::zb::dcts::source::kh::TargetDirection& target_detection_before(int index) const;
  ::zb::dcts::source::kh::TargetDirection* add_target_detection_before();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >&
      target_detection_before() const;

  // repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;
  int target_detection_size() const;
  private:
  int _internal_target_detection_size() const;
  public:
  void clear_target_detection();
  ::zb::dcts::source::kh::TargetDirection* mutable_target_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >*
      mutable_target_detection();
  private:
  const ::zb::dcts::source::kh::TargetDirection& _internal_target_detection(int index) const;
  ::zb::dcts::source::kh::TargetDirection* _internal_add_target_detection();
  public:
  const ::zb::dcts::source::kh::TargetDirection& target_detection(int index) const;
  ::zb::dcts::source::kh::TargetDirection* add_target_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >&
      target_detection() const;

  // repeated uint32 LOFrequencykHzs = 11;
  int lofrequencykhzs_size() const;
  private:
  int _internal_lofrequencykhzs_size() const;
  public:
  void clear_lofrequencykhzs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lofrequencykhzs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_lofrequencykhzs() const;
  void _internal_add_lofrequencykhzs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_lofrequencykhzs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 lofrequencykhzs(int index) const;
  void set_lofrequencykhzs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_lofrequencykhzs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      lofrequencykhzs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_lofrequencykhzs();

  // repeated uint32 scanIndexs = 12;
  int scanindexs_size() const;
  private:
  int _internal_scanindexs_size() const;
  public:
  void clear_scanindexs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scanindexs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_scanindexs() const;
  void _internal_add_scanindexs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_scanindexs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 scanindexs(int index) const;
  void set_scanindexs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_scanindexs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      scanindexs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_scanindexs();

  // repeated uint32 target_ids = 13;
  int target_ids_size() const;
  private:
  int _internal_target_ids_size() const;
  public:
  void clear_target_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_target_ids() const;
  void _internal_add_target_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_target_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 target_ids(int index) const;
  void set_target_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_target_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      target_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_target_ids();

  // repeated float cal_diff = 14;
  int cal_diff_size() const;
  private:
  int _internal_cal_diff_size() const;
  public:
  void clear_cal_diff();
  private:
  float _internal_cal_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cal_diff() const;
  void _internal_add_cal_diff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cal_diff();
  public:
  float cal_diff(int index) const;
  void set_cal_diff(int index, float value);
  void add_cal_diff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cal_diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cal_diff();

  // repeated float ant_diff = 15;
  int ant_diff_size() const;
  private:
  int _internal_ant_diff_size() const;
  public:
  void clear_ant_diff();
  private:
  float _internal_ant_diff(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ant_diff() const;
  void _internal_add_ant_diff(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ant_diff();
  public:
  float ant_diff(int index) const;
  void set_ant_diff(int index, float value);
  void add_ant_diff(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ant_diff() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ant_diff();

  // .zb.dcts.scenario.spectrum.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::zb::dcts::scenario::spectrum::Header& header() const;
  ::zb::dcts::scenario::spectrum::Header* release_header();
  ::zb::dcts::scenario::spectrum::Header* mutable_header();
  void set_allocated_header(::zb::dcts::scenario::spectrum::Header* header);
  private:
  const ::zb::dcts::scenario::spectrum::Header& _internal_header() const;
  ::zb::dcts::scenario::spectrum::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::zb::dcts::scenario::spectrum::Header* header);
  ::zb::dcts::scenario::spectrum::Header* unsafe_arena_release_header();

  // .zb.dcts.source.kh.OperationStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::zb::dcts::source::kh::OperationStatus& status() const;
  ::zb::dcts::source::kh::OperationStatus* release_status();
  ::zb::dcts::source::kh::OperationStatus* mutable_status();
  void set_allocated_status(::zb::dcts::source::kh::OperationStatus* status);
  private:
  const ::zb::dcts::source::kh::OperationStatus& _internal_status() const;
  ::zb::dcts::source::kh::OperationStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::zb::dcts::source::kh::OperationStatus* status);
  ::zb::dcts::source::kh::OperationStatus* unsafe_arena_release_status();

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  bool has_seg_header() const;
  private:
  bool _internal_has_seg_header() const;
  public:
  void clear_seg_header();
  const ::zb::dcts::scenario::spectrum::SegmentHeader& seg_header() const;
  ::zb::dcts::scenario::spectrum::SegmentHeader* release_seg_header();
  ::zb::dcts::scenario::spectrum::SegmentHeader* mutable_seg_header();
  void set_allocated_seg_header(::zb::dcts::scenario::spectrum::SegmentHeader* seg_header);
  private:
  const ::zb::dcts::scenario::spectrum::SegmentHeader& _internal_seg_header() const;
  ::zb::dcts::scenario::spectrum::SegmentHeader* _internal_mutable_seg_header();
  public:
  void unsafe_arena_set_allocated_seg_header(
      ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header);
  ::zb::dcts::scenario::spectrum::SegmentHeader* unsafe_arena_release_seg_header();

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  bool has_band() const;
  private:
  bool _internal_has_band() const;
  public:
  void clear_band();
  const ::zb::dcts::scenario::spectrum::FrequencyBand& band() const;
  ::zb::dcts::scenario::spectrum::FrequencyBand* release_band();
  ::zb::dcts::scenario::spectrum::FrequencyBand* mutable_band();
  void set_allocated_band(::zb::dcts::scenario::spectrum::FrequencyBand* band);
  private:
  const ::zb::dcts::scenario::spectrum::FrequencyBand& _internal_band() const;
  ::zb::dcts::scenario::spectrum::FrequencyBand* _internal_mutable_band();
  public:
  void unsafe_arena_set_allocated_band(
      ::zb::dcts::scenario::spectrum::FrequencyBand* band);
  ::zb::dcts::scenario::spectrum::FrequencyBand* unsafe_arena_release_band();

  // .zb.dcts.scenario.spectrum.View panorama_view = 6;
  bool has_panorama_view() const;
  private:
  bool _internal_has_panorama_view() const;
  public:
  void clear_panorama_view();
  const ::zb::dcts::scenario::spectrum::View& panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* release_panorama_view();
  ::zb::dcts::scenario::spectrum::View* mutable_panorama_view();
  void set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_panorama_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_panorama_view();
  public:
  void unsafe_arena_set_allocated_panorama_view(
      ::zb::dcts::scenario::spectrum::View* panorama_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_panorama_view();

  // .zb.dcts.scenario.spectrum.View closeshot_view = 7;
  bool has_closeshot_view() const;
  private:
  bool _internal_has_closeshot_view() const;
  public:
  void clear_closeshot_view();
  const ::zb::dcts::scenario::spectrum::View& closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* release_closeshot_view();
  ::zb::dcts::scenario::spectrum::View* mutable_closeshot_view();
  void set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view);
  private:
  const ::zb::dcts::scenario::spectrum::View& _internal_closeshot_view() const;
  ::zb::dcts::scenario::spectrum::View* _internal_mutable_closeshot_view();
  public:
  void unsafe_arena_set_allocated_closeshot_view(
      ::zb::dcts::scenario::spectrum::View* closeshot_view);
  ::zb::dcts::scenario::spectrum::View* unsafe_arena_release_closeshot_view();

  // double courseAngle = 8;
  void clear_courseangle();
  double courseangle() const;
  void set_courseangle(double value);
  private:
  double _internal_courseangle() const;
  void _internal_set_courseangle(double value);
  public:

  // double center_freq = 16;
  void clear_center_freq();
  double center_freq() const;
  void set_center_freq(double value);
  private:
  double _internal_center_freq() const;
  void _internal_set_center_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection > target_detection_before_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection > target_detection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > lofrequencykhzs_;
  mutable std::atomic<int> _lofrequencykhzs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > scanindexs_;
  mutable std::atomic<int> _scanindexs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > target_ids_;
  mutable std::atomic<int> _target_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cal_diff_;
  mutable std::atomic<int> _cal_diff_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ant_diff_;
  mutable std::atomic<int> _ant_diff_cached_byte_size_;
  ::zb::dcts::scenario::spectrum::Header* header_;
  ::zb::dcts::source::kh::OperationStatus* status_;
  ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header_;
  ::zb::dcts::scenario::spectrum::FrequencyBand* band_;
  ::zb::dcts::scenario::spectrum::View* panorama_view_;
  ::zb::dcts::scenario::spectrum::View* closeshot_view_;
  double courseangle_;
  double center_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommDirectionAcq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommDirectionAcqSource

// .zb.dcts.source.SourceId id = 1;
inline bool CommDirectionAcqSource::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool CommDirectionAcqSource::has_id() const {
  return _internal_has_id();
}
inline const ::zb::dcts::source::SourceId& CommDirectionAcqSource::_internal_id() const {
  const ::zb::dcts::source::SourceId* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& CommDirectionAcqSource::id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.id)
  return _internal_id();
}
inline void CommDirectionAcqSource::unsafe_arena_set_allocated_id(
    ::zb::dcts::source::SourceId* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.id)
}
inline ::zb::dcts::source::SourceId* CommDirectionAcqSource::release_id() {
  auto temp = unsafe_arena_release_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* CommDirectionAcqSource::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.id)
  
  ::zb::dcts::source::SourceId* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* CommDirectionAcqSource::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::zb::dcts::source::SourceId* CommDirectionAcqSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.id)
  return _internal_mutable_id();
}
inline void CommDirectionAcqSource::set_allocated_id(::zb::dcts::source::SourceId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id)->GetArena();
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.id)
}

// map<string, string> params = 6;
inline int CommDirectionAcqSource::_internal_params_size() const {
  return params_.size();
}
inline int CommDirectionAcqSource::params_size() const {
  return _internal_params_size();
}
inline void CommDirectionAcqSource::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommDirectionAcqSource::_internal_params() const {
  return params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommDirectionAcqSource::params() const {
  // @@protoc_insertion_point(field_map:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommDirectionAcqSource::_internal_mutable_params() {
  return params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommDirectionAcqSource::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// CommDirectionAcqParam

// .zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;
inline void CommDirectionAcqParam::clear_mode() {
  mode_ = 0;
}
inline ::zb::dcts::scenario::kh::commDirection::DirectionMode CommDirectionAcqParam::_internal_mode() const {
  return static_cast< ::zb::dcts::scenario::kh::commDirection::DirectionMode >(mode_);
}
inline ::zb::dcts::scenario::kh::commDirection::DirectionMode CommDirectionAcqParam::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.mode)
  return _internal_mode();
}
inline void CommDirectionAcqParam::_internal_set_mode(::zb::dcts::scenario::kh::commDirection::DirectionMode value) {
  
  mode_ = value;
}
inline void CommDirectionAcqParam::set_mode(::zb::dcts::scenario::kh::commDirection::DirectionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.mode)
}

// .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
inline bool CommDirectionAcqParam::_internal_has_freq_span() const {
  return this != internal_default_instance() && freq_span_ != nullptr;
}
inline bool CommDirectionAcqParam::has_freq_span() const {
  return _internal_has_freq_span();
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& CommDirectionAcqParam::_internal_freq_span() const {
  const ::zb::dcts::scenario::spectrum::FrequencySpan* p = freq_span_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      &::zb::dcts::scenario::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencySpan& CommDirectionAcqParam::freq_span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.freq_span)
  return _internal_freq_span();
}
inline void CommDirectionAcqParam::unsafe_arena_set_allocated_freq_span(
    ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  freq_span_ = freq_span;
  if (freq_span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.freq_span)
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* CommDirectionAcqParam::release_freq_span() {
  auto temp = unsafe_arena_release_freq_span();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* CommDirectionAcqParam::unsafe_arena_release_freq_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.freq_span)
  
  ::zb::dcts::scenario::spectrum::FrequencySpan* temp = freq_span_;
  freq_span_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* CommDirectionAcqParam::_internal_mutable_freq_span() {
  
  if (freq_span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencySpan>(GetArena());
    freq_span_ = p;
  }
  return freq_span_;
}
inline ::zb::dcts::scenario::spectrum::FrequencySpan* CommDirectionAcqParam::mutable_freq_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.freq_span)
  return _internal_mutable_freq_span();
}
inline void CommDirectionAcqParam::set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span_);
  }
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    
  } else {
    
  }
  freq_span_ = freq_span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.freq_span)
}

// double rbw = 4;
inline void CommDirectionAcqParam::clear_rbw() {
  rbw_ = 0;
}
inline double CommDirectionAcqParam::_internal_rbw() const {
  return rbw_;
}
inline double CommDirectionAcqParam::rbw() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.rbw)
  return _internal_rbw();
}
inline void CommDirectionAcqParam::_internal_set_rbw(double value) {
  
  rbw_ = value;
}
inline void CommDirectionAcqParam::set_rbw(double value) {
  _internal_set_rbw(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.rbw)
}

// double df_bandwidth = 5;
inline void CommDirectionAcqParam::clear_df_bandwidth() {
  df_bandwidth_ = 0;
}
inline double CommDirectionAcqParam::_internal_df_bandwidth() const {
  return df_bandwidth_;
}
inline double CommDirectionAcqParam::df_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.df_bandwidth)
  return _internal_df_bandwidth();
}
inline void CommDirectionAcqParam::_internal_set_df_bandwidth(double value) {
  
  df_bandwidth_ = value;
}
inline void CommDirectionAcqParam::set_df_bandwidth(double value) {
  _internal_set_df_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.df_bandwidth)
}

// .zb.dcts.source.kh.DetectMode detect_mode = 6;
inline void CommDirectionAcqParam::clear_detect_mode() {
  detect_mode_ = 0;
}
inline ::zb::dcts::source::kh::DetectMode CommDirectionAcqParam::_internal_detect_mode() const {
  return static_cast< ::zb::dcts::source::kh::DetectMode >(detect_mode_);
}
inline ::zb::dcts::source::kh::DetectMode CommDirectionAcqParam::detect_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.detect_mode)
  return _internal_detect_mode();
}
inline void CommDirectionAcqParam::_internal_set_detect_mode(::zb::dcts::source::kh::DetectMode value) {
  
  detect_mode_ = value;
}
inline void CommDirectionAcqParam::set_detect_mode(::zb::dcts::source::kh::DetectMode value) {
  _internal_set_detect_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.detect_mode)
}

// .zb.dcts.source.kh.ChannelMode channel_mode = 7;
inline void CommDirectionAcqParam::clear_channel_mode() {
  channel_mode_ = 0;
}
inline ::zb::dcts::source::kh::ChannelMode CommDirectionAcqParam::_internal_channel_mode() const {
  return static_cast< ::zb::dcts::source::kh::ChannelMode >(channel_mode_);
}
inline ::zb::dcts::source::kh::ChannelMode CommDirectionAcqParam::channel_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.channel_mode)
  return _internal_channel_mode();
}
inline void CommDirectionAcqParam::_internal_set_channel_mode(::zb::dcts::source::kh::ChannelMode value) {
  
  channel_mode_ = value;
}
inline void CommDirectionAcqParam::set_channel_mode(::zb::dcts::source::kh::ChannelMode value) {
  _internal_set_channel_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.channel_mode)
}

// double attenuation_gain = 8;
inline void CommDirectionAcqParam::clear_attenuation_gain() {
  attenuation_gain_ = 0;
}
inline double CommDirectionAcqParam::_internal_attenuation_gain() const {
  return attenuation_gain_;
}
inline double CommDirectionAcqParam::attenuation_gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.attenuation_gain)
  return _internal_attenuation_gain();
}
inline void CommDirectionAcqParam::_internal_set_attenuation_gain(double value) {
  
  attenuation_gain_ = value;
}
inline void CommDirectionAcqParam::set_attenuation_gain(double value) {
  _internal_set_attenuation_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.attenuation_gain)
}

// .zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;
inline void CommDirectionAcqParam::clear_antenna_mode() {
  antenna_mode_ = 0;
}
inline ::zb::dcts::source::kh::AntennaControlMode CommDirectionAcqParam::_internal_antenna_mode() const {
  return static_cast< ::zb::dcts::source::kh::AntennaControlMode >(antenna_mode_);
}
inline ::zb::dcts::source::kh::AntennaControlMode CommDirectionAcqParam::antenna_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.antenna_mode)
  return _internal_antenna_mode();
}
inline void CommDirectionAcqParam::_internal_set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value) {
  
  antenna_mode_ = value;
}
inline void CommDirectionAcqParam::set_antenna_mode(::zb::dcts::source::kh::AntennaControlMode value) {
  _internal_set_antenna_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.antenna_mode)
}

// .zb.dcts.source.kh.GainControlMode gc_mode = 10;
inline void CommDirectionAcqParam::clear_gc_mode() {
  gc_mode_ = 0;
}
inline ::zb::dcts::source::kh::GainControlMode CommDirectionAcqParam::_internal_gc_mode() const {
  return static_cast< ::zb::dcts::source::kh::GainControlMode >(gc_mode_);
}
inline ::zb::dcts::source::kh::GainControlMode CommDirectionAcqParam::gc_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gc_mode)
  return _internal_gc_mode();
}
inline void CommDirectionAcqParam::_internal_set_gc_mode(::zb::dcts::source::kh::GainControlMode value) {
  
  gc_mode_ = value;
}
inline void CommDirectionAcqParam::set_gc_mode(::zb::dcts::source::kh::GainControlMode value) {
  _internal_set_gc_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gc_mode)
}

// .zb.dcts.source.kh.GainControlParam gain_param = 11;
inline bool CommDirectionAcqParam::_internal_has_gain_param() const {
  return this != internal_default_instance() && gain_param_ != nullptr;
}
inline bool CommDirectionAcqParam::has_gain_param() const {
  return _internal_has_gain_param();
}
inline const ::zb::dcts::source::kh::GainControlParam& CommDirectionAcqParam::_internal_gain_param() const {
  const ::zb::dcts::source::kh::GainControlParam* p = gain_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::GainControlParam*>(
      &::zb::dcts::source::kh::_GainControlParam_default_instance_);
}
inline const ::zb::dcts::source::kh::GainControlParam& CommDirectionAcqParam::gain_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gain_param)
  return _internal_gain_param();
}
inline void CommDirectionAcqParam::unsafe_arena_set_allocated_gain_param(
    ::zb::dcts::source::kh::GainControlParam* gain_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_param_);
  }
  gain_param_ = gain_param;
  if (gain_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gain_param)
}
inline ::zb::dcts::source::kh::GainControlParam* CommDirectionAcqParam::release_gain_param() {
  auto temp = unsafe_arena_release_gain_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::GainControlParam* CommDirectionAcqParam::unsafe_arena_release_gain_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gain_param)
  
  ::zb::dcts::source::kh::GainControlParam* temp = gain_param_;
  gain_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::GainControlParam* CommDirectionAcqParam::_internal_mutable_gain_param() {
  
  if (gain_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::GainControlParam>(GetArena());
    gain_param_ = p;
  }
  return gain_param_;
}
inline ::zb::dcts::source::kh::GainControlParam* CommDirectionAcqParam::mutable_gain_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gain_param)
  return _internal_mutable_gain_param();
}
inline void CommDirectionAcqParam::set_allocated_gain_param(::zb::dcts::source::kh::GainControlParam* gain_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_param_);
  }
  if (gain_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_param)->GetArena();
    if (message_arena != submessage_arena) {
      gain_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain_param, submessage_arena);
    }
    
  } else {
    
  }
  gain_param_ = gain_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.gain_param)
}

// .zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;
inline void CommDirectionAcqParam::clear_threshold_mode() {
  threshold_mode_ = 0;
}
inline ::zb::dcts::scenario::kh::commDirection::DFThresholdMode CommDirectionAcqParam::_internal_threshold_mode() const {
  return static_cast< ::zb::dcts::scenario::kh::commDirection::DFThresholdMode >(threshold_mode_);
}
inline ::zb::dcts::scenario::kh::commDirection::DFThresholdMode CommDirectionAcqParam::threshold_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.threshold_mode)
  return _internal_threshold_mode();
}
inline void CommDirectionAcqParam::_internal_set_threshold_mode(::zb::dcts::scenario::kh::commDirection::DFThresholdMode value) {
  
  threshold_mode_ = value;
}
inline void CommDirectionAcqParam::set_threshold_mode(::zb::dcts::scenario::kh::commDirection::DFThresholdMode value) {
  _internal_set_threshold_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.threshold_mode)
}

// int32 threshold_value = 13;
inline void CommDirectionAcqParam::clear_threshold_value() {
  threshold_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_threshold_value() const {
  return threshold_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::threshold_value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.threshold_value)
  return _internal_threshold_value();
}
inline void CommDirectionAcqParam::_internal_set_threshold_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threshold_value_ = value;
}
inline void CommDirectionAcqParam::set_threshold_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.threshold_value)
}

// int32 output_pow = 14;
inline void CommDirectionAcqParam::clear_output_pow() {
  output_pow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_output_pow() const {
  return output_pow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::output_pow() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.output_pow)
  return _internal_output_pow();
}
inline void CommDirectionAcqParam::_internal_set_output_pow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_pow_ = value;
}
inline void CommDirectionAcqParam::set_output_pow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_pow(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.output_pow)
}

// .zb.dcts.source.kh.WindowParams win_params = 15;
inline bool CommDirectionAcqParam::_internal_has_win_params() const {
  return this != internal_default_instance() && win_params_ != nullptr;
}
inline bool CommDirectionAcqParam::has_win_params() const {
  return _internal_has_win_params();
}
inline const ::zb::dcts::source::kh::WindowParams& CommDirectionAcqParam::_internal_win_params() const {
  const ::zb::dcts::source::kh::WindowParams* p = win_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::WindowParams*>(
      &::zb::dcts::source::kh::_WindowParams_default_instance_);
}
inline const ::zb::dcts::source::kh::WindowParams& CommDirectionAcqParam::win_params() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.win_params)
  return _internal_win_params();
}
inline void CommDirectionAcqParam::unsafe_arena_set_allocated_win_params(
    ::zb::dcts::source::kh::WindowParams* win_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params_);
  }
  win_params_ = win_params;
  if (win_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.win_params)
}
inline ::zb::dcts::source::kh::WindowParams* CommDirectionAcqParam::release_win_params() {
  auto temp = unsafe_arena_release_win_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::WindowParams* CommDirectionAcqParam::unsafe_arena_release_win_params() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.win_params)
  
  ::zb::dcts::source::kh::WindowParams* temp = win_params_;
  win_params_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::WindowParams* CommDirectionAcqParam::_internal_mutable_win_params() {
  
  if (win_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::WindowParams>(GetArena());
    win_params_ = p;
  }
  return win_params_;
}
inline ::zb::dcts::source::kh::WindowParams* CommDirectionAcqParam::mutable_win_params() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.win_params)
  return _internal_mutable_win_params();
}
inline void CommDirectionAcqParam::set_allocated_win_params(::zb::dcts::source::kh::WindowParams* win_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params_);
  }
  if (win_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(win_params)->GetArena();
    if (message_arena != submessage_arena) {
      win_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, win_params, submessage_arena);
    }
    
  } else {
    
  }
  win_params_ = win_params;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.win_params)
}

// int32 average_time = 16;
inline void CommDirectionAcqParam::clear_average_time() {
  average_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_average_time() const {
  return average_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::average_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.average_time)
  return _internal_average_time();
}
inline void CommDirectionAcqParam::_internal_set_average_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_time_ = value;
}
inline void CommDirectionAcqParam::set_average_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average_time(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.average_time)
}

// double rf_limit = 17;
inline void CommDirectionAcqParam::clear_rf_limit() {
  rf_limit_ = 0;
}
inline double CommDirectionAcqParam::_internal_rf_limit() const {
  return rf_limit_;
}
inline double CommDirectionAcqParam::rf_limit() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.rf_limit)
  return _internal_rf_limit();
}
inline void CommDirectionAcqParam::_internal_set_rf_limit(double value) {
  
  rf_limit_ = value;
}
inline void CommDirectionAcqParam::set_rf_limit(double value) {
  _internal_set_rf_limit(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.rf_limit)
}

// double search_step = 18;
inline void CommDirectionAcqParam::clear_search_step() {
  search_step_ = 0;
}
inline double CommDirectionAcqParam::_internal_search_step() const {
  return search_step_;
}
inline double CommDirectionAcqParam::search_step() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.search_step)
  return _internal_search_step();
}
inline void CommDirectionAcqParam::_internal_set_search_step(double value) {
  
  search_step_ = value;
}
inline void CommDirectionAcqParam::set_search_step(double value) {
  _internal_set_search_step(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.search_step)
}

// int32 residence_time = 19;
inline void CommDirectionAcqParam::clear_residence_time() {
  residence_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_residence_time() const {
  return residence_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::residence_time() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.residence_time)
  return _internal_residence_time();
}
inline void CommDirectionAcqParam::_internal_set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  residence_time_ = value;
}
inline void CommDirectionAcqParam::set_residence_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_residence_time(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.residence_time)
}

// int32 sample_interval = 20;
inline void CommDirectionAcqParam::clear_sample_interval() {
  sample_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_sample_interval() const {
  return sample_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::sample_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.sample_interval)
  return _internal_sample_interval();
}
inline void CommDirectionAcqParam::_internal_set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sample_interval_ = value;
}
inline void CommDirectionAcqParam::set_sample_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.sample_interval)
}

// int32 result_interval = 21;
inline void CommDirectionAcqParam::clear_result_interval() {
  result_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_result_interval() const {
  return result_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::result_interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.result_interval)
  return _internal_result_interval();
}
inline void CommDirectionAcqParam::_internal_set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_interval_ = value;
}
inline void CommDirectionAcqParam::set_result_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.result_interval)
}

// int32 expected_points = 22;
inline void CommDirectionAcqParam::clear_expected_points() {
  expected_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_expected_points() const {
  return expected_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::expected_points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.expected_points)
  return _internal_expected_points();
}
inline void CommDirectionAcqParam::_internal_set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expected_points_ = value;
}
inline void CommDirectionAcqParam::set_expected_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expected_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.expected_points)
}

// int32 antenna = 23;
inline void CommDirectionAcqParam::clear_antenna() {
  antenna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::antenna() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.antenna)
  return _internal_antenna();
}
inline void CommDirectionAcqParam::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_ = value;
}
inline void CommDirectionAcqParam::set_antenna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.antenna)
}

// int32 df_times = 24;
inline void CommDirectionAcqParam::clear_df_times() {
  df_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::_internal_df_times() const {
  return df_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommDirectionAcqParam::df_times() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.df_times)
  return _internal_df_times();
}
inline void CommDirectionAcqParam::_internal_set_df_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  df_times_ = value;
}
inline void CommDirectionAcqParam::set_df_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_df_times(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam.df_times)
}

// -------------------------------------------------------------------

// DirectionChangeRequest

// .zb.dcts.scenario.ScenarioTaskId task_id = 1;
inline bool DirectionChangeRequest::_internal_has_task_id() const {
  return this != internal_default_instance() && task_id_ != nullptr;
}
inline bool DirectionChangeRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& DirectionChangeRequest::_internal_task_id() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = task_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& DirectionChangeRequest::task_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_id)
  return _internal_task_id();
}
inline void DirectionChangeRequest::unsafe_arena_set_allocated_task_id(
    ::zb::dcts::scenario::ScenarioTaskId* task_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  task_id_ = task_id;
  if (task_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_id)
}
inline ::zb::dcts::scenario::ScenarioTaskId* DirectionChangeRequest::release_task_id() {
  auto temp = unsafe_arena_release_task_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DirectionChangeRequest::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_id)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = task_id_;
  task_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DirectionChangeRequest::_internal_mutable_task_id() {
  
  if (task_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    task_id_ = p;
  }
  return task_id_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* DirectionChangeRequest::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_id)
  return _internal_mutable_task_id();
}
inline void DirectionChangeRequest::set_allocated_task_id(::zb::dcts::scenario::ScenarioTaskId* task_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id_);
  }
  if (task_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_id)->GetArena();
    if (message_arena != submessage_arena) {
      task_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_id, submessage_arena);
    }
    
  } else {
    
  }
  task_id_ = task_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_id)
}

// .zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;
inline void DirectionChangeRequest::clear_param_index() {
  param_index_ = 0;
}
inline ::zb::dcts::scenario::kh::commDirection::ParamIndex DirectionChangeRequest::_internal_param_index() const {
  return static_cast< ::zb::dcts::scenario::kh::commDirection::ParamIndex >(param_index_);
}
inline ::zb::dcts::scenario::kh::commDirection::ParamIndex DirectionChangeRequest::param_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.param_index)
  return _internal_param_index();
}
inline void DirectionChangeRequest::_internal_set_param_index(::zb::dcts::scenario::kh::commDirection::ParamIndex value) {
  
  param_index_ = value;
}
inline void DirectionChangeRequest::set_param_index(::zb::dcts::scenario::kh::commDirection::ParamIndex value) {
  _internal_set_param_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.param_index)
}

// .zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;
inline bool DirectionChangeRequest::_internal_has_task_params() const {
  return this != internal_default_instance() && task_params_ != nullptr;
}
inline bool DirectionChangeRequest::has_task_params() const {
  return _internal_has_task_params();
}
inline void DirectionChangeRequest::clear_task_params() {
  if (GetArena() == nullptr && task_params_ != nullptr) {
    delete task_params_;
  }
  task_params_ = nullptr;
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& DirectionChangeRequest::_internal_task_params() const {
  const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* p = task_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam*>(
      &::zb::dcts::scenario::kh::commDirection::_CommDirectionAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam& DirectionChangeRequest::task_params() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_params)
  return _internal_task_params();
}
inline void DirectionChangeRequest::unsafe_arena_set_allocated_task_params(
    ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* task_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_params_);
  }
  task_params_ = task_params;
  if (task_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_params)
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* DirectionChangeRequest::release_task_params() {
  auto temp = unsafe_arena_release_task_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* DirectionChangeRequest::unsafe_arena_release_task_params() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_params)
  
  ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* temp = task_params_;
  task_params_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* DirectionChangeRequest::_internal_mutable_task_params() {
  
  if (task_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam>(GetArena());
    task_params_ = p;
  }
  return task_params_;
}
inline ::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* DirectionChangeRequest::mutable_task_params() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_params)
  return _internal_mutable_task_params();
}
inline void DirectionChangeRequest::set_allocated_task_params(::zb::dcts::scenario::kh::commDirection::CommDirectionAcqParam* task_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_params_;
  }
  if (task_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task_params);
    if (message_arena != submessage_arena) {
      task_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_params, submessage_arena);
    }
    
  } else {
    
  }
  task_params_ = task_params;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.task_params)
}

// double center_freq = 4;
inline void DirectionChangeRequest::clear_center_freq() {
  center_freq_ = 0;
}
inline double DirectionChangeRequest::_internal_center_freq() const {
  return center_freq_;
}
inline double DirectionChangeRequest::center_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.center_freq)
  return _internal_center_freq();
}
inline void DirectionChangeRequest::_internal_set_center_freq(double value) {
  
  center_freq_ = value;
}
inline void DirectionChangeRequest::set_center_freq(double value) {
  _internal_set_center_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest.center_freq)
}

// -------------------------------------------------------------------

// CommDirectionResult

// .zb.dcts.scenario.spectrum.Header header = 1;
inline bool CommDirectionResult::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool CommDirectionResult::has_header() const {
  return _internal_has_header();
}
inline const ::zb::dcts::scenario::spectrum::Header& CommDirectionResult::_internal_header() const {
  const ::zb::dcts::scenario::spectrum::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::Header*>(
      &::zb::dcts::scenario::spectrum::_Header_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::Header& CommDirectionResult::header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.header)
  return _internal_header();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_header(
    ::zb::dcts::scenario::spectrum::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.header)
}
inline ::zb::dcts::scenario::spectrum::Header* CommDirectionResult::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDirectionResult::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.header)
  
  ::zb::dcts::scenario::spectrum::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDirectionResult::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::zb::dcts::scenario::spectrum::Header* CommDirectionResult::mutable_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.header)
  return _internal_mutable_header();
}
inline void CommDirectionResult::set_allocated_header(::zb::dcts::scenario::spectrum::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.header)
}

// .zb.dcts.source.kh.OperationStatus status = 2;
inline bool CommDirectionResult::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CommDirectionResult::has_status() const {
  return _internal_has_status();
}
inline const ::zb::dcts::source::kh::OperationStatus& CommDirectionResult::_internal_status() const {
  const ::zb::dcts::source::kh::OperationStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::kh::OperationStatus*>(
      &::zb::dcts::source::kh::_OperationStatus_default_instance_);
}
inline const ::zb::dcts::source::kh::OperationStatus& CommDirectionResult::status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.status)
  return _internal_status();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_status(
    ::zb::dcts::source::kh::OperationStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.status)
}
inline ::zb::dcts::source::kh::OperationStatus* CommDirectionResult::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* CommDirectionResult::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.status)
  
  ::zb::dcts::source::kh::OperationStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::kh::OperationStatus* CommDirectionResult::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::kh::OperationStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::zb::dcts::source::kh::OperationStatus* CommDirectionResult::mutable_status() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.status)
  return _internal_mutable_status();
}
inline void CommDirectionResult::set_allocated_status(::zb::dcts::source::kh::OperationStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.status)
}

// .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
inline bool CommDirectionResult::_internal_has_seg_header() const {
  return this != internal_default_instance() && seg_header_ != nullptr;
}
inline bool CommDirectionResult::has_seg_header() const {
  return _internal_has_seg_header();
}
inline const ::zb::dcts::scenario::spectrum::SegmentHeader& CommDirectionResult::_internal_seg_header() const {
  const ::zb::dcts::scenario::spectrum::SegmentHeader* p = seg_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::SegmentHeader*>(
      &::zb::dcts::scenario::spectrum::_SegmentHeader_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::SegmentHeader& CommDirectionResult::seg_header() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.seg_header)
  return _internal_seg_header();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_seg_header(
    ::zb::dcts::scenario::spectrum::SegmentHeader* seg_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header_);
  }
  seg_header_ = seg_header;
  if (seg_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.seg_header)
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* CommDirectionResult::release_seg_header() {
  auto temp = unsafe_arena_release_seg_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* CommDirectionResult::unsafe_arena_release_seg_header() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.seg_header)
  
  ::zb::dcts::scenario::spectrum::SegmentHeader* temp = seg_header_;
  seg_header_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* CommDirectionResult::_internal_mutable_seg_header() {
  
  if (seg_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::SegmentHeader>(GetArena());
    seg_header_ = p;
  }
  return seg_header_;
}
inline ::zb::dcts::scenario::spectrum::SegmentHeader* CommDirectionResult::mutable_seg_header() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.seg_header)
  return _internal_mutable_seg_header();
}
inline void CommDirectionResult::set_allocated_seg_header(::zb::dcts::scenario::spectrum::SegmentHeader* seg_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header_);
  }
  if (seg_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seg_header)->GetArena();
    if (message_arena != submessage_arena) {
      seg_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seg_header, submessage_arena);
    }
    
  } else {
    
  }
  seg_header_ = seg_header;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.seg_header)
}

// .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
inline bool CommDirectionResult::_internal_has_band() const {
  return this != internal_default_instance() && band_ != nullptr;
}
inline bool CommDirectionResult::has_band() const {
  return _internal_has_band();
}
inline const ::zb::dcts::scenario::spectrum::FrequencyBand& CommDirectionResult::_internal_band() const {
  const ::zb::dcts::scenario::spectrum::FrequencyBand* p = band_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::FrequencyBand*>(
      &::zb::dcts::scenario::spectrum::_FrequencyBand_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::FrequencyBand& CommDirectionResult::band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.band)
  return _internal_band();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_band(
    ::zb::dcts::scenario::spectrum::FrequencyBand* band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_);
  }
  band_ = band;
  if (band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.band)
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* CommDirectionResult::release_band() {
  auto temp = unsafe_arena_release_band();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* CommDirectionResult::unsafe_arena_release_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.band)
  
  ::zb::dcts::scenario::spectrum::FrequencyBand* temp = band_;
  band_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* CommDirectionResult::_internal_mutable_band() {
  
  if (band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::FrequencyBand>(GetArena());
    band_ = p;
  }
  return band_;
}
inline ::zb::dcts::scenario::spectrum::FrequencyBand* CommDirectionResult::mutable_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.band)
  return _internal_mutable_band();
}
inline void CommDirectionResult::set_allocated_band(::zb::dcts::scenario::spectrum::FrequencyBand* band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_);
  }
  if (band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band)->GetArena();
    if (message_arena != submessage_arena) {
      band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band, submessage_arena);
    }
    
  } else {
    
  }
  band_ = band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.band)
}

// .zb.dcts.scenario.spectrum.View panorama_view = 6;
inline bool CommDirectionResult::_internal_has_panorama_view() const {
  return this != internal_default_instance() && panorama_view_ != nullptr;
}
inline bool CommDirectionResult::has_panorama_view() const {
  return _internal_has_panorama_view();
}
inline const ::zb::dcts::scenario::spectrum::View& CommDirectionResult::_internal_panorama_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = panorama_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& CommDirectionResult::panorama_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.panorama_view)
  return _internal_panorama_view();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_panorama_view(
    ::zb::dcts::scenario::spectrum::View* panorama_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  panorama_view_ = panorama_view;
  if (panorama_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.panorama_view)
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::release_panorama_view() {
  auto temp = unsafe_arena_release_panorama_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::unsafe_arena_release_panorama_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.panorama_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = panorama_view_;
  panorama_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::_internal_mutable_panorama_view() {
  
  if (panorama_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    panorama_view_ = p;
  }
  return panorama_view_;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::mutable_panorama_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.panorama_view)
  return _internal_mutable_panorama_view();
}
inline void CommDirectionResult::set_allocated_panorama_view(::zb::dcts::scenario::spectrum::View* panorama_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view_);
  }
  if (panorama_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(panorama_view)->GetArena();
    if (message_arena != submessage_arena) {
      panorama_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, panorama_view, submessage_arena);
    }
    
  } else {
    
  }
  panorama_view_ = panorama_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.panorama_view)
}

// .zb.dcts.scenario.spectrum.View closeshot_view = 7;
inline bool CommDirectionResult::_internal_has_closeshot_view() const {
  return this != internal_default_instance() && closeshot_view_ != nullptr;
}
inline bool CommDirectionResult::has_closeshot_view() const {
  return _internal_has_closeshot_view();
}
inline const ::zb::dcts::scenario::spectrum::View& CommDirectionResult::_internal_closeshot_view() const {
  const ::zb::dcts::scenario::spectrum::View* p = closeshot_view_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::spectrum::View*>(
      &::zb::dcts::scenario::spectrum::_View_default_instance_);
}
inline const ::zb::dcts::scenario::spectrum::View& CommDirectionResult::closeshot_view() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.closeshot_view)
  return _internal_closeshot_view();
}
inline void CommDirectionResult::unsafe_arena_set_allocated_closeshot_view(
    ::zb::dcts::scenario::spectrum::View* closeshot_view) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  closeshot_view_ = closeshot_view;
  if (closeshot_view) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.closeshot_view)
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::release_closeshot_view() {
  auto temp = unsafe_arena_release_closeshot_view();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::unsafe_arena_release_closeshot_view() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commDirection.CommDirectionResult.closeshot_view)
  
  ::zb::dcts::scenario::spectrum::View* temp = closeshot_view_;
  closeshot_view_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::_internal_mutable_closeshot_view() {
  
  if (closeshot_view_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::spectrum::View>(GetArena());
    closeshot_view_ = p;
  }
  return closeshot_view_;
}
inline ::zb::dcts::scenario::spectrum::View* CommDirectionResult::mutable_closeshot_view() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.closeshot_view)
  return _internal_mutable_closeshot_view();
}
inline void CommDirectionResult::set_allocated_closeshot_view(::zb::dcts::scenario::spectrum::View* closeshot_view) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view_);
  }
  if (closeshot_view) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(closeshot_view)->GetArena();
    if (message_arena != submessage_arena) {
      closeshot_view = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closeshot_view, submessage_arena);
    }
    
  } else {
    
  }
  closeshot_view_ = closeshot_view;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commDirection.CommDirectionResult.closeshot_view)
}

// double courseAngle = 8;
inline void CommDirectionResult::clear_courseangle() {
  courseangle_ = 0;
}
inline double CommDirectionResult::_internal_courseangle() const {
  return courseangle_;
}
inline double CommDirectionResult::courseangle() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.courseAngle)
  return _internal_courseangle();
}
inline void CommDirectionResult::_internal_set_courseangle(double value) {
  
  courseangle_ = value;
}
inline void CommDirectionResult::set_courseangle(double value) {
  _internal_set_courseangle(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.courseAngle)
}

// repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;
inline int CommDirectionResult::_internal_target_detection_before_size() const {
  return target_detection_before_.size();
}
inline int CommDirectionResult::target_detection_before_size() const {
  return _internal_target_detection_before_size();
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::mutable_target_detection_before(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection_before)
  return target_detection_before_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >*
CommDirectionResult::mutable_target_detection_before() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection_before)
  return &target_detection_before_;
}
inline const ::zb::dcts::source::kh::TargetDirection& CommDirectionResult::_internal_target_detection_before(int index) const {
  return target_detection_before_.Get(index);
}
inline const ::zb::dcts::source::kh::TargetDirection& CommDirectionResult::target_detection_before(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection_before)
  return _internal_target_detection_before(index);
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::_internal_add_target_detection_before() {
  return target_detection_before_.Add();
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::add_target_detection_before() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection_before)
  return _internal_add_target_detection_before();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >&
CommDirectionResult::target_detection_before() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection_before)
  return target_detection_before_;
}

// repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;
inline int CommDirectionResult::_internal_target_detection_size() const {
  return target_detection_.size();
}
inline int CommDirectionResult::target_detection_size() const {
  return _internal_target_detection_size();
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::mutable_target_detection(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection)
  return target_detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >*
CommDirectionResult::mutable_target_detection() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection)
  return &target_detection_;
}
inline const ::zb::dcts::source::kh::TargetDirection& CommDirectionResult::_internal_target_detection(int index) const {
  return target_detection_.Get(index);
}
inline const ::zb::dcts::source::kh::TargetDirection& CommDirectionResult::target_detection(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection)
  return _internal_target_detection(index);
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::_internal_add_target_detection() {
  return target_detection_.Add();
}
inline ::zb::dcts::source::kh::TargetDirection* CommDirectionResult::add_target_detection() {
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection)
  return _internal_add_target_detection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::source::kh::TargetDirection >&
CommDirectionResult::target_detection() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_detection)
  return target_detection_;
}

// repeated uint32 LOFrequencykHzs = 11;
inline int CommDirectionResult::_internal_lofrequencykhzs_size() const {
  return lofrequencykhzs_.size();
}
inline int CommDirectionResult::lofrequencykhzs_size() const {
  return _internal_lofrequencykhzs_size();
}
inline void CommDirectionResult::clear_lofrequencykhzs() {
  lofrequencykhzs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::_internal_lofrequencykhzs(int index) const {
  return lofrequencykhzs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::lofrequencykhzs(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.LOFrequencykHzs)
  return _internal_lofrequencykhzs(index);
}
inline void CommDirectionResult::set_lofrequencykhzs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lofrequencykhzs_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.LOFrequencykHzs)
}
inline void CommDirectionResult::_internal_add_lofrequencykhzs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lofrequencykhzs_.Add(value);
}
inline void CommDirectionResult::add_lofrequencykhzs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_lofrequencykhzs(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.LOFrequencykHzs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::_internal_lofrequencykhzs() const {
  return lofrequencykhzs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::lofrequencykhzs() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.LOFrequencykHzs)
  return _internal_lofrequencykhzs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::_internal_mutable_lofrequencykhzs() {
  return &lofrequencykhzs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::mutable_lofrequencykhzs() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.LOFrequencykHzs)
  return _internal_mutable_lofrequencykhzs();
}

// repeated uint32 scanIndexs = 12;
inline int CommDirectionResult::_internal_scanindexs_size() const {
  return scanindexs_.size();
}
inline int CommDirectionResult::scanindexs_size() const {
  return _internal_scanindexs_size();
}
inline void CommDirectionResult::clear_scanindexs() {
  scanindexs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::_internal_scanindexs(int index) const {
  return scanindexs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::scanindexs(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.scanIndexs)
  return _internal_scanindexs(index);
}
inline void CommDirectionResult::set_scanindexs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  scanindexs_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.scanIndexs)
}
inline void CommDirectionResult::_internal_add_scanindexs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  scanindexs_.Add(value);
}
inline void CommDirectionResult::add_scanindexs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_scanindexs(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.scanIndexs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::_internal_scanindexs() const {
  return scanindexs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::scanindexs() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.scanIndexs)
  return _internal_scanindexs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::_internal_mutable_scanindexs() {
  return &scanindexs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::mutable_scanindexs() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.scanIndexs)
  return _internal_mutable_scanindexs();
}

// repeated uint32 target_ids = 13;
inline int CommDirectionResult::_internal_target_ids_size() const {
  return target_ids_.size();
}
inline int CommDirectionResult::target_ids_size() const {
  return _internal_target_ids_size();
}
inline void CommDirectionResult::clear_target_ids() {
  target_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::_internal_target_ids(int index) const {
  return target_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommDirectionResult::target_ids(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_ids)
  return _internal_target_ids(index);
}
inline void CommDirectionResult::set_target_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  target_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_ids)
}
inline void CommDirectionResult::_internal_add_target_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  target_ids_.Add(value);
}
inline void CommDirectionResult::add_target_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_target_ids(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::_internal_target_ids() const {
  return target_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CommDirectionResult::target_ids() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_ids)
  return _internal_target_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::_internal_mutable_target_ids() {
  return &target_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CommDirectionResult::mutable_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.target_ids)
  return _internal_mutable_target_ids();
}

// repeated float cal_diff = 14;
inline int CommDirectionResult::_internal_cal_diff_size() const {
  return cal_diff_.size();
}
inline int CommDirectionResult::cal_diff_size() const {
  return _internal_cal_diff_size();
}
inline void CommDirectionResult::clear_cal_diff() {
  cal_diff_.Clear();
}
inline float CommDirectionResult::_internal_cal_diff(int index) const {
  return cal_diff_.Get(index);
}
inline float CommDirectionResult::cal_diff(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.cal_diff)
  return _internal_cal_diff(index);
}
inline void CommDirectionResult::set_cal_diff(int index, float value) {
  cal_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.cal_diff)
}
inline void CommDirectionResult::_internal_add_cal_diff(float value) {
  cal_diff_.Add(value);
}
inline void CommDirectionResult::add_cal_diff(float value) {
  _internal_add_cal_diff(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.cal_diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommDirectionResult::_internal_cal_diff() const {
  return cal_diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommDirectionResult::cal_diff() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.cal_diff)
  return _internal_cal_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommDirectionResult::_internal_mutable_cal_diff() {
  return &cal_diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommDirectionResult::mutable_cal_diff() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.cal_diff)
  return _internal_mutable_cal_diff();
}

// repeated float ant_diff = 15;
inline int CommDirectionResult::_internal_ant_diff_size() const {
  return ant_diff_.size();
}
inline int CommDirectionResult::ant_diff_size() const {
  return _internal_ant_diff_size();
}
inline void CommDirectionResult::clear_ant_diff() {
  ant_diff_.Clear();
}
inline float CommDirectionResult::_internal_ant_diff(int index) const {
  return ant_diff_.Get(index);
}
inline float CommDirectionResult::ant_diff(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.ant_diff)
  return _internal_ant_diff(index);
}
inline void CommDirectionResult::set_ant_diff(int index, float value) {
  ant_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.ant_diff)
}
inline void CommDirectionResult::_internal_add_ant_diff(float value) {
  ant_diff_.Add(value);
}
inline void CommDirectionResult::add_ant_diff(float value) {
  _internal_add_ant_diff(value);
  // @@protoc_insertion_point(field_add:zb.dcts.scenario.kh.commDirection.CommDirectionResult.ant_diff)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommDirectionResult::_internal_ant_diff() const {
  return ant_diff_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CommDirectionResult::ant_diff() const {
  // @@protoc_insertion_point(field_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.ant_diff)
  return _internal_ant_diff();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommDirectionResult::_internal_mutable_ant_diff() {
  return &ant_diff_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CommDirectionResult::mutable_ant_diff() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.scenario.kh.commDirection.CommDirectionResult.ant_diff)
  return _internal_mutable_ant_diff();
}

// double center_freq = 16;
inline void CommDirectionResult::clear_center_freq() {
  center_freq_ = 0;
}
inline double CommDirectionResult::_internal_center_freq() const {
  return center_freq_;
}
inline double CommDirectionResult::center_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commDirection.CommDirectionResult.center_freq)
  return _internal_center_freq();
}
inline void CommDirectionResult::_internal_set_center_freq(double value) {
  
  center_freq_ = value;
}
inline void CommDirectionResult::set_center_freq(double value) {
  _internal_set_center_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commDirection.CommDirectionResult.center_freq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commDirection
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commDirection::DirectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commDirection::DirectionMode>() {
  return ::zb::dcts::scenario::kh::commDirection::DirectionMode_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commDirection::DFThresholdMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commDirection::DFThresholdMode>() {
  return ::zb::dcts::scenario::kh::commDirection::DFThresholdMode_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commDirection::ParamIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commDirection::ParamIndex>() {
  return ::zb::dcts::scenario::kh::commDirection::ParamIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommDirectionAcq_2eproto
