// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommChannelCali.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommChannelCali_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommChannelCali_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "source/source.pb.h"
#include "scenario/scenario.pb.h"
#include "scenario/kh/KhSpectrumAcq.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhCommChannelCali_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scenario_2fkh_2fKhCommChannelCali_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class ChangeRequest;
class ChangeRequestDefaultTypeInternal;
extern ChangeRequestDefaultTypeInternal _ChangeRequest_default_instance_;
class CommChannelCaliTaskRequest;
class CommChannelCaliTaskRequestDefaultTypeInternal;
extern CommChannelCaliTaskRequestDefaultTypeInternal _CommChannelCaliTaskRequest_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::scenario::kh::commSpectrum::ChangeRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::ChangeRequest>(Arena*);
template<> ::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest* Arena::CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::CommChannelCaliTaskRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {

enum CalType : int {
  CRYSTAL_CALIBRATE = 0,
  FREQ_RESPONSE = 1,
  IN_BAND_FLAT = 2,
  RF_FREQ_RESPONSE = 3,
  WINDOW_FUNC = 4,
  MODULE_TEST = 5,
  BANDWIDTH_GAIN = 6,
  ZERO_FREQ = 7,
  CalType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalType_IsValid(int value);
constexpr CalType CalType_MIN = CRYSTAL_CALIBRATE;
constexpr CalType CalType_MAX = ZERO_FREQ;
constexpr int CalType_ARRAYSIZE = CalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalType_descriptor();
template<typename T>
inline const std::string& CalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalType_descriptor(), enum_t_value);
}
inline bool CalType_Parse(
    const std::string& name, CalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalType>(
    CalType_descriptor(), name, value);
}
enum ChannelType : int {
  SPECTRUM = 0,
  DIRECTION = 1,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelType_IsValid(int value);
constexpr ChannelType ChannelType_MIN = SPECTRUM;
constexpr ChannelType ChannelType_MAX = DIRECTION;
constexpr int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor();
template<typename T>
inline const std::string& ChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelType_descriptor(), enum_t_value);
}
inline bool ChannelType_Parse(
    const std::string& name, ChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
enum ParamIndex : int {
  ALL = 0,
  ATT_GAIN = 1,
  FREQ_RANGE = 2,
  FREQ_RBW = 3,
  FREQ_TUNER = 4,
  CENTER_FREQ = 5,
  CRYSTAL_DAC = 6,
  ZERO_DAC = 7,
  CHANNEL_ID = 8,
  ParamIndex_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParamIndex_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParamIndex_IsValid(int value);
constexpr ParamIndex ParamIndex_MIN = ALL;
constexpr ParamIndex ParamIndex_MAX = CHANNEL_ID;
constexpr int ParamIndex_ARRAYSIZE = ParamIndex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParamIndex_descriptor();
template<typename T>
inline const std::string& ParamIndex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParamIndex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParamIndex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParamIndex_descriptor(), enum_t_value);
}
inline bool ParamIndex_Parse(
    const std::string& name, ParamIndex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParamIndex>(
    ParamIndex_descriptor(), name, value);
}
// ===================================================================

class CommChannelCaliTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest) */ {
 public:
  inline CommChannelCaliTaskRequest() : CommChannelCaliTaskRequest(nullptr) {};
  virtual ~CommChannelCaliTaskRequest();

  CommChannelCaliTaskRequest(const CommChannelCaliTaskRequest& from);
  CommChannelCaliTaskRequest(CommChannelCaliTaskRequest&& from) noexcept
    : CommChannelCaliTaskRequest() {
    *this = ::std::move(from);
  }

  inline CommChannelCaliTaskRequest& operator=(const CommChannelCaliTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommChannelCaliTaskRequest& operator=(CommChannelCaliTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommChannelCaliTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommChannelCaliTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CommChannelCaliTaskRequest*>(
               &_CommChannelCaliTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommChannelCaliTaskRequest& a, CommChannelCaliTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommChannelCaliTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommChannelCaliTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommChannelCaliTaskRequest* New() const final {
    return CreateMaybeMessage<CommChannelCaliTaskRequest>(nullptr);
  }

  CommChannelCaliTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommChannelCaliTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommChannelCaliTaskRequest& from);
  void MergeFrom(const CommChannelCaliTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommChannelCaliTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest";
  }
  protected:
  explicit CommChannelCaliTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kSourceParamFieldNumber = 2,
    kAcqParamFieldNumber = 3,
    kCalTypeFieldNumber = 4,
    kChannelTypeFieldNumber = 5,
    kDacCrystalFieldNumber = 6,
    kDacV1FieldNumber = 7,
    kDacPhaseFieldNumber = 8,
  };
  // .zb.dcts.source.SourceId source_id = 1;
  bool has_source_id() const;
  private:
  bool _internal_has_source_id() const;
  public:
  void clear_source_id();
  const ::zb::dcts::source::SourceId& source_id() const;
  ::zb::dcts::source::SourceId* release_source_id();
  ::zb::dcts::source::SourceId* mutable_source_id();
  void set_allocated_source_id(::zb::dcts::source::SourceId* source_id);
  private:
  const ::zb::dcts::source::SourceId& _internal_source_id() const;
  ::zb::dcts::source::SourceId* _internal_mutable_source_id();
  public:
  void unsafe_arena_set_allocated_source_id(
      ::zb::dcts::source::SourceId* source_id);
  ::zb::dcts::source::SourceId* unsafe_arena_release_source_id();

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
  bool has_source_param() const;
  private:
  bool _internal_has_source_param() const;
  public:
  void clear_source_param();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& source_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* release_source_param();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* mutable_source_param();
  void set_allocated_source_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& _internal_source_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* _internal_mutable_source_param();
  public:
  void unsafe_arena_set_allocated_source_param(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* unsafe_arena_release_source_param();

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.kh.commSpectrum.CalType cal_type = 4;
  void clear_cal_type();
  ::zb::dcts::scenario::kh::commSpectrum::CalType cal_type() const;
  void set_cal_type(::zb::dcts::scenario::kh::commSpectrum::CalType value);
  private:
  ::zb::dcts::scenario::kh::commSpectrum::CalType _internal_cal_type() const;
  void _internal_set_cal_type(::zb::dcts::scenario::kh::commSpectrum::CalType value);
  public:

  // .zb.dcts.scenario.kh.commSpectrum.ChannelType channel_type = 5;
  void clear_channel_type();
  ::zb::dcts::scenario::kh::commSpectrum::ChannelType channel_type() const;
  void set_channel_type(::zb::dcts::scenario::kh::commSpectrum::ChannelType value);
  private:
  ::zb::dcts::scenario::kh::commSpectrum::ChannelType _internal_channel_type() const;
  void _internal_set_channel_type(::zb::dcts::scenario::kh::commSpectrum::ChannelType value);
  public:

  // int32 dac_crystal = 6;
  void clear_dac_crystal();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_crystal() const;
  void set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_crystal() const;
  void _internal_set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dac_v1 = 7;
  void clear_dac_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_v1() const;
  void set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_v1() const;
  void _internal_set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dac_phase = 8;
  void clear_dac_phase();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_phase() const;
  void set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_phase() const;
  void _internal_set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::source::SourceId* source_id_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param_;
  int cal_type_;
  int channel_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_crystal_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommChannelCali_2eproto;
};
// -------------------------------------------------------------------

class ChangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.scenario.kh.commSpectrum.ChangeRequest) */ {
 public:
  inline ChangeRequest() : ChangeRequest(nullptr) {};
  virtual ~ChangeRequest();

  ChangeRequest(const ChangeRequest& from);
  ChangeRequest(ChangeRequest&& from) noexcept
    : ChangeRequest() {
    *this = ::std::move(from);
  }

  inline ChangeRequest& operator=(const ChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeRequest& operator=(ChangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeRequest*>(
               &_ChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChangeRequest& a, ChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeRequest* New() const final {
    return CreateMaybeMessage<ChangeRequest>(nullptr);
  }

  ChangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeRequest& from);
  void MergeFrom(const ChangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.scenario.kh.commSpectrum.ChangeRequest";
  }
  protected:
  explicit ChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto);
    return ::descriptor_table_scenario_2fkh_2fKhCommChannelCali_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponserFieldNumber = 1,
    kAcqParamFieldNumber = 3,
    kParamIndexFieldNumber = 2,
    kDacCrystalFieldNumber = 6,
    kDacV1FieldNumber = 7,
    kDacPhaseFieldNumber = 8,
    kCenterFreqFieldNumber = 9,
  };
  // .zb.dcts.scenario.ScenarioTaskId responser = 1;
  bool has_responser() const;
  private:
  bool _internal_has_responser() const;
  public:
  void clear_responser();
  const ::zb::dcts::scenario::ScenarioTaskId& responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* release_responser();
  ::zb::dcts::scenario::ScenarioTaskId* mutable_responser();
  void set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser);
  private:
  const ::zb::dcts::scenario::ScenarioTaskId& _internal_responser() const;
  ::zb::dcts::scenario::ScenarioTaskId* _internal_mutable_responser();
  public:
  void unsafe_arena_set_allocated_responser(
      ::zb::dcts::scenario::ScenarioTaskId* responser);
  ::zb::dcts::scenario::ScenarioTaskId* unsafe_arena_release_responser();

  // .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
  bool has_acq_param() const;
  private:
  bool _internal_has_acq_param() const;
  public:
  void clear_acq_param();
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* release_acq_param();
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* mutable_acq_param();
  void set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  private:
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& _internal_acq_param() const;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* _internal_mutable_acq_param();
  public:
  void unsafe_arena_set_allocated_acq_param(
      ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param);
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* unsafe_arena_release_acq_param();

  // .zb.dcts.scenario.kh.commSpectrum.ParamIndex param_index = 2;
  void clear_param_index();
  ::zb::dcts::scenario::kh::commSpectrum::ParamIndex param_index() const;
  void set_param_index(::zb::dcts::scenario::kh::commSpectrum::ParamIndex value);
  private:
  ::zb::dcts::scenario::kh::commSpectrum::ParamIndex _internal_param_index() const;
  void _internal_set_param_index(::zb::dcts::scenario::kh::commSpectrum::ParamIndex value);
  public:

  // int32 dac_crystal = 6;
  void clear_dac_crystal();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_crystal() const;
  void set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_crystal() const;
  void _internal_set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dac_v1 = 7;
  void clear_dac_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_v1() const;
  void set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_v1() const;
  void _internal_set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dac_phase = 8;
  void clear_dac_phase();
  ::PROTOBUF_NAMESPACE_ID::int32 dac_phase() const;
  void set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dac_phase() const;
  void _internal_set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double center_freq = 9;
  void clear_center_freq();
  double center_freq() const;
  void set_center_freq(double value);
  private:
  double _internal_center_freq() const;
  void _internal_set_center_freq(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.ChangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::scenario::ScenarioTaskId* responser_;
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param_;
  int param_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_crystal_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 dac_phase_;
  double center_freq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scenario_2fkh_2fKhCommChannelCali_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommChannelCaliTaskRequest

// .zb.dcts.source.SourceId source_id = 1;
inline bool CommChannelCaliTaskRequest::_internal_has_source_id() const {
  return this != internal_default_instance() && source_id_ != nullptr;
}
inline bool CommChannelCaliTaskRequest::has_source_id() const {
  return _internal_has_source_id();
}
inline const ::zb::dcts::source::SourceId& CommChannelCaliTaskRequest::_internal_source_id() const {
  const ::zb::dcts::source::SourceId* p = source_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::source::SourceId*>(
      &::zb::dcts::source::_SourceId_default_instance_);
}
inline const ::zb::dcts::source::SourceId& CommChannelCaliTaskRequest::source_id() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_id)
  return _internal_source_id();
}
inline void CommChannelCaliTaskRequest::unsafe_arena_set_allocated_source_id(
    ::zb::dcts::source::SourceId* source_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  source_id_ = source_id;
  if (source_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_id)
}
inline ::zb::dcts::source::SourceId* CommChannelCaliTaskRequest::release_source_id() {
  auto temp = unsafe_arena_release_source_id();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::source::SourceId* CommChannelCaliTaskRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_id)
  
  ::zb::dcts::source::SourceId* temp = source_id_;
  source_id_ = nullptr;
  return temp;
}
inline ::zb::dcts::source::SourceId* CommChannelCaliTaskRequest::_internal_mutable_source_id() {
  
  if (source_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::source::SourceId>(GetArena());
    source_id_ = p;
  }
  return source_id_;
}
inline ::zb::dcts::source::SourceId* CommChannelCaliTaskRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_id)
  return _internal_mutable_source_id();
}
inline void CommChannelCaliTaskRequest::set_allocated_source_id(::zb::dcts::source::SourceId* source_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id_);
  }
  if (source_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_id)->GetArena();
    if (message_arena != submessage_arena) {
      source_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_id, submessage_arena);
    }
    
  } else {
    
  }
  source_id_ = source_id;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_id)
}

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource source_param = 2;
inline bool CommChannelCaliTaskRequest::_internal_has_source_param() const {
  return this != internal_default_instance() && source_param_ != nullptr;
}
inline bool CommChannelCaliTaskRequest::has_source_param() const {
  return _internal_has_source_param();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& CommChannelCaliTaskRequest::_internal_source_param() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* p = source_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource& CommChannelCaliTaskRequest::source_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_param)
  return _internal_source_param();
}
inline void CommChannelCaliTaskRequest::unsafe_arena_set_allocated_source_param(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  source_param_ = source_param;
  if (source_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_param)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* CommChannelCaliTaskRequest::release_source_param() {
  auto temp = unsafe_arena_release_source_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* CommChannelCaliTaskRequest::unsafe_arena_release_source_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_param)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* temp = source_param_;
  source_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* CommChannelCaliTaskRequest::_internal_mutable_source_param() {
  
  if (source_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource>(GetArena());
    source_param_ = p;
  }
  return source_param_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* CommChannelCaliTaskRequest::mutable_source_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_param)
  return _internal_mutable_source_param();
}
inline void CommChannelCaliTaskRequest::set_allocated_source_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* source_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param_);
  }
  if (source_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_param)->GetArena();
    if (message_arena != submessage_arena) {
      source_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_param, submessage_arena);
    }
    
  } else {
    
  }
  source_param_ = source_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.source_param)
}

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
inline bool CommChannelCaliTaskRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool CommChannelCaliTaskRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& CommChannelCaliTaskRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& CommChannelCaliTaskRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.acq_param)
  return _internal_acq_param();
}
inline void CommChannelCaliTaskRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* CommChannelCaliTaskRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* CommChannelCaliTaskRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* CommChannelCaliTaskRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* CommChannelCaliTaskRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void CommChannelCaliTaskRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.acq_param)
}

// .zb.dcts.scenario.kh.commSpectrum.CalType cal_type = 4;
inline void CommChannelCaliTaskRequest::clear_cal_type() {
  cal_type_ = 0;
}
inline ::zb::dcts::scenario::kh::commSpectrum::CalType CommChannelCaliTaskRequest::_internal_cal_type() const {
  return static_cast< ::zb::dcts::scenario::kh::commSpectrum::CalType >(cal_type_);
}
inline ::zb::dcts::scenario::kh::commSpectrum::CalType CommChannelCaliTaskRequest::cal_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.cal_type)
  return _internal_cal_type();
}
inline void CommChannelCaliTaskRequest::_internal_set_cal_type(::zb::dcts::scenario::kh::commSpectrum::CalType value) {
  
  cal_type_ = value;
}
inline void CommChannelCaliTaskRequest::set_cal_type(::zb::dcts::scenario::kh::commSpectrum::CalType value) {
  _internal_set_cal_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.cal_type)
}

// .zb.dcts.scenario.kh.commSpectrum.ChannelType channel_type = 5;
inline void CommChannelCaliTaskRequest::clear_channel_type() {
  channel_type_ = 0;
}
inline ::zb::dcts::scenario::kh::commSpectrum::ChannelType CommChannelCaliTaskRequest::_internal_channel_type() const {
  return static_cast< ::zb::dcts::scenario::kh::commSpectrum::ChannelType >(channel_type_);
}
inline ::zb::dcts::scenario::kh::commSpectrum::ChannelType CommChannelCaliTaskRequest::channel_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.channel_type)
  return _internal_channel_type();
}
inline void CommChannelCaliTaskRequest::_internal_set_channel_type(::zb::dcts::scenario::kh::commSpectrum::ChannelType value) {
  
  channel_type_ = value;
}
inline void CommChannelCaliTaskRequest::set_channel_type(::zb::dcts::scenario::kh::commSpectrum::ChannelType value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.channel_type)
}

// int32 dac_crystal = 6;
inline void CommChannelCaliTaskRequest::clear_dac_crystal() {
  dac_crystal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::_internal_dac_crystal() const {
  return dac_crystal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::dac_crystal() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_crystal)
  return _internal_dac_crystal();
}
inline void CommChannelCaliTaskRequest::_internal_set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_crystal_ = value;
}
inline void CommChannelCaliTaskRequest::set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_crystal(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_crystal)
}

// int32 dac_v1 = 7;
inline void CommChannelCaliTaskRequest::clear_dac_v1() {
  dac_v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::_internal_dac_v1() const {
  return dac_v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::dac_v1() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_v1)
  return _internal_dac_v1();
}
inline void CommChannelCaliTaskRequest::_internal_set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_v1_ = value;
}
inline void CommChannelCaliTaskRequest::set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_v1(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_v1)
}

// int32 dac_phase = 8;
inline void CommChannelCaliTaskRequest::clear_dac_phase() {
  dac_phase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::_internal_dac_phase() const {
  return dac_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommChannelCaliTaskRequest::dac_phase() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_phase)
  return _internal_dac_phase();
}
inline void CommChannelCaliTaskRequest::_internal_set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_phase_ = value;
}
inline void CommChannelCaliTaskRequest::set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_phase(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.CommChannelCaliTaskRequest.dac_phase)
}

// -------------------------------------------------------------------

// ChangeRequest

// .zb.dcts.scenario.ScenarioTaskId responser = 1;
inline bool ChangeRequest::_internal_has_responser() const {
  return this != internal_default_instance() && responser_ != nullptr;
}
inline bool ChangeRequest::has_responser() const {
  return _internal_has_responser();
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeRequest::_internal_responser() const {
  const ::zb::dcts::scenario::ScenarioTaskId* p = responser_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::ScenarioTaskId*>(
      &::zb::dcts::scenario::_ScenarioTaskId_default_instance_);
}
inline const ::zb::dcts::scenario::ScenarioTaskId& ChangeRequest::responser() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.responser)
  return _internal_responser();
}
inline void ChangeRequest::unsafe_arena_set_allocated_responser(
    ::zb::dcts::scenario::ScenarioTaskId* responser) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  responser_ = responser;
  if (responser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.responser)
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeRequest::release_responser() {
  auto temp = unsafe_arena_release_responser();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeRequest::unsafe_arena_release_responser() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.responser)
  
  ::zb::dcts::scenario::ScenarioTaskId* temp = responser_;
  responser_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeRequest::_internal_mutable_responser() {
  
  if (responser_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::ScenarioTaskId>(GetArena());
    responser_ = p;
  }
  return responser_;
}
inline ::zb::dcts::scenario::ScenarioTaskId* ChangeRequest::mutable_responser() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.responser)
  return _internal_mutable_responser();
}
inline void ChangeRequest::set_allocated_responser(::zb::dcts::scenario::ScenarioTaskId* responser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser_);
  }
  if (responser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(responser)->GetArena();
    if (message_arena != submessage_arena) {
      responser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responser, submessage_arena);
    }
    
  } else {
    
  }
  responser_ = responser;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.responser)
}

// .zb.dcts.scenario.kh.commSpectrum.ParamIndex param_index = 2;
inline void ChangeRequest::clear_param_index() {
  param_index_ = 0;
}
inline ::zb::dcts::scenario::kh::commSpectrum::ParamIndex ChangeRequest::_internal_param_index() const {
  return static_cast< ::zb::dcts::scenario::kh::commSpectrum::ParamIndex >(param_index_);
}
inline ::zb::dcts::scenario::kh::commSpectrum::ParamIndex ChangeRequest::param_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.param_index)
  return _internal_param_index();
}
inline void ChangeRequest::_internal_set_param_index(::zb::dcts::scenario::kh::commSpectrum::ParamIndex value) {
  
  param_index_ = value;
}
inline void ChangeRequest::set_param_index(::zb::dcts::scenario::kh::commSpectrum::ParamIndex value) {
  _internal_set_param_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.param_index)
}

// .zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam acq_param = 3;
inline bool ChangeRequest::_internal_has_acq_param() const {
  return this != internal_default_instance() && acq_param_ != nullptr;
}
inline bool ChangeRequest::has_acq_param() const {
  return _internal_has_acq_param();
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& ChangeRequest::_internal_acq_param() const {
  const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* p = acq_param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam*>(
      &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_);
}
inline const ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam& ChangeRequest::acq_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.acq_param)
  return _internal_acq_param();
}
inline void ChangeRequest::unsafe_arena_set_allocated_acq_param(
    ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  acq_param_ = acq_param;
  if (acq_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.acq_param)
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* ChangeRequest::release_acq_param() {
  auto temp = unsafe_arena_release_acq_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* ChangeRequest::unsafe_arena_release_acq_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.acq_param)
  
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* temp = acq_param_;
  acq_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* ChangeRequest::_internal_mutable_acq_param() {
  
  if (acq_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam>(GetArena());
    acq_param_ = p;
  }
  return acq_param_;
}
inline ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* ChangeRequest::mutable_acq_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.acq_param)
  return _internal_mutable_acq_param();
}
inline void ChangeRequest::set_allocated_acq_param(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* acq_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param_);
  }
  if (acq_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acq_param)->GetArena();
    if (message_arena != submessage_arena) {
      acq_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acq_param, submessage_arena);
    }
    
  } else {
    
  }
  acq_param_ = acq_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.acq_param)
}

// int32 dac_crystal = 6;
inline void ChangeRequest::clear_dac_crystal() {
  dac_crystal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::_internal_dac_crystal() const {
  return dac_crystal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::dac_crystal() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_crystal)
  return _internal_dac_crystal();
}
inline void ChangeRequest::_internal_set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_crystal_ = value;
}
inline void ChangeRequest::set_dac_crystal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_crystal(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_crystal)
}

// int32 dac_v1 = 7;
inline void ChangeRequest::clear_dac_v1() {
  dac_v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::_internal_dac_v1() const {
  return dac_v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::dac_v1() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_v1)
  return _internal_dac_v1();
}
inline void ChangeRequest::_internal_set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_v1_ = value;
}
inline void ChangeRequest::set_dac_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_v1(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_v1)
}

// int32 dac_phase = 8;
inline void ChangeRequest::clear_dac_phase() {
  dac_phase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::_internal_dac_phase() const {
  return dac_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangeRequest::dac_phase() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_phase)
  return _internal_dac_phase();
}
inline void ChangeRequest::_internal_set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dac_phase_ = value;
}
inline void ChangeRequest::set_dac_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dac_phase(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.dac_phase)
}

// double center_freq = 9;
inline void ChangeRequest::clear_center_freq() {
  center_freq_ = 0;
}
inline double ChangeRequest::_internal_center_freq() const {
  return center_freq_;
}
inline double ChangeRequest::center_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.center_freq)
  return _internal_center_freq();
}
inline void ChangeRequest::_internal_set_center_freq(double value) {
  
  center_freq_ = value;
}
inline void ChangeRequest::set_center_freq(double value) {
  _internal_set_center_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.scenario.kh.commSpectrum.ChangeRequest.center_freq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commSpectrum::CalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commSpectrum::CalType>() {
  return ::zb::dcts::scenario::kh::commSpectrum::CalType_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commSpectrum::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commSpectrum::ChannelType>() {
  return ::zb::dcts::scenario::kh::commSpectrum::ChannelType_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::scenario::kh::commSpectrum::ParamIndex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::scenario::kh::commSpectrum::ParamIndex>() {
  return ::zb::dcts::scenario::kh::commSpectrum::ParamIndex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scenario_2fkh_2fKhCommChannelCali_2eproto
