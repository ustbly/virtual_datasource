// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/kh/KhCommPScan.proto
#ifndef GRPC_scenario_2fkh_2fKhCommPScan_2eproto__INCLUDED
#define GRPC_scenario_2fkh_2fKhCommPScan_2eproto__INCLUDED

#include "scenario/kh/KhCommPScan.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {

class CommPScanService final {
 public:
  static constexpr char const* service_full_name() {
    return "zb.dcts.scenario.kh.commSpectrum.CommPScanService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncCreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncCreateScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCreateScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> GetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(GetPScanResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> AsyncGetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(AsyncGetPScanResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> PrepareAsyncGetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(PrepareAsyncGetPScanResultRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseScenarioRaw(context, request, cq));
    }
    // -----zoomin/datahold/detection-----
    virtual ::grpc::Status OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenZoomInRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseZoomInRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenDataHoldRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncResetDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncResetDataHoldRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseDataHoldRaw(context, request, cq));
    }
    virtual ::grpc::Status OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenDetectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseDetectionRaw(context, request, cq));
    }
    virtual ::grpc::Status QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>> AsyncQuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>>(AsyncQuerySignalTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>> PrepareAsyncQuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>>(PrepareAsyncQuerySignalTableRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncClearSignalTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncClearSignalTableRaw(context, request, cq));
    }
    virtual ::grpc::Status SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::zb::dcts::scenario::ScenarioReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> AsyncSignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(AsyncSignalGatheringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncSignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncSignalGatheringRaw(context, request, cq));
    }
    virtual ::grpc::Status GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::detection::SignalSampleList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>> AsyncGetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>>(AsyncGetGatheringResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>> PrepareAsyncGetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>>(PrepareAsyncGetGatheringResultRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPScanResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* reactor) = 0;
      #else
      virtual void GetPScanResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* reactor) = 0;
      #endif
      virtual void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // -----zoomin/datahold/detection-----
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* GetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* AsyncGetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* PrepareAsyncGetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* AsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* PrepareAsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* AsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>* AsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zb::dcts::scenario::detection::SignalSampleList>* PrepareAsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncCreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncCreateScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCreateScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> GetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(GetPScanResultRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> AsyncGetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(AsyncGetPScanResultRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>> PrepareAsyncGetPScanResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>>(PrepareAsyncGetPScanResultRaw(context, request, cq));
    }
    ::grpc::Status CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseScenarioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseScenarioRaw(context, request, cq));
    }
    ::grpc::Status OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenZoomInRaw(context, request, cq));
    }
    ::grpc::Status CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseZoomInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseZoomInRaw(context, request, cq));
    }
    ::grpc::Status OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenDataHoldRaw(context, request, cq));
    }
    ::grpc::Status ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncResetDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncResetDataHoldRaw(context, request, cq));
    }
    ::grpc::Status CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseDataHoldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseDataHoldRaw(context, request, cq));
    }
    ::grpc::Status OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncOpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncOpenDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncOpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncOpenDetectionRaw(context, request, cq));
    }
    ::grpc::Status CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncCloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncCloseDetectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncCloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncCloseDetectionRaw(context, request, cq));
    }
    ::grpc::Status QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>> AsyncQuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>>(AsyncQuerySignalTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>> PrepareAsyncQuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>>(PrepareAsyncQuerySignalTableRaw(context, request, cq));
    }
    ::grpc::Status ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncClearSignalTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncClearSignalTableRaw(context, request, cq));
    }
    ::grpc::Status SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::zb::dcts::scenario::ScenarioReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> AsyncSignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(AsyncSignalGatheringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>> PrepareAsyncSignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>>(PrepareAsyncSignalGatheringRaw(context, request, cq));
    }
    ::grpc::Status GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::detection::SignalSampleList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>> AsyncGetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>>(AsyncGetGatheringResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>> PrepareAsyncGetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>>(PrepareAsyncGetGatheringResultRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPScanResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ClientReadReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* reactor) override;
      #else
      void GetPScanResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* reactor) override;
      #endif
      void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseScenario(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseScenario(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)>) override;
      void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)>) override;
      void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCreateScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* GetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* AsyncGetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* PrepareAsyncGetPScanResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseScenarioRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* AsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* PrepareAsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* AsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* PrepareAsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>* AsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>* PrepareAsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateScenario_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPScanResult_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseScenario_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenZoomIn_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseZoomIn_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDataHold_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetDataHold_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDataHold_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDetection_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDetection_;
    const ::grpc::internal::RpcMethod rpcmethod_QuerySignalTable_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearSignalTable_;
    const ::grpc::internal::RpcMethod rpcmethod_SignalGathering_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGatheringResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status GetPScanResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* writer);
    virtual ::grpc::Status CloseScenario(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response);
    // -----zoomin/datahold/detection-----
    virtual ::grpc::Status OpenZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status CloseZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status OpenDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status ResetDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status CloseDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status OpenDetection(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status CloseDetection(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status QuerySignalTable(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response);
    virtual ::grpc::Status ClearSignalTable(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status SignalGathering(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response);
    virtual ::grpc::Status GetGatheringResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateScenario() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScenario(::grpc::ServerContext* context, ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPScanResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPScanResult(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseScenario() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseScenario(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenZoomIn() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenZoomIn(::grpc::ServerContext* context, ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseZoomIn() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseZoomIn(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDataHold() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDataHold(::grpc::ServerContext* context, ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetDataHold() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDataHold(::grpc::ServerContext* context, ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDataHold() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDataHold(::grpc::ServerContext* context, ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDetection() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDetection(::grpc::ServerContext* context, ::zb::dcts::scenario::detection::DetectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDetection() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDetection(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QuerySignalTable() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySignalTable(::grpc::ServerContext* context, ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearSignalTable() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearSignalTable(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignalGathering() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalGathering(::grpc::ServerContext* context, ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::ScenarioReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGatheringResult() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGatheringResult(::grpc::ServerContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerAsyncResponseWriter< ::zb::dcts::scenario::detection::SignalSampleList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateScenario<WithAsyncMethod_GetPScanResult<WithAsyncMethod_CloseScenario<WithAsyncMethod_OpenZoomIn<WithAsyncMethod_CloseZoomIn<WithAsyncMethod_OpenDataHold<WithAsyncMethod_ResetDataHold<WithAsyncMethod_CloseDataHold<WithAsyncMethod_OpenDetection<WithAsyncMethod_CloseDetection<WithAsyncMethod_QuerySignalTable<WithAsyncMethod_ClearSignalTable<WithAsyncMethod_SignalGathering<WithAsyncMethod_GetGatheringResult<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateScenario() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->CreateScenario(context, request, response); }));}
    void SetMessageAllocatorFor_CreateScenario(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScenario(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScenario(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPScanResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request) { return this->GetPScanResult(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* GetPScanResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* GetPScanResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseScenario() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->CloseScenario(context, request, response); }));}
    void SetMessageAllocatorFor_CloseScenario(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseScenario(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseScenario(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenZoomIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->OpenZoomIn(context, request, response); }));}
    void SetMessageAllocatorFor_OpenZoomIn(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenZoomIn(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenZoomIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseZoomIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->CloseZoomIn(context, request, response); }));}
    void SetMessageAllocatorFor_CloseZoomIn(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseZoomIn(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseZoomIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->OpenDataHold(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDataHold(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->ResetDataHold(context, request, response); }));}
    void SetMessageAllocatorFor_ResetDataHold(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->CloseDataHold(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDataHold(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::DetectionRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->OpenDetection(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDetection(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::detection::DetectionRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::DetectionRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->CloseDetection(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDetection(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QuerySignalTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::SignalTableQueryRequest, ::zb::dcts::scenario::detection::SignalTableQueryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response) { return this->QuerySignalTable(context, request, response); }));}
    void SetMessageAllocatorFor_QuerySignalTable(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::detection::SignalTableQueryRequest, ::zb::dcts::scenario::detection::SignalTableQueryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::SignalTableQueryRequest, ::zb::dcts::scenario::detection::SignalTableQueryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QuerySignalTable(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QuerySignalTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearSignalTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->ClearSignalTable(context, request, response); }));}
    void SetMessageAllocatorFor_ClearSignalTable(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearSignalTable(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearSignalTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SignalGathering() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::SignalGatheringRequest, ::zb::dcts::scenario::ScenarioReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response) { return this->SignalGathering(context, request, response); }));}
    void SetMessageAllocatorFor_SignalGathering(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::detection::SignalGatheringRequest, ::zb::dcts::scenario::ScenarioReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::detection::SignalGatheringRequest, ::zb::dcts::scenario::ScenarioReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignalGathering(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignalGathering(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetGatheringResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::detection::SignalSampleList>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response) { return this->GetGatheringResult(context, request, response); }));}
    void SetMessageAllocatorFor_GetGatheringResult(
        ::grpc::experimental::MessageAllocator< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::detection::SignalSampleList>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::detection::SignalSampleList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGatheringResult(
      ::grpc::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGatheringResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateScenario<ExperimentalWithCallbackMethod_GetPScanResult<ExperimentalWithCallbackMethod_CloseScenario<ExperimentalWithCallbackMethod_OpenZoomIn<ExperimentalWithCallbackMethod_CloseZoomIn<ExperimentalWithCallbackMethod_OpenDataHold<ExperimentalWithCallbackMethod_ResetDataHold<ExperimentalWithCallbackMethod_CloseDataHold<ExperimentalWithCallbackMethod_OpenDetection<ExperimentalWithCallbackMethod_CloseDetection<ExperimentalWithCallbackMethod_QuerySignalTable<ExperimentalWithCallbackMethod_ClearSignalTable<ExperimentalWithCallbackMethod_SignalGathering<ExperimentalWithCallbackMethod_GetGatheringResult<Service > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateScenario<ExperimentalWithCallbackMethod_GetPScanResult<ExperimentalWithCallbackMethod_CloseScenario<ExperimentalWithCallbackMethod_OpenZoomIn<ExperimentalWithCallbackMethod_CloseZoomIn<ExperimentalWithCallbackMethod_OpenDataHold<ExperimentalWithCallbackMethod_ResetDataHold<ExperimentalWithCallbackMethod_CloseDataHold<ExperimentalWithCallbackMethod_OpenDetection<ExperimentalWithCallbackMethod_CloseDetection<ExperimentalWithCallbackMethod_QuerySignalTable<ExperimentalWithCallbackMethod_ClearSignalTable<ExperimentalWithCallbackMethod_SignalGathering<ExperimentalWithCallbackMethod_GetGatheringResult<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateScenario() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPScanResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseScenario() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenZoomIn() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseZoomIn() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDataHold() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetDataHold() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDataHold() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDetection() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDetection() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QuerySignalTable() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearSignalTable() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignalGathering() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGatheringResult() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateScenario() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScenario(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPScanResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPScanResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseScenario() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseScenario(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenZoomIn() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenZoomIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseZoomIn() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseZoomIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDataHold() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDataHold(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetDataHold() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetDataHold(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDataHold() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDataHold(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDetection() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDetection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDetection() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDetection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QuerySignalTable() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuerySignalTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearSignalTable() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearSignalTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignalGathering() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignalGathering(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGatheringResult() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGatheringResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateScenario() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateScenario(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScenario(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScenario(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPScanResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetPScanResult(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetPScanResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetPScanResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseScenario() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseScenario(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseScenario(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseScenario(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenZoomIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenZoomIn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenZoomIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenZoomIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseZoomIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseZoomIn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseZoomIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseZoomIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDataHold(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetDataHold(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseDataHold() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDataHold(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDataHold(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDataHold(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDetection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseDetection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDetection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDetection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDetection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QuerySignalTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QuerySignalTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QuerySignalTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QuerySignalTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearSignalTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearSignalTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearSignalTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearSignalTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SignalGathering() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignalGathering(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SignalGathering(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SignalGathering(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetGatheringResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGatheringResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetGatheringResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetGatheringResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateScenario() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_CreateScenario<BaseClass>::StreamedCreateScenario, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateScenario(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::kh::commSpectrum::CommPScanCreateScenarioRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseScenario : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseScenario() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_CloseScenario<BaseClass>::StreamedCloseScenario, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseScenario() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseScenario(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseScenario(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenZoomIn() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_OpenZoomIn<BaseClass>::StreamedOpenZoomIn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::ZoomInRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenZoomIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::spectrum::ZoomInRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseZoomIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseZoomIn() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_CloseZoomIn<BaseClass>::StreamedCloseZoomIn, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseZoomIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseZoomIn(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseZoomIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDataHold() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_OpenDataHold<BaseClass>::StreamedOpenDataHold, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDataHold(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::spectrum::DataHoldRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetDataHold() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_ResetDataHold<BaseClass>::StreamedResetDataHold, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetDataHold(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::spectrum::DataHoldRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDataHold : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDataHold() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_CloseDataHold<BaseClass>::StreamedCloseDataHold, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseDataHold() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDataHold(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::spectrum::DataHoldRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDataHold(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::spectrum::DataHoldRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDetection() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::detection::DetectionRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_OpenDetection<BaseClass>::StreamedOpenDetection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OpenDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::DetectionRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDetection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::detection::DetectionRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDetection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDetection() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_CloseDetection<BaseClass>::StreamedCloseDetection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseDetection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDetection(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDetection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QuerySignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QuerySignalTable() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::detection::SignalTableQueryRequest, ::zb::dcts::scenario::detection::SignalTableQueryResponse>(std::bind(&WithStreamedUnaryMethod_QuerySignalTable<BaseClass>::StreamedQuerySignalTable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QuerySignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QuerySignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* /*request*/, ::zb::dcts::scenario::detection::SignalTableQueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuerySignalTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::detection::SignalTableQueryRequest,::zb::dcts::scenario::detection::SignalTableQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearSignalTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearSignalTable() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_ClearSignalTable<BaseClass>::StreamedClearSignalTable, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ClearSignalTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearSignalTable(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearSignalTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignalGathering : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignalGathering() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::detection::SignalGatheringRequest, ::zb::dcts::scenario::ScenarioReply>(std::bind(&WithStreamedUnaryMethod_SignalGathering<BaseClass>::StreamedSignalGathering, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignalGathering() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignalGathering(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::detection::SignalGatheringRequest* /*request*/, ::zb::dcts::scenario::ScenarioReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignalGathering(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::detection::SignalGatheringRequest,::zb::dcts::scenario::ScenarioReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGatheringResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGatheringResult() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::detection::SignalSampleList>(std::bind(&WithStreamedUnaryMethod_GetGatheringResult<BaseClass>::StreamedGetGatheringResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetGatheringResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGatheringResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::zb::dcts::scenario::detection::SignalSampleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGatheringResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::detection::SignalSampleList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateScenario<WithStreamedUnaryMethod_CloseScenario<WithStreamedUnaryMethod_OpenZoomIn<WithStreamedUnaryMethod_CloseZoomIn<WithStreamedUnaryMethod_OpenDataHold<WithStreamedUnaryMethod_ResetDataHold<WithStreamedUnaryMethod_CloseDataHold<WithStreamedUnaryMethod_OpenDetection<WithStreamedUnaryMethod_CloseDetection<WithStreamedUnaryMethod_QuerySignalTable<WithStreamedUnaryMethod_ClearSignalTable<WithStreamedUnaryMethod_SignalGathering<WithStreamedUnaryMethod_GetGatheringResult<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetPScanResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetPScanResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>(std::bind(&WithSplitStreamingMethod_GetPScanResult<BaseClass>::StreamedGetPScanResult, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetPScanResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPScanResult(::grpc::ServerContext* /*context*/, const ::zb::dcts::scenario::ScenarioTaskId* /*request*/, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetPScanResult(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::zb::dcts::scenario::ScenarioTaskId,::zb::dcts::scenario::kh::commSpectrum::CommPScanResult>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetPScanResult<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateScenario<WithSplitStreamingMethod_GetPScanResult<WithStreamedUnaryMethod_CloseScenario<WithStreamedUnaryMethod_OpenZoomIn<WithStreamedUnaryMethod_CloseZoomIn<WithStreamedUnaryMethod_OpenDataHold<WithStreamedUnaryMethod_ResetDataHold<WithStreamedUnaryMethod_CloseDataHold<WithStreamedUnaryMethod_OpenDetection<WithStreamedUnaryMethod_CloseDetection<WithStreamedUnaryMethod_QuerySignalTable<WithStreamedUnaryMethod_ClearSignalTable<WithStreamedUnaryMethod_SignalGathering<WithStreamedUnaryMethod_GetGatheringResult<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb


#endif  // GRPC_scenario_2fkh_2fKhCommPScan_2eproto__INCLUDED
