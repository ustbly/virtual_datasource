// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenario/kh/KhMultiChannel.proto

#include "scenario/kh/KhMultiChannel.pb.h"
#include "scenario/kh/KhMultiChannel.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commMultiChannel {

static const char* MultiChannelService_method_names[] = {
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/StartTask",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/GetResult",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/ChangeParam",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/StopTask",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/OpenZoomIn",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/CloseZoomIn",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/OpenDataHold",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/ResetDataHold",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/CloseDataHold",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/OpenDetection",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/CloseDetection",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/QuerySignalTable",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/ClearSignalTable",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/SignalGathering",
  "/zb.dcts.scenario.kh.commMultiChannel.MultiChannelService/GetGatheringResult",
};

std::unique_ptr< MultiChannelService::Stub> MultiChannelService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MultiChannelService::Stub> stub(new MultiChannelService::Stub(channel));
  return stub;
}

MultiChannelService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartTask_(MultiChannelService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResult_(MultiChannelService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChangeParam_(MultiChannelService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTask_(MultiChannelService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenZoomIn_(MultiChannelService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseZoomIn_(MultiChannelService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenDataHold_(MultiChannelService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetDataHold_(MultiChannelService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseDataHold_(MultiChannelService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenDetection_(MultiChannelService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseDetection_(MultiChannelService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuerySignalTable_(MultiChannelService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearSignalTable_(MultiChannelService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignalGathering_(MultiChannelService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGatheringResult_(MultiChannelService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MultiChannelService::Stub::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartTask_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::StartTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncStartTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StartTask_, context, request, false);
}

::grpc::ClientReader< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>* MultiChannelService::Stub::GetResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>::Create(channel_.get(), rpcmethod_GetResult_, context, request);
}

void MultiChannelService::Stub::experimental_async::GetResult(::grpc::ClientContext* context, ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::experimental::ClientReadReactor< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>::Create(stub_->channel_.get(), stub_->rpcmethod_GetResult_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>* MultiChannelService::Stub::AsyncGetResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>::Create(channel_.get(), cq, rpcmethod_GetResult_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>* MultiChannelService::Stub::PrepareAsyncGetResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>::Create(channel_.get(), cq, rpcmethod_GetResult_, context, request, false, nullptr);
}

::grpc::Status MultiChannelService::Stub::ChangeParam(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeParam_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::ChangeParam(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeParam_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ChangeParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeParam_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ChangeParam(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeParam_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::ChangeParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncChangeParamRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ChangeParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncChangeParamRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ChangeParam_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopTask_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::StopTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncStopTaskRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_StopTask_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenZoomIn_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::OpenZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncOpenZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenZoomIn_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseZoomIn_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::CloseZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncCloseZoomInRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseZoomIn_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDataHold_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::OpenDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncOpenDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDataHold_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetDataHold_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::ResetDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResetDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncResetDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ResetDataHold_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseDataHold_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::CloseDataHold(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDataHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDataHold_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncCloseDataHoldRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDataHold_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenDetection_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDetection_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenDetection_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::OpenDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDetection_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::OpenDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenDetection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDetection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncOpenDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_OpenDetection_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CloseDetection_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDetection_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CloseDetection_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::CloseDetection(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDetection_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::CloseDetection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CloseDetection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDetection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncCloseDetectionRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_CloseDetection_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QuerySignalTable_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QuerySignalTable_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QuerySignalTable_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::QuerySignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QuerySignalTable_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::QuerySignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QuerySignalTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* MultiChannelService::Stub::AsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::detection::SignalTableQueryResponse>::Create(channel_.get(), cq, rpcmethod_QuerySignalTable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalTableQueryResponse>* MultiChannelService::Stub::PrepareAsyncQuerySignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::detection::SignalTableQueryResponse>::Create(channel_.get(), cq, rpcmethod_QuerySignalTable_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearSignalTable_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearSignalTable_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearSignalTable_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::ClearSignalTable(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearSignalTable_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::ClearSignalTable(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearSignalTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ClearSignalTable_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncClearSignalTableRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_ClearSignalTable_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::zb::dcts::scenario::ScenarioReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignalGathering_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignalGathering_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignalGathering_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::SignalGathering(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignalGathering_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::SignalGathering(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::ScenarioReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignalGathering_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::AsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_SignalGathering_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::ScenarioReply>* MultiChannelService::Stub::PrepareAsyncSignalGatheringRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::ScenarioReply>::Create(channel_.get(), cq, rpcmethod_SignalGathering_, context, request, false);
}

::grpc::Status MultiChannelService::Stub::GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::zb::dcts::scenario::detection::SignalSampleList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGatheringResult_, context, request, response);
}

void MultiChannelService::Stub::experimental_async::GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGatheringResult_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGatheringResult_, context, request, response, std::move(f));
}

void MultiChannelService::Stub::experimental_async::GetGatheringResult(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGatheringResult_, context, request, response, reactor);
}

void MultiChannelService::Stub::experimental_async::GetGatheringResult(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::zb::dcts::scenario::detection::SignalSampleList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGatheringResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>* MultiChannelService::Stub::AsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::detection::SignalSampleList>::Create(channel_.get(), cq, rpcmethod_GetGatheringResult_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::zb::dcts::scenario::detection::SignalSampleList>* MultiChannelService::Stub::PrepareAsyncGetGatheringResultRaw(::grpc::ClientContext* context, const ::zb::dcts::scenario::ScenarioTaskId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::zb::dcts::scenario::detection::SignalSampleList>::Create(channel_.get(), cq, rpcmethod_GetGatheringResult_, context, request, false);
}

MultiChannelService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::StartTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>(
          std::mem_fn(&MultiChannelService::Service::GetResult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::ChangeParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::StopTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::spectrum::ZoomInRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::OpenZoomIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::CloseZoomIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::OpenDataHold), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::ResetDataHold), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::spectrum::DataHoldRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::CloseDataHold), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::detection::DetectionRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::OpenDetection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::CloseDetection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::detection::SignalTableQueryRequest, ::zb::dcts::scenario::detection::SignalTableQueryResponse>(
          std::mem_fn(&MultiChannelService::Service::QuerySignalTable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::ClearSignalTable), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::detection::SignalGatheringRequest, ::zb::dcts::scenario::ScenarioReply>(
          std::mem_fn(&MultiChannelService::Service::SignalGathering), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MultiChannelService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MultiChannelService::Service, ::zb::dcts::scenario::ScenarioTaskId, ::zb::dcts::scenario::detection::SignalSampleList>(
          std::mem_fn(&MultiChannelService::Service::GetGatheringResult), this)));
}

MultiChannelService::Service::~Service() {
}

::grpc::Status MultiChannelService::Service::StartTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::MultiTaskStartRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::GetResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::grpc::ServerWriter< ::zb::dcts::scenario::kh::commMultiChannel::MultiResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::ChangeParam(::grpc::ServerContext* context, const ::zb::dcts::scenario::kh::commMultiChannel::ChannelChangeRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::StopTask(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::OpenZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::ZoomInRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::CloseZoomIn(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::OpenDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::ResetDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::CloseDataHold(::grpc::ServerContext* context, const ::zb::dcts::scenario::spectrum::DataHoldRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::OpenDetection(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::DetectionRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::CloseDetection(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::QuerySignalTable(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::SignalTableQueryRequest* request, ::zb::dcts::scenario::detection::SignalTableQueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::ClearSignalTable(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::SignalGathering(::grpc::ServerContext* context, const ::zb::dcts::scenario::detection::SignalGatheringRequest* request, ::zb::dcts::scenario::ScenarioReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MultiChannelService::Service::GetGatheringResult(::grpc::ServerContext* context, const ::zb::dcts::scenario::ScenarioTaskId* request, ::zb::dcts::scenario::detection::SignalSampleList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zb
}  // namespace dcts
}  // namespace scenario
}  // namespace kh
}  // namespace commMultiChannel

