// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhSpectrumAcq.proto

#include "scenario/kh/KhSpectrumAcq.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fkh_2fKhSpectrumAcq_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrequencyBand_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrequencySpan_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Header_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scenario_2fspectrum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SegmentHeader_scenario_2fspectrum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fsource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceId_source_2fsource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_source_2fkh_2fKhContext_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowParams_source_2fkh_2fKhContext_2eproto;
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
class SpectrumAcqSource_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumAcqSource_ParamsEntry_DoNotUse> _instance;
} _SpectrumAcqSource_ParamsEntry_DoNotUse_default_instance_;
class SpectrumAcqSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumAcqSource> _instance;
} _SpectrumAcqSource_default_instance_;
class FequecyPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FequecyPoints> _instance;
} _FequecyPoints_default_instance_;
class SpectrumAcqParam_OthersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumAcqParam_OthersEntry_DoNotUse> _instance;
} _SpectrumAcqParam_OthersEntry_DoNotUse_default_instance_;
class SpectrumAcqParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumAcqParam> _instance;
  const ::zb::dcts::scenario::spectrum::FrequencySpan* freq_span_;
  const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points_;
} _SpectrumAcqParam_default_instance_;
class SpectrumAcqResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpectrumAcqResult> _instance;
} _SpectrumAcqResult_default_instance_;
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_FequecyPoints_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {}};

static void InitDefaultsscc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {
      &scc_info_FrequencySpan_scenario_2fspectrum_2eproto.base,
      &scc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
      &scc_info_WindowParams_source_2fkh_2fKhContext_2eproto.base,
      &scc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,}};

static void InitDefaultsscc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_OthersEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse();
  }
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {}};

static void InitDefaultsscc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqResult_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {
      &scc_info_Header_scenario_2fspectrum_2eproto.base,
      &scc_info_SegmentHeader_scenario_2fspectrum_2eproto.base,
      &scc_info_FrequencyBand_scenario_2fspectrum_2eproto.base,}};

static void InitDefaultsscc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {
      &scc_info_SourceId_source_2fsource_2eproto.base,
      &scc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,}};

static void InitDefaultsscc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse();
  }
  ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scenario_2fkh_2fKhSpectrumAcq_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scenario_2fkh_2fKhSpectrumAcq_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scenario_2fkh_2fKhSpectrumAcq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource, id_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints, freq_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, mode_),
  offsetof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParamDefaultTypeInternal, freq_span_),
  offsetof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParamDefaultTypeInternal, freq_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, rbw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, detect_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, channel_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, attenuation_gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, win_params_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, rf_limit_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, search_step_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, residence_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, sample_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, result_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, expected_points_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, average_count_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, antenna_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, antenna_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, fft_detect_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, others_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam, frequency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult, header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult, seg_header_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult, band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult, spectrum_view_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse)},
  { 9, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource)},
  { 16, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints)},
  { 22, 29, sizeof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse)},
  { 31, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam)},
  { 56, -1, sizeof(::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_FequecyPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_OthersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqResult_default_instance_),
};

const char descriptor_table_protodef_scenario_2fkh_2fKhSpectrumAcq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037scenario/kh/KhSpectrumAcq.proto\022 zb.dc"
  "ts.scenario.kh.commSpectrum\032\023source/sour"
  "ce.proto\032\031source/kh/KhContext.proto\032\027sce"
  "nario/spectrum.proto\"\271\001\n\021SpectrumAcqSour"
  "ce\022$\n\002id\030\001 \001(\0132\030.zb.dcts.source.SourceId"
  "\022O\n\006params\030\006 \003(\0132\?.zb.dcts.scenario.kh.c"
  "ommSpectrum.SpectrumAcqSource.ParamsEntr"
  "y\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"$\n\rFequecyPoints\022\023\n\013freq_points"
  "\030\001 \003(\001\"\316\006\n\020SpectrumAcqParam\0227\n\004mode\030\001 \001("
  "\0162).zb.dcts.scenario.kh.commSpectrum.Run"
  "Mode\022=\n\tfreq_span\030\002 \001(\0132(.zb.dcts.scenar"
  "io.spectrum.FrequencySpanH\000\022F\n\013freq_poin"
  "ts\030\003 \001(\0132/.zb.dcts.scenario.kh.commSpect"
  "rum.FequecyPointsH\000\022\013\n\003rbw\030\004 \001(\001\0222\n\013dete"
  "ct_mode\030\005 \001(\0162\035.zb.dcts.source.kh.Detect"
  "Mode\0224\n\014channel_mode\030\006 \001(\0162\036.zb.dcts.sou"
  "rce.kh.ChannelMode\022\030\n\020attenuation_gain\030\007"
  " \001(\001\0223\n\nwin_params\030\010 \001(\0132\037.zb.dcts.sourc"
  "e.kh.WindowParams\022\020\n\010rf_limit\030\t \001(\001\022\023\n\013s"
  "earch_step\030\n \001(\001\022\026\n\016residence_time\030\013 \001(\005"
  "\022\027\n\017sample_interval\030\014 \001(\005\022\027\n\017result_inte"
  "rval\030\r \001(\005\022\027\n\017expected_points\030\017 \001(\005\022\025\n\ra"
  "verage_count\030\020 \001(\005\022\017\n\007antenna\030\021 \001(\005\022;\n\014a"
  "ntenna_mode\030\022 \001(\0162%.zb.dcts.source.kh.An"
  "tennaControlMode\0229\n\017fft_detect_mode\030\023 \001("
  "\0162 .zb.dcts.source.kh.FFTDetectMode\022N\n\006o"
  "thers\030\024 \003(\0132>.zb.dcts.scenario.kh.commSp"
  "ectrum.SpectrumAcqParam.OthersEntry\032-\n\013O"
  "thersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001B\013\n\tfrequency\"\323\001\n\021SpectrumAcqResult\0221\n"
  "\006header\030\001 \001(\0132!.zb.dcts.scenario.spectru"
  "m.Header\022<\n\nseg_header\030\004 \001(\0132(.zb.dcts.s"
  "cenario.spectrum.SegmentHeader\0226\n\004band\030\005"
  " \001(\0132(.zb.dcts.scenario.spectrum.Frequen"
  "cyBand\022\025\n\rspectrum_view\030\006 \003(\002*U\n\007RunMode"
  "\022\014\n\010REALTIME\020\000\022\t\n\005SWEEP\020\001\022\014\n\010SEAMLESS\020\002\022"
  "\t\n\005HSCAN\020\003\022\n\n\006SEARCH\020\004\022\014\n\010DISCRETE\020\005b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_deps[3] = {
  &::descriptor_table_scenario_2fspectrum_2eproto,
  &::descriptor_table_source_2fkh_2fKhContext_2eproto,
  &::descriptor_table_source_2fsource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_sccs[6] = {
  &scc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
  &scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
  &scc_info_SpectrumAcqParam_OthersEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
  &scc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
  &scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
  &scc_info_SpectrumAcqSource_ParamsEntry_DoNotUse_scenario_2fkh_2fKhSpectrumAcq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto = {
  false, false, descriptor_table_protodef_scenario_2fkh_2fKhSpectrumAcq_2eproto, "scenario/kh/KhSpectrumAcq.proto", 1524,
  &descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_once, descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_sccs, descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_scenario_2fkh_2fKhSpectrumAcq_2eproto::offsets,
  file_level_metadata_scenario_2fkh_2fKhSpectrumAcq_2eproto, 6, file_level_enum_descriptors_scenario_2fkh_2fKhSpectrumAcq_2eproto, file_level_service_descriptors_scenario_2fkh_2fKhSpectrumAcq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scenario_2fkh_2fKhSpectrumAcq_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto)), true);
namespace zb {
namespace dcts {
namespace scenario {
namespace kh {
namespace commSpectrum {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scenario_2fkh_2fKhSpectrumAcq_2eproto);
  return file_level_enum_descriptors_scenario_2fkh_2fKhSpectrumAcq_2eproto[0];
}
bool RunMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

SpectrumAcqSource_ParamsEntry_DoNotUse::SpectrumAcqSource_ParamsEntry_DoNotUse() {}
SpectrumAcqSource_ParamsEntry_DoNotUse::SpectrumAcqSource_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpectrumAcqSource_ParamsEntry_DoNotUse::MergeFrom(const SpectrumAcqSource_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpectrumAcqSource_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpectrumAcqSource_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SpectrumAcqSource::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqSource_default_instance_._instance.get_mutable()->id_ = const_cast< ::zb::dcts::source::SourceId*>(
      ::zb::dcts::source::SourceId::internal_default_instance());
}
class SpectrumAcqSource::_Internal {
 public:
  static const ::zb::dcts::source::SourceId& id(const SpectrumAcqSource* msg);
};

const ::zb::dcts::source::SourceId&
SpectrumAcqSource::_Internal::id(const SpectrumAcqSource* msg) {
  return *msg->id_;
}
void SpectrumAcqSource::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
SpectrumAcqSource::SpectrumAcqSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
}
SpectrumAcqSource::SpectrumAcqSource(const SpectrumAcqSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  if (from._internal_has_id()) {
    id_ = new ::zb::dcts::source::SourceId(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
}

void SpectrumAcqSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  id_ = nullptr;
}

SpectrumAcqSource::~SpectrumAcqSource() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumAcqSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void SpectrumAcqSource::ArenaDtor(void* object) {
  SpectrumAcqSource* _this = reinterpret_cast< SpectrumAcqSource* >(object);
  (void)_this;
}
void SpectrumAcqSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumAcqSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpectrumAcqSource& SpectrumAcqSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpectrumAcqSource_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  return *internal_default_instance();
}


void SpectrumAcqSource::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumAcqSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.source.SourceId id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumAcqSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // map<string, string> params = 6;
  if (!this->_internal_params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource.ParamsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpectrumAcqSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_params().begin();
          it != this->_internal_params().end(); ++it) {
        target = SpectrumAcqSource_ParamsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  return target;
}

size_t SpectrumAcqSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_params().begin();
      it != this->_internal_params().end(); ++it) {
    total_size += SpectrumAcqSource_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.SourceId id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumAcqSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumAcqSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumAcqSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
    MergeFrom(*source);
  }
}

void SpectrumAcqSource::MergeFrom(const SpectrumAcqSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from.has_id()) {
    _internal_mutable_id()->::zb::dcts::source::SourceId::MergeFrom(from._internal_id());
  }
}

void SpectrumAcqSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumAcqSource::CopyFrom(const SpectrumAcqSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumAcqSource::IsInitialized() const {
  return true;
}

void SpectrumAcqSource::InternalSwap(SpectrumAcqSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.Swap(&other->params_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumAcqSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FequecyPoints::InitAsDefaultInstance() {
}
class FequecyPoints::_Internal {
 public:
};

FequecyPoints::FequecyPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  freq_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
}
FequecyPoints::FequecyPoints(const FequecyPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      freq_points_(from.freq_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
}

void FequecyPoints::SharedCtor() {
}

FequecyPoints::~FequecyPoints() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FequecyPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FequecyPoints::ArenaDtor(void* object) {
  FequecyPoints* _this = reinterpret_cast< FequecyPoints* >(object);
  (void)_this;
}
void FequecyPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FequecyPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FequecyPoints& FequecyPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FequecyPoints_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  return *internal_default_instance();
}


void FequecyPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FequecyPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double freq_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_freq_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_freq_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FequecyPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double freq_points = 1;
  if (this->_internal_freq_points_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_freq_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  return target;
}

size_t FequecyPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double freq_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_freq_points_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _freq_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FequecyPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const FequecyPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FequecyPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
    MergeFrom(*source);
  }
}

void FequecyPoints::MergeFrom(const FequecyPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_points_.MergeFrom(from.freq_points_);
}

void FequecyPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FequecyPoints::CopyFrom(const FequecyPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FequecyPoints::IsInitialized() const {
  return true;
}

void FequecyPoints::InternalSwap(FequecyPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freq_points_.InternalSwap(&other->freq_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FequecyPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SpectrumAcqParam_OthersEntry_DoNotUse::SpectrumAcqParam_OthersEntry_DoNotUse() {}
SpectrumAcqParam_OthersEntry_DoNotUse::SpectrumAcqParam_OthersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpectrumAcqParam_OthersEntry_DoNotUse::MergeFrom(const SpectrumAcqParam_OthersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpectrumAcqParam_OthersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpectrumAcqParam_OthersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SpectrumAcqParam::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_.freq_span_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencySpan*>(
      ::zb::dcts::scenario::spectrum::FrequencySpan::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_.freq_points_ = const_cast< ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints*>(
      ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqParam_default_instance_._instance.get_mutable()->win_params_ = const_cast< ::zb::dcts::source::kh::WindowParams*>(
      ::zb::dcts::source::kh::WindowParams::internal_default_instance());
}
class SpectrumAcqParam::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::FrequencySpan& freq_span(const SpectrumAcqParam* msg);
  static const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints& freq_points(const SpectrumAcqParam* msg);
  static const ::zb::dcts::source::kh::WindowParams& win_params(const SpectrumAcqParam* msg);
};

const ::zb::dcts::scenario::spectrum::FrequencySpan&
SpectrumAcqParam::_Internal::freq_span(const SpectrumAcqParam* msg) {
  return *msg->frequency_.freq_span_;
}
const ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints&
SpectrumAcqParam::_Internal::freq_points(const SpectrumAcqParam* msg) {
  return *msg->frequency_.freq_points_;
}
const ::zb::dcts::source::kh::WindowParams&
SpectrumAcqParam::_Internal::win_params(const SpectrumAcqParam* msg) {
  return *msg->win_params_;
}
void SpectrumAcqParam::set_allocated_freq_span(::zb::dcts::scenario::spectrum::FrequencySpan* freq_span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_frequency();
  if (freq_span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freq_span)->GetArena();
    if (message_arena != submessage_arena) {
      freq_span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_span, submessage_arena);
    }
    set_has_freq_span();
    frequency_.freq_span_ = freq_span;
  }
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_span)
}
void SpectrumAcqParam::clear_freq_span() {
  if (_internal_has_freq_span()) {
    if (GetArena() == nullptr) {
      delete frequency_.freq_span_;
    }
    clear_has_frequency();
  }
}
void SpectrumAcqParam::set_allocated_freq_points(::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* freq_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_frequency();
  if (freq_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(freq_points);
    if (message_arena != submessage_arena) {
      freq_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freq_points, submessage_arena);
    }
    set_has_freq_points();
    frequency_.freq_points_ = freq_points;
  }
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.freq_points)
}
void SpectrumAcqParam::clear_win_params() {
  if (GetArena() == nullptr && win_params_ != nullptr) {
    delete win_params_;
  }
  win_params_ = nullptr;
}
SpectrumAcqParam::SpectrumAcqParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  others_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
}
SpectrumAcqParam::SpectrumAcqParam(const SpectrumAcqParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  others_.MergeFrom(from.others_);
  if (from._internal_has_win_params()) {
    win_params_ = new ::zb::dcts::source::kh::WindowParams(*from.win_params_);
  } else {
    win_params_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&fft_detect_mode_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(fft_detect_mode_));
  clear_has_frequency();
  switch (from.frequency_case()) {
    case kFreqSpan: {
      _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
      break;
    }
    case kFreqPoints: {
      _internal_mutable_freq_points()->::zb::dcts::scenario::kh::commSpectrum::FequecyPoints::MergeFrom(from._internal_freq_points());
      break;
    }
    case FREQUENCY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
}

void SpectrumAcqParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  ::memset(&win_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_detect_mode_) -
      reinterpret_cast<char*>(&win_params_)) + sizeof(fft_detect_mode_));
  clear_has_frequency();
}

SpectrumAcqParam::~SpectrumAcqParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumAcqParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete win_params_;
  if (has_frequency()) {
    clear_frequency();
  }
}

void SpectrumAcqParam::ArenaDtor(void* object) {
  SpectrumAcqParam* _this = reinterpret_cast< SpectrumAcqParam* >(object);
  (void)_this;
}
void SpectrumAcqParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumAcqParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpectrumAcqParam& SpectrumAcqParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpectrumAcqParam_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  return *internal_default_instance();
}


void SpectrumAcqParam::clear_frequency() {
// @@protoc_insertion_point(one_of_clear_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  switch (frequency_case()) {
    case kFreqSpan: {
      if (GetArena() == nullptr) {
        delete frequency_.freq_span_;
      }
      break;
    }
    case kFreqPoints: {
      if (GetArena() == nullptr) {
        delete frequency_.freq_points_;
      }
      break;
    }
    case FREQUENCY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FREQUENCY_NOT_SET;
}


void SpectrumAcqParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  others_.Clear();
  if (GetArena() == nullptr && win_params_ != nullptr) {
    delete win_params_;
  }
  win_params_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fft_detect_mode_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(fft_detect_mode_));
  clear_frequency();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumAcqParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::zb::dcts::scenario::kh::commSpectrum::RunMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_freq_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rbw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rbw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.DetectMode detect_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_detect_mode(static_cast<::zb::dcts::source::kh::DetectMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.ChannelMode channel_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channel_mode(static_cast<::zb::dcts::source::kh::ChannelMode>(val));
        } else goto handle_unusual;
        continue;
      // double attenuation_gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          attenuation_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.WindowParams win_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_win_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rf_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          rf_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double search_step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          search_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 residence_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          residence_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sample_interval = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sample_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result_interval = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          result_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expected_points = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          expected_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 average_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          average_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 antenna = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_antenna_mode(static_cast<::zb::dcts::source::kh::AntennaControlMode>(val));
        } else goto handle_unusual;
        continue;
      // .zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fft_detect_mode(static_cast<::zb::dcts::source::kh::FFTDetectMode>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> others = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&others_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumAcqParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
  if (_internal_has_freq_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::freq_span(this), target, stream);
  }

  // .zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;
  if (_internal_has_freq_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::freq_points(this), target, stream);
  }

  // double rbw = 4;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_rbw(), target);
  }

  // .zb.dcts.source.kh.DetectMode detect_mode = 5;
  if (this->detect_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_detect_mode(), target);
  }

  // .zb.dcts.source.kh.ChannelMode channel_mode = 6;
  if (this->channel_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_channel_mode(), target);
  }

  // double attenuation_gain = 7;
  if (!(this->attenuation_gain() <= 0 && this->attenuation_gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_attenuation_gain(), target);
  }

  // .zb.dcts.source.kh.WindowParams win_params = 8;
  if (this->has_win_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::win_params(this), target, stream);
  }

  // double rf_limit = 9;
  if (!(this->rf_limit() <= 0 && this->rf_limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_rf_limit(), target);
  }

  // double search_step = 10;
  if (!(this->search_step() <= 0 && this->search_step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_search_step(), target);
  }

  // int32 residence_time = 11;
  if (this->residence_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_residence_time(), target);
  }

  // int32 sample_interval = 12;
  if (this->sample_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sample_interval(), target);
  }

  // int32 result_interval = 13;
  if (this->result_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_result_interval(), target);
  }

  // int32 expected_points = 15;
  if (this->expected_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_expected_points(), target);
  }

  // int32 average_count = 16;
  if (this->average_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_average_count(), target);
  }

  // int32 antenna = 17;
  if (this->antenna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_antenna(), target);
  }

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;
  if (this->antenna_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_antenna_mode(), target);
  }

  // .zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;
  if (this->fft_detect_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_fft_detect_mode(), target);
  }

  // map<string, string> others = 20;
  if (!this->_internal_others().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.OthersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam.OthersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_others().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_others().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_others().begin();
          it != this->_internal_others().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpectrumAcqParam_OthersEntry_DoNotUse::Funcs::InternalSerialize(20, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_others().begin();
          it != this->_internal_others().end(); ++it) {
        target = SpectrumAcqParam_OthersEntry_DoNotUse::Funcs::InternalSerialize(20, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  return target;
}

size_t SpectrumAcqParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> others = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_others_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_others().begin();
      it != this->_internal_others().end(); ++it) {
    total_size += SpectrumAcqParam_OthersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.source.kh.WindowParams win_params = 8;
  if (this->has_win_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *win_params_);
  }

  // .zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .zb.dcts.source.kh.DetectMode detect_mode = 5;
  if (this->detect_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_detect_mode());
  }

  // double rbw = 4;
  if (!(this->rbw() <= 0 && this->rbw() >= 0)) {
    total_size += 1 + 8;
  }

  // double attenuation_gain = 7;
  if (!(this->attenuation_gain() <= 0 && this->attenuation_gain() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.source.kh.ChannelMode channel_mode = 6;
  if (this->channel_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_mode());
  }

  // int32 residence_time = 11;
  if (this->residence_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_residence_time());
  }

  // double rf_limit = 9;
  if (!(this->rf_limit() <= 0 && this->rf_limit() >= 0)) {
    total_size += 1 + 8;
  }

  // double search_step = 10;
  if (!(this->search_step() <= 0 && this->search_step() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 sample_interval = 12;
  if (this->sample_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_interval());
  }

  // int32 result_interval = 13;
  if (this->result_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result_interval());
  }

  // int32 expected_points = 15;
  if (this->expected_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expected_points());
  }

  // int32 average_count = 16;
  if (this->average_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average_count());
  }

  // int32 antenna = 17;
  if (this->antenna() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna());
  }

  // .zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;
  if (this->antenna_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_antenna_mode());
  }

  // .zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;
  if (this->fft_detect_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fft_detect_mode());
  }

  switch (frequency_case()) {
    // .zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;
    case kFreqSpan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frequency_.freq_span_);
      break;
    }
    // .zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;
    case kFreqPoints: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frequency_.freq_points_);
      break;
    }
    case FREQUENCY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumAcqParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumAcqParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumAcqParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
    MergeFrom(*source);
  }
}

void SpectrumAcqParam::MergeFrom(const SpectrumAcqParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  others_.MergeFrom(from.others_);
  if (from.has_win_params()) {
    _internal_mutable_win_params()->::zb::dcts::source::kh::WindowParams::MergeFrom(from._internal_win_params());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.detect_mode() != 0) {
    _internal_set_detect_mode(from._internal_detect_mode());
  }
  if (!(from.rbw() <= 0 && from.rbw() >= 0)) {
    _internal_set_rbw(from._internal_rbw());
  }
  if (!(from.attenuation_gain() <= 0 && from.attenuation_gain() >= 0)) {
    _internal_set_attenuation_gain(from._internal_attenuation_gain());
  }
  if (from.channel_mode() != 0) {
    _internal_set_channel_mode(from._internal_channel_mode());
  }
  if (from.residence_time() != 0) {
    _internal_set_residence_time(from._internal_residence_time());
  }
  if (!(from.rf_limit() <= 0 && from.rf_limit() >= 0)) {
    _internal_set_rf_limit(from._internal_rf_limit());
  }
  if (!(from.search_step() <= 0 && from.search_step() >= 0)) {
    _internal_set_search_step(from._internal_search_step());
  }
  if (from.sample_interval() != 0) {
    _internal_set_sample_interval(from._internal_sample_interval());
  }
  if (from.result_interval() != 0) {
    _internal_set_result_interval(from._internal_result_interval());
  }
  if (from.expected_points() != 0) {
    _internal_set_expected_points(from._internal_expected_points());
  }
  if (from.average_count() != 0) {
    _internal_set_average_count(from._internal_average_count());
  }
  if (from.antenna() != 0) {
    _internal_set_antenna(from._internal_antenna());
  }
  if (from.antenna_mode() != 0) {
    _internal_set_antenna_mode(from._internal_antenna_mode());
  }
  if (from.fft_detect_mode() != 0) {
    _internal_set_fft_detect_mode(from._internal_fft_detect_mode());
  }
  switch (from.frequency_case()) {
    case kFreqSpan: {
      _internal_mutable_freq_span()->::zb::dcts::scenario::spectrum::FrequencySpan::MergeFrom(from._internal_freq_span());
      break;
    }
    case kFreqPoints: {
      _internal_mutable_freq_points()->::zb::dcts::scenario::kh::commSpectrum::FequecyPoints::MergeFrom(from._internal_freq_points());
      break;
    }
    case FREQUENCY_NOT_SET: {
      break;
    }
  }
}

void SpectrumAcqParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumAcqParam::CopyFrom(const SpectrumAcqParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumAcqParam::IsInitialized() const {
  return true;
}

void SpectrumAcqParam::InternalSwap(SpectrumAcqParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  others_.Swap(&other->others_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectrumAcqParam, fft_detect_mode_)
      + sizeof(SpectrumAcqParam::fft_detect_mode_)
      - PROTOBUF_FIELD_OFFSET(SpectrumAcqParam, win_params_)>(
          reinterpret_cast<char*>(&win_params_),
          reinterpret_cast<char*>(&other->win_params_));
  swap(frequency_, other->frequency_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumAcqParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpectrumAcqResult::InitAsDefaultInstance() {
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::zb::dcts::scenario::spectrum::Header*>(
      ::zb::dcts::scenario::spectrum::Header::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqResult_default_instance_._instance.get_mutable()->seg_header_ = const_cast< ::zb::dcts::scenario::spectrum::SegmentHeader*>(
      ::zb::dcts::scenario::spectrum::SegmentHeader::internal_default_instance());
  ::zb::dcts::scenario::kh::commSpectrum::_SpectrumAcqResult_default_instance_._instance.get_mutable()->band_ = const_cast< ::zb::dcts::scenario::spectrum::FrequencyBand*>(
      ::zb::dcts::scenario::spectrum::FrequencyBand::internal_default_instance());
}
class SpectrumAcqResult::_Internal {
 public:
  static const ::zb::dcts::scenario::spectrum::Header& header(const SpectrumAcqResult* msg);
  static const ::zb::dcts::scenario::spectrum::SegmentHeader& seg_header(const SpectrumAcqResult* msg);
  static const ::zb::dcts::scenario::spectrum::FrequencyBand& band(const SpectrumAcqResult* msg);
};

const ::zb::dcts::scenario::spectrum::Header&
SpectrumAcqResult::_Internal::header(const SpectrumAcqResult* msg) {
  return *msg->header_;
}
const ::zb::dcts::scenario::spectrum::SegmentHeader&
SpectrumAcqResult::_Internal::seg_header(const SpectrumAcqResult* msg) {
  return *msg->seg_header_;
}
const ::zb::dcts::scenario::spectrum::FrequencyBand&
SpectrumAcqResult::_Internal::band(const SpectrumAcqResult* msg) {
  return *msg->band_;
}
void SpectrumAcqResult::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SpectrumAcqResult::clear_seg_header() {
  if (GetArena() == nullptr && seg_header_ != nullptr) {
    delete seg_header_;
  }
  seg_header_ = nullptr;
}
void SpectrumAcqResult::clear_band() {
  if (GetArena() == nullptr && band_ != nullptr) {
    delete band_;
  }
  band_ = nullptr;
}
SpectrumAcqResult::SpectrumAcqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spectrum_view_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
}
SpectrumAcqResult::SpectrumAcqResult(const SpectrumAcqResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spectrum_view_(from.spectrum_view_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::zb::dcts::scenario::spectrum::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_seg_header()) {
    seg_header_ = new ::zb::dcts::scenario::spectrum::SegmentHeader(*from.seg_header_);
  } else {
    seg_header_ = nullptr;
  }
  if (from._internal_has_band()) {
    band_ = new ::zb::dcts::scenario::spectrum::FrequencyBand(*from.band_);
  } else {
    band_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
}

void SpectrumAcqResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_) -
      reinterpret_cast<char*>(&header_)) + sizeof(band_));
}

SpectrumAcqResult::~SpectrumAcqResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumAcqResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete seg_header_;
  if (this != internal_default_instance()) delete band_;
}

void SpectrumAcqResult::ArenaDtor(void* object) {
  SpectrumAcqResult* _this = reinterpret_cast< SpectrumAcqResult* >(object);
  (void)_this;
}
void SpectrumAcqResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumAcqResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpectrumAcqResult& SpectrumAcqResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpectrumAcqResult_scenario_2fkh_2fKhSpectrumAcq_2eproto.base);
  return *internal_default_instance();
}


void SpectrumAcqResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectrum_view_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && seg_header_ != nullptr) {
    delete seg_header_;
  }
  seg_header_ = nullptr;
  if (GetArena() == nullptr && band_ != nullptr) {
    delete band_;
  }
  band_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumAcqResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.scenario.spectrum.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_seg_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float spectrum_view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spectrum_view(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_spectrum_view(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumAcqResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  if (this->has_seg_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::seg_header(this), target, stream);
  }

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  if (this->has_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::band(this), target, stream);
  }

  // repeated float spectrum_view = 6;
  if (this->_internal_spectrum_view_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_spectrum_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  return target;
}

size_t SpectrumAcqResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float spectrum_view = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spectrum_view_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spectrum_view_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.scenario.spectrum.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;
  if (this->has_seg_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seg_header_);
  }

  // .zb.dcts.scenario.spectrum.FrequencyBand band = 5;
  if (this->has_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumAcqResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumAcqResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumAcqResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
    MergeFrom(*source);
  }
}

void SpectrumAcqResult::MergeFrom(const SpectrumAcqResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectrum_view_.MergeFrom(from.spectrum_view_);
  if (from.has_header()) {
    _internal_mutable_header()->::zb::dcts::scenario::spectrum::Header::MergeFrom(from._internal_header());
  }
  if (from.has_seg_header()) {
    _internal_mutable_seg_header()->::zb::dcts::scenario::spectrum::SegmentHeader::MergeFrom(from._internal_seg_header());
  }
  if (from.has_band()) {
    _internal_mutable_band()->::zb::dcts::scenario::spectrum::FrequencyBand::MergeFrom(from._internal_band());
  }
}

void SpectrumAcqResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumAcqResult::CopyFrom(const SpectrumAcqResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumAcqResult::IsInitialized() const {
  return true;
}

void SpectrumAcqResult::InternalSwap(SpectrumAcqResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spectrum_view_.InternalSwap(&other->spectrum_view_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectrumAcqResult, band_)
      + sizeof(SpectrumAcqResult::band_)
      - PROTOBUF_FIELD_OFFSET(SpectrumAcqResult, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumAcqResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commSpectrum
}  // namespace kh
}  // namespace scenario
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqSource >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::FequecyPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam_OthersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult* Arena::CreateMaybeMessage< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::scenario::kh::commSpectrum::SpectrumAcqResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
