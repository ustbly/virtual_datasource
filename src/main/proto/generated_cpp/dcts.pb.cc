// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcts.proto

#include "dcts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatCfg_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv4Address_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSendOption_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Physical_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconnectionCfg_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dcts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ZeromqLinkCfg_dcts_2eproto;
namespace zb {
namespace dcts {
class TimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class TimeSpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSpan> _instance;
} _TimeSpan_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class PostureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Posture> _instance;
} _Posture_default_instance_;
class DirectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Direction> _instance;
} _Direction_default_instance_;
class DOADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DOA> _instance;
} _DOA_default_instance_;
class DRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DRange> _instance;
} _DRange_default_instance_;
class IRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRange> _instance;
} _IRange_default_instance_;
class PhysicalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Physical> _instance;
} _Physical_default_instance_;
class Metrics_IndicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metrics_IndicesEntry_DoNotUse> _instance;
} _Metrics_IndicesEntry_DoNotUse_default_instance_;
class MetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metrics> _instance;
} _Metrics_default_instance_;
class IntegerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Integer> _instance;
} _Integer_default_instance_;
class BooleanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Boolean> _instance;
} _Boolean_default_instance_;
class RealNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealNumber> _instance;
} _RealNumber_default_instance_;
class ComplexNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComplexNumber> _instance;
} _ComplexNumber_default_instance_;
class StatisticValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatisticVal> _instance;
} _StatisticVal_default_instance_;
class HeartbeatCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatCfg> _instance;
} _HeartbeatCfg_default_instance_;
class ReconnectionCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconnectionCfg> _instance;
} _ReconnectionCfg_default_instance_;
class MsgSendOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgSendOption> _instance;
} _MsgSendOption_default_instance_;
class IPv4AddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPv4Address> _instance;
} _IPv4Address_default_instance_;
class ZeromqLinkCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZeromqLinkCfg> _instance;
} _ZeromqLinkCfg_default_instance_;
class TimerParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerParam> _instance;
} _TimerParam_default_instance_;
class TopicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Topic> _instance;
} _Topic_default_instance_;
class ServerConfig_ServicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfig_ServicesEntry_DoNotUse> _instance;
} _ServerConfig_ServicesEntry_DoNotUse_default_instance_;
class ServerConfig_PathEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfig_PathEntry_DoNotUse> _instance;
} _ServerConfig_PathEntry_DoNotUse_default_instance_;
class ServerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerConfig> _instance;
} _ServerConfig_default_instance_;
class RemoteConfig_OptionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteConfig_OptionsEntry_DoNotUse> _instance;
} _RemoteConfig_OptionsEntry_DoNotUse_default_instance_;
class RemoteConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteConfig> _instance;
} _RemoteConfig_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class CommandReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandReply> _instance;
} _CommandReply_default_instance_;
}  // namespace dcts
}  // namespace zb
static void InitDefaultsscc_info_Boolean_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Boolean_default_instance_;
    new (ptr) ::zb::dcts::Boolean();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Boolean::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Boolean_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Boolean_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Command_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Command_default_instance_;
    new (ptr) ::zb::dcts::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Command_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Command_dcts_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_CommandReply_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_CommandReply_default_instance_;
    new (ptr) ::zb::dcts::CommandReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::CommandReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandReply_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandReply_dcts_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ComplexNumber_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ComplexNumber_default_instance_;
    new (ptr) ::zb::dcts::ComplexNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::ComplexNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComplexNumber_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComplexNumber_dcts_2eproto}, {}};

static void InitDefaultsscc_info_DOA_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_DOA_default_instance_;
    new (ptr) ::zb::dcts::DOA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::DOA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOA_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DOA_dcts_2eproto}, {}};

static void InitDefaultsscc_info_DRange_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_DRange_default_instance_;
    new (ptr) ::zb::dcts::DRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::DRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DRange_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DRange_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Direction_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Direction_default_instance_;
    new (ptr) ::zb::dcts::Direction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Direction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Direction_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Direction_dcts_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatCfg_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_HeartbeatCfg_default_instance_;
    new (ptr) ::zb::dcts::HeartbeatCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::HeartbeatCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatCfg_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatCfg_dcts_2eproto}, {}};

static void InitDefaultsscc_info_IPv4Address_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_IPv4Address_default_instance_;
    new (ptr) ::zb::dcts::IPv4Address();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::IPv4Address::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPv4Address_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPv4Address_dcts_2eproto}, {}};

static void InitDefaultsscc_info_IRange_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_IRange_default_instance_;
    new (ptr) ::zb::dcts::IRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::IRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRange_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IRange_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Integer_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Integer_default_instance_;
    new (ptr) ::zb::dcts::Integer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Integer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Integer_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Integer_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Metrics_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Metrics_default_instance_;
    new (ptr) ::zb::dcts::Metrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Metrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metrics_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metrics_dcts_2eproto}, {
      &scc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto.base,}};

static void InitDefaultsscc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Metrics_IndicesEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::Metrics_IndicesEntry_DoNotUse();
  }
  ::zb::dcts::Metrics_IndicesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto}, {
      &scc_info_Physical_dcts_2eproto.base,}};

static void InitDefaultsscc_info_MsgSendOption_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_MsgSendOption_default_instance_;
    new (ptr) ::zb::dcts::MsgSendOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::MsgSendOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgSendOption_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgSendOption_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Physical_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Physical_default_instance_;
    new (ptr) ::zb::dcts::Physical();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Physical::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Physical_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Physical_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Position_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Position_default_instance_;
    new (ptr) ::zb::dcts::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Posture_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Posture_default_instance_;
    new (ptr) ::zb::dcts::Posture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Posture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Posture_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Posture_dcts_2eproto}, {}};

static void InitDefaultsscc_info_RealNumber_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_RealNumber_default_instance_;
    new (ptr) ::zb::dcts::RealNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::RealNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RealNumber_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RealNumber_dcts_2eproto}, {}};

static void InitDefaultsscc_info_ReconnectionCfg_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ReconnectionCfg_default_instance_;
    new (ptr) ::zb::dcts::ReconnectionCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::ReconnectionCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconnectionCfg_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconnectionCfg_dcts_2eproto}, {}};

static void InitDefaultsscc_info_RemoteConfig_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_RemoteConfig_default_instance_;
    new (ptr) ::zb::dcts::RemoteConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::RemoteConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoteConfig_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoteConfig_dcts_2eproto}, {
      &scc_info_ZeromqLinkCfg_dcts_2eproto.base,
      &scc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto.base,}};

static void InitDefaultsscc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_RemoteConfig_OptionsEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse();
  }
  ::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfig_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ServerConfig_default_instance_;
    new (ptr) ::zb::dcts::ServerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::ServerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerConfig_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ServerConfig_dcts_2eproto}, {
      &scc_info_ZeromqLinkCfg_dcts_2eproto.base,
      &scc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto.base,
      &scc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto.base,}};

static void InitDefaultsscc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ServerConfig_PathEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::ServerConfig_PathEntry_DoNotUse();
  }
  ::zb::dcts::ServerConfig_PathEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto}, {}};

static void InitDefaultsscc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ServerConfig_ServicesEntry_DoNotUse_default_instance_;
    new (ptr) ::zb::dcts::ServerConfig_ServicesEntry_DoNotUse();
  }
  ::zb::dcts::ServerConfig_ServicesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto}, {
      &scc_info_IPv4Address_dcts_2eproto.base,}};

static void InitDefaultsscc_info_StatisticVal_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_StatisticVal_default_instance_;
    new (ptr) ::zb::dcts::StatisticVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::StatisticVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatisticVal_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatisticVal_dcts_2eproto}, {}};

static void InitDefaultsscc_info_TimeSpan_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_TimeSpan_default_instance_;
    new (ptr) ::zb::dcts::TimeSpan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::TimeSpan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSpan_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeSpan_dcts_2eproto}, {
      &scc_info_Timestamp_dcts_2eproto.base,}};

static void InitDefaultsscc_info_TimerParam_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_TimerParam_default_instance_;
    new (ptr) ::zb::dcts::TimerParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::TimerParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerParam_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimerParam_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Timestamp_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Timestamp_default_instance_;
    new (ptr) ::zb::dcts::Timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Timestamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timestamp_dcts_2eproto}, {}};

static void InitDefaultsscc_info_Topic_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_Topic_default_instance_;
    new (ptr) ::zb::dcts::Topic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::Topic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Topic_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Topic_dcts_2eproto}, {}};

static void InitDefaultsscc_info_ZeromqLinkCfg_dcts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zb::dcts::_ZeromqLinkCfg_default_instance_;
    new (ptr) ::zb::dcts::ZeromqLinkCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zb::dcts::ZeromqLinkCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ZeromqLinkCfg_dcts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ZeromqLinkCfg_dcts_2eproto}, {
      &scc_info_IPv4Address_dcts_2eproto.base,
      &scc_info_HeartbeatCfg_dcts_2eproto.base,
      &scc_info_ReconnectionCfg_dcts_2eproto.base,
      &scc_info_MsgSendOption_dcts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dcts_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dcts_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dcts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dcts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Timestamp, nanos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, start_time_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimeSpan, stop_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, latitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, longitude_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Position, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, yaw_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, pitch_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Posture, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, azimuth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Direction, pitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DOA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DOA, azimuth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DOA, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, start_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::DRange, stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, start_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IRange, stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Physical, unit_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics_IndicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics_IndicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics_IndicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics_IndicesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Metrics, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Integer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Integer, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Boolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Boolean, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RealNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RealNumber, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, real_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ComplexNumber, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, up_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, down_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, cur_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::StatisticVal, mean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_timeout_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::HeartbeatCfg, heartbeat_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, reconnect_interval_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ReconnectionCfg, reconnect_interval_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, hwm_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, linger_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::MsgSendOption, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, ip_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::IPv4Address, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, address_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, link_name_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, heartbeat_cfg_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, reconnect_cfg_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ZeromqLinkCfg, msg_send_cfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, interval_in_ms_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::TimerParam, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Topic, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Topic, value_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_ServicesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_ServicesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_ServicesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_ServicesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_PathEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_PathEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_PathEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig_PathEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, server_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, pull_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, pub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, sub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, services_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::ServerConfig, path_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, client_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, push_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, pub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, sub_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::RemoteConfig, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Command, command_function_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::Command, command_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::CommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::CommandReply, error_code_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::CommandReply, attachment_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::Timestamp)},
  { 7, -1, sizeof(::zb::dcts::TimeSpan)},
  { 14, -1, sizeof(::zb::dcts::Position)},
  { 22, -1, sizeof(::zb::dcts::Posture)},
  { 30, -1, sizeof(::zb::dcts::Direction)},
  { 37, -1, sizeof(::zb::dcts::DOA)},
  { 44, -1, sizeof(::zb::dcts::DRange)},
  { 51, -1, sizeof(::zb::dcts::IRange)},
  { 58, -1, sizeof(::zb::dcts::Physical)},
  { 66, 73, sizeof(::zb::dcts::Metrics_IndicesEntry_DoNotUse)},
  { 75, -1, sizeof(::zb::dcts::Metrics)},
  { 81, -1, sizeof(::zb::dcts::Integer)},
  { 87, -1, sizeof(::zb::dcts::Boolean)},
  { 93, -1, sizeof(::zb::dcts::RealNumber)},
  { 99, -1, sizeof(::zb::dcts::ComplexNumber)},
  { 106, -1, sizeof(::zb::dcts::StatisticVal)},
  { 115, -1, sizeof(::zb::dcts::HeartbeatCfg)},
  { 123, -1, sizeof(::zb::dcts::ReconnectionCfg)},
  { 130, -1, sizeof(::zb::dcts::MsgSendOption)},
  { 138, -1, sizeof(::zb::dcts::IPv4Address)},
  { 145, -1, sizeof(::zb::dcts::ZeromqLinkCfg)},
  { 155, -1, sizeof(::zb::dcts::TimerParam)},
  { 162, -1, sizeof(::zb::dcts::Topic)},
  { 169, 176, sizeof(::zb::dcts::ServerConfig_ServicesEntry_DoNotUse)},
  { 178, 185, sizeof(::zb::dcts::ServerConfig_PathEntry_DoNotUse)},
  { 187, -1, sizeof(::zb::dcts::ServerConfig)},
  { 198, 205, sizeof(::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse)},
  { 207, -1, sizeof(::zb::dcts::RemoteConfig)},
  { 217, -1, sizeof(::zb::dcts::Command)},
  { 224, -1, sizeof(::zb::dcts::CommandReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Timestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_TimeSpan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Posture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Direction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_DOA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_DRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_IRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Physical_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Metrics_IndicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Metrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Integer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Boolean_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_RealNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ComplexNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_StatisticVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_HeartbeatCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ReconnectionCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_MsgSendOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_IPv4Address_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ZeromqLinkCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_TimerParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Topic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ServerConfig_ServicesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ServerConfig_PathEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_ServerConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_RemoteConfig_OptionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_RemoteConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::_CommandReply_default_instance_),
};

const char descriptor_table_protodef_dcts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndcts.proto\022\007zb.dcts\032\031google/protobuf/a"
  "ny.proto\"+\n\tTimestamp\022\017\n\007seconds\030\001 \001(\r\022\r"
  "\n\005nanos\030\002 \001(\r\"Y\n\010TimeSpan\022&\n\nstart_time\030"
  "\001 \001(\0132\022.zb.dcts.Timestamp\022%\n\tstop_time\030\002"
  " \001(\0132\022.zb.dcts.Timestamp\"A\n\010Position\022\020\n\010"
  "latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010alt"
  "itude\030\003 \001(\001\"3\n\007Posture\022\013\n\003yaw\030\001 \001(\001\022\r\n\005p"
  "itch\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\"+\n\tDirection\022\017\n"
  "\007azimuth\030\001 \001(\001\022\r\n\005pitch\030\002 \001(\001\"\'\n\003DOA\022\017\n\007"
  "azimuth\030\001 \001(\001\022\017\n\007quality\030\002 \001(\001\"%\n\006DRange"
  "\022\r\n\005start\030\001 \001(\001\022\014\n\004stop\030\002 \001(\001\"%\n\006IRange\022"
  "\r\n\005start\030\001 \001(\005\022\014\n\004stop\030\002 \001(\005\"\326\001\n\010Physica"
  "l\022$\n\004type\030\001 \001(\0162\026.zb.dcts.Physical.Type\022"
  "\r\n\005value\030\002 \001(\001\022\014\n\004unit\030\003 \001(\t\"\206\001\n\004Type\022\017\n"
  "\013TEMPERATURE\020\000\022\014\n\010HUMIDITY\020\001\022\t\n\005ANGLE\020\002\022"
  "\014\n\010DISTANCE\020\003\022\014\n\010VELOCITY\020\004\022\024\n\020ANGULAR_V"
  "ELOCITY\020\005\022\n\n\006VOTAGE\020\006\022\t\n\005POWER\020\007\022\013\n\007CURR"
  "ENT\020\010\"|\n\007Metrics\022.\n\007indices\030\001 \003(\0132\035.zb.d"
  "cts.Metrics.IndicesEntry\032A\n\014IndicesEntry"
  "\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.zb.dcts.P"
  "hysical:\0028\001\"\030\n\007Integer\022\r\n\005value\030\001 \001(\003\"\030\n"
  "\007Boolean\022\r\n\005value\030\001 \001(\010\"\033\n\nRealNumber\022\r\n"
  "\005value\030\001 \001(\001\",\n\rComplexNumber\022\014\n\004real\030\001 "
  "\001(\001\022\r\n\005image\030\002 \001(\001\"C\n\014StatisticVal\022\n\n\002up"
  "\030\001 \001(\001\022\014\n\004down\030\002 \001(\001\022\013\n\003cur\030\003 \001(\001\022\014\n\004mea"
  "n\030\004 \001(\001\"\\\n\014HeartbeatCfg\022\032\n\022heartbeat_int"
  "erval\030\001 \001(\005\022\031\n\021heartbeat_timeout\030\002 \001(\005\022\025"
  "\n\rheartbeat_ttl\030\003 \001(\005\"M\n\017ReconnectionCfg"
  "\022\032\n\022reconnect_interval\030\001 \001(\005\022\036\n\026reconnec"
  "t_interval_max\030\002 \001(\005\"=\n\rMsgSendOption\022\013\n"
  "\003hwm\030\001 \001(\005\022\016\n\006linger\030\002 \001(\005\022\017\n\007timeout\030\003 "
  "\001(\005\"\'\n\013IPv4Address\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002"
  " \001(\005\"\326\001\n\rZeromqLinkCfg\022%\n\007address\030\001 \001(\0132"
  "\024.zb.dcts.IPv4Address\022\021\n\tlink_name\030\002 \001(\t"
  "\022,\n\rheartbeat_cfg\030\004 \001(\0132\025.zb.dcts.Heartb"
  "eatCfg\022/\n\rreconnect_cfg\030\005 \001(\0132\030.zb.dcts."
  "ReconnectionCfg\022,\n\014msg_send_cfg\030\006 \001(\0132\026."
  "zb.dcts.MsgSendOption\"3\n\nTimerParam\022\026\n\016i"
  "nterval_in_ms\030\001 \001(\005\022\r\n\005times\030\002 \001(\005\"#\n\005To"
  "pic\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\200\003\n\014Serv"
  "erConfig\022&\n\006server\030\001 \001(\0132\026.zb.dcts.Zerom"
  "qLinkCfg\022$\n\004pull\030\002 \001(\0132\026.zb.dcts.ZeromqL"
  "inkCfg\022#\n\003pub\030\003 \001(\0132\026.zb.dcts.ZeromqLink"
  "Cfg\022#\n\003sub\030\004 \001(\0132\026.zb.dcts.ZeromqLinkCfg"
  "\0225\n\010services\030\005 \003(\0132#.zb.dcts.ServerConfi"
  "g.ServicesEntry\022-\n\004path\030\006 \003(\0132\037.zb.dcts."
  "ServerConfig.PathEntry\032E\n\rServicesEntry\022"
  "\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.zb.dcts.IP"
  "v4Address:\0028\001\032+\n\tPathEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\213\002\n\014RemoteConfig\022&\n\006c"
  "lient\030\001 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022$\n\004p"
  "ush\030\002 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003pub"
  "\030\003 \001(\0132\026.zb.dcts.ZeromqLinkCfg\022#\n\003sub\030\004 "
  "\001(\0132\026.zb.dcts.ZeromqLinkCfg\0223\n\007options\030\005"
  " \003(\0132\".zb.dcts.RemoteConfig.OptionsEntry"
  "\032.\n\014OptionsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t:\0028\001\"P\n\007Command\022\030\n\020command_function\030"
  "\001 \001(\r\022+\n\rcommand_param\030\002 \001(\0132\024.google.pr"
  "otobuf.Any\"`\n\014CommandReply\022&\n\nerror_code"
  "\030\001 \001(\0162\022.zb.dcts.ErrorType\022(\n\nattachment"
  "\030\002 \001(\0132\024.google.protobuf.Any*\313\007\n\tErrorTy"
  "pe\022\014\n\010ERR_NONE\020\000\022\037\n\022ERR_NOTIMPLEMENTED\020\377"
  "\377\377\377\377\377\377\377\377\001\022\030\n\013ERR_UNKNOWN\020\376\377\377\377\377\377\377\377\377\001\022\025\n\010E"
  "RR_BUSY\020\375\377\377\377\377\377\377\377\377\001\022\030\n\013ERR_ABORTED\020\373\377\377\377\377\377"
  "\377\377\377\001\022\034\n\017ERR_CMD_NOREPLY\020\372\377\377\377\377\377\377\377\377\001\022\026\n\tER"
  "R_PARAM\020\370\377\377\377\377\377\377\377\377\001\022$\n\027ERR_STATION_NAME_E"
  "XISTS\020\365\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_INVALID_HANDLE\020\361"
  "\377\377\377\377\377\377\377\377\001\022 \n\023ERR_INVALID_REQUEST\020\360\377\377\377\377\377\377"
  "\377\377\001\022\037\n\022ERR_NO_DATA_SOURCE\020\354\377\377\377\377\377\377\377\377\001\022\035\n\020"
  "ERR_SOCKET_ERROR\020\346\377\377\377\377\377\377\377\377\001\022#\n\026ERR_SCENA"
  "RIO_NOT_FOUND\020\345\377\377\377\377\377\377\377\377\001\022\"\n\025ERR_NO_DATA_"
  "AVAILABLE\020\344\377\377\377\377\377\377\377\377\001\022!\n\024ERR_BUFFER_TOO_S"
  "MALL\020\342\377\377\377\377\377\377\377\377\001\022\033\n\016ERR_DIAGNOSTIC\020\341\377\377\377\377\377"
  "\377\377\377\001\022\037\n\022ERR_COMMAND_FAILED\020\332\377\377\377\377\377\377\377\377\001\022\030\n"
  "\013ERR_TIMEOUT\020\330\377\377\377\377\377\377\377\377\001\022 \n\023ERR_STRING_TO"
  "O_LONG\020\325\377\377\377\377\377\377\377\377\001\022\032\n\rERR_DATA_TYPE\020\314\377\377\377\377"
  "\377\377\377\377\001\022\036\n\021ERR_AUTHORIZATION\020\307\377\377\377\377\377\377\377\377\001\022\030\n"
  "\013ERR_LICENSE\020\300\377\377\377\377\377\377\377\377\001\022\034\n\017ERR_MEAS_FAIL"
  "ED\020\276\377\377\377\377\377\377\377\377\001\022#\n\026ERR_DATA_AVAIL_TIMEOUT\020"
  "\265\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_TASK_NOT_FOUND\020\264\377\377\377\377\377\377"
  "\377\377\001\022\036\n\021ERR_SOURCE_ASSIGN\020\263\377\377\377\377\377\377\377\377\001\022\033\n\016E"
  "RR_TASK_START\020\262\377\377\377\377\377\377\377\377\001\022\033\n\016ERR_TASK_PAU"
  "SE\020\261\377\377\377\377\377\377\377\377\001\022\034\n\017ERR_TASK_RESUME\020\260\377\377\377\377\377\377"
  "\377\377\001\022\032\n\rERR_OPEN_FILE\020\257\377\377\377\377\377\377\377\377\001\022\025\n\010ERR_T"
  "DOA\020\256\377\377\377\377\377\377\377\377\001\022\032\n\rERR_TASK_QUIT\020\255\377\377\377\377\377\377\377"
  "\377\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dcts_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dcts_2eproto_sccs[30] = {
  &scc_info_Boolean_dcts_2eproto.base,
  &scc_info_Command_dcts_2eproto.base,
  &scc_info_CommandReply_dcts_2eproto.base,
  &scc_info_ComplexNumber_dcts_2eproto.base,
  &scc_info_DOA_dcts_2eproto.base,
  &scc_info_DRange_dcts_2eproto.base,
  &scc_info_Direction_dcts_2eproto.base,
  &scc_info_HeartbeatCfg_dcts_2eproto.base,
  &scc_info_IPv4Address_dcts_2eproto.base,
  &scc_info_IRange_dcts_2eproto.base,
  &scc_info_Integer_dcts_2eproto.base,
  &scc_info_Metrics_dcts_2eproto.base,
  &scc_info_Metrics_IndicesEntry_DoNotUse_dcts_2eproto.base,
  &scc_info_MsgSendOption_dcts_2eproto.base,
  &scc_info_Physical_dcts_2eproto.base,
  &scc_info_Position_dcts_2eproto.base,
  &scc_info_Posture_dcts_2eproto.base,
  &scc_info_RealNumber_dcts_2eproto.base,
  &scc_info_ReconnectionCfg_dcts_2eproto.base,
  &scc_info_RemoteConfig_dcts_2eproto.base,
  &scc_info_RemoteConfig_OptionsEntry_DoNotUse_dcts_2eproto.base,
  &scc_info_ServerConfig_dcts_2eproto.base,
  &scc_info_ServerConfig_PathEntry_DoNotUse_dcts_2eproto.base,
  &scc_info_ServerConfig_ServicesEntry_DoNotUse_dcts_2eproto.base,
  &scc_info_StatisticVal_dcts_2eproto.base,
  &scc_info_TimeSpan_dcts_2eproto.base,
  &scc_info_TimerParam_dcts_2eproto.base,
  &scc_info_Timestamp_dcts_2eproto.base,
  &scc_info_Topic_dcts_2eproto.base,
  &scc_info_ZeromqLinkCfg_dcts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dcts_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcts_2eproto = {
  false, false, descriptor_table_protodef_dcts_2eproto, "dcts.proto", 3410,
  &descriptor_table_dcts_2eproto_once, descriptor_table_dcts_2eproto_sccs, descriptor_table_dcts_2eproto_deps, 30, 1,
  schemas, file_default_instances, TableStruct_dcts_2eproto::offsets,
  file_level_metadata_dcts_2eproto, 30, file_level_enum_descriptors_dcts_2eproto, file_level_service_descriptors_dcts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dcts_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dcts_2eproto)), true);
namespace zb {
namespace dcts {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Physical_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dcts_2eproto);
  return file_level_enum_descriptors_dcts_2eproto[0];
}
bool Physical_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Physical_Type Physical::TEMPERATURE;
constexpr Physical_Type Physical::HUMIDITY;
constexpr Physical_Type Physical::ANGLE;
constexpr Physical_Type Physical::DISTANCE;
constexpr Physical_Type Physical::VELOCITY;
constexpr Physical_Type Physical::ANGULAR_VELOCITY;
constexpr Physical_Type Physical::VOTAGE;
constexpr Physical_Type Physical::POWER;
constexpr Physical_Type Physical::CURRENT;
constexpr Physical_Type Physical::Type_MIN;
constexpr Physical_Type Physical::Type_MAX;
constexpr int Physical::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dcts_2eproto);
  return file_level_enum_descriptors_dcts_2eproto[1];
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case -83:
    case -82:
    case -81:
    case -80:
    case -79:
    case -78:
    case -77:
    case -76:
    case -75:
    case -66:
    case -64:
    case -57:
    case -52:
    case -43:
    case -40:
    case -38:
    case -31:
    case -30:
    case -28:
    case -27:
    case -26:
    case -20:
    case -16:
    case -15:
    case -11:
    case -8:
    case -6:
    case -5:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::_Internal {
 public:
};

Timestamp::Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:zb.dcts.Timestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timestamp::ArenaDtor(void* object) {
  Timestamp* _this = reinterpret_cast< Timestamp* >(object);
  (void)_this;
}
void Timestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timestamp_dcts_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Timestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seconds(), target);
  }

  // uint32 nanos = 2;
  if (this->nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nanos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Timestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seconds());
  }

  // uint32 nanos = 2;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nanos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Timestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanos() != 0) {
    _internal_set_nanos(from._internal_nanos());
  }
}

void Timestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timestamp, nanos_)
      + sizeof(Timestamp::nanos_)
      - PROTOBUF_FIELD_OFFSET(Timestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSpan::InitAsDefaultInstance() {
  ::zb::dcts::_TimeSpan_default_instance_._instance.get_mutable()->start_time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
  ::zb::dcts::_TimeSpan_default_instance_._instance.get_mutable()->stop_time_ = const_cast< ::zb::dcts::Timestamp*>(
      ::zb::dcts::Timestamp::internal_default_instance());
}
class TimeSpan::_Internal {
 public:
  static const ::zb::dcts::Timestamp& start_time(const TimeSpan* msg);
  static const ::zb::dcts::Timestamp& stop_time(const TimeSpan* msg);
};

const ::zb::dcts::Timestamp&
TimeSpan::_Internal::start_time(const TimeSpan* msg) {
  return *msg->start_time_;
}
const ::zb::dcts::Timestamp&
TimeSpan::_Internal::stop_time(const TimeSpan* msg) {
  return *msg->stop_time_;
}
TimeSpan::TimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.TimeSpan)
}
TimeSpan::TimeSpan(const TimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new ::zb::dcts::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_stop_time()) {
    stop_time_ = new ::zb::dcts::Timestamp(*from.stop_time_);
  } else {
    stop_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.TimeSpan)
}

void TimeSpan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSpan_dcts_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(stop_time_));
}

TimeSpan::~TimeSpan() {
  // @@protoc_insertion_point(destructor:zb.dcts.TimeSpan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete stop_time_;
}

void TimeSpan::ArenaDtor(void* object) {
  TimeSpan* _this = reinterpret_cast< TimeSpan* >(object);
  (void)_this;
}
void TimeSpan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSpan& TimeSpan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSpan_dcts_2eproto.base);
  return *internal_default_instance();
}


void TimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && stop_time_ != nullptr) {
    delete stop_time_;
  }
  stop_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSpan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Timestamp start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.Timestamp stop_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSpan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.TimeSpan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Timestamp start_time = 1;
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start_time(this), target, stream);
  }

  // .zb.dcts.Timestamp stop_time = 2;
  if (this->has_stop_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stop_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.TimeSpan)
  return target;
}

size_t TimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.TimeSpan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.Timestamp start_time = 1;
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .zb.dcts.Timestamp stop_time = 2;
  if (this->has_stop_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSpan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSpan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSpan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.TimeSpan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.TimeSpan)
    MergeFrom(*source);
  }
}

void TimeSpan::MergeFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.TimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_time()) {
    _internal_mutable_start_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_stop_time()) {
    _internal_mutable_stop_time()->::zb::dcts::Timestamp::MergeFrom(from._internal_stop_time());
  }
}

void TimeSpan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpan::CopyFrom(const TimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.TimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpan::IsInitialized() const {
  return true;
}

void TimeSpan::InternalSwap(TimeSpan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSpan, stop_time_)
      + sizeof(TimeSpan::stop_time_)
      - PROTOBUF_FIELD_OFFSET(TimeSpan, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSpan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:zb.dcts.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_dcts_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, altitude_)
      + sizeof(Position::altitude_)
      - PROTOBUF_FIELD_OFFSET(Position, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Posture::InitAsDefaultInstance() {
}
class Posture::_Internal {
 public:
};

Posture::Posture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Posture)
}
Posture::Posture(const Posture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Posture)
}

void Posture::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
}

Posture::~Posture() {
  // @@protoc_insertion_point(destructor:zb.dcts.Posture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Posture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Posture::ArenaDtor(void* object) {
  Posture* _this = reinterpret_cast< Posture* >(object);
  (void)_this;
}
void Posture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Posture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Posture& Posture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Posture_dcts_2eproto.base);
  return *internal_default_instance();
}


void Posture::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Posture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Posture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Posture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Posture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw(), target);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  // double roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Posture)
  return target;
}

size_t Posture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Posture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll = 3;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Posture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Posture)
  GOOGLE_DCHECK_NE(&from, this);
  const Posture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Posture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Posture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Posture)
    MergeFrom(*source);
  }
}

void Posture::MergeFrom(const Posture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Posture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
}

void Posture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Posture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Posture::CopyFrom(const Posture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Posture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Posture::IsInitialized() const {
  return true;
}

void Posture::InternalSwap(Posture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Posture, roll_)
      + sizeof(Posture::roll_)
      - PROTOBUF_FIELD_OFFSET(Posture, yaw_)>(
          reinterpret_cast<char*>(&yaw_),
          reinterpret_cast<char*>(&other->yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Posture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Direction::InitAsDefaultInstance() {
}
class Direction::_Internal {
 public:
};

Direction::Direction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Direction)
}
Direction::Direction(const Direction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Direction)
}

void Direction::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
}

Direction::~Direction() {
  // @@protoc_insertion_point(destructor:zb.dcts.Direction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Direction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Direction::ArenaDtor(void* object) {
  Direction* _this = reinterpret_cast< Direction* >(object);
  (void)_this;
}
void Direction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Direction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Direction& Direction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Direction_dcts_2eproto.base);
  return *internal_default_instance();
}


void Direction::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(pitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Direction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Direction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Direction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Direction)
  return target;
}

size_t Direction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Direction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Direction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  const Direction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Direction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Direction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Direction)
    MergeFrom(*source);
  }
}

void Direction::MergeFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Direction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
}

void Direction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Direction::CopyFrom(const Direction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Direction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Direction::IsInitialized() const {
  return true;
}

void Direction::InternalSwap(Direction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Direction, pitch_)
      + sizeof(Direction::pitch_)
      - PROTOBUF_FIELD_OFFSET(Direction, azimuth_)>(
          reinterpret_cast<char*>(&azimuth_),
          reinterpret_cast<char*>(&other->azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Direction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DOA::InitAsDefaultInstance() {
}
class DOA::_Internal {
 public:
};

DOA::DOA(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.DOA)
}
DOA::DOA(const DOA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.DOA)
}

void DOA::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(quality_));
}

DOA::~DOA() {
  // @@protoc_insertion_point(destructor:zb.dcts.DOA)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DOA::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DOA::ArenaDtor(void* object) {
  DOA* _this = reinterpret_cast< DOA* >(object);
  (void)_this;
}
void DOA::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DOA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DOA& DOA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DOA_dcts_2eproto.base);
  return *internal_default_instance();
}


void DOA::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.DOA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DOA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DOA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.DOA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // double quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.DOA)
  return target;
}

size_t DOA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.DOA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double quality = 2;
  if (!(this->quality() <= 0 && this->quality() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DOA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.DOA)
  GOOGLE_DCHECK_NE(&from, this);
  const DOA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DOA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.DOA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.DOA)
    MergeFrom(*source);
  }
}

void DOA::MergeFrom(const DOA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.DOA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (!(from.quality() <= 0 && from.quality() >= 0)) {
    _internal_set_quality(from._internal_quality());
  }
}

void DOA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.DOA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DOA::CopyFrom(const DOA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.DOA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DOA::IsInitialized() const {
  return true;
}

void DOA::InternalSwap(DOA* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DOA, quality_)
      + sizeof(DOA::quality_)
      - PROTOBUF_FIELD_OFFSET(DOA, azimuth_)>(
          reinterpret_cast<char*>(&azimuth_),
          reinterpret_cast<char*>(&other->azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DOA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DRange::InitAsDefaultInstance() {
}
class DRange::_Internal {
 public:
};

DRange::DRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.DRange)
}
DRange::DRange(const DRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.DRange)
}

void DRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
}

DRange::~DRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.DRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DRange::ArenaDtor(void* object) {
  DRange* _this = reinterpret_cast< DRange* >(object);
  (void)_this;
}
void DRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DRange& DRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DRange_dcts_2eproto.base);
  return *internal_default_instance();
}


void DRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.DRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.DRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start(), target);
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.DRange)
  return target;
}

size_t DRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.DRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double start = 1;
  if (!(this->start() <= 0 && this->start() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop = 2;
  if (!(this->stop() <= 0 && this->stop() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.DRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.DRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.DRange)
    MergeFrom(*source);
  }
}

void DRange::MergeFrom(const DRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.DRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.start() <= 0 && from.start() >= 0)) {
    _internal_set_start(from._internal_start());
  }
  if (!(from.stop() <= 0 && from.stop() >= 0)) {
    _internal_set_stop(from._internal_stop());
  }
}

void DRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.DRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DRange::CopyFrom(const DRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.DRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DRange::IsInitialized() const {
  return true;
}

void DRange::InternalSwap(DRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DRange, stop_)
      + sizeof(DRange::stop_)
      - PROTOBUF_FIELD_OFFSET(DRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRange::InitAsDefaultInstance() {
}
class IRange::_Internal {
 public:
};

IRange::IRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.IRange)
}
IRange::IRange(const IRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.IRange)
}

void IRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
}

IRange::~IRange() {
  // @@protoc_insertion_point(destructor:zb.dcts.IRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IRange::ArenaDtor(void* object) {
  IRange* _this = reinterpret_cast< IRange* >(object);
  (void)_this;
}
void IRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRange& IRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRange_dcts_2eproto.base);
  return *internal_default_instance();
}


void IRange::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.IRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.IRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 stop = 2;
  if (this->stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.IRange)
  return target;
}

size_t IRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.IRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 stop = 2;
  if (this->stop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.IRange)
  GOOGLE_DCHECK_NE(&from, this);
  const IRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.IRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.IRange)
    MergeFrom(*source);
  }
}

void IRange::MergeFrom(const IRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.IRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.stop() != 0) {
    _internal_set_stop(from._internal_stop());
  }
}

void IRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.IRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRange::CopyFrom(const IRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.IRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRange::IsInitialized() const {
  return true;
}

void IRange::InternalSwap(IRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IRange, stop_)
      + sizeof(IRange::stop_)
      - PROTOBUF_FIELD_OFFSET(IRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Physical::InitAsDefaultInstance() {
}
class Physical::_Internal {
 public:
};

Physical::Physical(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Physical)
}
Physical::Physical(const Physical& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unit(),
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Physical)
}

void Physical::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Physical_dcts_2eproto.base);
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

Physical::~Physical() {
  // @@protoc_insertion_point(destructor:zb.dcts.Physical)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Physical::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Physical::ArenaDtor(void* object) {
  Physical* _this = reinterpret_cast< Physical* >(object);
  (void)_this;
}
void Physical::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Physical::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Physical& Physical::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Physical_dcts_2eproto.base);
  return *internal_default_instance();
}


void Physical::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Physical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Physical::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.Physical.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::zb::dcts::Physical_Type>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.Physical.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Physical::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Physical)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.Physical.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.Physical.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Physical)
  return target;
}

size_t Physical::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Physical)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .zb.dcts.Physical.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Physical::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Physical)
  GOOGLE_DCHECK_NE(&from, this);
  const Physical* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Physical>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Physical)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Physical)
    MergeFrom(*source);
  }
}

void Physical::MergeFrom(const Physical& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Physical)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Physical::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Physical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Physical::CopyFrom(const Physical& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Physical)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physical::IsInitialized() const {
  return true;
}

void Physical::InternalSwap(Physical* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Physical, type_)
      + sizeof(Physical::type_)
      - PROTOBUF_FIELD_OFFSET(Physical, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Physical::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Metrics_IndicesEntry_DoNotUse::Metrics_IndicesEntry_DoNotUse() {}
Metrics_IndicesEntry_DoNotUse::Metrics_IndicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metrics_IndicesEntry_DoNotUse::MergeFrom(const Metrics_IndicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metrics_IndicesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metrics_IndicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Metrics::InitAsDefaultInstance() {
}
class Metrics::_Internal {
 public:
};

Metrics::Metrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Metrics)
}
Metrics::Metrics(const Metrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  indices_.MergeFrom(from.indices_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Metrics)
}

void Metrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metrics_dcts_2eproto.base);
}

Metrics::~Metrics() {
  // @@protoc_insertion_point(destructor:zb.dcts.Metrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Metrics::ArenaDtor(void* object) {
  Metrics* _this = reinterpret_cast< Metrics* >(object);
  (void)_this;
}
void Metrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metrics& Metrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metrics_dcts_2eproto.base);
  return *internal_default_instance();
}


void Metrics::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Metrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .zb.dcts.Physical> indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&indices_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Metrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .zb.dcts.Physical> indices = 1;
  if (!this->_internal_indices().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::Physical >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.Metrics.IndicesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_indices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_indices().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::Physical >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::Physical >::const_iterator
          it = this->_internal_indices().begin();
          it != this->_internal_indices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metrics_IndicesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::Physical >::const_iterator
          it = this->_internal_indices().begin();
          it != this->_internal_indices().end(); ++it) {
        target = Metrics_IndicesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Metrics)
  return target;
}

size_t Metrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Metrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .zb.dcts.Physical> indices = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_indices_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::Physical >::const_iterator
      it = this->_internal_indices().begin();
      it != this->_internal_indices().end(); ++it) {
    total_size += Metrics_IndicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  const Metrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Metrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Metrics)
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Metrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
}

void Metrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Metrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {
  return true;
}

void Metrics::InternalSwap(Metrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  indices_.Swap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Integer::InitAsDefaultInstance() {
}
class Integer::_Internal {
 public:
};

Integer::Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Integer)
}
Integer::Integer(const Integer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Integer)
}

void Integer::SharedCtor() {
  value_ = PROTOBUF_LONGLONG(0);
}

Integer::~Integer() {
  // @@protoc_insertion_point(destructor:zb.dcts.Integer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Integer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Integer::ArenaDtor(void* object) {
  Integer* _this = reinterpret_cast< Integer* >(object);
  (void)_this;
}
void Integer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Integer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Integer& Integer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Integer_dcts_2eproto.base);
  return *internal_default_instance();
}


void Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Integer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Integer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Integer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Integer)
  return target;
}

size_t Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Integer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Integer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  const Integer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Integer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Integer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Integer)
    MergeFrom(*source);
  }
}

void Integer::MergeFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Integer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Integer::CopyFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Integer::IsInitialized() const {
  return true;
}

void Integer::InternalSwap(Integer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Integer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Boolean::InitAsDefaultInstance() {
}
class Boolean::_Internal {
 public:
};

Boolean::Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Boolean)
}
Boolean::Boolean(const Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Boolean)
}

void Boolean::SharedCtor() {
  value_ = false;
}

Boolean::~Boolean() {
  // @@protoc_insertion_point(destructor:zb.dcts.Boolean)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Boolean::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Boolean::ArenaDtor(void* object) {
  Boolean* _this = reinterpret_cast< Boolean* >(object);
  (void)_this;
}
void Boolean::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Boolean::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Boolean& Boolean::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Boolean_dcts_2eproto.base);
  return *internal_default_instance();
}


void Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Boolean::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Boolean::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Boolean)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Boolean)
  return target;
}

size_t Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Boolean)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Boolean::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  const Boolean* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Boolean>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Boolean)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Boolean)
    MergeFrom(*source);
  }
}

void Boolean::MergeFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Boolean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void Boolean::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boolean::CopyFrom(const Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boolean::IsInitialized() const {
  return true;
}

void Boolean::InternalSwap(Boolean* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Boolean::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RealNumber::InitAsDefaultInstance() {
}
class RealNumber::_Internal {
 public:
};

RealNumber::RealNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.RealNumber)
}
RealNumber::RealNumber(const RealNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.RealNumber)
}

void RealNumber::SharedCtor() {
  value_ = 0;
}

RealNumber::~RealNumber() {
  // @@protoc_insertion_point(destructor:zb.dcts.RealNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RealNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RealNumber::ArenaDtor(void* object) {
  RealNumber* _this = reinterpret_cast< RealNumber* >(object);
  (void)_this;
}
void RealNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RealNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealNumber& RealNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealNumber_dcts_2eproto.base);
  return *internal_default_instance();
}


void RealNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.RealNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RealNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RealNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.RealNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.RealNumber)
  return target;
}

size_t RealNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.RealNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.RealNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const RealNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.RealNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.RealNumber)
    MergeFrom(*source);
  }
}

void RealNumber::MergeFrom(const RealNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.RealNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void RealNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.RealNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealNumber::CopyFrom(const RealNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.RealNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealNumber::IsInitialized() const {
  return true;
}

void RealNumber::InternalSwap(RealNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RealNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComplexNumber::InitAsDefaultInstance() {
}
class ComplexNumber::_Internal {
 public:
};

ComplexNumber::ComplexNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ComplexNumber)
}
ComplexNumber::ComplexNumber(const ComplexNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&real_, &from.real_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&real_)) + sizeof(image_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ComplexNumber)
}

void ComplexNumber::SharedCtor() {
  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_) -
      reinterpret_cast<char*>(&real_)) + sizeof(image_));
}

ComplexNumber::~ComplexNumber() {
  // @@protoc_insertion_point(destructor:zb.dcts.ComplexNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComplexNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComplexNumber::ArenaDtor(void* object) {
  ComplexNumber* _this = reinterpret_cast< ComplexNumber* >(object);
  (void)_this;
}
void ComplexNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComplexNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComplexNumber& ComplexNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComplexNumber_dcts_2eproto.base);
  return *internal_default_instance();
}


void ComplexNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ComplexNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&real_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_) -
      reinterpret_cast<char*>(&real_)) + sizeof(image_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComplexNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double real = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          real_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          image_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComplexNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ComplexNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_real(), target);
  }

  // double image = 2;
  if (!(this->image() <= 0 && this->image() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ComplexNumber)
  return target;
}

size_t ComplexNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ComplexNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double real = 1;
  if (!(this->real() <= 0 && this->real() >= 0)) {
    total_size += 1 + 8;
  }

  // double image = 2;
  if (!(this->image() <= 0 && this->image() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComplexNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ComplexNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const ComplexNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComplexNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ComplexNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ComplexNumber)
    MergeFrom(*source);
  }
}

void ComplexNumber::MergeFrom(const ComplexNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ComplexNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.real() <= 0 && from.real() >= 0)) {
    _internal_set_real(from._internal_real());
  }
  if (!(from.image() <= 0 && from.image() >= 0)) {
    _internal_set_image(from._internal_image());
  }
}

void ComplexNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ComplexNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexNumber::CopyFrom(const ComplexNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ComplexNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexNumber::IsInitialized() const {
  return true;
}

void ComplexNumber::InternalSwap(ComplexNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexNumber, image_)
      + sizeof(ComplexNumber::image_)
      - PROTOBUF_FIELD_OFFSET(ComplexNumber, real_)>(
          reinterpret_cast<char*>(&real_),
          reinterpret_cast<char*>(&other->real_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComplexNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatisticVal::InitAsDefaultInstance() {
}
class StatisticVal::_Internal {
 public:
};

StatisticVal::StatisticVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.StatisticVal)
}
StatisticVal::StatisticVal(const StatisticVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&up_, &from.up_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_) -
    reinterpret_cast<char*>(&up_)) + sizeof(mean_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.StatisticVal)
}

void StatisticVal::SharedCtor() {
  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&up_)) + sizeof(mean_));
}

StatisticVal::~StatisticVal() {
  // @@protoc_insertion_point(destructor:zb.dcts.StatisticVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatisticVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatisticVal::ArenaDtor(void* object) {
  StatisticVal* _this = reinterpret_cast< StatisticVal* >(object);
  (void)_this;
}
void StatisticVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatisticVal& StatisticVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatisticVal_dcts_2eproto.base);
  return *internal_default_instance();
}


void StatisticVal::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.StatisticVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&up_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_) -
      reinterpret_cast<char*>(&up_)) + sizeof(mean_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double up = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          up_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          down_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cur = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cur_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double mean = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.StatisticVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double up = 1;
  if (!(this->up() <= 0 && this->up() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_up(), target);
  }

  // double down = 2;
  if (!(this->down() <= 0 && this->down() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_down(), target);
  }

  // double cur = 3;
  if (!(this->cur() <= 0 && this->cur() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cur(), target);
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_mean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.StatisticVal)
  return target;
}

size_t StatisticVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.StatisticVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double up = 1;
  if (!(this->up() <= 0 && this->up() >= 0)) {
    total_size += 1 + 8;
  }

  // double down = 2;
  if (!(this->down() <= 0 && this->down() >= 0)) {
    total_size += 1 + 8;
  }

  // double cur = 3;
  if (!(this->cur() <= 0 && this->cur() >= 0)) {
    total_size += 1 + 8;
  }

  // double mean = 4;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.StatisticVal)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatisticVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.StatisticVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.StatisticVal)
    MergeFrom(*source);
  }
}

void StatisticVal::MergeFrom(const StatisticVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.StatisticVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.up() <= 0 && from.up() >= 0)) {
    _internal_set_up(from._internal_up());
  }
  if (!(from.down() <= 0 && from.down() >= 0)) {
    _internal_set_down(from._internal_down());
  }
  if (!(from.cur() <= 0 && from.cur() >= 0)) {
    _internal_set_cur(from._internal_cur());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
}

void StatisticVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.StatisticVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticVal::CopyFrom(const StatisticVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.StatisticVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticVal::IsInitialized() const {
  return true;
}

void StatisticVal::InternalSwap(StatisticVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticVal, mean_)
      + sizeof(StatisticVal::mean_)
      - PROTOBUF_FIELD_OFFSET(StatisticVal, up_)>(
          reinterpret_cast<char*>(&up_),
          reinterpret_cast<char*>(&other->up_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartbeatCfg::InitAsDefaultInstance() {
}
class HeartbeatCfg::_Internal {
 public:
};

HeartbeatCfg::HeartbeatCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.HeartbeatCfg)
}
HeartbeatCfg::HeartbeatCfg(const HeartbeatCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heartbeat_interval_, &from.heartbeat_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_ttl_) -
    reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.HeartbeatCfg)
}

void HeartbeatCfg::SharedCtor() {
  ::memset(&heartbeat_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_ttl_) -
      reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
}

HeartbeatCfg::~HeartbeatCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.HeartbeatCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartbeatCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartbeatCfg::ArenaDtor(void* object) {
  HeartbeatCfg* _this = reinterpret_cast< HeartbeatCfg* >(object);
  (void)_this;
}
void HeartbeatCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatCfg& HeartbeatCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatCfg_dcts_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.HeartbeatCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&heartbeat_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_ttl_) -
      reinterpret_cast<char*>(&heartbeat_interval_)) + sizeof(heartbeat_ttl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 heartbeat_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heartbeat_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heartbeat_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          heartbeat_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 heartbeat_ttl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heartbeat_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.HeartbeatCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 heartbeat_interval = 1;
  if (this->heartbeat_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_heartbeat_interval(), target);
  }

  // int32 heartbeat_timeout = 2;
  if (this->heartbeat_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_heartbeat_timeout(), target);
  }

  // int32 heartbeat_ttl = 3;
  if (this->heartbeat_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heartbeat_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.HeartbeatCfg)
  return target;
}

size_t HeartbeatCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.HeartbeatCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 heartbeat_interval = 1;
  if (this->heartbeat_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_interval());
  }

  // int32 heartbeat_timeout = 2;
  if (this->heartbeat_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_timeout());
  }

  // int32 heartbeat_ttl = 3;
  if (this->heartbeat_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heartbeat_ttl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.HeartbeatCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.HeartbeatCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.HeartbeatCfg)
    MergeFrom(*source);
  }
}

void HeartbeatCfg::MergeFrom(const HeartbeatCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.HeartbeatCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heartbeat_interval() != 0) {
    _internal_set_heartbeat_interval(from._internal_heartbeat_interval());
  }
  if (from.heartbeat_timeout() != 0) {
    _internal_set_heartbeat_timeout(from._internal_heartbeat_timeout());
  }
  if (from.heartbeat_ttl() != 0) {
    _internal_set_heartbeat_ttl(from._internal_heartbeat_ttl());
  }
}

void HeartbeatCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.HeartbeatCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatCfg::CopyFrom(const HeartbeatCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.HeartbeatCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatCfg::IsInitialized() const {
  return true;
}

void HeartbeatCfg::InternalSwap(HeartbeatCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatCfg, heartbeat_ttl_)
      + sizeof(HeartbeatCfg::heartbeat_ttl_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatCfg, heartbeat_interval_)>(
          reinterpret_cast<char*>(&heartbeat_interval_),
          reinterpret_cast<char*>(&other->heartbeat_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconnectionCfg::InitAsDefaultInstance() {
}
class ReconnectionCfg::_Internal {
 public:
};

ReconnectionCfg::ReconnectionCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ReconnectionCfg)
}
ReconnectionCfg::ReconnectionCfg(const ReconnectionCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reconnect_interval_, &from.reconnect_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&reconnect_interval_max_) -
    reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ReconnectionCfg)
}

void ReconnectionCfg::SharedCtor() {
  ::memset(&reconnect_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_interval_max_) -
      reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
}

ReconnectionCfg::~ReconnectionCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.ReconnectionCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReconnectionCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReconnectionCfg::ArenaDtor(void* object) {
  ReconnectionCfg* _this = reinterpret_cast< ReconnectionCfg* >(object);
  (void)_this;
}
void ReconnectionCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReconnectionCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconnectionCfg& ReconnectionCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconnectionCfg_dcts_2eproto.base);
  return *internal_default_instance();
}


void ReconnectionCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ReconnectionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reconnect_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnect_interval_max_) -
      reinterpret_cast<char*>(&reconnect_interval_)) + sizeof(reconnect_interval_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconnectionCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reconnect_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reconnect_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reconnect_interval_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reconnect_interval_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconnectionCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ReconnectionCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reconnect_interval = 1;
  if (this->reconnect_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reconnect_interval(), target);
  }

  // int32 reconnect_interval_max = 2;
  if (this->reconnect_interval_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reconnect_interval_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ReconnectionCfg)
  return target;
}

size_t ReconnectionCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ReconnectionCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reconnect_interval = 1;
  if (this->reconnect_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect_interval());
  }

  // int32 reconnect_interval_max = 2;
  if (this->reconnect_interval_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnect_interval_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconnectionCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ReconnectionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconnectionCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconnectionCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ReconnectionCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ReconnectionCfg)
    MergeFrom(*source);
  }
}

void ReconnectionCfg::MergeFrom(const ReconnectionCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ReconnectionCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reconnect_interval() != 0) {
    _internal_set_reconnect_interval(from._internal_reconnect_interval());
  }
  if (from.reconnect_interval_max() != 0) {
    _internal_set_reconnect_interval_max(from._internal_reconnect_interval_max());
  }
}

void ReconnectionCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ReconnectionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectionCfg::CopyFrom(const ReconnectionCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ReconnectionCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectionCfg::IsInitialized() const {
  return true;
}

void ReconnectionCfg::InternalSwap(ReconnectionCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconnectionCfg, reconnect_interval_max_)
      + sizeof(ReconnectionCfg::reconnect_interval_max_)
      - PROTOBUF_FIELD_OFFSET(ReconnectionCfg, reconnect_interval_)>(
          reinterpret_cast<char*>(&reconnect_interval_),
          reinterpret_cast<char*>(&other->reconnect_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconnectionCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgSendOption::InitAsDefaultInstance() {
}
class MsgSendOption::_Internal {
 public:
};

MsgSendOption::MsgSendOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.MsgSendOption)
}
MsgSendOption::MsgSendOption(const MsgSendOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hwm_, &from.hwm_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.MsgSendOption)
}

void MsgSendOption::SharedCtor() {
  ::memset(&hwm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
}

MsgSendOption::~MsgSendOption() {
  // @@protoc_insertion_point(destructor:zb.dcts.MsgSendOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgSendOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgSendOption::ArenaDtor(void* object) {
  MsgSendOption* _this = reinterpret_cast< MsgSendOption* >(object);
  (void)_this;
}
void MsgSendOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgSendOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgSendOption& MsgSendOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgSendOption_dcts_2eproto.base);
  return *internal_default_instance();
}


void MsgSendOption::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.MsgSendOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hwm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&hwm_)) + sizeof(timeout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSendOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hwm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hwm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 linger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          linger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgSendOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.MsgSendOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hwm = 1;
  if (this->hwm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hwm(), target);
  }

  // int32 linger = 2;
  if (this->linger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_linger(), target);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.MsgSendOption)
  return target;
}

size_t MsgSendOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.MsgSendOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hwm = 1;
  if (this->hwm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hwm());
  }

  // int32 linger = 2;
  if (this->linger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linger());
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgSendOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.MsgSendOption)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgSendOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgSendOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.MsgSendOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.MsgSendOption)
    MergeFrom(*source);
  }
}

void MsgSendOption::MergeFrom(const MsgSendOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.MsgSendOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hwm() != 0) {
    _internal_set_hwm(from._internal_hwm());
  }
  if (from.linger() != 0) {
    _internal_set_linger(from._internal_linger());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void MsgSendOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.MsgSendOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendOption::CopyFrom(const MsgSendOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.MsgSendOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendOption::IsInitialized() const {
  return true;
}

void MsgSendOption::InternalSwap(MsgSendOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSendOption, timeout_)
      + sizeof(MsgSendOption::timeout_)
      - PROTOBUF_FIELD_OFFSET(MsgSendOption, hwm_)>(
          reinterpret_cast<char*>(&hwm_),
          reinterpret_cast<char*>(&other->hwm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSendOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPv4Address::InitAsDefaultInstance() {
}
class IPv4Address::_Internal {
 public:
};

IPv4Address::IPv4Address(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.IPv4Address)
}
IPv4Address::IPv4Address(const IPv4Address& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.IPv4Address)
}

void IPv4Address::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPv4Address_dcts_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

IPv4Address::~IPv4Address() {
  // @@protoc_insertion_point(destructor:zb.dcts.IPv4Address)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPv4Address::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPv4Address::ArenaDtor(void* object) {
  IPv4Address* _this = reinterpret_cast< IPv4Address* >(object);
  (void)_this;
}
void IPv4Address::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPv4Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPv4Address& IPv4Address::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPv4Address_dcts_2eproto.base);
  return *internal_default_instance();
}


void IPv4Address::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.IPv4Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPv4Address::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.IPv4Address.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPv4Address::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.IPv4Address)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.IPv4Address.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.IPv4Address)
  return target;
}

size_t IPv4Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.IPv4Address)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPv4Address::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.IPv4Address)
  GOOGLE_DCHECK_NE(&from, this);
  const IPv4Address* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPv4Address>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.IPv4Address)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.IPv4Address)
    MergeFrom(*source);
  }
}

void IPv4Address::MergeFrom(const IPv4Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.IPv4Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void IPv4Address::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.IPv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPv4Address::CopyFrom(const IPv4Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.IPv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPv4Address::IsInitialized() const {
  return true;
}

void IPv4Address::InternalSwap(IPv4Address* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPv4Address::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZeromqLinkCfg::InitAsDefaultInstance() {
  ::zb::dcts::_ZeromqLinkCfg_default_instance_._instance.get_mutable()->address_ = const_cast< ::zb::dcts::IPv4Address*>(
      ::zb::dcts::IPv4Address::internal_default_instance());
  ::zb::dcts::_ZeromqLinkCfg_default_instance_._instance.get_mutable()->heartbeat_cfg_ = const_cast< ::zb::dcts::HeartbeatCfg*>(
      ::zb::dcts::HeartbeatCfg::internal_default_instance());
  ::zb::dcts::_ZeromqLinkCfg_default_instance_._instance.get_mutable()->reconnect_cfg_ = const_cast< ::zb::dcts::ReconnectionCfg*>(
      ::zb::dcts::ReconnectionCfg::internal_default_instance());
  ::zb::dcts::_ZeromqLinkCfg_default_instance_._instance.get_mutable()->msg_send_cfg_ = const_cast< ::zb::dcts::MsgSendOption*>(
      ::zb::dcts::MsgSendOption::internal_default_instance());
}
class ZeromqLinkCfg::_Internal {
 public:
  static const ::zb::dcts::IPv4Address& address(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::HeartbeatCfg& heartbeat_cfg(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::ReconnectionCfg& reconnect_cfg(const ZeromqLinkCfg* msg);
  static const ::zb::dcts::MsgSendOption& msg_send_cfg(const ZeromqLinkCfg* msg);
};

const ::zb::dcts::IPv4Address&
ZeromqLinkCfg::_Internal::address(const ZeromqLinkCfg* msg) {
  return *msg->address_;
}
const ::zb::dcts::HeartbeatCfg&
ZeromqLinkCfg::_Internal::heartbeat_cfg(const ZeromqLinkCfg* msg) {
  return *msg->heartbeat_cfg_;
}
const ::zb::dcts::ReconnectionCfg&
ZeromqLinkCfg::_Internal::reconnect_cfg(const ZeromqLinkCfg* msg) {
  return *msg->reconnect_cfg_;
}
const ::zb::dcts::MsgSendOption&
ZeromqLinkCfg::_Internal::msg_send_cfg(const ZeromqLinkCfg* msg) {
  return *msg->msg_send_cfg_;
}
ZeromqLinkCfg::ZeromqLinkCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ZeromqLinkCfg)
}
ZeromqLinkCfg::ZeromqLinkCfg(const ZeromqLinkCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_name().empty()) {
    link_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_link_name(),
      GetArena());
  }
  if (from._internal_has_address()) {
    address_ = new ::zb::dcts::IPv4Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_heartbeat_cfg()) {
    heartbeat_cfg_ = new ::zb::dcts::HeartbeatCfg(*from.heartbeat_cfg_);
  } else {
    heartbeat_cfg_ = nullptr;
  }
  if (from._internal_has_reconnect_cfg()) {
    reconnect_cfg_ = new ::zb::dcts::ReconnectionCfg(*from.reconnect_cfg_);
  } else {
    reconnect_cfg_ = nullptr;
  }
  if (from._internal_has_msg_send_cfg()) {
    msg_send_cfg_ = new ::zb::dcts::MsgSendOption(*from.msg_send_cfg_);
  } else {
    msg_send_cfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ZeromqLinkCfg)
}

void ZeromqLinkCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ZeromqLinkCfg_dcts_2eproto.base);
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_send_cfg_) -
      reinterpret_cast<char*>(&address_)) + sizeof(msg_send_cfg_));
}

ZeromqLinkCfg::~ZeromqLinkCfg() {
  // @@protoc_insertion_point(destructor:zb.dcts.ZeromqLinkCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZeromqLinkCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  link_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete heartbeat_cfg_;
  if (this != internal_default_instance()) delete reconnect_cfg_;
  if (this != internal_default_instance()) delete msg_send_cfg_;
}

void ZeromqLinkCfg::ArenaDtor(void* object) {
  ZeromqLinkCfg* _this = reinterpret_cast< ZeromqLinkCfg* >(object);
  (void)_this;
}
void ZeromqLinkCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZeromqLinkCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZeromqLinkCfg& ZeromqLinkCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZeromqLinkCfg_dcts_2eproto.base);
  return *internal_default_instance();
}


void ZeromqLinkCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ZeromqLinkCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && heartbeat_cfg_ != nullptr) {
    delete heartbeat_cfg_;
  }
  heartbeat_cfg_ = nullptr;
  if (GetArena() == nullptr && reconnect_cfg_ != nullptr) {
    delete reconnect_cfg_;
  }
  reconnect_cfg_ = nullptr;
  if (GetArena() == nullptr && msg_send_cfg_ != nullptr) {
    delete msg_send_cfg_;
  }
  msg_send_cfg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeromqLinkCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.IPv4Address address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_link_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.ZeromqLinkCfg.link_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.MsgSendOption msg_send_cfg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_send_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZeromqLinkCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ZeromqLinkCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.IPv4Address address = 1;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::address(this), target, stream);
  }

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_name().data(), static_cast<int>(this->_internal_link_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.ZeromqLinkCfg.link_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_link_name(), target);
  }

  // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
  if (this->has_heartbeat_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heartbeat_cfg(this), target, stream);
  }

  // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
  if (this->has_reconnect_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reconnect_cfg(this), target, stream);
  }

  // .zb.dcts.MsgSendOption msg_send_cfg = 6;
  if (this->has_msg_send_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::msg_send_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ZeromqLinkCfg)
  return target;
}

size_t ZeromqLinkCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ZeromqLinkCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_name());
  }

  // .zb.dcts.IPv4Address address = 1;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .zb.dcts.HeartbeatCfg heartbeat_cfg = 4;
  if (this->has_heartbeat_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heartbeat_cfg_);
  }

  // .zb.dcts.ReconnectionCfg reconnect_cfg = 5;
  if (this->has_reconnect_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconnect_cfg_);
  }

  // .zb.dcts.MsgSendOption msg_send_cfg = 6;
  if (this->has_msg_send_cfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_send_cfg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZeromqLinkCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ZeromqLinkCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const ZeromqLinkCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZeromqLinkCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ZeromqLinkCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ZeromqLinkCfg)
    MergeFrom(*source);
  }
}

void ZeromqLinkCfg::MergeFrom(const ZeromqLinkCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ZeromqLinkCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link_name().size() > 0) {
    _internal_set_link_name(from._internal_link_name());
  }
  if (from.has_address()) {
    _internal_mutable_address()->::zb::dcts::IPv4Address::MergeFrom(from._internal_address());
  }
  if (from.has_heartbeat_cfg()) {
    _internal_mutable_heartbeat_cfg()->::zb::dcts::HeartbeatCfg::MergeFrom(from._internal_heartbeat_cfg());
  }
  if (from.has_reconnect_cfg()) {
    _internal_mutable_reconnect_cfg()->::zb::dcts::ReconnectionCfg::MergeFrom(from._internal_reconnect_cfg());
  }
  if (from.has_msg_send_cfg()) {
    _internal_mutable_msg_send_cfg()->::zb::dcts::MsgSendOption::MergeFrom(from._internal_msg_send_cfg());
  }
}

void ZeromqLinkCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ZeromqLinkCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZeromqLinkCfg::CopyFrom(const ZeromqLinkCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ZeromqLinkCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeromqLinkCfg::IsInitialized() const {
  return true;
}

void ZeromqLinkCfg::InternalSwap(ZeromqLinkCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  link_name_.Swap(&other->link_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZeromqLinkCfg, msg_send_cfg_)
      + sizeof(ZeromqLinkCfg::msg_send_cfg_)
      - PROTOBUF_FIELD_OFFSET(ZeromqLinkCfg, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeromqLinkCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimerParam::InitAsDefaultInstance() {
}
class TimerParam::_Internal {
 public:
};

TimerParam::TimerParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.TimerParam)
}
TimerParam::TimerParam(const TimerParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&interval_in_ms_, &from.interval_in_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.TimerParam)
}

void TimerParam::SharedCtor() {
  ::memset(&interval_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
}

TimerParam::~TimerParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.TimerParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimerParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TimerParam::ArenaDtor(void* object) {
  TimerParam* _this = reinterpret_cast< TimerParam* >(object);
  (void)_this;
}
void TimerParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimerParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerParam& TimerParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerParam_dcts_2eproto.base);
  return *internal_default_instance();
}


void TimerParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.TimerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interval_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&interval_in_ms_)) + sizeof(times_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimerParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 interval_in_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interval_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.TimerParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 interval_in_ms = 1;
  if (this->interval_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_interval_in_ms(), target);
  }

  // int32 times = 2;
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.TimerParam)
  return target;
}

size_t TimerParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.TimerParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 interval_in_ms = 1;
  if (this->interval_in_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interval_in_ms());
  }

  // int32 times = 2;
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.TimerParam)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.TimerParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.TimerParam)
    MergeFrom(*source);
  }
}

void TimerParam::MergeFrom(const TimerParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.TimerParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval_in_ms() != 0) {
    _internal_set_interval_in_ms(from._internal_interval_in_ms());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
}

void TimerParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.TimerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerParam::CopyFrom(const TimerParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.TimerParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerParam::IsInitialized() const {
  return true;
}

void TimerParam::InternalSwap(TimerParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimerParam, times_)
      + sizeof(TimerParam::times_)
      - PROTOBUF_FIELD_OFFSET(TimerParam, interval_in_ms_)>(
          reinterpret_cast<char*>(&interval_in_ms_),
          reinterpret_cast<char*>(&other->interval_in_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Topic::InitAsDefaultInstance() {
}
class Topic::_Internal {
 public:
};

Topic::Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Topic)
}
Topic::Topic(const Topic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Topic)
}

void Topic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Topic_dcts_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:zb.dcts.Topic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Topic::ArenaDtor(void* object) {
  Topic* _this = reinterpret_cast< Topic* >(object);
  (void)_this;
}
void Topic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Topic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Topic& Topic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Topic_dcts_2eproto.base);
  return *internal_default_instance();
}


void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Topic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Topic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.Topic.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.Topic.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Topic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Topic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.Topic.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.Topic.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Topic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  const Topic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Topic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Topic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Topic)
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Topic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  return true;
}

void Topic::InternalSwap(Topic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Topic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ServerConfig_ServicesEntry_DoNotUse::ServerConfig_ServicesEntry_DoNotUse() {}
ServerConfig_ServicesEntry_DoNotUse::ServerConfig_ServicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerConfig_ServicesEntry_DoNotUse::MergeFrom(const ServerConfig_ServicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerConfig_ServicesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServerConfig_ServicesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ServerConfig_PathEntry_DoNotUse::ServerConfig_PathEntry_DoNotUse() {}
ServerConfig_PathEntry_DoNotUse::ServerConfig_PathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServerConfig_PathEntry_DoNotUse::MergeFrom(const ServerConfig_PathEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServerConfig_PathEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ServerConfig_PathEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ServerConfig::InitAsDefaultInstance() {
  ::zb::dcts::_ServerConfig_default_instance_._instance.get_mutable()->server_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_ServerConfig_default_instance_._instance.get_mutable()->pull_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_ServerConfig_default_instance_._instance.get_mutable()->pub_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_ServerConfig_default_instance_._instance.get_mutable()->sub_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
}
class ServerConfig::_Internal {
 public:
  static const ::zb::dcts::ZeromqLinkCfg& server(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& pull(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& pub(const ServerConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& sub(const ServerConfig* msg);
};

const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::server(const ServerConfig* msg) {
  return *msg->server_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::pull(const ServerConfig* msg) {
  return *msg->pull_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::pub(const ServerConfig* msg) {
  return *msg->pub_;
}
const ::zb::dcts::ZeromqLinkCfg&
ServerConfig::_Internal::sub(const ServerConfig* msg) {
  return *msg->sub_;
}
ServerConfig::ServerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  services_(arena),
  path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.ServerConfig)
}
ServerConfig::ServerConfig(const ServerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  services_.MergeFrom(from.services_);
  path_.MergeFrom(from.path_);
  if (from._internal_has_server()) {
    server_ = new ::zb::dcts::ZeromqLinkCfg(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from._internal_has_pull()) {
    pull_ = new ::zb::dcts::ZeromqLinkCfg(*from.pull_);
  } else {
    pull_ = nullptr;
  }
  if (from._internal_has_pub()) {
    pub_ = new ::zb::dcts::ZeromqLinkCfg(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from._internal_has_sub()) {
    sub_ = new ::zb::dcts::ZeromqLinkCfg(*from.sub_);
  } else {
    sub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.ServerConfig)
}

void ServerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerConfig_dcts_2eproto.base);
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_) -
      reinterpret_cast<char*>(&server_)) + sizeof(sub_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.ServerConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete pull_;
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete sub_;
}

void ServerConfig::ArenaDtor(void* object) {
  ServerConfig* _this = reinterpret_cast< ServerConfig* >(object);
  (void)_this;
}
void ServerConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerConfig& ServerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerConfig_dcts_2eproto.base);
  return *internal_default_instance();
}


void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.ServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  path_.Clear();
  if (GetArena() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  if (GetArena() == nullptr && pull_ != nullptr) {
    delete pull_;
  }
  pull_ = nullptr;
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ZeromqLinkCfg server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg pull = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg sub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .zb.dcts.IPv4Address> services = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&services_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&path_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.ServerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg server = 1;
  if (this->has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::server(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg pull = 2;
  if (this->has_pull()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pull(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pub(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sub(this), target, stream);
  }

  // map<string, .zb.dcts.IPv4Address> services = 5;
  if (!this->_internal_services().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.ServerConfig.ServicesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_services().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_services().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
          it = this->_internal_services().begin();
          it != this->_internal_services().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerConfig_ServicesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
          it = this->_internal_services().begin();
          it != this->_internal_services().end(); ++it) {
        target = ServerConfig_ServicesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> path = 6;
  if (!this->_internal_path().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.ServerConfig.PathEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.ServerConfig.PathEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_path().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_path().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_path().begin();
          it != this->_internal_path().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ServerConfig_PathEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_path().begin();
          it != this->_internal_path().end(); ++it) {
        target = ServerConfig_PathEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.ServerConfig)
  return target;
}

size_t ServerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.ServerConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .zb.dcts.IPv4Address> services = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_services_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::zb::dcts::IPv4Address >::const_iterator
      it = this->_internal_services().begin();
      it != this->_internal_services().end(); ++it) {
    total_size += ServerConfig_ServicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> path = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_path_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_path().begin();
      it != this->_internal_path().end(); ++it) {
    total_size += ServerConfig_PathEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.ZeromqLinkCfg server = 1;
  if (this->has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  // .zb.dcts.ZeromqLinkCfg pull = 2;
  if (this->has_pull()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pull_);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.ServerConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.ServerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  path_.MergeFrom(from.path_);
  if (from.has_server()) {
    _internal_mutable_server()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_server());
  }
  if (from.has_pull()) {
    _internal_mutable_pull()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_pull());
  }
  if (from.has_pub()) {
    _internal_mutable_pub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_pub());
  }
  if (from.has_sub()) {
    _internal_mutable_sub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_sub());
  }
}

void ServerConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  return true;
}

void ServerConfig::InternalSwap(ServerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  services_.Swap(&other->services_);
  path_.Swap(&other->path_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConfig, sub_)
      + sizeof(ServerConfig::sub_)
      - PROTOBUF_FIELD_OFFSET(ServerConfig, server_)>(
          reinterpret_cast<char*>(&server_),
          reinterpret_cast<char*>(&other->server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RemoteConfig_OptionsEntry_DoNotUse::RemoteConfig_OptionsEntry_DoNotUse() {}
RemoteConfig_OptionsEntry_DoNotUse::RemoteConfig_OptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RemoteConfig_OptionsEntry_DoNotUse::MergeFrom(const RemoteConfig_OptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RemoteConfig_OptionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RemoteConfig_OptionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RemoteConfig::InitAsDefaultInstance() {
  ::zb::dcts::_RemoteConfig_default_instance_._instance.get_mutable()->client_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_RemoteConfig_default_instance_._instance.get_mutable()->push_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_RemoteConfig_default_instance_._instance.get_mutable()->pub_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
  ::zb::dcts::_RemoteConfig_default_instance_._instance.get_mutable()->sub_ = const_cast< ::zb::dcts::ZeromqLinkCfg*>(
      ::zb::dcts::ZeromqLinkCfg::internal_default_instance());
}
class RemoteConfig::_Internal {
 public:
  static const ::zb::dcts::ZeromqLinkCfg& client(const RemoteConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& push(const RemoteConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& pub(const RemoteConfig* msg);
  static const ::zb::dcts::ZeromqLinkCfg& sub(const RemoteConfig* msg);
};

const ::zb::dcts::ZeromqLinkCfg&
RemoteConfig::_Internal::client(const RemoteConfig* msg) {
  return *msg->client_;
}
const ::zb::dcts::ZeromqLinkCfg&
RemoteConfig::_Internal::push(const RemoteConfig* msg) {
  return *msg->push_;
}
const ::zb::dcts::ZeromqLinkCfg&
RemoteConfig::_Internal::pub(const RemoteConfig* msg) {
  return *msg->pub_;
}
const ::zb::dcts::ZeromqLinkCfg&
RemoteConfig::_Internal::sub(const RemoteConfig* msg) {
  return *msg->sub_;
}
RemoteConfig::RemoteConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.RemoteConfig)
}
RemoteConfig::RemoteConfig(const RemoteConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  options_.MergeFrom(from.options_);
  if (from._internal_has_client()) {
    client_ = new ::zb::dcts::ZeromqLinkCfg(*from.client_);
  } else {
    client_ = nullptr;
  }
  if (from._internal_has_push()) {
    push_ = new ::zb::dcts::ZeromqLinkCfg(*from.push_);
  } else {
    push_ = nullptr;
  }
  if (from._internal_has_pub()) {
    pub_ = new ::zb::dcts::ZeromqLinkCfg(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from._internal_has_sub()) {
    sub_ = new ::zb::dcts::ZeromqLinkCfg(*from.sub_);
  } else {
    sub_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.RemoteConfig)
}

void RemoteConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteConfig_dcts_2eproto.base);
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_) -
      reinterpret_cast<char*>(&client_)) + sizeof(sub_));
}

RemoteConfig::~RemoteConfig() {
  // @@protoc_insertion_point(destructor:zb.dcts.RemoteConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete client_;
  if (this != internal_default_instance()) delete push_;
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete sub_;
}

void RemoteConfig::ArenaDtor(void* object) {
  RemoteConfig* _this = reinterpret_cast< RemoteConfig* >(object);
  (void)_this;
}
void RemoteConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteConfig& RemoteConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteConfig_dcts_2eproto.base);
  return *internal_default_instance();
}


void RemoteConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.RemoteConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
  if (GetArena() == nullptr && push_ != nullptr) {
    delete push_;
  }
  push_ = nullptr;
  if (GetArena() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArena() == nullptr && sub_ != nullptr) {
    delete sub_;
  }
  sub_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ZeromqLinkCfg client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg push = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_push(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg pub = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.ZeromqLinkCfg sub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.RemoteConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ZeromqLinkCfg client = 1;
  if (this->has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg push = 2;
  if (this->has_push()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::push(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pub(this), target, stream);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sub(this), target, stream);
  }

  // map<string, string> options = 5;
  if (!this->_internal_options().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.RemoteConfig.OptionsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "zb.dcts.RemoteConfig.OptionsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_options().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_options().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RemoteConfig_OptionsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_options().begin();
          it != this->_internal_options().end(); ++it) {
        target = RemoteConfig_OptionsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.RemoteConfig)
  return target;
}

size_t RemoteConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.RemoteConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> options = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_options().begin();
      it != this->_internal_options().end(); ++it) {
    total_size += RemoteConfig_OptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .zb.dcts.ZeromqLinkCfg client = 1;
  if (this->has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_);
  }

  // .zb.dcts.ZeromqLinkCfg push = 2;
  if (this->has_push()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *push_);
  }

  // .zb.dcts.ZeromqLinkCfg pub = 3;
  if (this->has_pub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .zb.dcts.ZeromqLinkCfg sub = 4;
  if (this->has_sub()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.RemoteConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.RemoteConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.RemoteConfig)
    MergeFrom(*source);
  }
}

void RemoteConfig::MergeFrom(const RemoteConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.RemoteConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.has_client()) {
    _internal_mutable_client()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_client());
  }
  if (from.has_push()) {
    _internal_mutable_push()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_push());
  }
  if (from.has_pub()) {
    _internal_mutable_pub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_pub());
  }
  if (from.has_sub()) {
    _internal_mutable_sub()->::zb::dcts::ZeromqLinkCfg::MergeFrom(from._internal_sub());
  }
}

void RemoteConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.RemoteConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteConfig::CopyFrom(const RemoteConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.RemoteConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteConfig::IsInitialized() const {
  return true;
}

void RemoteConfig::InternalSwap(RemoteConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.Swap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteConfig, sub_)
      + sizeof(RemoteConfig::sub_)
      - PROTOBUF_FIELD_OFFSET(RemoteConfig, client_)>(
          reinterpret_cast<char*>(&client_),
          reinterpret_cast<char*>(&other->client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::zb::dcts::_Command_default_instance_._instance.get_mutable()->command_param_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Command::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& command_param(const Command* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Command::_Internal::command_param(const Command* msg) {
  return *msg->command_param_;
}
void Command::clear_command_param() {
  if (GetArena() == nullptr && command_param_ != nullptr) {
    delete command_param_;
  }
  command_param_ = nullptr;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_command_param()) {
    command_param_ = new PROTOBUF_NAMESPACE_ID::Any(*from.command_param_);
  } else {
    command_param_ = nullptr;
  }
  command_function_ = from.command_function_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_dcts_2eproto.base);
  ::memset(&command_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_function_) -
      reinterpret_cast<char*>(&command_param_)) + sizeof(command_function_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:zb.dcts.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete command_param_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_dcts_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && command_param_ != nullptr) {
    delete command_param_;
  }
  command_param_ = nullptr;
  command_function_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 command_function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          command_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any command_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 command_function = 1;
  if (this->command_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_command_function(), target);
  }

  // .google.protobuf.Any command_param = 2;
  if (this->has_command_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::command_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any command_param = 2;
  if (this->has_command_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_param_);
  }

  // uint32 command_function = 1;
  if (this->command_function() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_function());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command_param()) {
    _internal_mutable_command_param()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_command_param());
  }
  if (from.command_function() != 0) {
    _internal_set_command_function(from._internal_command_function());
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, command_function_)
      + sizeof(Command::command_function_)
      - PROTOBUF_FIELD_OFFSET(Command, command_param_)>(
          reinterpret_cast<char*>(&command_param_),
          reinterpret_cast<char*>(&other->command_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandReply::InitAsDefaultInstance() {
  ::zb::dcts::_CommandReply_default_instance_._instance.get_mutable()->attachment_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class CommandReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& attachment(const CommandReply* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
CommandReply::_Internal::attachment(const CommandReply* msg) {
  return *msg->attachment_;
}
void CommandReply::clear_attachment() {
  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
CommandReply::CommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.CommandReply)
}
CommandReply::CommandReply(const CommandReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attachment()) {
    attachment_ = new PROTOBUF_NAMESPACE_ID::Any(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.CommandReply)
}

void CommandReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandReply_dcts_2eproto.base);
  ::memset(&attachment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&attachment_)) + sizeof(error_code_));
}

CommandReply::~CommandReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.CommandReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete attachment_;
}

void CommandReply::ArenaDtor(void* object) {
  CommandReply* _this = reinterpret_cast< CommandReply* >(object);
  (void)_this;
}
void CommandReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandReply& CommandReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandReply_dcts_2eproto.base);
  return *internal_default_instance();
}


void CommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.CommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.ErrorType error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::zb::dcts::ErrorType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any attachment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.CommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.ErrorType error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  // .google.protobuf.Any attachment = 2;
  if (this->has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attachment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.CommandReply)
  return target;
}

size_t CommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.CommandReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any attachment = 2;
  if (this->has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // .zb.dcts.ErrorType error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.CommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.CommandReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.CommandReply)
    MergeFrom(*source);
  }
}

void CommandReply::MergeFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.CommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attachment()) {
    _internal_mutable_attachment()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_attachment());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void CommandReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReply::CopyFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReply::IsInitialized() const {
  return true;
}

void CommandReply::InternalSwap(CommandReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReply, error_code_)
      + sizeof(CommandReply::error_code_)
      - PROTOBUF_FIELD_OFFSET(CommandReply, attachment_)>(
          reinterpret_cast<char*>(&attachment_),
          reinterpret_cast<char*>(&other->attachment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::Timestamp* Arena::CreateMaybeMessage< ::zb::dcts::Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::TimeSpan* Arena::CreateMaybeMessage< ::zb::dcts::TimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::TimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Position* Arena::CreateMaybeMessage< ::zb::dcts::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Posture* Arena::CreateMaybeMessage< ::zb::dcts::Posture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Posture >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Direction* Arena::CreateMaybeMessage< ::zb::dcts::Direction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Direction >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::DOA* Arena::CreateMaybeMessage< ::zb::dcts::DOA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::DOA >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::DRange* Arena::CreateMaybeMessage< ::zb::dcts::DRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::DRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::IRange* Arena::CreateMaybeMessage< ::zb::dcts::IRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::IRange >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Physical* Arena::CreateMaybeMessage< ::zb::dcts::Physical >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Physical >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Metrics_IndicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::Metrics_IndicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Metrics_IndicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Metrics* Arena::CreateMaybeMessage< ::zb::dcts::Metrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Metrics >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Integer* Arena::CreateMaybeMessage< ::zb::dcts::Integer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Integer >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Boolean* Arena::CreateMaybeMessage< ::zb::dcts::Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::RealNumber* Arena::CreateMaybeMessage< ::zb::dcts::RealNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::RealNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ComplexNumber* Arena::CreateMaybeMessage< ::zb::dcts::ComplexNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ComplexNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::StatisticVal* Arena::CreateMaybeMessage< ::zb::dcts::StatisticVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::StatisticVal >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::HeartbeatCfg* Arena::CreateMaybeMessage< ::zb::dcts::HeartbeatCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::HeartbeatCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ReconnectionCfg* Arena::CreateMaybeMessage< ::zb::dcts::ReconnectionCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ReconnectionCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::MsgSendOption* Arena::CreateMaybeMessage< ::zb::dcts::MsgSendOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::MsgSendOption >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::IPv4Address* Arena::CreateMaybeMessage< ::zb::dcts::IPv4Address >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::IPv4Address >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ZeromqLinkCfg* Arena::CreateMaybeMessage< ::zb::dcts::ZeromqLinkCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ZeromqLinkCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::TimerParam* Arena::CreateMaybeMessage< ::zb::dcts::TimerParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::TimerParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Topic* Arena::CreateMaybeMessage< ::zb::dcts::Topic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Topic >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ServerConfig_ServicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::ServerConfig_ServicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ServerConfig_ServicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ServerConfig_PathEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::ServerConfig_PathEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ServerConfig_PathEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::ServerConfig* Arena::CreateMaybeMessage< ::zb::dcts::ServerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::ServerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::RemoteConfig_OptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::RemoteConfig* Arena::CreateMaybeMessage< ::zb::dcts::RemoteConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::RemoteConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::Command* Arena::CreateMaybeMessage< ::zb::dcts::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::CommandReply* Arena::CreateMaybeMessage< ::zb::dcts::CommandReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::CommandReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
