syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "dcts.proto";

// 选项配置
option java_outer_classname = "NodeControlServiceApi";
option java_package = "proto_compile.cetc41.nodecontrol";

//节点控制指令类型
enum NodeControlType
{
  REBOOT_NODE = 0;        //重启节点系统
  SHUTDOWN_NODE = 1;      //关闭节点系统
  ABORT_ALL = 2;          //停止所有任务
  SELF_TEST = 3;          //自检
  RENAME = 4;             //更名
}

message NodeId
{
  string value = 1;
}

message DeviceId
{
  string value = 1;
}

//节点控制请求与响应
message NodeControl
{
  NodeId node_id = 1;
  DeviceId device_id = 2;
  NodeControlType control_type = 3;
  string detail = 4;
}

// 节点控制响应
message NodeControlResponse {
  bool success = 1;
  string message = 2;
}

//设备信息
message DeviceInfo
{
  DeviceId device_id = 1;        //节点id
  string device_name = 2;
  string device_type = 3;
  string status = 4;
  Position position = 5;  //节点位置, wgs-84坐标系，弧度单位
  Posture posture = 6;
  repeated Physical physicalList = 7;
  repeated Topic topics = 8;                  //源正在发布的主题
}

message NodeInfo
{
  NodeId node_id = 1;                         //节点id
  string node_name = 2;                       //节点名字
  string node_type = 3;                       //节点类型
  Timestamp last_heard = 4;                   //从最近一次收到节点心跳起逝去的秒值
  repeated DeviceInfo dataSourceList = 5;     //隶属于节点设备信息列表
  optional bool is_physical = 6;              //节点设备是物理/虚拟的
}

//所有节点的信息
message NodesInfo
{
  repeated NodeInfo node_infos = 1;
}

message Command
{
  uint32 command_function = 1;
  google.protobuf.Any command_param = 2;
}

enum CmdType
{
  RESERVED = 0;
  PAUSE = 1;
  RESUME = 2;
  RESTART_AT = 3;
  RESET_LENGTH = 4;
  START = 5;
  SHUTDOWN = 6;
}

message CommandReply
{
  ErrorType error_code = 1;
  google.protobuf.Any attachment = 2;
}

message SourceCommand
{
  DeviceId device_id = 1;
  Command command = 2;
}

message SourceCommandReply
{
  DeviceId device_id = 1;
  CommandReply reply = 2;
}

message SubscribeRequest
{
  DeviceId DeviceId = 1;
  Topic topic = 2;
}

// 通用管理的API
service NodeControlService
{
  rpc ListAllNodes(google.protobuf.Empty) returns (NodesInfo) {}       // 枚举所有节点
  rpc SendSourceCommand(SourceCommand) returns (SourceCommandReply) {} // 节点控制
  rpc SubscribeSourceMessage(SubscribeRequest) returns(stream google.protobuf.Any){}  //订阅数据源发布的消息（以主题形式分组消息）
}