// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhCommDirectionAcq.proto

package zb.dcts.scenario.kh.commDirection;

public final class KhCommDirectionAcq {
  private KhCommDirectionAcq() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code zb.dcts.scenario.kh.commDirection.DirectionMode}
   */
  public enum DirectionMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *单点模式
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    SINGLE(0),
    /**
     * <pre>
     *多点模式
     * </pre>
     *
     * <code>MULTIPLE = 1;</code>
     */
    MULTIPLE(1),
    /**
     * <pre>
     *扫描模式
     * </pre>
     *
     * <code>SCAN = 2;</code>
     */
    SCAN(2),
    /**
     * <pre>
     *搜索模式 
     * </pre>
     *
     * <code>SEARCH = 3;</code>
     */
    SEARCH(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *单点模式
     * </pre>
     *
     * <code>SINGLE = 0;</code>
     */
    public static final int SINGLE_VALUE = 0;
    /**
     * <pre>
     *多点模式
     * </pre>
     *
     * <code>MULTIPLE = 1;</code>
     */
    public static final int MULTIPLE_VALUE = 1;
    /**
     * <pre>
     *扫描模式
     * </pre>
     *
     * <code>SCAN = 2;</code>
     */
    public static final int SCAN_VALUE = 2;
    /**
     * <pre>
     *搜索模式 
     * </pre>
     *
     * <code>SEARCH = 3;</code>
     */
    public static final int SEARCH_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DirectionMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DirectionMode forNumber(int value) {
      switch (value) {
        case 0: return SINGLE;
        case 1: return MULTIPLE;
        case 2: return SCAN;
        case 3: return SEARCH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DirectionMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DirectionMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DirectionMode>() {
            public DirectionMode findValueByNumber(int number) {
              return DirectionMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.getDescriptor().getEnumTypes().get(0);
    }

    private static final DirectionMode[] VALUES = values();

    public static DirectionMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DirectionMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.scenario.kh.commDirection.DirectionMode)
  }

  /**
   * Protobuf enum {@code zb.dcts.scenario.kh.commDirection.DFThresholdMode}
   */
  public enum DFThresholdMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *自动门限
     * </pre>
     *
     * <code>AUTO = 0;</code>
     */
    AUTO(0),
    /**
     * <code>MANUAL = 1;</code>
     */
    MANUAL(1),
    /**
     * <code>NORMAL = 2;</code>
     */
    NORMAL(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *自动门限
     * </pre>
     *
     * <code>AUTO = 0;</code>
     */
    public static final int AUTO_VALUE = 0;
    /**
     * <code>MANUAL = 1;</code>
     */
    public static final int MANUAL_VALUE = 1;
    /**
     * <code>NORMAL = 2;</code>
     */
    public static final int NORMAL_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DFThresholdMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DFThresholdMode forNumber(int value) {
      switch (value) {
        case 0: return AUTO;
        case 1: return MANUAL;
        case 2: return NORMAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DFThresholdMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DFThresholdMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DFThresholdMode>() {
            public DFThresholdMode findValueByNumber(int number) {
              return DFThresholdMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.getDescriptor().getEnumTypes().get(1);
    }

    private static final DFThresholdMode[] VALUES = values();

    public static DFThresholdMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DFThresholdMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.scenario.kh.commDirection.DFThresholdMode)
  }

  /**
   * Protobuf enum {@code zb.dcts.scenario.kh.commDirection.ParamIndex}
   */
  public enum ParamIndex
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *修改门限值
     * </pre>
     *
     * <code>THRESHOLD_VALUE = 0;</code>
     */
    THRESHOLD_VALUE(0),
    /**
     * <pre>
     *修改门限模式
     * </pre>
     *
     * <code>THRESHOLD_MODE = 1;</code>
     */
    THRESHOLD_MODE(1),
    /**
     * <pre>
     *平均时间
     * </pre>
     *
     * <code>AVERAGE_TIME = 2;</code>
     */
    AVERAGE_TIME(2),
    /**
     * <pre>
     *FFM中心频率，仅单点、多点方式支持
     * </pre>
     *
     * <code>CENTER_FREQ = 3;</code>
     */
    CENTER_FREQ(3),
    /**
     * <pre>
     *天线控制方式，仅单点、多点方式支持
     * </pre>
     *
     * <code>ANTENNA_MODE = 4;</code>
     */
    ANTENNA_MODE(4),
    /**
     * <pre>
     *通道模式，仅单点、多点方式支持
     * </pre>
     *
     * <code>CHANNEL_MODE = 5;</code>
     */
    CHANNEL_MODE(5),
    /**
     * <pre>
     *增益控制模式
     * </pre>
     *
     * <code>GIAN_MODE = 6;</code>
     */
    GIAN_MODE(6),
    /**
     * <pre>
     *修改增益值
     * </pre>
     *
     * <code>ATT_GAIN = 7;</code>
     */
    ATT_GAIN(7),
    /**
     * <pre>
     *自动增益参数，包括保持时间和步进
     * </pre>
     *
     * <code>GAIN_PARAM = 8;</code>
     */
    GAIN_PARAM(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *修改门限值
     * </pre>
     *
     * <code>THRESHOLD_VALUE = 0;</code>
     */
    public static final int THRESHOLD_VALUE_VALUE = 0;
    /**
     * <pre>
     *修改门限模式
     * </pre>
     *
     * <code>THRESHOLD_MODE = 1;</code>
     */
    public static final int THRESHOLD_MODE_VALUE = 1;
    /**
     * <pre>
     *平均时间
     * </pre>
     *
     * <code>AVERAGE_TIME = 2;</code>
     */
    public static final int AVERAGE_TIME_VALUE = 2;
    /**
     * <pre>
     *FFM中心频率，仅单点、多点方式支持
     * </pre>
     *
     * <code>CENTER_FREQ = 3;</code>
     */
    public static final int CENTER_FREQ_VALUE = 3;
    /**
     * <pre>
     *天线控制方式，仅单点、多点方式支持
     * </pre>
     *
     * <code>ANTENNA_MODE = 4;</code>
     */
    public static final int ANTENNA_MODE_VALUE = 4;
    /**
     * <pre>
     *通道模式，仅单点、多点方式支持
     * </pre>
     *
     * <code>CHANNEL_MODE = 5;</code>
     */
    public static final int CHANNEL_MODE_VALUE = 5;
    /**
     * <pre>
     *增益控制模式
     * </pre>
     *
     * <code>GIAN_MODE = 6;</code>
     */
    public static final int GIAN_MODE_VALUE = 6;
    /**
     * <pre>
     *修改增益值
     * </pre>
     *
     * <code>ATT_GAIN = 7;</code>
     */
    public static final int ATT_GAIN_VALUE = 7;
    /**
     * <pre>
     *自动增益参数，包括保持时间和步进
     * </pre>
     *
     * <code>GAIN_PARAM = 8;</code>
     */
    public static final int GAIN_PARAM_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ParamIndex valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ParamIndex forNumber(int value) {
      switch (value) {
        case 0: return THRESHOLD_VALUE;
        case 1: return THRESHOLD_MODE;
        case 2: return AVERAGE_TIME;
        case 3: return CENTER_FREQ;
        case 4: return ANTENNA_MODE;
        case 5: return CHANNEL_MODE;
        case 6: return GIAN_MODE;
        case 7: return ATT_GAIN;
        case 8: return GAIN_PARAM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ParamIndex>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ParamIndex> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ParamIndex>() {
            public ParamIndex findValueByNumber(int number) {
              return ParamIndex.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.getDescriptor().getEnumTypes().get(2);
    }

    private static final ParamIndex[] VALUES = values();

    public static ParamIndex valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ParamIndex(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.scenario.kh.commDirection.ParamIndex)
  }

  public interface CommDirectionAcqSourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return The id.
     */
    zb.dcts.source.Source.SourceId getId();
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     */
    zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder();

    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    int getParamsCount();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    boolean containsParams(
        java.lang.String key);
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getParams();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getParamsMap();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource}
   */
  public static final class CommDirectionAcqSource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
      CommDirectionAcqSourceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommDirectionAcqSource.newBuilder() to construct.
    private CommDirectionAcqSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommDirectionAcqSource() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommDirectionAcqSource();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CommDirectionAcqSource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.source.Source.SourceId.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(zb.dcts.source.Source.SourceId.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                params_ = com.google.protobuf.MapField.newMapField(
                    ParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              params__ = input.readMessage(
                  ParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              params_.getMutableMap().put(
                  params__.getKey(), params__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private zb.dcts.source.Source.SourceId id_;
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public zb.dcts.source.Source.SourceId getId() {
      return id_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
    }
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int PARAMS_FIELD_NUMBER = 6;
    private static final class ParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> params_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetParams() {
      if (params_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamsDefaultEntryHolder.defaultEntry);
      }
      return params_;
    }

    public int getParamsCount() {
      return internalGetParams().getMap().size();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    @java.lang.Override
    public boolean containsParams(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParams() {
      return getParamsMap();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
      return internalGetParams().getMap();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetParams(),
          ParamsDefaultEntryHolder.defaultEntry,
          6);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        params__ = ParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, params__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource other = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (!internalGetParams().equals(
          other.internalGetParams())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (!internalGetParams().getMap().isEmpty()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParams().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        internalGetMutableParams().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource build() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource buildPartial() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource result = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource(this);
        int from_bitField0_ = bitField0_;
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        result.params_ = internalGetParams();
        result.params_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource) {
          return mergeFrom((zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource other) {
        if (other == zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        internalGetMutableParams().mergeFrom(
            other.internalGetParams());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.source.Source.SourceId id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> idBuilder_;
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       * @return The id.
       */
      public zb.dcts.source.Source.SourceId getId() {
        if (idBuilder_ == null) {
          return id_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder setId(zb.dcts.source.Source.SourceId value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder setId(
          zb.dcts.source.Source.SourceId.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder mergeId(zb.dcts.source.Source.SourceId value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              zb.dcts.source.Source.SourceId.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public zb.dcts.source.Source.SourceId.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
        }
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> params_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetParams() {
        if (params_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        return params_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableParams() {
        onChanged();;
        if (params_ == null) {
          params_ = com.google.protobuf.MapField.newMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        if (!params_.isMutable()) {
          params_ = params_.copy();
        }
        return params_;
      }

      public int getParamsCount() {
        return internalGetParams().getMap().size();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      @java.lang.Override
      public boolean containsParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getParamsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getParams() {
        return getParamsMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
        return internalGetParams().getMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearParams() {
        internalGetMutableParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder removeParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableParams() {
        return internalGetMutableParams().getMutableMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      public Builder putParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder putAllParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableParams().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqSource)
    private static final zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource();
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommDirectionAcqSource>
        PARSER = new com.google.protobuf.AbstractParser<CommDirectionAcqSource>() {
      @java.lang.Override
      public CommDirectionAcqSource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommDirectionAcqSource(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CommDirectionAcqSource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommDirectionAcqSource> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqSource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CommDirectionAcqParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
     * @return The enum numeric value on the wire for mode.
     */
    int getModeValue();
    /**
     * <pre>
     *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
     * @return The mode.
     */
    zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode getMode();

    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return Whether the freqSpan field is set.
     */
    boolean hasFreqSpan();
    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return The freqSpan.
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan();
    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder();

    /**
     * <pre>
     *分辨率,单位Hz
     * </pre>
     *
     * <code>double rbw = 4;</code>
     * @return The rbw.
     */
    double getRbw();

    /**
     * <pre>
     *测向带宽（单位：Hz） 
     * </pre>
     *
     * <code>double df_bandwidth = 5;</code>
     * @return The dfBandwidth.
     */
    double getDfBandwidth();

    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
     * @return The enum numeric value on the wire for detectMode.
     */
    int getDetectModeValue();
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
     * @return The detectMode.
     */
    zb.dcts.source.kh.KhContext.DetectMode getDetectMode();

    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
     * @return The enum numeric value on the wire for channelMode.
     */
    int getChannelModeValue();
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
     * @return The channelMode.
     */
    zb.dcts.source.kh.KhContext.ChannelMode getChannelMode();

    /**
     * <pre>
     *衰减增益[0, 50]，按1递增
     * </pre>
     *
     * <code>double attenuation_gain = 8;</code>
     * @return The attenuationGain.
     */
    double getAttenuationGain();

    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大 
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
     * @return The enum numeric value on the wire for antennaMode.
     */
    int getAntennaModeValue();
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大 
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
     * @return The antennaMode.
     */
    zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode();

    /**
     * <pre>
     *增益控制方式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
     * @return The enum numeric value on the wire for gcMode.
     */
    int getGcModeValue();
    /**
     * <pre>
     *增益控制方式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
     * @return The gcMode.
     */
    zb.dcts.source.kh.KhContext.GainControlMode getGcMode();

    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     * @return Whether the gainParam field is set.
     */
    boolean hasGainParam();
    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     * @return The gainParam.
     */
    zb.dcts.source.kh.KhContext.GainControlParam getGainParam();
    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     */
    zb.dcts.source.kh.KhContext.GainControlParamOrBuilder getGainParamOrBuilder();

    /**
     * <pre>
     *门限模式 0-连续模式，1-GATE模式 2-NORMAL
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
     * @return The enum numeric value on the wire for thresholdMode.
     */
    int getThresholdModeValue();
    /**
     * <pre>
     *门限模式 0-连续模式，1-GATE模式 2-NORMAL
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
     * @return The thresholdMode.
     */
    zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode getThresholdMode();

    /**
     * <pre>
     *门限值
     * </pre>
     *
     * <code>int32 threshold_value = 13;</code>
     * @return The thresholdValue.
     */
    int getThresholdValue();

    /**
     * <pre>
     *多通道校准源输出功率-50~0，目前设置为0 
     * </pre>
     *
     * <code>int32 output_pow = 14;</code>
     * @return The outputPow.
     */
    int getOutputPow();

    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     * @return Whether the winParams field is set.
     */
    boolean hasWinParams();
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     * @return The winParams.
     */
    zb.dcts.source.kh.KhContext.WindowParams getWinParams();
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     */
    zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder();

    /**
     * <pre>
     *平均时间ms
     * </pre>
     *
     * <code>int32 average_time = 16;</code>
     * @return The averageTime.
     */
    int getAverageTime();

    /**
     * <pre>
     *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
     * </pre>
     *
     * <code>double rf_limit = 17;</code>
     * @return The rfLimit.
     */
    double getRfLimit();

    /**
     * <pre>
     *SEARCH模式时中心频率的步进值（单位：Hz）
     * </pre>
     *
     * <code>double search_step = 18;</code>
     * @return The searchStep.
     */
    double getSearchStep();

    /**
     * <pre>
     *SEARCH模式时每个频点的驻留时间ms，必须为average_time的整数倍。目前固定为5000ms
     * </pre>
     *
     * <code>int32 residence_time = 19;</code>
     * @return The residenceTime.
     */
    int getResidenceTime();

    /**
     * <pre>
     *设备采样间隔
     * </pre>
     *
     * <code>int32 sample_interval = 20;</code>
     * @return The sampleInterval.
     */
    int getSampleInterval();

    /**
     * <pre>
     *监测结果回传间隔,单位ms，0代表每次扫描均上传
     * </pre>
     *
     * <code>int32 result_interval = 21;</code>
     * @return The resultInterval.
     */
    int getResultInterval();

    /**
     * <pre>
     *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
     * </pre>
     *
     * <code>int32 expected_points = 22;</code>
     * @return The expectedPoints.
     */
    int getExpectedPoints();

    /**
     * <pre>
     *天线选择[0,1]，暂时不用
     * </pre>
     *
     * <code>int32 antenna = 23;</code>
     * @return The antenna.
     */
    int getAntenna();

    /**
     * <pre>
     *测向采集次数，测向标校中使用。
     * </pre>
     *
     * <code>int32 df_times = 24;</code>
     * @return The dfTimes.
     */
    int getDfTimes();
  }
  /**
   * <pre>
   *采集参数
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam}
   */
  public static final class CommDirectionAcqParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
      CommDirectionAcqParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommDirectionAcqParam.newBuilder() to construct.
    private CommDirectionAcqParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommDirectionAcqParam() {
      mode_ = 0;
      detectMode_ = 0;
      channelMode_ = 0;
      antennaMode_ = 0;
      gcMode_ = 0;
      thresholdMode_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommDirectionAcqParam();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CommDirectionAcqParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              mode_ = rawValue;
              break;
            }
            case 18: {
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder subBuilder = null;
              if (freqSpan_ != null) {
                subBuilder = freqSpan_.toBuilder();
              }
              freqSpan_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(freqSpan_);
                freqSpan_ = subBuilder.buildPartial();
              }

              break;
            }
            case 33: {

              rbw_ = input.readDouble();
              break;
            }
            case 41: {

              dfBandwidth_ = input.readDouble();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              detectMode_ = rawValue;
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              channelMode_ = rawValue;
              break;
            }
            case 65: {

              attenuationGain_ = input.readDouble();
              break;
            }
            case 72: {
              int rawValue = input.readEnum();

              antennaMode_ = rawValue;
              break;
            }
            case 80: {
              int rawValue = input.readEnum();

              gcMode_ = rawValue;
              break;
            }
            case 90: {
              zb.dcts.source.kh.KhContext.GainControlParam.Builder subBuilder = null;
              if (gainParam_ != null) {
                subBuilder = gainParam_.toBuilder();
              }
              gainParam_ = input.readMessage(zb.dcts.source.kh.KhContext.GainControlParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gainParam_);
                gainParam_ = subBuilder.buildPartial();
              }

              break;
            }
            case 96: {
              int rawValue = input.readEnum();

              thresholdMode_ = rawValue;
              break;
            }
            case 104: {

              thresholdValue_ = input.readInt32();
              break;
            }
            case 112: {

              outputPow_ = input.readInt32();
              break;
            }
            case 122: {
              zb.dcts.source.kh.KhContext.WindowParams.Builder subBuilder = null;
              if (winParams_ != null) {
                subBuilder = winParams_.toBuilder();
              }
              winParams_ = input.readMessage(zb.dcts.source.kh.KhContext.WindowParams.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(winParams_);
                winParams_ = subBuilder.buildPartial();
              }

              break;
            }
            case 128: {

              averageTime_ = input.readInt32();
              break;
            }
            case 137: {

              rfLimit_ = input.readDouble();
              break;
            }
            case 145: {

              searchStep_ = input.readDouble();
              break;
            }
            case 152: {

              residenceTime_ = input.readInt32();
              break;
            }
            case 160: {

              sampleInterval_ = input.readInt32();
              break;
            }
            case 168: {

              resultInterval_ = input.readInt32();
              break;
            }
            case 176: {

              expectedPoints_ = input.readInt32();
              break;
            }
            case 184: {

              antenna_ = input.readInt32();
              break;
            }
            case 192: {

              dfTimes_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder.class);
    }

    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_;
    /**
     * <pre>
     *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
     * @return The mode.
     */
    @java.lang.Override public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode getMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.valueOf(mode_);
      return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.UNRECOGNIZED : result;
    }

    public static final int FREQ_SPAN_FIELD_NUMBER = 2;
    private zb.dcts.scenario.spectrum.Spectrum.FrequencySpan freqSpan_;
    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return Whether the freqSpan field is set.
     */
    @java.lang.Override
    public boolean hasFreqSpan() {
      return freqSpan_ != null;
    }
    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return The freqSpan.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan() {
      return freqSpan_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance() : freqSpan_;
    }
    /**
     * <pre>
     *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder() {
      return getFreqSpan();
    }

    public static final int RBW_FIELD_NUMBER = 4;
    private double rbw_;
    /**
     * <pre>
     *分辨率,单位Hz
     * </pre>
     *
     * <code>double rbw = 4;</code>
     * @return The rbw.
     */
    @java.lang.Override
    public double getRbw() {
      return rbw_;
    }

    public static final int DF_BANDWIDTH_FIELD_NUMBER = 5;
    private double dfBandwidth_;
    /**
     * <pre>
     *测向带宽（单位：Hz） 
     * </pre>
     *
     * <code>double df_bandwidth = 5;</code>
     * @return The dfBandwidth.
     */
    @java.lang.Override
    public double getDfBandwidth() {
      return dfBandwidth_;
    }

    public static final int DETECT_MODE_FIELD_NUMBER = 6;
    private int detectMode_;
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
     * @return The enum numeric value on the wire for detectMode.
     */
    @java.lang.Override public int getDetectModeValue() {
      return detectMode_;
    }
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
     * @return The detectMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.DetectMode getDetectMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.DetectMode result = zb.dcts.source.kh.KhContext.DetectMode.valueOf(detectMode_);
      return result == null ? zb.dcts.source.kh.KhContext.DetectMode.UNRECOGNIZED : result;
    }

    public static final int CHANNEL_MODE_FIELD_NUMBER = 7;
    private int channelMode_;
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
     * @return The enum numeric value on the wire for channelMode.
     */
    @java.lang.Override public int getChannelModeValue() {
      return channelMode_;
    }
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
     * @return The channelMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.ChannelMode getChannelMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.ChannelMode result = zb.dcts.source.kh.KhContext.ChannelMode.valueOf(channelMode_);
      return result == null ? zb.dcts.source.kh.KhContext.ChannelMode.UNRECOGNIZED : result;
    }

    public static final int ATTENUATION_GAIN_FIELD_NUMBER = 8;
    private double attenuationGain_;
    /**
     * <pre>
     *衰减增益[0, 50]，按1递增
     * </pre>
     *
     * <code>double attenuation_gain = 8;</code>
     * @return The attenuationGain.
     */
    @java.lang.Override
    public double getAttenuationGain() {
      return attenuationGain_;
    }

    public static final int ANTENNA_MODE_FIELD_NUMBER = 9;
    private int antennaMode_;
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大 
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
     * @return The enum numeric value on the wire for antennaMode.
     */
    @java.lang.Override public int getAntennaModeValue() {
      return antennaMode_;
    }
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大 
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
     * @return The antennaMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.AntennaControlMode result = zb.dcts.source.kh.KhContext.AntennaControlMode.valueOf(antennaMode_);
      return result == null ? zb.dcts.source.kh.KhContext.AntennaControlMode.UNRECOGNIZED : result;
    }

    public static final int GC_MODE_FIELD_NUMBER = 10;
    private int gcMode_;
    /**
     * <pre>
     *增益控制方式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
     * @return The enum numeric value on the wire for gcMode.
     */
    @java.lang.Override public int getGcModeValue() {
      return gcMode_;
    }
    /**
     * <pre>
     *增益控制方式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
     * @return The gcMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.GainControlMode getGcMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.GainControlMode result = zb.dcts.source.kh.KhContext.GainControlMode.valueOf(gcMode_);
      return result == null ? zb.dcts.source.kh.KhContext.GainControlMode.UNRECOGNIZED : result;
    }

    public static final int GAIN_PARAM_FIELD_NUMBER = 11;
    private zb.dcts.source.kh.KhContext.GainControlParam gainParam_;
    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     * @return Whether the gainParam field is set.
     */
    @java.lang.Override
    public boolean hasGainParam() {
      return gainParam_ != null;
    }
    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     * @return The gainParam.
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.GainControlParam getGainParam() {
      return gainParam_ == null ? zb.dcts.source.kh.KhContext.GainControlParam.getDefaultInstance() : gainParam_;
    }
    /**
     * <pre>
     *增益控制方式为自动时的参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.GainControlParamOrBuilder getGainParamOrBuilder() {
      return getGainParam();
    }

    public static final int THRESHOLD_MODE_FIELD_NUMBER = 12;
    private int thresholdMode_;
    /**
     * <pre>
     *门限模式 0-连续模式，1-GATE模式 2-NORMAL
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
     * @return The enum numeric value on the wire for thresholdMode.
     */
    @java.lang.Override public int getThresholdModeValue() {
      return thresholdMode_;
    }
    /**
     * <pre>
     *门限模式 0-连续模式，1-GATE模式 2-NORMAL
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
     * @return The thresholdMode.
     */
    @java.lang.Override public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode getThresholdMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.valueOf(thresholdMode_);
      return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.UNRECOGNIZED : result;
    }

    public static final int THRESHOLD_VALUE_FIELD_NUMBER = 13;
    private int thresholdValue_;
    /**
     * <pre>
     *门限值
     * </pre>
     *
     * <code>int32 threshold_value = 13;</code>
     * @return The thresholdValue.
     */
    @java.lang.Override
    public int getThresholdValue() {
      return thresholdValue_;
    }

    public static final int OUTPUT_POW_FIELD_NUMBER = 14;
    private int outputPow_;
    /**
     * <pre>
     *多通道校准源输出功率-50~0，目前设置为0 
     * </pre>
     *
     * <code>int32 output_pow = 14;</code>
     * @return The outputPow.
     */
    @java.lang.Override
    public int getOutputPow() {
      return outputPow_;
    }

    public static final int WIN_PARAMS_FIELD_NUMBER = 15;
    private zb.dcts.source.kh.KhContext.WindowParams winParams_;
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     * @return Whether the winParams field is set.
     */
    @java.lang.Override
    public boolean hasWinParams() {
      return winParams_ != null;
    }
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     * @return The winParams.
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.WindowParams getWinParams() {
      return winParams_ == null ? zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
    }
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder() {
      return getWinParams();
    }

    public static final int AVERAGE_TIME_FIELD_NUMBER = 16;
    private int averageTime_;
    /**
     * <pre>
     *平均时间ms
     * </pre>
     *
     * <code>int32 average_time = 16;</code>
     * @return The averageTime.
     */
    @java.lang.Override
    public int getAverageTime() {
      return averageTime_;
    }

    public static final int RF_LIMIT_FIELD_NUMBER = 17;
    private double rfLimit_;
    /**
     * <pre>
     *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
     * </pre>
     *
     * <code>double rf_limit = 17;</code>
     * @return The rfLimit.
     */
    @java.lang.Override
    public double getRfLimit() {
      return rfLimit_;
    }

    public static final int SEARCH_STEP_FIELD_NUMBER = 18;
    private double searchStep_;
    /**
     * <pre>
     *SEARCH模式时中心频率的步进值（单位：Hz）
     * </pre>
     *
     * <code>double search_step = 18;</code>
     * @return The searchStep.
     */
    @java.lang.Override
    public double getSearchStep() {
      return searchStep_;
    }

    public static final int RESIDENCE_TIME_FIELD_NUMBER = 19;
    private int residenceTime_;
    /**
     * <pre>
     *SEARCH模式时每个频点的驻留时间ms，必须为average_time的整数倍。目前固定为5000ms
     * </pre>
     *
     * <code>int32 residence_time = 19;</code>
     * @return The residenceTime.
     */
    @java.lang.Override
    public int getResidenceTime() {
      return residenceTime_;
    }

    public static final int SAMPLE_INTERVAL_FIELD_NUMBER = 20;
    private int sampleInterval_;
    /**
     * <pre>
     *设备采样间隔
     * </pre>
     *
     * <code>int32 sample_interval = 20;</code>
     * @return The sampleInterval.
     */
    @java.lang.Override
    public int getSampleInterval() {
      return sampleInterval_;
    }

    public static final int RESULT_INTERVAL_FIELD_NUMBER = 21;
    private int resultInterval_;
    /**
     * <pre>
     *监测结果回传间隔,单位ms，0代表每次扫描均上传
     * </pre>
     *
     * <code>int32 result_interval = 21;</code>
     * @return The resultInterval.
     */
    @java.lang.Override
    public int getResultInterval() {
      return resultInterval_;
    }

    public static final int EXPECTED_POINTS_FIELD_NUMBER = 22;
    private int expectedPoints_;
    /**
     * <pre>
     *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
     * </pre>
     *
     * <code>int32 expected_points = 22;</code>
     * @return The expectedPoints.
     */
    @java.lang.Override
    public int getExpectedPoints() {
      return expectedPoints_;
    }

    public static final int ANTENNA_FIELD_NUMBER = 23;
    private int antenna_;
    /**
     * <pre>
     *天线选择[0,1]，暂时不用
     * </pre>
     *
     * <code>int32 antenna = 23;</code>
     * @return The antenna.
     */
    @java.lang.Override
    public int getAntenna() {
      return antenna_;
    }

    public static final int DF_TIMES_FIELD_NUMBER = 24;
    private int dfTimes_;
    /**
     * <pre>
     *测向采集次数，测向标校中使用。
     * </pre>
     *
     * <code>int32 df_times = 24;</code>
     * @return The dfTimes.
     */
    @java.lang.Override
    public int getDfTimes() {
      return dfTimes_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mode_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.SINGLE.getNumber()) {
        output.writeEnum(1, mode_);
      }
      if (freqSpan_ != null) {
        output.writeMessage(2, getFreqSpan());
      }
      if (rbw_ != 0D) {
        output.writeDouble(4, rbw_);
      }
      if (dfBandwidth_ != 0D) {
        output.writeDouble(5, dfBandwidth_);
      }
      if (detectMode_ != zb.dcts.source.kh.KhContext.DetectMode.MAXHOLD.getNumber()) {
        output.writeEnum(6, detectMode_);
      }
      if (channelMode_ != zb.dcts.source.kh.KhContext.ChannelMode.NORMAL.getNumber()) {
        output.writeEnum(7, channelMode_);
      }
      if (attenuationGain_ != 0D) {
        output.writeDouble(8, attenuationGain_);
      }
      if (antennaMode_ != zb.dcts.source.kh.KhContext.AntennaControlMode.ANT_INVALID.getNumber()) {
        output.writeEnum(9, antennaMode_);
      }
      if (gcMode_ != zb.dcts.source.kh.KhContext.GainControlMode.AGC.getNumber()) {
        output.writeEnum(10, gcMode_);
      }
      if (gainParam_ != null) {
        output.writeMessage(11, getGainParam());
      }
      if (thresholdMode_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.AUTO.getNumber()) {
        output.writeEnum(12, thresholdMode_);
      }
      if (thresholdValue_ != 0) {
        output.writeInt32(13, thresholdValue_);
      }
      if (outputPow_ != 0) {
        output.writeInt32(14, outputPow_);
      }
      if (winParams_ != null) {
        output.writeMessage(15, getWinParams());
      }
      if (averageTime_ != 0) {
        output.writeInt32(16, averageTime_);
      }
      if (rfLimit_ != 0D) {
        output.writeDouble(17, rfLimit_);
      }
      if (searchStep_ != 0D) {
        output.writeDouble(18, searchStep_);
      }
      if (residenceTime_ != 0) {
        output.writeInt32(19, residenceTime_);
      }
      if (sampleInterval_ != 0) {
        output.writeInt32(20, sampleInterval_);
      }
      if (resultInterval_ != 0) {
        output.writeInt32(21, resultInterval_);
      }
      if (expectedPoints_ != 0) {
        output.writeInt32(22, expectedPoints_);
      }
      if (antenna_ != 0) {
        output.writeInt32(23, antenna_);
      }
      if (dfTimes_ != 0) {
        output.writeInt32(24, dfTimes_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mode_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.SINGLE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_);
      }
      if (freqSpan_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFreqSpan());
      }
      if (rbw_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, rbw_);
      }
      if (dfBandwidth_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, dfBandwidth_);
      }
      if (detectMode_ != zb.dcts.source.kh.KhContext.DetectMode.MAXHOLD.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, detectMode_);
      }
      if (channelMode_ != zb.dcts.source.kh.KhContext.ChannelMode.NORMAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, channelMode_);
      }
      if (attenuationGain_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, attenuationGain_);
      }
      if (antennaMode_ != zb.dcts.source.kh.KhContext.AntennaControlMode.ANT_INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, antennaMode_);
      }
      if (gcMode_ != zb.dcts.source.kh.KhContext.GainControlMode.AGC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, gcMode_);
      }
      if (gainParam_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getGainParam());
      }
      if (thresholdMode_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.AUTO.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, thresholdMode_);
      }
      if (thresholdValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, thresholdValue_);
      }
      if (outputPow_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, outputPow_);
      }
      if (winParams_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, getWinParams());
      }
      if (averageTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, averageTime_);
      }
      if (rfLimit_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(17, rfLimit_);
      }
      if (searchStep_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(18, searchStep_);
      }
      if (residenceTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, residenceTime_);
      }
      if (sampleInterval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, sampleInterval_);
      }
      if (resultInterval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, resultInterval_);
      }
      if (expectedPoints_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, expectedPoints_);
      }
      if (antenna_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, antenna_);
      }
      if (dfTimes_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, dfTimes_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam other = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam) obj;

      if (mode_ != other.mode_) return false;
      if (hasFreqSpan() != other.hasFreqSpan()) return false;
      if (hasFreqSpan()) {
        if (!getFreqSpan()
            .equals(other.getFreqSpan())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getRbw())
          != java.lang.Double.doubleToLongBits(
              other.getRbw())) return false;
      if (java.lang.Double.doubleToLongBits(getDfBandwidth())
          != java.lang.Double.doubleToLongBits(
              other.getDfBandwidth())) return false;
      if (detectMode_ != other.detectMode_) return false;
      if (channelMode_ != other.channelMode_) return false;
      if (java.lang.Double.doubleToLongBits(getAttenuationGain())
          != java.lang.Double.doubleToLongBits(
              other.getAttenuationGain())) return false;
      if (antennaMode_ != other.antennaMode_) return false;
      if (gcMode_ != other.gcMode_) return false;
      if (hasGainParam() != other.hasGainParam()) return false;
      if (hasGainParam()) {
        if (!getGainParam()
            .equals(other.getGainParam())) return false;
      }
      if (thresholdMode_ != other.thresholdMode_) return false;
      if (getThresholdValue()
          != other.getThresholdValue()) return false;
      if (getOutputPow()
          != other.getOutputPow()) return false;
      if (hasWinParams() != other.hasWinParams()) return false;
      if (hasWinParams()) {
        if (!getWinParams()
            .equals(other.getWinParams())) return false;
      }
      if (getAverageTime()
          != other.getAverageTime()) return false;
      if (java.lang.Double.doubleToLongBits(getRfLimit())
          != java.lang.Double.doubleToLongBits(
              other.getRfLimit())) return false;
      if (java.lang.Double.doubleToLongBits(getSearchStep())
          != java.lang.Double.doubleToLongBits(
              other.getSearchStep())) return false;
      if (getResidenceTime()
          != other.getResidenceTime()) return false;
      if (getSampleInterval()
          != other.getSampleInterval()) return false;
      if (getResultInterval()
          != other.getResultInterval()) return false;
      if (getExpectedPoints()
          != other.getExpectedPoints()) return false;
      if (getAntenna()
          != other.getAntenna()) return false;
      if (getDfTimes()
          != other.getDfTimes()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + mode_;
      if (hasFreqSpan()) {
        hash = (37 * hash) + FREQ_SPAN_FIELD_NUMBER;
        hash = (53 * hash) + getFreqSpan().hashCode();
      }
      hash = (37 * hash) + RBW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRbw()));
      hash = (37 * hash) + DF_BANDWIDTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDfBandwidth()));
      hash = (37 * hash) + DETECT_MODE_FIELD_NUMBER;
      hash = (53 * hash) + detectMode_;
      hash = (37 * hash) + CHANNEL_MODE_FIELD_NUMBER;
      hash = (53 * hash) + channelMode_;
      hash = (37 * hash) + ATTENUATION_GAIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAttenuationGain()));
      hash = (37 * hash) + ANTENNA_MODE_FIELD_NUMBER;
      hash = (53 * hash) + antennaMode_;
      hash = (37 * hash) + GC_MODE_FIELD_NUMBER;
      hash = (53 * hash) + gcMode_;
      if (hasGainParam()) {
        hash = (37 * hash) + GAIN_PARAM_FIELD_NUMBER;
        hash = (53 * hash) + getGainParam().hashCode();
      }
      hash = (37 * hash) + THRESHOLD_MODE_FIELD_NUMBER;
      hash = (53 * hash) + thresholdMode_;
      hash = (37 * hash) + THRESHOLD_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getThresholdValue();
      hash = (37 * hash) + OUTPUT_POW_FIELD_NUMBER;
      hash = (53 * hash) + getOutputPow();
      if (hasWinParams()) {
        hash = (37 * hash) + WIN_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getWinParams().hashCode();
      }
      hash = (37 * hash) + AVERAGE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getAverageTime();
      hash = (37 * hash) + RF_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRfLimit()));
      hash = (37 * hash) + SEARCH_STEP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSearchStep()));
      hash = (37 * hash) + RESIDENCE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getResidenceTime();
      hash = (37 * hash) + SAMPLE_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getSampleInterval();
      hash = (37 * hash) + RESULT_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getResultInterval();
      hash = (37 * hash) + EXPECTED_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getExpectedPoints();
      hash = (37 * hash) + ANTENNA_FIELD_NUMBER;
      hash = (53 * hash) + getAntenna();
      hash = (37 * hash) + DF_TIMES_FIELD_NUMBER;
      hash = (53 * hash) + getDfTimes();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *采集参数
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        mode_ = 0;

        if (freqSpanBuilder_ == null) {
          freqSpan_ = null;
        } else {
          freqSpan_ = null;
          freqSpanBuilder_ = null;
        }
        rbw_ = 0D;

        dfBandwidth_ = 0D;

        detectMode_ = 0;

        channelMode_ = 0;

        attenuationGain_ = 0D;

        antennaMode_ = 0;

        gcMode_ = 0;

        if (gainParamBuilder_ == null) {
          gainParam_ = null;
        } else {
          gainParam_ = null;
          gainParamBuilder_ = null;
        }
        thresholdMode_ = 0;

        thresholdValue_ = 0;

        outputPow_ = 0;

        if (winParamsBuilder_ == null) {
          winParams_ = null;
        } else {
          winParams_ = null;
          winParamsBuilder_ = null;
        }
        averageTime_ = 0;

        rfLimit_ = 0D;

        searchStep_ = 0D;

        residenceTime_ = 0;

        sampleInterval_ = 0;

        resultInterval_ = 0;

        expectedPoints_ = 0;

        antenna_ = 0;

        dfTimes_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam build() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam buildPartial() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam result = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam(this);
        result.mode_ = mode_;
        if (freqSpanBuilder_ == null) {
          result.freqSpan_ = freqSpan_;
        } else {
          result.freqSpan_ = freqSpanBuilder_.build();
        }
        result.rbw_ = rbw_;
        result.dfBandwidth_ = dfBandwidth_;
        result.detectMode_ = detectMode_;
        result.channelMode_ = channelMode_;
        result.attenuationGain_ = attenuationGain_;
        result.antennaMode_ = antennaMode_;
        result.gcMode_ = gcMode_;
        if (gainParamBuilder_ == null) {
          result.gainParam_ = gainParam_;
        } else {
          result.gainParam_ = gainParamBuilder_.build();
        }
        result.thresholdMode_ = thresholdMode_;
        result.thresholdValue_ = thresholdValue_;
        result.outputPow_ = outputPow_;
        if (winParamsBuilder_ == null) {
          result.winParams_ = winParams_;
        } else {
          result.winParams_ = winParamsBuilder_.build();
        }
        result.averageTime_ = averageTime_;
        result.rfLimit_ = rfLimit_;
        result.searchStep_ = searchStep_;
        result.residenceTime_ = residenceTime_;
        result.sampleInterval_ = sampleInterval_;
        result.resultInterval_ = resultInterval_;
        result.expectedPoints_ = expectedPoints_;
        result.antenna_ = antenna_;
        result.dfTimes_ = dfTimes_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam) {
          return mergeFrom((zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam other) {
        if (other == zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.getDefaultInstance()) return this;
        if (other.mode_ != 0) {
          setModeValue(other.getModeValue());
        }
        if (other.hasFreqSpan()) {
          mergeFreqSpan(other.getFreqSpan());
        }
        if (other.getRbw() != 0D) {
          setRbw(other.getRbw());
        }
        if (other.getDfBandwidth() != 0D) {
          setDfBandwidth(other.getDfBandwidth());
        }
        if (other.detectMode_ != 0) {
          setDetectModeValue(other.getDetectModeValue());
        }
        if (other.channelMode_ != 0) {
          setChannelModeValue(other.getChannelModeValue());
        }
        if (other.getAttenuationGain() != 0D) {
          setAttenuationGain(other.getAttenuationGain());
        }
        if (other.antennaMode_ != 0) {
          setAntennaModeValue(other.getAntennaModeValue());
        }
        if (other.gcMode_ != 0) {
          setGcModeValue(other.getGcModeValue());
        }
        if (other.hasGainParam()) {
          mergeGainParam(other.getGainParam());
        }
        if (other.thresholdMode_ != 0) {
          setThresholdModeValue(other.getThresholdModeValue());
        }
        if (other.getThresholdValue() != 0) {
          setThresholdValue(other.getThresholdValue());
        }
        if (other.getOutputPow() != 0) {
          setOutputPow(other.getOutputPow());
        }
        if (other.hasWinParams()) {
          mergeWinParams(other.getWinParams());
        }
        if (other.getAverageTime() != 0) {
          setAverageTime(other.getAverageTime());
        }
        if (other.getRfLimit() != 0D) {
          setRfLimit(other.getRfLimit());
        }
        if (other.getSearchStep() != 0D) {
          setSearchStep(other.getSearchStep());
        }
        if (other.getResidenceTime() != 0) {
          setResidenceTime(other.getResidenceTime());
        }
        if (other.getSampleInterval() != 0) {
          setSampleInterval(other.getSampleInterval());
        }
        if (other.getResultInterval() != 0) {
          setResultInterval(other.getResultInterval());
        }
        if (other.getExpectedPoints() != 0) {
          setExpectedPoints(other.getExpectedPoints());
        }
        if (other.getAntenna() != 0) {
          setAntenna(other.getAntenna());
        }
        if (other.getDfTimes() != 0) {
          setDfTimes(other.getDfTimes());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int mode_ = 0;
      /**
       * <pre>
       *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
       * @return The enum numeric value on the wire for mode.
       */
      @java.lang.Override public int getModeValue() {
        return mode_;
      }
      /**
       * <pre>
       *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
       * @param value The enum numeric value on the wire for mode to set.
       * @return This builder for chaining.
       */
      public Builder setModeValue(int value) {
        
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
       * @return The mode.
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode getMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.valueOf(mode_);
        return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *测向模式。SINGLE、SCAN、SEARCH、MULTIPLE(离散)
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DirectionMode mode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        
        mode_ = 0;
        onChanged();
        return this;
      }

      private zb.dcts.scenario.spectrum.Spectrum.FrequencySpan freqSpan_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder> freqSpanBuilder_;
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       * @return Whether the freqSpan field is set.
       */
      public boolean hasFreqSpan() {
        return freqSpanBuilder_ != null || freqSpan_ != null;
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       * @return The freqSpan.
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan() {
        if (freqSpanBuilder_ == null) {
          return freqSpan_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance() : freqSpan_;
        } else {
          return freqSpanBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder setFreqSpan(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan value) {
        if (freqSpanBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          freqSpan_ = value;
          onChanged();
        } else {
          freqSpanBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder setFreqSpan(
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder builderForValue) {
        if (freqSpanBuilder_ == null) {
          freqSpan_ = builderForValue.build();
          onChanged();
        } else {
          freqSpanBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder mergeFreqSpan(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan value) {
        if (freqSpanBuilder_ == null) {
          if (freqSpan_ != null) {
            freqSpan_ =
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.newBuilder(freqSpan_).mergeFrom(value).buildPartial();
          } else {
            freqSpan_ = value;
          }
          onChanged();
        } else {
          freqSpanBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder clearFreqSpan() {
        if (freqSpanBuilder_ == null) {
          freqSpan_ = null;
          onChanged();
        } else {
          freqSpan_ = null;
          freqSpanBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder getFreqSpanBuilder() {
        
        onChanged();
        return getFreqSpanFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder() {
        if (freqSpanBuilder_ != null) {
          return freqSpanBuilder_.getMessageOrBuilder();
        } else {
          return freqSpan_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance() : freqSpan_;
        }
      }
      /**
       * <pre>
       *频率范围,单位Hz。对SCAN、SEARCH为频率范围。对SINGLE、MULTIPLE由中心频率和带宽计算
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder> 
          getFreqSpanFieldBuilder() {
        if (freqSpanBuilder_ == null) {
          freqSpanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder>(
                  getFreqSpan(),
                  getParentForChildren(),
                  isClean());
          freqSpan_ = null;
        }
        return freqSpanBuilder_;
      }

      private double rbw_ ;
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @return The rbw.
       */
      @java.lang.Override
      public double getRbw() {
        return rbw_;
      }
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @param value The rbw to set.
       * @return This builder for chaining.
       */
      public Builder setRbw(double value) {
        
        rbw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRbw() {
        
        rbw_ = 0D;
        onChanged();
        return this;
      }

      private double dfBandwidth_ ;
      /**
       * <pre>
       *测向带宽（单位：Hz） 
       * </pre>
       *
       * <code>double df_bandwidth = 5;</code>
       * @return The dfBandwidth.
       */
      @java.lang.Override
      public double getDfBandwidth() {
        return dfBandwidth_;
      }
      /**
       * <pre>
       *测向带宽（单位：Hz） 
       * </pre>
       *
       * <code>double df_bandwidth = 5;</code>
       * @param value The dfBandwidth to set.
       * @return This builder for chaining.
       */
      public Builder setDfBandwidth(double value) {
        
        dfBandwidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *测向带宽（单位：Hz） 
       * </pre>
       *
       * <code>double df_bandwidth = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDfBandwidth() {
        
        dfBandwidth_ = 0D;
        onChanged();
        return this;
      }

      private int detectMode_ = 0;
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
       * @return The enum numeric value on the wire for detectMode.
       */
      @java.lang.Override public int getDetectModeValue() {
        return detectMode_;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
       * @param value The enum numeric value on the wire for detectMode to set.
       * @return This builder for chaining.
       */
      public Builder setDetectModeValue(int value) {
        
        detectMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
       * @return The detectMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.DetectMode getDetectMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.DetectMode result = zb.dcts.source.kh.KhContext.DetectMode.valueOf(detectMode_);
        return result == null ? zb.dcts.source.kh.KhContext.DetectMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
       * @param value The detectMode to set.
       * @return This builder for chaining.
       */
      public Builder setDetectMode(zb.dcts.source.kh.KhContext.DetectMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        detectMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDetectMode() {
        
        detectMode_ = 0;
        onChanged();
        return this;
      }

      private int channelMode_ = 0;
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
       * @return The enum numeric value on the wire for channelMode.
       */
      @java.lang.Override public int getChannelModeValue() {
        return channelMode_;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
       * @param value The enum numeric value on the wire for channelMode to set.
       * @return This builder for chaining.
       */
      public Builder setChannelModeValue(int value) {
        
        channelMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
       * @return The channelMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.ChannelMode getChannelMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.ChannelMode result = zb.dcts.source.kh.KhContext.ChannelMode.valueOf(channelMode_);
        return result == null ? zb.dcts.source.kh.KhContext.ChannelMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
       * @param value The channelMode to set.
       * @return This builder for chaining.
       */
      public Builder setChannelMode(zb.dcts.source.kh.KhContext.ChannelMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        channelMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelMode() {
        
        channelMode_ = 0;
        onChanged();
        return this;
      }

      private double attenuationGain_ ;
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 8;</code>
       * @return The attenuationGain.
       */
      @java.lang.Override
      public double getAttenuationGain() {
        return attenuationGain_;
      }
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 8;</code>
       * @param value The attenuationGain to set.
       * @return This builder for chaining.
       */
      public Builder setAttenuationGain(double value) {
        
        attenuationGain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAttenuationGain() {
        
        attenuationGain_ = 0D;
        onChanged();
        return this;
      }

      private int antennaMode_ = 0;
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大 
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
       * @return The enum numeric value on the wire for antennaMode.
       */
      @java.lang.Override public int getAntennaModeValue() {
        return antennaMode_;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大 
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
       * @param value The enum numeric value on the wire for antennaMode to set.
       * @return This builder for chaining.
       */
      public Builder setAntennaModeValue(int value) {
        
        antennaMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大 
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
       * @return The antennaMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.AntennaControlMode result = zb.dcts.source.kh.KhContext.AntennaControlMode.valueOf(antennaMode_);
        return result == null ? zb.dcts.source.kh.KhContext.AntennaControlMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大 
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
       * @param value The antennaMode to set.
       * @return This builder for chaining.
       */
      public Builder setAntennaMode(zb.dcts.source.kh.KhContext.AntennaControlMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        antennaMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大 
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearAntennaMode() {
        
        antennaMode_ = 0;
        onChanged();
        return this;
      }

      private int gcMode_ = 0;
      /**
       * <pre>
       *增益控制方式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
       * @return The enum numeric value on the wire for gcMode.
       */
      @java.lang.Override public int getGcModeValue() {
        return gcMode_;
      }
      /**
       * <pre>
       *增益控制方式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
       * @param value The enum numeric value on the wire for gcMode to set.
       * @return This builder for chaining.
       */
      public Builder setGcModeValue(int value) {
        
        gcMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *增益控制方式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
       * @return The gcMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.GainControlMode getGcMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.GainControlMode result = zb.dcts.source.kh.KhContext.GainControlMode.valueOf(gcMode_);
        return result == null ? zb.dcts.source.kh.KhContext.GainControlMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *增益控制方式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
       * @param value The gcMode to set.
       * @return This builder for chaining.
       */
      public Builder setGcMode(zb.dcts.source.kh.KhContext.GainControlMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        gcMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *增益控制方式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlMode gc_mode = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearGcMode() {
        
        gcMode_ = 0;
        onChanged();
        return this;
      }

      private zb.dcts.source.kh.KhContext.GainControlParam gainParam_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.GainControlParam, zb.dcts.source.kh.KhContext.GainControlParam.Builder, zb.dcts.source.kh.KhContext.GainControlParamOrBuilder> gainParamBuilder_;
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       * @return Whether the gainParam field is set.
       */
      public boolean hasGainParam() {
        return gainParamBuilder_ != null || gainParam_ != null;
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       * @return The gainParam.
       */
      public zb.dcts.source.kh.KhContext.GainControlParam getGainParam() {
        if (gainParamBuilder_ == null) {
          return gainParam_ == null ? zb.dcts.source.kh.KhContext.GainControlParam.getDefaultInstance() : gainParam_;
        } else {
          return gainParamBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public Builder setGainParam(zb.dcts.source.kh.KhContext.GainControlParam value) {
        if (gainParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gainParam_ = value;
          onChanged();
        } else {
          gainParamBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public Builder setGainParam(
          zb.dcts.source.kh.KhContext.GainControlParam.Builder builderForValue) {
        if (gainParamBuilder_ == null) {
          gainParam_ = builderForValue.build();
          onChanged();
        } else {
          gainParamBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public Builder mergeGainParam(zb.dcts.source.kh.KhContext.GainControlParam value) {
        if (gainParamBuilder_ == null) {
          if (gainParam_ != null) {
            gainParam_ =
              zb.dcts.source.kh.KhContext.GainControlParam.newBuilder(gainParam_).mergeFrom(value).buildPartial();
          } else {
            gainParam_ = value;
          }
          onChanged();
        } else {
          gainParamBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public Builder clearGainParam() {
        if (gainParamBuilder_ == null) {
          gainParam_ = null;
          onChanged();
        } else {
          gainParam_ = null;
          gainParamBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public zb.dcts.source.kh.KhContext.GainControlParam.Builder getGainParamBuilder() {
        
        onChanged();
        return getGainParamFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      public zb.dcts.source.kh.KhContext.GainControlParamOrBuilder getGainParamOrBuilder() {
        if (gainParamBuilder_ != null) {
          return gainParamBuilder_.getMessageOrBuilder();
        } else {
          return gainParam_ == null ?
              zb.dcts.source.kh.KhContext.GainControlParam.getDefaultInstance() : gainParam_;
        }
      }
      /**
       * <pre>
       *增益控制方式为自动时的参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.GainControlParam gain_param = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.GainControlParam, zb.dcts.source.kh.KhContext.GainControlParam.Builder, zb.dcts.source.kh.KhContext.GainControlParamOrBuilder> 
          getGainParamFieldBuilder() {
        if (gainParamBuilder_ == null) {
          gainParamBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.kh.KhContext.GainControlParam, zb.dcts.source.kh.KhContext.GainControlParam.Builder, zb.dcts.source.kh.KhContext.GainControlParamOrBuilder>(
                  getGainParam(),
                  getParentForChildren(),
                  isClean());
          gainParam_ = null;
        }
        return gainParamBuilder_;
      }

      private int thresholdMode_ = 0;
      /**
       * <pre>
       *门限模式 0-连续模式，1-GATE模式 2-NORMAL
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
       * @return The enum numeric value on the wire for thresholdMode.
       */
      @java.lang.Override public int getThresholdModeValue() {
        return thresholdMode_;
      }
      /**
       * <pre>
       *门限模式 0-连续模式，1-GATE模式 2-NORMAL
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
       * @param value The enum numeric value on the wire for thresholdMode to set.
       * @return This builder for chaining.
       */
      public Builder setThresholdModeValue(int value) {
        
        thresholdMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *门限模式 0-连续模式，1-GATE模式 2-NORMAL
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
       * @return The thresholdMode.
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode getThresholdMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.valueOf(thresholdMode_);
        return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *门限模式 0-连续模式，1-GATE模式 2-NORMAL
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
       * @param value The thresholdMode to set.
       * @return This builder for chaining.
       */
      public Builder setThresholdMode(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DFThresholdMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        thresholdMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *门限模式 0-连续模式，1-GATE模式 2-NORMAL
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.DFThresholdMode threshold_mode = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearThresholdMode() {
        
        thresholdMode_ = 0;
        onChanged();
        return this;
      }

      private int thresholdValue_ ;
      /**
       * <pre>
       *门限值
       * </pre>
       *
       * <code>int32 threshold_value = 13;</code>
       * @return The thresholdValue.
       */
      @java.lang.Override
      public int getThresholdValue() {
        return thresholdValue_;
      }
      /**
       * <pre>
       *门限值
       * </pre>
       *
       * <code>int32 threshold_value = 13;</code>
       * @param value The thresholdValue to set.
       * @return This builder for chaining.
       */
      public Builder setThresholdValue(int value) {
        
        thresholdValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *门限值
       * </pre>
       *
       * <code>int32 threshold_value = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearThresholdValue() {
        
        thresholdValue_ = 0;
        onChanged();
        return this;
      }

      private int outputPow_ ;
      /**
       * <pre>
       *多通道校准源输出功率-50~0，目前设置为0 
       * </pre>
       *
       * <code>int32 output_pow = 14;</code>
       * @return The outputPow.
       */
      @java.lang.Override
      public int getOutputPow() {
        return outputPow_;
      }
      /**
       * <pre>
       *多通道校准源输出功率-50~0，目前设置为0 
       * </pre>
       *
       * <code>int32 output_pow = 14;</code>
       * @param value The outputPow to set.
       * @return This builder for chaining.
       */
      public Builder setOutputPow(int value) {
        
        outputPow_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *多通道校准源输出功率-50~0，目前设置为0 
       * </pre>
       *
       * <code>int32 output_pow = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputPow() {
        
        outputPow_ = 0;
        onChanged();
        return this;
      }

      private zb.dcts.source.kh.KhContext.WindowParams winParams_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder> winParamsBuilder_;
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       * @return Whether the winParams field is set.
       */
      public boolean hasWinParams() {
        return winParamsBuilder_ != null || winParams_ != null;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       * @return The winParams.
       */
      public zb.dcts.source.kh.KhContext.WindowParams getWinParams() {
        if (winParamsBuilder_ == null) {
          return winParams_ == null ? zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
        } else {
          return winParamsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public Builder setWinParams(zb.dcts.source.kh.KhContext.WindowParams value) {
        if (winParamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          winParams_ = value;
          onChanged();
        } else {
          winParamsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public Builder setWinParams(
          zb.dcts.source.kh.KhContext.WindowParams.Builder builderForValue) {
        if (winParamsBuilder_ == null) {
          winParams_ = builderForValue.build();
          onChanged();
        } else {
          winParamsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public Builder mergeWinParams(zb.dcts.source.kh.KhContext.WindowParams value) {
        if (winParamsBuilder_ == null) {
          if (winParams_ != null) {
            winParams_ =
              zb.dcts.source.kh.KhContext.WindowParams.newBuilder(winParams_).mergeFrom(value).buildPartial();
          } else {
            winParams_ = value;
          }
          onChanged();
        } else {
          winParamsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public Builder clearWinParams() {
        if (winParamsBuilder_ == null) {
          winParams_ = null;
          onChanged();
        } else {
          winParams_ = null;
          winParamsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public zb.dcts.source.kh.KhContext.WindowParams.Builder getWinParamsBuilder() {
        
        onChanged();
        return getWinParamsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      public zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder() {
        if (winParamsBuilder_ != null) {
          return winParamsBuilder_.getMessageOrBuilder();
        } else {
          return winParams_ == null ?
              zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
        }
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder> 
          getWinParamsFieldBuilder() {
        if (winParamsBuilder_ == null) {
          winParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder>(
                  getWinParams(),
                  getParentForChildren(),
                  isClean());
          winParams_ = null;
        }
        return winParamsBuilder_;
      }

      private int averageTime_ ;
      /**
       * <pre>
       *平均时间ms
       * </pre>
       *
       * <code>int32 average_time = 16;</code>
       * @return The averageTime.
       */
      @java.lang.Override
      public int getAverageTime() {
        return averageTime_;
      }
      /**
       * <pre>
       *平均时间ms
       * </pre>
       *
       * <code>int32 average_time = 16;</code>
       * @param value The averageTime to set.
       * @return This builder for chaining.
       */
      public Builder setAverageTime(int value) {
        
        averageTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *平均时间ms
       * </pre>
       *
       * <code>int32 average_time = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearAverageTime() {
        
        averageTime_ = 0;
        onChanged();
        return this;
      }

      private double rfLimit_ ;
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 17;</code>
       * @return The rfLimit.
       */
      @java.lang.Override
      public double getRfLimit() {
        return rfLimit_;
      }
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 17;</code>
       * @param value The rfLimit to set.
       * @return This builder for chaining.
       */
      public Builder setRfLimit(double value) {
        
        rfLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearRfLimit() {
        
        rfLimit_ = 0D;
        onChanged();
        return this;
      }

      private double searchStep_ ;
      /**
       * <pre>
       *SEARCH模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 18;</code>
       * @return The searchStep.
       */
      @java.lang.Override
      public double getSearchStep() {
        return searchStep_;
      }
      /**
       * <pre>
       *SEARCH模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 18;</code>
       * @param value The searchStep to set.
       * @return This builder for chaining.
       */
      public Builder setSearchStep(double value) {
        
        searchStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *SEARCH模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearSearchStep() {
        
        searchStep_ = 0D;
        onChanged();
        return this;
      }

      private int residenceTime_ ;
      /**
       * <pre>
       *SEARCH模式时每个频点的驻留时间ms，必须为average_time的整数倍。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 19;</code>
       * @return The residenceTime.
       */
      @java.lang.Override
      public int getResidenceTime() {
        return residenceTime_;
      }
      /**
       * <pre>
       *SEARCH模式时每个频点的驻留时间ms，必须为average_time的整数倍。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 19;</code>
       * @param value The residenceTime to set.
       * @return This builder for chaining.
       */
      public Builder setResidenceTime(int value) {
        
        residenceTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *SEARCH模式时每个频点的驻留时间ms，必须为average_time的整数倍。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearResidenceTime() {
        
        residenceTime_ = 0;
        onChanged();
        return this;
      }

      private int sampleInterval_ ;
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 20;</code>
       * @return The sampleInterval.
       */
      @java.lang.Override
      public int getSampleInterval() {
        return sampleInterval_;
      }
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 20;</code>
       * @param value The sampleInterval to set.
       * @return This builder for chaining.
       */
      public Builder setSampleInterval(int value) {
        
        sampleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleInterval() {
        
        sampleInterval_ = 0;
        onChanged();
        return this;
      }

      private int resultInterval_ ;
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 21;</code>
       * @return The resultInterval.
       */
      @java.lang.Override
      public int getResultInterval() {
        return resultInterval_;
      }
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 21;</code>
       * @param value The resultInterval to set.
       * @return This builder for chaining.
       */
      public Builder setResultInterval(int value) {
        
        resultInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearResultInterval() {
        
        resultInterval_ = 0;
        onChanged();
        return this;
      }

      private int expectedPoints_ ;
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 22;</code>
       * @return The expectedPoints.
       */
      @java.lang.Override
      public int getExpectedPoints() {
        return expectedPoints_;
      }
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 22;</code>
       * @param value The expectedPoints to set.
       * @return This builder for chaining.
       */
      public Builder setExpectedPoints(int value) {
        
        expectedPoints_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpectedPoints() {
        
        expectedPoints_ = 0;
        onChanged();
        return this;
      }

      private int antenna_ ;
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 23;</code>
       * @return The antenna.
       */
      @java.lang.Override
      public int getAntenna() {
        return antenna_;
      }
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 23;</code>
       * @param value The antenna to set.
       * @return This builder for chaining.
       */
      public Builder setAntenna(int value) {
        
        antenna_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearAntenna() {
        
        antenna_ = 0;
        onChanged();
        return this;
      }

      private int dfTimes_ ;
      /**
       * <pre>
       *测向采集次数，测向标校中使用。
       * </pre>
       *
       * <code>int32 df_times = 24;</code>
       * @return The dfTimes.
       */
      @java.lang.Override
      public int getDfTimes() {
        return dfTimes_;
      }
      /**
       * <pre>
       *测向采集次数，测向标校中使用。
       * </pre>
       *
       * <code>int32 df_times = 24;</code>
       * @param value The dfTimes to set.
       * @return This builder for chaining.
       */
      public Builder setDfTimes(int value) {
        
        dfTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *测向采集次数，测向标校中使用。
       * </pre>
       *
       * <code>int32 df_times = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearDfTimes() {
        
        dfTimes_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam)
    private static final zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam();
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommDirectionAcqParam>
        PARSER = new com.google.protobuf.AbstractParser<CommDirectionAcqParam>() {
      @java.lang.Override
      public CommDirectionAcqParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommDirectionAcqParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CommDirectionAcqParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommDirectionAcqParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DirectionChangeRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     * @return Whether the taskId field is set.
     */
    boolean hasTaskId();
    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     * @return The taskId.
     */
    zb.dcts.scenario.Scenario.ScenarioTaskId getTaskId();
    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     */
    zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder getTaskIdOrBuilder();

    /**
     * <pre>
     *修改参数索引
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
     * @return The enum numeric value on the wire for paramIndex.
     */
    int getParamIndexValue();
    /**
     * <pre>
     *修改参数索引
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
     * @return The paramIndex.
     */
    zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex getParamIndex();

    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     * @return Whether the taskParams field is set.
     */
    boolean hasTaskParams();
    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     * @return The taskParams.
     */
    zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getTaskParams();
    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     */
    zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder getTaskParamsOrBuilder();

    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double center_freq = 4;</code>
     * @return The centerFreq.
     */
    double getCenterFreq();
  }
  /**
   * <pre>
   *change request
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commDirection.DirectionChangeRequest}
   */
  public static final class DirectionChangeRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
      DirectionChangeRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DirectionChangeRequest.newBuilder() to construct.
    private DirectionChangeRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DirectionChangeRequest() {
      paramIndex_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DirectionChangeRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DirectionChangeRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.scenario.Scenario.ScenarioTaskId.Builder subBuilder = null;
              if (taskId_ != null) {
                subBuilder = taskId_.toBuilder();
              }
              taskId_ = input.readMessage(zb.dcts.scenario.Scenario.ScenarioTaskId.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(taskId_);
                taskId_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              paramIndex_ = rawValue;
              break;
            }
            case 26: {
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder subBuilder = null;
              if (taskParams_ != null) {
                subBuilder = taskParams_.toBuilder();
              }
              taskParams_ = input.readMessage(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(taskParams_);
                taskParams_ = subBuilder.buildPartial();
              }

              break;
            }
            case 33: {

              centerFreq_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.Builder.class);
    }

    public static final int TASK_ID_FIELD_NUMBER = 1;
    private zb.dcts.scenario.Scenario.ScenarioTaskId taskId_;
    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     * @return Whether the taskId field is set.
     */
    @java.lang.Override
    public boolean hasTaskId() {
      return taskId_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     * @return The taskId.
     */
    @java.lang.Override
    public zb.dcts.scenario.Scenario.ScenarioTaskId getTaskId() {
      return taskId_ == null ? zb.dcts.scenario.Scenario.ScenarioTaskId.getDefaultInstance() : taskId_;
    }
    /**
     * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder getTaskIdOrBuilder() {
      return getTaskId();
    }

    public static final int PARAM_INDEX_FIELD_NUMBER = 2;
    private int paramIndex_;
    /**
     * <pre>
     *修改参数索引
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
     * @return The enum numeric value on the wire for paramIndex.
     */
    @java.lang.Override public int getParamIndexValue() {
      return paramIndex_;
    }
    /**
     * <pre>
     *修改参数索引
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
     * @return The paramIndex.
     */
    @java.lang.Override public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex getParamIndex() {
      @SuppressWarnings("deprecation")
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.valueOf(paramIndex_);
      return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.UNRECOGNIZED : result;
    }

    public static final int TASK_PARAMS_FIELD_NUMBER = 3;
    private zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam taskParams_;
    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     * @return Whether the taskParams field is set.
     */
    @java.lang.Override
    public boolean hasTaskParams() {
      return taskParams_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     * @return The taskParams.
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getTaskParams() {
      return taskParams_ == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.getDefaultInstance() : taskParams_;
    }
    /**
     * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder getTaskParamsOrBuilder() {
      return getTaskParams();
    }

    public static final int CENTER_FREQ_FIELD_NUMBER = 4;
    private double centerFreq_;
    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double center_freq = 4;</code>
     * @return The centerFreq.
     */
    @java.lang.Override
    public double getCenterFreq() {
      return centerFreq_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (taskId_ != null) {
        output.writeMessage(1, getTaskId());
      }
      if (paramIndex_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.THRESHOLD_VALUE.getNumber()) {
        output.writeEnum(2, paramIndex_);
      }
      if (taskParams_ != null) {
        output.writeMessage(3, getTaskParams());
      }
      if (centerFreq_ != 0D) {
        output.writeDouble(4, centerFreq_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (taskId_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTaskId());
      }
      if (paramIndex_ != zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.THRESHOLD_VALUE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, paramIndex_);
      }
      if (taskParams_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTaskParams());
      }
      if (centerFreq_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, centerFreq_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest other = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest) obj;

      if (hasTaskId() != other.hasTaskId()) return false;
      if (hasTaskId()) {
        if (!getTaskId()
            .equals(other.getTaskId())) return false;
      }
      if (paramIndex_ != other.paramIndex_) return false;
      if (hasTaskParams() != other.hasTaskParams()) return false;
      if (hasTaskParams()) {
        if (!getTaskParams()
            .equals(other.getTaskParams())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getCenterFreq())
          != java.lang.Double.doubleToLongBits(
              other.getCenterFreq())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTaskId()) {
        hash = (37 * hash) + TASK_ID_FIELD_NUMBER;
        hash = (53 * hash) + getTaskId().hashCode();
      }
      hash = (37 * hash) + PARAM_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + paramIndex_;
      if (hasTaskParams()) {
        hash = (37 * hash) + TASK_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getTaskParams().hashCode();
      }
      hash = (37 * hash) + CENTER_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCenterFreq()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *change request
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commDirection.DirectionChangeRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (taskIdBuilder_ == null) {
          taskId_ = null;
        } else {
          taskId_ = null;
          taskIdBuilder_ = null;
        }
        paramIndex_ = 0;

        if (taskParamsBuilder_ == null) {
          taskParams_ = null;
        } else {
          taskParams_ = null;
          taskParamsBuilder_ = null;
        }
        centerFreq_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest build() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest buildPartial() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest result = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest(this);
        if (taskIdBuilder_ == null) {
          result.taskId_ = taskId_;
        } else {
          result.taskId_ = taskIdBuilder_.build();
        }
        result.paramIndex_ = paramIndex_;
        if (taskParamsBuilder_ == null) {
          result.taskParams_ = taskParams_;
        } else {
          result.taskParams_ = taskParamsBuilder_.build();
        }
        result.centerFreq_ = centerFreq_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest) {
          return mergeFrom((zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest other) {
        if (other == zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest.getDefaultInstance()) return this;
        if (other.hasTaskId()) {
          mergeTaskId(other.getTaskId());
        }
        if (other.paramIndex_ != 0) {
          setParamIndexValue(other.getParamIndexValue());
        }
        if (other.hasTaskParams()) {
          mergeTaskParams(other.getTaskParams());
        }
        if (other.getCenterFreq() != 0D) {
          setCenterFreq(other.getCenterFreq());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private zb.dcts.scenario.Scenario.ScenarioTaskId taskId_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.Scenario.ScenarioTaskId, zb.dcts.scenario.Scenario.ScenarioTaskId.Builder, zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder> taskIdBuilder_;
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       * @return Whether the taskId field is set.
       */
      public boolean hasTaskId() {
        return taskIdBuilder_ != null || taskId_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       * @return The taskId.
       */
      public zb.dcts.scenario.Scenario.ScenarioTaskId getTaskId() {
        if (taskIdBuilder_ == null) {
          return taskId_ == null ? zb.dcts.scenario.Scenario.ScenarioTaskId.getDefaultInstance() : taskId_;
        } else {
          return taskIdBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public Builder setTaskId(zb.dcts.scenario.Scenario.ScenarioTaskId value) {
        if (taskIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taskId_ = value;
          onChanged();
        } else {
          taskIdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public Builder setTaskId(
          zb.dcts.scenario.Scenario.ScenarioTaskId.Builder builderForValue) {
        if (taskIdBuilder_ == null) {
          taskId_ = builderForValue.build();
          onChanged();
        } else {
          taskIdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public Builder mergeTaskId(zb.dcts.scenario.Scenario.ScenarioTaskId value) {
        if (taskIdBuilder_ == null) {
          if (taskId_ != null) {
            taskId_ =
              zb.dcts.scenario.Scenario.ScenarioTaskId.newBuilder(taskId_).mergeFrom(value).buildPartial();
          } else {
            taskId_ = value;
          }
          onChanged();
        } else {
          taskIdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public Builder clearTaskId() {
        if (taskIdBuilder_ == null) {
          taskId_ = null;
          onChanged();
        } else {
          taskId_ = null;
          taskIdBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public zb.dcts.scenario.Scenario.ScenarioTaskId.Builder getTaskIdBuilder() {
        
        onChanged();
        return getTaskIdFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      public zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder getTaskIdOrBuilder() {
        if (taskIdBuilder_ != null) {
          return taskIdBuilder_.getMessageOrBuilder();
        } else {
          return taskId_ == null ?
              zb.dcts.scenario.Scenario.ScenarioTaskId.getDefaultInstance() : taskId_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.ScenarioTaskId task_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.Scenario.ScenarioTaskId, zb.dcts.scenario.Scenario.ScenarioTaskId.Builder, zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder> 
          getTaskIdFieldBuilder() {
        if (taskIdBuilder_ == null) {
          taskIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.Scenario.ScenarioTaskId, zb.dcts.scenario.Scenario.ScenarioTaskId.Builder, zb.dcts.scenario.Scenario.ScenarioTaskIdOrBuilder>(
                  getTaskId(),
                  getParentForChildren(),
                  isClean());
          taskId_ = null;
        }
        return taskIdBuilder_;
      }

      private int paramIndex_ = 0;
      /**
       * <pre>
       *修改参数索引
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
       * @return The enum numeric value on the wire for paramIndex.
       */
      @java.lang.Override public int getParamIndexValue() {
        return paramIndex_;
      }
      /**
       * <pre>
       *修改参数索引
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
       * @param value The enum numeric value on the wire for paramIndex to set.
       * @return This builder for chaining.
       */
      public Builder setParamIndexValue(int value) {
        
        paramIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *修改参数索引
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
       * @return The paramIndex.
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex getParamIndex() {
        @SuppressWarnings("deprecation")
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex result = zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.valueOf(paramIndex_);
        return result == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *修改参数索引
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
       * @param value The paramIndex to set.
       * @return This builder for chaining.
       */
      public Builder setParamIndex(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.ParamIndex value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        paramIndex_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *修改参数索引
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commDirection.ParamIndex param_index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearParamIndex() {
        
        paramIndex_ = 0;
        onChanged();
        return this;
      }

      private zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam taskParams_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder> taskParamsBuilder_;
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       * @return Whether the taskParams field is set.
       */
      public boolean hasTaskParams() {
        return taskParamsBuilder_ != null || taskParams_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       * @return The taskParams.
       */
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam getTaskParams() {
        if (taskParamsBuilder_ == null) {
          return taskParams_ == null ? zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.getDefaultInstance() : taskParams_;
        } else {
          return taskParamsBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public Builder setTaskParams(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam value) {
        if (taskParamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taskParams_ = value;
          onChanged();
        } else {
          taskParamsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public Builder setTaskParams(
          zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder builderForValue) {
        if (taskParamsBuilder_ == null) {
          taskParams_ = builderForValue.build();
          onChanged();
        } else {
          taskParamsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public Builder mergeTaskParams(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam value) {
        if (taskParamsBuilder_ == null) {
          if (taskParams_ != null) {
            taskParams_ =
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.newBuilder(taskParams_).mergeFrom(value).buildPartial();
          } else {
            taskParams_ = value;
          }
          onChanged();
        } else {
          taskParamsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public Builder clearTaskParams() {
        if (taskParamsBuilder_ == null) {
          taskParams_ = null;
          onChanged();
        } else {
          taskParams_ = null;
          taskParamsBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder getTaskParamsBuilder() {
        
        onChanged();
        return getTaskParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder getTaskParamsOrBuilder() {
        if (taskParamsBuilder_ != null) {
          return taskParamsBuilder_.getMessageOrBuilder();
        } else {
          return taskParams_ == null ?
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.getDefaultInstance() : taskParams_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.kh.commDirection.CommDirectionAcqParam task_params = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder> 
          getTaskParamsFieldBuilder() {
        if (taskParamsBuilder_ == null) {
          taskParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParam.Builder, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionAcqParamOrBuilder>(
                  getTaskParams(),
                  getParentForChildren(),
                  isClean());
          taskParams_ = null;
        }
        return taskParamsBuilder_;
      }

      private double centerFreq_ ;
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 4;</code>
       * @return The centerFreq.
       */
      @java.lang.Override
      public double getCenterFreq() {
        return centerFreq_;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 4;</code>
       * @param value The centerFreq to set.
       * @return This builder for chaining.
       */
      public Builder setCenterFreq(double value) {
        
        centerFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCenterFreq() {
        
        centerFreq_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.DirectionChangeRequest)
    private static final zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest();
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DirectionChangeRequest>
        PARSER = new com.google.protobuf.AbstractParser<DirectionChangeRequest>() {
      @java.lang.Override
      public DirectionChangeRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DirectionChangeRequest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DirectionChangeRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DirectionChangeRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.DirectionChangeRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CommDirectionResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return The header.
     */
    zb.dcts.scenario.spectrum.Spectrum.Header getHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     * @return Whether the status field is set.
     */
    boolean hasStatus();
    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     * @return The status.
     */
    zb.dcts.source.kh.KhContext.OperationStatus getStatus();
    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     */
    zb.dcts.source.kh.KhContext.OperationStatusOrBuilder getStatusOrBuilder();

    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return Whether the segHeader field is set.
     */
    boolean hasSegHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return The segHeader.
     */
    zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder();

    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return Whether the band field is set.
     */
    boolean hasBand();
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return The band.
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand();
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder();

    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     * @return Whether the panoramaView field is set.
     */
    boolean hasPanoramaView();
    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     * @return The panoramaView.
     */
    zb.dcts.scenario.spectrum.Spectrum.View getPanoramaView();
    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getPanoramaViewOrBuilder();

    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     * @return Whether the closeshotView field is set.
     */
    boolean hasCloseshotView();
    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     * @return The closeshotView.
     */
    zb.dcts.scenario.spectrum.Spectrum.View getCloseshotView();
    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getCloseshotViewOrBuilder();

    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double courseAngle = 8;</code>
     * @return The courseAngle.
     */
    double getCourseAngle();

    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> 
        getTargetDetectionBeforeList();
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    zb.dcts.source.kh.KhContext.TargetDirection getTargetDetectionBefore(int index);
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    int getTargetDetectionBeforeCount();
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
        getTargetDetectionBeforeOrBuilderList();
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionBeforeOrBuilder(
        int index);

    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> 
        getTargetDetectionList();
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    zb.dcts.source.kh.KhContext.TargetDirection getTargetDetection(int index);
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    int getTargetDetectionCount();
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
        getTargetDetectionOrBuilderList();
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionOrBuilder(
        int index);

    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @return A list containing the lOFrequencykHzs.
     */
    java.util.List<java.lang.Integer> getLOFrequencykHzsList();
    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @return The count of lOFrequencykHzs.
     */
    int getLOFrequencykHzsCount();
    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @param index The index of the element to return.
     * @return The lOFrequencykHzs at the given index.
     */
    int getLOFrequencykHzs(int index);

    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @return A list containing the scanIndexs.
     */
    java.util.List<java.lang.Integer> getScanIndexsList();
    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @return The count of scanIndexs.
     */
    int getScanIndexsCount();
    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @param index The index of the element to return.
     * @return The scanIndexs at the given index.
     */
    int getScanIndexs(int index);

    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @return A list containing the targetIds.
     */
    java.util.List<java.lang.Integer> getTargetIdsList();
    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @return The count of targetIds.
     */
    int getTargetIdsCount();
    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @param index The index of the element to return.
     * @return The targetIds at the given index.
     */
    int getTargetIds(int index);

    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @return A list containing the calDiff.
     */
    java.util.List<java.lang.Float> getCalDiffList();
    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @return The count of calDiff.
     */
    int getCalDiffCount();
    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @param index The index of the element to return.
     * @return The calDiff at the given index.
     */
    float getCalDiff(int index);

    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @return A list containing the antDiff.
     */
    java.util.List<java.lang.Float> getAntDiffList();
    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @return The count of antDiff.
     */
    int getAntDiffCount();
    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @param index The index of the element to return.
     * @return The antDiff at the given index.
     */
    float getAntDiff(int index);

    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double center_freq = 16;</code>
     * @return The centerFreq.
     */
    double getCenterFreq();
  }
  /**
   * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionResult}
   */
  public static final class CommDirectionResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
      CommDirectionResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommDirectionResult.newBuilder() to construct.
    private CommDirectionResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommDirectionResult() {
      targetDetectionBefore_ = java.util.Collections.emptyList();
      targetDetection_ = java.util.Collections.emptyList();
      lOFrequencykHzs_ = emptyIntList();
      scanIndexs_ = emptyIntList();
      targetIds_ = emptyIntList();
      calDiff_ = emptyFloatList();
      antDiff_ = emptyFloatList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommDirectionResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CommDirectionResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.scenario.spectrum.Spectrum.Header.Builder subBuilder = null;
              if (header_ != null) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.Header.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              zb.dcts.source.kh.KhContext.OperationStatus.Builder subBuilder = null;
              if (status_ != null) {
                subBuilder = status_.toBuilder();
              }
              status_ = input.readMessage(zb.dcts.source.kh.KhContext.OperationStatus.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(status_);
                status_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder subBuilder = null;
              if (segHeader_ != null) {
                subBuilder = segHeader_.toBuilder();
              }
              segHeader_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(segHeader_);
                segHeader_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder subBuilder = null;
              if (band_ != null) {
                subBuilder = band_.toBuilder();
              }
              band_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(band_);
                band_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              zb.dcts.scenario.spectrum.Spectrum.View.Builder subBuilder = null;
              if (panoramaView_ != null) {
                subBuilder = panoramaView_.toBuilder();
              }
              panoramaView_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.View.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(panoramaView_);
                panoramaView_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              zb.dcts.scenario.spectrum.Spectrum.View.Builder subBuilder = null;
              if (closeshotView_ != null) {
                subBuilder = closeshotView_.toBuilder();
              }
              closeshotView_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.View.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(closeshotView_);
                closeshotView_ = subBuilder.buildPartial();
              }

              break;
            }
            case 65: {

              courseAngle_ = input.readDouble();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                targetDetectionBefore_ = new java.util.ArrayList<zb.dcts.source.kh.KhContext.TargetDirection>();
                mutable_bitField0_ |= 0x00000001;
              }
              targetDetectionBefore_.add(
                  input.readMessage(zb.dcts.source.kh.KhContext.TargetDirection.parser(), extensionRegistry));
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                targetDetection_ = new java.util.ArrayList<zb.dcts.source.kh.KhContext.TargetDirection>();
                mutable_bitField0_ |= 0x00000002;
              }
              targetDetection_.add(
                  input.readMessage(zb.dcts.source.kh.KhContext.TargetDirection.parser(), extensionRegistry));
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                lOFrequencykHzs_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              lOFrequencykHzs_.addInt(input.readUInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                lOFrequencykHzs_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                lOFrequencykHzs_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                scanIndexs_ = newIntList();
                mutable_bitField0_ |= 0x00000008;
              }
              scanIndexs_.addInt(input.readUInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
                scanIndexs_ = newIntList();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                scanIndexs_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                targetIds_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              targetIds_.addInt(input.readUInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
                targetIds_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                targetIds_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 117: {
              if (!((mutable_bitField0_ & 0x00000020) != 0)) {
                calDiff_ = newFloatList();
                mutable_bitField0_ |= 0x00000020;
              }
              calDiff_.addFloat(input.readFloat());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
                calDiff_ = newFloatList();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                calDiff_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 125: {
              if (!((mutable_bitField0_ & 0x00000040) != 0)) {
                antDiff_ = newFloatList();
                mutable_bitField0_ |= 0x00000040;
              }
              antDiff_.addFloat(input.readFloat());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) != 0) && input.getBytesUntilLimit() > 0) {
                antDiff_ = newFloatList();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                antDiff_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 129: {

              centerFreq_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          targetDetectionBefore_ = java.util.Collections.unmodifiableList(targetDetectionBefore_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          targetDetection_ = java.util.Collections.unmodifiableList(targetDetection_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          lOFrequencykHzs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          scanIndexs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          targetIds_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000020) != 0)) {
          calDiff_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000040) != 0)) {
          antDiff_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private zb.dcts.scenario.spectrum.Spectrum.Header header_;
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.Header getHeader() {
      return header_ == null ? zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder() {
      return getHeader();
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private zb.dcts.source.kh.KhContext.OperationStatus status_;
    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     * @return Whether the status field is set.
     */
    @java.lang.Override
    public boolean hasStatus() {
      return status_ != null;
    }
    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     * @return The status.
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.OperationStatus getStatus() {
      return status_ == null ? zb.dcts.source.kh.KhContext.OperationStatus.getDefaultInstance() : status_;
    }
    /**
     * <pre>
     *任务状态
     * </pre>
     *
     * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.OperationStatusOrBuilder getStatusOrBuilder() {
      return getStatus();
    }

    public static final int SEG_HEADER_FIELD_NUMBER = 4;
    private zb.dcts.scenario.spectrum.Spectrum.SegmentHeader segHeader_;
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return Whether the segHeader field is set.
     */
    @java.lang.Override
    public boolean hasSegHeader() {
      return segHeader_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return The segHeader.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader() {
      return segHeader_ == null ? zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder() {
      return getSegHeader();
    }

    public static final int BAND_FIELD_NUMBER = 5;
    private zb.dcts.scenario.spectrum.Spectrum.FrequencyBand band_;
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return Whether the band field is set.
     */
    @java.lang.Override
    public boolean hasBand() {
      return band_ != null;
    }
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return The band.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand() {
      return band_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
    }
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder() {
      return getBand();
    }

    public static final int PANORAMA_VIEW_FIELD_NUMBER = 6;
    private zb.dcts.scenario.spectrum.Spectrum.View panoramaView_;
    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     * @return Whether the panoramaView field is set.
     */
    @java.lang.Override
    public boolean hasPanoramaView() {
      return panoramaView_ != null;
    }
    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     * @return The panoramaView.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.View getPanoramaView() {
      return panoramaView_ == null ? zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : panoramaView_;
    }
    /**
     * <pre>
     *全景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getPanoramaViewOrBuilder() {
      return getPanoramaView();
    }

    public static final int CLOSESHOT_VIEW_FIELD_NUMBER = 7;
    private zb.dcts.scenario.spectrum.Spectrum.View closeshotView_;
    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     * @return Whether the closeshotView field is set.
     */
    @java.lang.Override
    public boolean hasCloseshotView() {
      return closeshotView_ != null;
    }
    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     * @return The closeshotView.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.View getCloseshotView() {
      return closeshotView_ == null ? zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : closeshotView_;
    }
    /**
     * <pre>
     *近景视角的数据
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getCloseshotViewOrBuilder() {
      return getCloseshotView();
    }

    public static final int COURSEANGLE_FIELD_NUMBER = 8;
    private double courseAngle_;
    /**
     * <pre>
     *航向角
     * </pre>
     *
     * <code>double courseAngle = 8;</code>
     * @return The courseAngle.
     */
    @java.lang.Override
    public double getCourseAngle() {
      return courseAngle_;
    }

    public static final int TARGET_DETECTION_BEFORE_FIELD_NUMBER = 9;
    private java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> targetDetectionBefore_;
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    @java.lang.Override
    public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> getTargetDetectionBeforeList() {
      return targetDetectionBefore_;
    }
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    @java.lang.Override
    public java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
        getTargetDetectionBeforeOrBuilderList() {
      return targetDetectionBefore_;
    }
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    @java.lang.Override
    public int getTargetDetectionBeforeCount() {
      return targetDetectionBefore_.size();
    }
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.TargetDirection getTargetDetectionBefore(int index) {
      return targetDetectionBefore_.get(index);
    }
    /**
     * <pre>
     *以下几个结果对单点测向只有一个值。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionBeforeOrBuilder(
        int index) {
      return targetDetectionBefore_.get(index);
    }

    public static final int TARGET_DETECTION_FIELD_NUMBER = 10;
    private java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> targetDetection_;
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    @java.lang.Override
    public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> getTargetDetectionList() {
      return targetDetection_;
    }
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
        getTargetDetectionOrBuilderList() {
      return targetDetection_;
    }
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    @java.lang.Override
    public int getTargetDetectionCount() {
      return targetDetection_.size();
    }
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.TargetDirection getTargetDetection(int index) {
      return targetDetection_.get(index);
    }
    /**
     * <pre>
     *解耦后目标方位。
     * </pre>
     *
     * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionOrBuilder(
        int index) {
      return targetDetection_.get(index);
    }

    public static final int LOFREQUENCYKHZS_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.IntList lOFrequencykHzs_;
    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @return A list containing the lOFrequencykHzs.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getLOFrequencykHzsList() {
      return lOFrequencykHzs_;
    }
    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @return The count of lOFrequencykHzs.
     */
    public int getLOFrequencykHzsCount() {
      return lOFrequencykHzs_.size();
    }
    /**
     * <code>repeated uint32 LOFrequencykHzs = 11;</code>
     * @param index The index of the element to return.
     * @return The lOFrequencykHzs at the given index.
     */
    public int getLOFrequencykHzs(int index) {
      return lOFrequencykHzs_.getInt(index);
    }
    private int lOFrequencykHzsMemoizedSerializedSize = -1;

    public static final int SCANINDEXS_FIELD_NUMBER = 12;
    private com.google.protobuf.Internal.IntList scanIndexs_;
    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @return A list containing the scanIndexs.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getScanIndexsList() {
      return scanIndexs_;
    }
    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @return The count of scanIndexs.
     */
    public int getScanIndexsCount() {
      return scanIndexs_.size();
    }
    /**
     * <code>repeated uint32 scanIndexs = 12;</code>
     * @param index The index of the element to return.
     * @return The scanIndexs at the given index.
     */
    public int getScanIndexs(int index) {
      return scanIndexs_.getInt(index);
    }
    private int scanIndexsMemoizedSerializedSize = -1;

    public static final int TARGET_IDS_FIELD_NUMBER = 13;
    private com.google.protobuf.Internal.IntList targetIds_;
    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @return A list containing the targetIds.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getTargetIdsList() {
      return targetIds_;
    }
    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @return The count of targetIds.
     */
    public int getTargetIdsCount() {
      return targetIds_.size();
    }
    /**
     * <code>repeated uint32 target_ids = 13;</code>
     * @param index The index of the element to return.
     * @return The targetIds at the given index.
     */
    public int getTargetIds(int index) {
      return targetIds_.getInt(index);
    }
    private int targetIdsMemoizedSerializedSize = -1;

    public static final int CAL_DIFF_FIELD_NUMBER = 14;
    private com.google.protobuf.Internal.FloatList calDiff_;
    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @return A list containing the calDiff.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getCalDiffList() {
      return calDiff_;
    }
    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @return The count of calDiff.
     */
    public int getCalDiffCount() {
      return calDiff_.size();
    }
    /**
     * <pre>
     *以下几个结果用于标校
     * </pre>
     *
     * <code>repeated float cal_diff = 14;</code>
     * @param index The index of the element to return.
     * @return The calDiff at the given index.
     */
    public float getCalDiff(int index) {
      return calDiff_.getFloat(index);
    }
    private int calDiffMemoizedSerializedSize = -1;

    public static final int ANT_DIFF_FIELD_NUMBER = 15;
    private com.google.protobuf.Internal.FloatList antDiff_;
    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @return A list containing the antDiff.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getAntDiffList() {
      return antDiff_;
    }
    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @return The count of antDiff.
     */
    public int getAntDiffCount() {
      return antDiff_.size();
    }
    /**
     * <pre>
     *8个天线信号相位差+10个幅度值
     * </pre>
     *
     * <code>repeated float ant_diff = 15;</code>
     * @param index The index of the element to return.
     * @return The antDiff at the given index.
     */
    public float getAntDiff(int index) {
      return antDiff_.getFloat(index);
    }
    private int antDiffMemoizedSerializedSize = -1;

    public static final int CENTER_FREQ_FIELD_NUMBER = 16;
    private double centerFreq_;
    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double center_freq = 16;</code>
     * @return The centerFreq.
     */
    @java.lang.Override
    public double getCenterFreq() {
      return centerFreq_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (status_ != null) {
        output.writeMessage(2, getStatus());
      }
      if (segHeader_ != null) {
        output.writeMessage(4, getSegHeader());
      }
      if (band_ != null) {
        output.writeMessage(5, getBand());
      }
      if (panoramaView_ != null) {
        output.writeMessage(6, getPanoramaView());
      }
      if (closeshotView_ != null) {
        output.writeMessage(7, getCloseshotView());
      }
      if (courseAngle_ != 0D) {
        output.writeDouble(8, courseAngle_);
      }
      for (int i = 0; i < targetDetectionBefore_.size(); i++) {
        output.writeMessage(9, targetDetectionBefore_.get(i));
      }
      for (int i = 0; i < targetDetection_.size(); i++) {
        output.writeMessage(10, targetDetection_.get(i));
      }
      if (getLOFrequencykHzsList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(lOFrequencykHzsMemoizedSerializedSize);
      }
      for (int i = 0; i < lOFrequencykHzs_.size(); i++) {
        output.writeUInt32NoTag(lOFrequencykHzs_.getInt(i));
      }
      if (getScanIndexsList().size() > 0) {
        output.writeUInt32NoTag(98);
        output.writeUInt32NoTag(scanIndexsMemoizedSerializedSize);
      }
      for (int i = 0; i < scanIndexs_.size(); i++) {
        output.writeUInt32NoTag(scanIndexs_.getInt(i));
      }
      if (getTargetIdsList().size() > 0) {
        output.writeUInt32NoTag(106);
        output.writeUInt32NoTag(targetIdsMemoizedSerializedSize);
      }
      for (int i = 0; i < targetIds_.size(); i++) {
        output.writeUInt32NoTag(targetIds_.getInt(i));
      }
      if (getCalDiffList().size() > 0) {
        output.writeUInt32NoTag(114);
        output.writeUInt32NoTag(calDiffMemoizedSerializedSize);
      }
      for (int i = 0; i < calDiff_.size(); i++) {
        output.writeFloatNoTag(calDiff_.getFloat(i));
      }
      if (getAntDiffList().size() > 0) {
        output.writeUInt32NoTag(122);
        output.writeUInt32NoTag(antDiffMemoizedSerializedSize);
      }
      for (int i = 0; i < antDiff_.size(); i++) {
        output.writeFloatNoTag(antDiff_.getFloat(i));
      }
      if (centerFreq_ != 0D) {
        output.writeDouble(16, centerFreq_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (status_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getStatus());
      }
      if (segHeader_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSegHeader());
      }
      if (band_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getBand());
      }
      if (panoramaView_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getPanoramaView());
      }
      if (closeshotView_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getCloseshotView());
      }
      if (courseAngle_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, courseAngle_);
      }
      for (int i = 0; i < targetDetectionBefore_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, targetDetectionBefore_.get(i));
      }
      for (int i = 0; i < targetDetection_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, targetDetection_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < lOFrequencykHzs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(lOFrequencykHzs_.getInt(i));
        }
        size += dataSize;
        if (!getLOFrequencykHzsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        lOFrequencykHzsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scanIndexs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(scanIndexs_.getInt(i));
        }
        size += dataSize;
        if (!getScanIndexsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        scanIndexsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < targetIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(targetIds_.getInt(i));
        }
        size += dataSize;
        if (!getTargetIdsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        targetIdsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getCalDiffList().size();
        size += dataSize;
        if (!getCalDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        calDiffMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAntDiffList().size();
        size += dataSize;
        if (!getAntDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        antDiffMemoizedSerializedSize = dataSize;
      }
      if (centerFreq_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, centerFreq_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult other = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (hasStatus() != other.hasStatus()) return false;
      if (hasStatus()) {
        if (!getStatus()
            .equals(other.getStatus())) return false;
      }
      if (hasSegHeader() != other.hasSegHeader()) return false;
      if (hasSegHeader()) {
        if (!getSegHeader()
            .equals(other.getSegHeader())) return false;
      }
      if (hasBand() != other.hasBand()) return false;
      if (hasBand()) {
        if (!getBand()
            .equals(other.getBand())) return false;
      }
      if (hasPanoramaView() != other.hasPanoramaView()) return false;
      if (hasPanoramaView()) {
        if (!getPanoramaView()
            .equals(other.getPanoramaView())) return false;
      }
      if (hasCloseshotView() != other.hasCloseshotView()) return false;
      if (hasCloseshotView()) {
        if (!getCloseshotView()
            .equals(other.getCloseshotView())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getCourseAngle())
          != java.lang.Double.doubleToLongBits(
              other.getCourseAngle())) return false;
      if (!getTargetDetectionBeforeList()
          .equals(other.getTargetDetectionBeforeList())) return false;
      if (!getTargetDetectionList()
          .equals(other.getTargetDetectionList())) return false;
      if (!getLOFrequencykHzsList()
          .equals(other.getLOFrequencykHzsList())) return false;
      if (!getScanIndexsList()
          .equals(other.getScanIndexsList())) return false;
      if (!getTargetIdsList()
          .equals(other.getTargetIdsList())) return false;
      if (!getCalDiffList()
          .equals(other.getCalDiffList())) return false;
      if (!getAntDiffList()
          .equals(other.getAntDiffList())) return false;
      if (java.lang.Double.doubleToLongBits(getCenterFreq())
          != java.lang.Double.doubleToLongBits(
              other.getCenterFreq())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (hasStatus()) {
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus().hashCode();
      }
      if (hasSegHeader()) {
        hash = (37 * hash) + SEG_HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getSegHeader().hashCode();
      }
      if (hasBand()) {
        hash = (37 * hash) + BAND_FIELD_NUMBER;
        hash = (53 * hash) + getBand().hashCode();
      }
      if (hasPanoramaView()) {
        hash = (37 * hash) + PANORAMA_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getPanoramaView().hashCode();
      }
      if (hasCloseshotView()) {
        hash = (37 * hash) + CLOSESHOT_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getCloseshotView().hashCode();
      }
      hash = (37 * hash) + COURSEANGLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCourseAngle()));
      if (getTargetDetectionBeforeCount() > 0) {
        hash = (37 * hash) + TARGET_DETECTION_BEFORE_FIELD_NUMBER;
        hash = (53 * hash) + getTargetDetectionBeforeList().hashCode();
      }
      if (getTargetDetectionCount() > 0) {
        hash = (37 * hash) + TARGET_DETECTION_FIELD_NUMBER;
        hash = (53 * hash) + getTargetDetectionList().hashCode();
      }
      if (getLOFrequencykHzsCount() > 0) {
        hash = (37 * hash) + LOFREQUENCYKHZS_FIELD_NUMBER;
        hash = (53 * hash) + getLOFrequencykHzsList().hashCode();
      }
      if (getScanIndexsCount() > 0) {
        hash = (37 * hash) + SCANINDEXS_FIELD_NUMBER;
        hash = (53 * hash) + getScanIndexsList().hashCode();
      }
      if (getTargetIdsCount() > 0) {
        hash = (37 * hash) + TARGET_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getTargetIdsList().hashCode();
      }
      if (getCalDiffCount() > 0) {
        hash = (37 * hash) + CAL_DIFF_FIELD_NUMBER;
        hash = (53 * hash) + getCalDiffList().hashCode();
      }
      if (getAntDiffCount() > 0) {
        hash = (37 * hash) + ANT_DIFF_FIELD_NUMBER;
        hash = (53 * hash) + getAntDiffList().hashCode();
      }
      hash = (37 * hash) + CENTER_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCenterFreq()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.scenario.kh.commDirection.CommDirectionResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.class, zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTargetDetectionBeforeFieldBuilder();
          getTargetDetectionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          header_ = null;
          headerBuilder_ = null;
        }
        if (statusBuilder_ == null) {
          status_ = null;
        } else {
          status_ = null;
          statusBuilder_ = null;
        }
        if (segHeaderBuilder_ == null) {
          segHeader_ = null;
        } else {
          segHeader_ = null;
          segHeaderBuilder_ = null;
        }
        if (bandBuilder_ == null) {
          band_ = null;
        } else {
          band_ = null;
          bandBuilder_ = null;
        }
        if (panoramaViewBuilder_ == null) {
          panoramaView_ = null;
        } else {
          panoramaView_ = null;
          panoramaViewBuilder_ = null;
        }
        if (closeshotViewBuilder_ == null) {
          closeshotView_ = null;
        } else {
          closeshotView_ = null;
          closeshotViewBuilder_ = null;
        }
        courseAngle_ = 0D;

        if (targetDetectionBeforeBuilder_ == null) {
          targetDetectionBefore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          targetDetectionBeforeBuilder_.clear();
        }
        if (targetDetectionBuilder_ == null) {
          targetDetection_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          targetDetectionBuilder_.clear();
        }
        lOFrequencykHzs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        scanIndexs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        targetIds_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        calDiff_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000020);
        antDiff_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000040);
        centerFreq_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult build() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult buildPartial() {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult result = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult(this);
        int from_bitField0_ = bitField0_;
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (statusBuilder_ == null) {
          result.status_ = status_;
        } else {
          result.status_ = statusBuilder_.build();
        }
        if (segHeaderBuilder_ == null) {
          result.segHeader_ = segHeader_;
        } else {
          result.segHeader_ = segHeaderBuilder_.build();
        }
        if (bandBuilder_ == null) {
          result.band_ = band_;
        } else {
          result.band_ = bandBuilder_.build();
        }
        if (panoramaViewBuilder_ == null) {
          result.panoramaView_ = panoramaView_;
        } else {
          result.panoramaView_ = panoramaViewBuilder_.build();
        }
        if (closeshotViewBuilder_ == null) {
          result.closeshotView_ = closeshotView_;
        } else {
          result.closeshotView_ = closeshotViewBuilder_.build();
        }
        result.courseAngle_ = courseAngle_;
        if (targetDetectionBeforeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            targetDetectionBefore_ = java.util.Collections.unmodifiableList(targetDetectionBefore_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.targetDetectionBefore_ = targetDetectionBefore_;
        } else {
          result.targetDetectionBefore_ = targetDetectionBeforeBuilder_.build();
        }
        if (targetDetectionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            targetDetection_ = java.util.Collections.unmodifiableList(targetDetection_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.targetDetection_ = targetDetection_;
        } else {
          result.targetDetection_ = targetDetectionBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          lOFrequencykHzs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.lOFrequencykHzs_ = lOFrequencykHzs_;
        if (((bitField0_ & 0x00000008) != 0)) {
          scanIndexs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.scanIndexs_ = scanIndexs_;
        if (((bitField0_ & 0x00000010) != 0)) {
          targetIds_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.targetIds_ = targetIds_;
        if (((bitField0_ & 0x00000020) != 0)) {
          calDiff_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.calDiff_ = calDiff_;
        if (((bitField0_ & 0x00000040) != 0)) {
          antDiff_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.antDiff_ = antDiff_;
        result.centerFreq_ = centerFreq_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult) {
          return mergeFrom((zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult other) {
        if (other == zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasStatus()) {
          mergeStatus(other.getStatus());
        }
        if (other.hasSegHeader()) {
          mergeSegHeader(other.getSegHeader());
        }
        if (other.hasBand()) {
          mergeBand(other.getBand());
        }
        if (other.hasPanoramaView()) {
          mergePanoramaView(other.getPanoramaView());
        }
        if (other.hasCloseshotView()) {
          mergeCloseshotView(other.getCloseshotView());
        }
        if (other.getCourseAngle() != 0D) {
          setCourseAngle(other.getCourseAngle());
        }
        if (targetDetectionBeforeBuilder_ == null) {
          if (!other.targetDetectionBefore_.isEmpty()) {
            if (targetDetectionBefore_.isEmpty()) {
              targetDetectionBefore_ = other.targetDetectionBefore_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTargetDetectionBeforeIsMutable();
              targetDetectionBefore_.addAll(other.targetDetectionBefore_);
            }
            onChanged();
          }
        } else {
          if (!other.targetDetectionBefore_.isEmpty()) {
            if (targetDetectionBeforeBuilder_.isEmpty()) {
              targetDetectionBeforeBuilder_.dispose();
              targetDetectionBeforeBuilder_ = null;
              targetDetectionBefore_ = other.targetDetectionBefore_;
              bitField0_ = (bitField0_ & ~0x00000001);
              targetDetectionBeforeBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTargetDetectionBeforeFieldBuilder() : null;
            } else {
              targetDetectionBeforeBuilder_.addAllMessages(other.targetDetectionBefore_);
            }
          }
        }
        if (targetDetectionBuilder_ == null) {
          if (!other.targetDetection_.isEmpty()) {
            if (targetDetection_.isEmpty()) {
              targetDetection_ = other.targetDetection_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTargetDetectionIsMutable();
              targetDetection_.addAll(other.targetDetection_);
            }
            onChanged();
          }
        } else {
          if (!other.targetDetection_.isEmpty()) {
            if (targetDetectionBuilder_.isEmpty()) {
              targetDetectionBuilder_.dispose();
              targetDetectionBuilder_ = null;
              targetDetection_ = other.targetDetection_;
              bitField0_ = (bitField0_ & ~0x00000002);
              targetDetectionBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTargetDetectionFieldBuilder() : null;
            } else {
              targetDetectionBuilder_.addAllMessages(other.targetDetection_);
            }
          }
        }
        if (!other.lOFrequencykHzs_.isEmpty()) {
          if (lOFrequencykHzs_.isEmpty()) {
            lOFrequencykHzs_ = other.lOFrequencykHzs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureLOFrequencykHzsIsMutable();
            lOFrequencykHzs_.addAll(other.lOFrequencykHzs_);
          }
          onChanged();
        }
        if (!other.scanIndexs_.isEmpty()) {
          if (scanIndexs_.isEmpty()) {
            scanIndexs_ = other.scanIndexs_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureScanIndexsIsMutable();
            scanIndexs_.addAll(other.scanIndexs_);
          }
          onChanged();
        }
        if (!other.targetIds_.isEmpty()) {
          if (targetIds_.isEmpty()) {
            targetIds_ = other.targetIds_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureTargetIdsIsMutable();
            targetIds_.addAll(other.targetIds_);
          }
          onChanged();
        }
        if (!other.calDiff_.isEmpty()) {
          if (calDiff_.isEmpty()) {
            calDiff_ = other.calDiff_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureCalDiffIsMutable();
            calDiff_.addAll(other.calDiff_);
          }
          onChanged();
        }
        if (!other.antDiff_.isEmpty()) {
          if (antDiff_.isEmpty()) {
            antDiff_ = other.antDiff_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureAntDiffIsMutable();
            antDiff_.addAll(other.antDiff_);
          }
          onChanged();
        }
        if (other.getCenterFreq() != 0D) {
          setCenterFreq(other.getCenterFreq());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.scenario.spectrum.Spectrum.Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return headerBuilder_ != null || header_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       * @return The header.
       */
      public zb.dcts.scenario.spectrum.Spectrum.Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder setHeader(zb.dcts.scenario.spectrum.Spectrum.Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder setHeader(
          zb.dcts.scenario.spectrum.Spectrum.Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder mergeHeader(zb.dcts.scenario.spectrum.Spectrum.Header value) {
        if (headerBuilder_ == null) {
          if (header_ != null) {
            header_ =
              zb.dcts.scenario.spectrum.Spectrum.Header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          header_ = null;
          headerBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.Header.Builder getHeaderBuilder() {
        
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private zb.dcts.source.kh.KhContext.OperationStatus status_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.OperationStatus, zb.dcts.source.kh.KhContext.OperationStatus.Builder, zb.dcts.source.kh.KhContext.OperationStatusOrBuilder> statusBuilder_;
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       * @return Whether the status field is set.
       */
      public boolean hasStatus() {
        return statusBuilder_ != null || status_ != null;
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       * @return The status.
       */
      public zb.dcts.source.kh.KhContext.OperationStatus getStatus() {
        if (statusBuilder_ == null) {
          return status_ == null ? zb.dcts.source.kh.KhContext.OperationStatus.getDefaultInstance() : status_;
        } else {
          return statusBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public Builder setStatus(zb.dcts.source.kh.KhContext.OperationStatus value) {
        if (statusBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          status_ = value;
          onChanged();
        } else {
          statusBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public Builder setStatus(
          zb.dcts.source.kh.KhContext.OperationStatus.Builder builderForValue) {
        if (statusBuilder_ == null) {
          status_ = builderForValue.build();
          onChanged();
        } else {
          statusBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public Builder mergeStatus(zb.dcts.source.kh.KhContext.OperationStatus value) {
        if (statusBuilder_ == null) {
          if (status_ != null) {
            status_ =
              zb.dcts.source.kh.KhContext.OperationStatus.newBuilder(status_).mergeFrom(value).buildPartial();
          } else {
            status_ = value;
          }
          onChanged();
        } else {
          statusBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public Builder clearStatus() {
        if (statusBuilder_ == null) {
          status_ = null;
          onChanged();
        } else {
          status_ = null;
          statusBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public zb.dcts.source.kh.KhContext.OperationStatus.Builder getStatusBuilder() {
        
        onChanged();
        return getStatusFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      public zb.dcts.source.kh.KhContext.OperationStatusOrBuilder getStatusOrBuilder() {
        if (statusBuilder_ != null) {
          return statusBuilder_.getMessageOrBuilder();
        } else {
          return status_ == null ?
              zb.dcts.source.kh.KhContext.OperationStatus.getDefaultInstance() : status_;
        }
      }
      /**
       * <pre>
       *任务状态
       * </pre>
       *
       * <code>.zb.dcts.source.kh.OperationStatus status = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.OperationStatus, zb.dcts.source.kh.KhContext.OperationStatus.Builder, zb.dcts.source.kh.KhContext.OperationStatusOrBuilder> 
          getStatusFieldBuilder() {
        if (statusBuilder_ == null) {
          statusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.kh.KhContext.OperationStatus, zb.dcts.source.kh.KhContext.OperationStatus.Builder, zb.dcts.source.kh.KhContext.OperationStatusOrBuilder>(
                  getStatus(),
                  getParentForChildren(),
                  isClean());
          status_ = null;
        }
        return statusBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.SegmentHeader segHeader_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder> segHeaderBuilder_;
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       * @return Whether the segHeader field is set.
       */
      public boolean hasSegHeader() {
        return segHeaderBuilder_ != null || segHeader_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       * @return The segHeader.
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader() {
        if (segHeaderBuilder_ == null) {
          return segHeader_ == null ? zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
        } else {
          return segHeaderBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder setSegHeader(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader value) {
        if (segHeaderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          segHeader_ = value;
          onChanged();
        } else {
          segHeaderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder setSegHeader(
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder builderForValue) {
        if (segHeaderBuilder_ == null) {
          segHeader_ = builderForValue.build();
          onChanged();
        } else {
          segHeaderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder mergeSegHeader(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader value) {
        if (segHeaderBuilder_ == null) {
          if (segHeader_ != null) {
            segHeader_ =
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.newBuilder(segHeader_).mergeFrom(value).buildPartial();
          } else {
            segHeader_ = value;
          }
          onChanged();
        } else {
          segHeaderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder clearSegHeader() {
        if (segHeaderBuilder_ == null) {
          segHeader_ = null;
          onChanged();
        } else {
          segHeader_ = null;
          segHeaderBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder getSegHeaderBuilder() {
        
        onChanged();
        return getSegHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder() {
        if (segHeaderBuilder_ != null) {
          return segHeaderBuilder_.getMessageOrBuilder();
        } else {
          return segHeader_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder> 
          getSegHeaderFieldBuilder() {
        if (segHeaderBuilder_ == null) {
          segHeaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder>(
                  getSegHeader(),
                  getParentForChildren(),
                  isClean());
          segHeader_ = null;
        }
        return segHeaderBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.FrequencyBand band_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder> bandBuilder_;
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       * @return Whether the band field is set.
       */
      public boolean hasBand() {
        return bandBuilder_ != null || band_ != null;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       * @return The band.
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand() {
        if (bandBuilder_ == null) {
          return band_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
        } else {
          return bandBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder setBand(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand value) {
        if (bandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          band_ = value;
          onChanged();
        } else {
          bandBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder setBand(
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder builderForValue) {
        if (bandBuilder_ == null) {
          band_ = builderForValue.build();
          onChanged();
        } else {
          bandBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder mergeBand(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand value) {
        if (bandBuilder_ == null) {
          if (band_ != null) {
            band_ =
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.newBuilder(band_).mergeFrom(value).buildPartial();
          } else {
            band_ = value;
          }
          onChanged();
        } else {
          bandBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder clearBand() {
        if (bandBuilder_ == null) {
          band_ = null;
          onChanged();
        } else {
          band_ = null;
          bandBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder getBandBuilder() {
        
        onChanged();
        return getBandFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder() {
        if (bandBuilder_ != null) {
          return bandBuilder_.getMessageOrBuilder();
        } else {
          return band_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
        }
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder> 
          getBandFieldBuilder() {
        if (bandBuilder_ == null) {
          bandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder>(
                  getBand(),
                  getParentForChildren(),
                  isClean());
          band_ = null;
        }
        return bandBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.View panoramaView_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder> panoramaViewBuilder_;
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       * @return Whether the panoramaView field is set.
       */
      public boolean hasPanoramaView() {
        return panoramaViewBuilder_ != null || panoramaView_ != null;
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       * @return The panoramaView.
       */
      public zb.dcts.scenario.spectrum.Spectrum.View getPanoramaView() {
        if (panoramaViewBuilder_ == null) {
          return panoramaView_ == null ? zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : panoramaView_;
        } else {
          return panoramaViewBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public Builder setPanoramaView(zb.dcts.scenario.spectrum.Spectrum.View value) {
        if (panoramaViewBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          panoramaView_ = value;
          onChanged();
        } else {
          panoramaViewBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public Builder setPanoramaView(
          zb.dcts.scenario.spectrum.Spectrum.View.Builder builderForValue) {
        if (panoramaViewBuilder_ == null) {
          panoramaView_ = builderForValue.build();
          onChanged();
        } else {
          panoramaViewBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public Builder mergePanoramaView(zb.dcts.scenario.spectrum.Spectrum.View value) {
        if (panoramaViewBuilder_ == null) {
          if (panoramaView_ != null) {
            panoramaView_ =
              zb.dcts.scenario.spectrum.Spectrum.View.newBuilder(panoramaView_).mergeFrom(value).buildPartial();
          } else {
            panoramaView_ = value;
          }
          onChanged();
        } else {
          panoramaViewBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public Builder clearPanoramaView() {
        if (panoramaViewBuilder_ == null) {
          panoramaView_ = null;
          onChanged();
        } else {
          panoramaView_ = null;
          panoramaViewBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.View.Builder getPanoramaViewBuilder() {
        
        onChanged();
        return getPanoramaViewFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getPanoramaViewOrBuilder() {
        if (panoramaViewBuilder_ != null) {
          return panoramaViewBuilder_.getMessageOrBuilder();
        } else {
          return panoramaView_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : panoramaView_;
        }
      }
      /**
       * <pre>
       *全景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View panorama_view = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder> 
          getPanoramaViewFieldBuilder() {
        if (panoramaViewBuilder_ == null) {
          panoramaViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder>(
                  getPanoramaView(),
                  getParentForChildren(),
                  isClean());
          panoramaView_ = null;
        }
        return panoramaViewBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.View closeshotView_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder> closeshotViewBuilder_;
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       * @return Whether the closeshotView field is set.
       */
      public boolean hasCloseshotView() {
        return closeshotViewBuilder_ != null || closeshotView_ != null;
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       * @return The closeshotView.
       */
      public zb.dcts.scenario.spectrum.Spectrum.View getCloseshotView() {
        if (closeshotViewBuilder_ == null) {
          return closeshotView_ == null ? zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : closeshotView_;
        } else {
          return closeshotViewBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public Builder setCloseshotView(zb.dcts.scenario.spectrum.Spectrum.View value) {
        if (closeshotViewBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          closeshotView_ = value;
          onChanged();
        } else {
          closeshotViewBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public Builder setCloseshotView(
          zb.dcts.scenario.spectrum.Spectrum.View.Builder builderForValue) {
        if (closeshotViewBuilder_ == null) {
          closeshotView_ = builderForValue.build();
          onChanged();
        } else {
          closeshotViewBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public Builder mergeCloseshotView(zb.dcts.scenario.spectrum.Spectrum.View value) {
        if (closeshotViewBuilder_ == null) {
          if (closeshotView_ != null) {
            closeshotView_ =
              zb.dcts.scenario.spectrum.Spectrum.View.newBuilder(closeshotView_).mergeFrom(value).buildPartial();
          } else {
            closeshotView_ = value;
          }
          onChanged();
        } else {
          closeshotViewBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public Builder clearCloseshotView() {
        if (closeshotViewBuilder_ == null) {
          closeshotView_ = null;
          onChanged();
        } else {
          closeshotView_ = null;
          closeshotViewBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.View.Builder getCloseshotViewBuilder() {
        
        onChanged();
        return getCloseshotViewFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder getCloseshotViewOrBuilder() {
        if (closeshotViewBuilder_ != null) {
          return closeshotViewBuilder_.getMessageOrBuilder();
        } else {
          return closeshotView_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.View.getDefaultInstance() : closeshotView_;
        }
      }
      /**
       * <pre>
       *近景视角的数据
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.View closeshot_view = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder> 
          getCloseshotViewFieldBuilder() {
        if (closeshotViewBuilder_ == null) {
          closeshotViewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.View, zb.dcts.scenario.spectrum.Spectrum.View.Builder, zb.dcts.scenario.spectrum.Spectrum.ViewOrBuilder>(
                  getCloseshotView(),
                  getParentForChildren(),
                  isClean());
          closeshotView_ = null;
        }
        return closeshotViewBuilder_;
      }

      private double courseAngle_ ;
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double courseAngle = 8;</code>
       * @return The courseAngle.
       */
      @java.lang.Override
      public double getCourseAngle() {
        return courseAngle_;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double courseAngle = 8;</code>
       * @param value The courseAngle to set.
       * @return This builder for chaining.
       */
      public Builder setCourseAngle(double value) {
        
        courseAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *航向角
       * </pre>
       *
       * <code>double courseAngle = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearCourseAngle() {
        
        courseAngle_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> targetDetectionBefore_ =
        java.util.Collections.emptyList();
      private void ensureTargetDetectionBeforeIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          targetDetectionBefore_ = new java.util.ArrayList<zb.dcts.source.kh.KhContext.TargetDirection>(targetDetectionBefore_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> targetDetectionBeforeBuilder_;

      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> getTargetDetectionBeforeList() {
        if (targetDetectionBeforeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(targetDetectionBefore_);
        } else {
          return targetDetectionBeforeBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public int getTargetDetectionBeforeCount() {
        if (targetDetectionBeforeBuilder_ == null) {
          return targetDetectionBefore_.size();
        } else {
          return targetDetectionBeforeBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection getTargetDetectionBefore(int index) {
        if (targetDetectionBeforeBuilder_ == null) {
          return targetDetectionBefore_.get(index);
        } else {
          return targetDetectionBeforeBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder setTargetDetectionBefore(
          int index, zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBeforeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.set(index, value);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder setTargetDetectionBefore(
          int index, zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBeforeBuilder_ == null) {
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.set(index, builderForValue.build());
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder addTargetDetectionBefore(zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBeforeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.add(value);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder addTargetDetectionBefore(
          int index, zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBeforeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.add(index, value);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder addTargetDetectionBefore(
          zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBeforeBuilder_ == null) {
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.add(builderForValue.build());
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder addTargetDetectionBefore(
          int index, zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBeforeBuilder_ == null) {
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.add(index, builderForValue.build());
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder addAllTargetDetectionBefore(
          java.lang.Iterable<? extends zb.dcts.source.kh.KhContext.TargetDirection> values) {
        if (targetDetectionBeforeBuilder_ == null) {
          ensureTargetDetectionBeforeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, targetDetectionBefore_);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder clearTargetDetectionBefore() {
        if (targetDetectionBeforeBuilder_ == null) {
          targetDetectionBefore_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public Builder removeTargetDetectionBefore(int index) {
        if (targetDetectionBeforeBuilder_ == null) {
          ensureTargetDetectionBeforeIsMutable();
          targetDetectionBefore_.remove(index);
          onChanged();
        } else {
          targetDetectionBeforeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder getTargetDetectionBeforeBuilder(
          int index) {
        return getTargetDetectionBeforeFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionBeforeOrBuilder(
          int index) {
        if (targetDetectionBeforeBuilder_ == null) {
          return targetDetectionBefore_.get(index);  } else {
          return targetDetectionBeforeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
           getTargetDetectionBeforeOrBuilderList() {
        if (targetDetectionBeforeBuilder_ != null) {
          return targetDetectionBeforeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(targetDetectionBefore_);
        }
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder addTargetDetectionBeforeBuilder() {
        return getTargetDetectionBeforeFieldBuilder().addBuilder(
            zb.dcts.source.kh.KhContext.TargetDirection.getDefaultInstance());
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder addTargetDetectionBeforeBuilder(
          int index) {
        return getTargetDetectionBeforeFieldBuilder().addBuilder(
            index, zb.dcts.source.kh.KhContext.TargetDirection.getDefaultInstance());
      }
      /**
       * <pre>
       *以下几个结果对单点测向只有一个值。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection_before = 9;</code>
       */
      public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection.Builder> 
           getTargetDetectionBeforeBuilderList() {
        return getTargetDetectionBeforeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
          getTargetDetectionBeforeFieldBuilder() {
        if (targetDetectionBeforeBuilder_ == null) {
          targetDetectionBeforeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder>(
                  targetDetectionBefore_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          targetDetectionBefore_ = null;
        }
        return targetDetectionBeforeBuilder_;
      }

      private java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> targetDetection_ =
        java.util.Collections.emptyList();
      private void ensureTargetDetectionIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          targetDetection_ = new java.util.ArrayList<zb.dcts.source.kh.KhContext.TargetDirection>(targetDetection_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> targetDetectionBuilder_;

      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection> getTargetDetectionList() {
        if (targetDetectionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(targetDetection_);
        } else {
          return targetDetectionBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public int getTargetDetectionCount() {
        if (targetDetectionBuilder_ == null) {
          return targetDetection_.size();
        } else {
          return targetDetectionBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection getTargetDetection(int index) {
        if (targetDetectionBuilder_ == null) {
          return targetDetection_.get(index);
        } else {
          return targetDetectionBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder setTargetDetection(
          int index, zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionIsMutable();
          targetDetection_.set(index, value);
          onChanged();
        } else {
          targetDetectionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder setTargetDetection(
          int index, zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBuilder_ == null) {
          ensureTargetDetectionIsMutable();
          targetDetection_.set(index, builderForValue.build());
          onChanged();
        } else {
          targetDetectionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder addTargetDetection(zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionIsMutable();
          targetDetection_.add(value);
          onChanged();
        } else {
          targetDetectionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder addTargetDetection(
          int index, zb.dcts.source.kh.KhContext.TargetDirection value) {
        if (targetDetectionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTargetDetectionIsMutable();
          targetDetection_.add(index, value);
          onChanged();
        } else {
          targetDetectionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder addTargetDetection(
          zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBuilder_ == null) {
          ensureTargetDetectionIsMutable();
          targetDetection_.add(builderForValue.build());
          onChanged();
        } else {
          targetDetectionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder addTargetDetection(
          int index, zb.dcts.source.kh.KhContext.TargetDirection.Builder builderForValue) {
        if (targetDetectionBuilder_ == null) {
          ensureTargetDetectionIsMutable();
          targetDetection_.add(index, builderForValue.build());
          onChanged();
        } else {
          targetDetectionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder addAllTargetDetection(
          java.lang.Iterable<? extends zb.dcts.source.kh.KhContext.TargetDirection> values) {
        if (targetDetectionBuilder_ == null) {
          ensureTargetDetectionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, targetDetection_);
          onChanged();
        } else {
          targetDetectionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder clearTargetDetection() {
        if (targetDetectionBuilder_ == null) {
          targetDetection_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          targetDetectionBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public Builder removeTargetDetection(int index) {
        if (targetDetectionBuilder_ == null) {
          ensureTargetDetectionIsMutable();
          targetDetection_.remove(index);
          onChanged();
        } else {
          targetDetectionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder getTargetDetectionBuilder(
          int index) {
        return getTargetDetectionFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder getTargetDetectionOrBuilder(
          int index) {
        if (targetDetectionBuilder_ == null) {
          return targetDetection_.get(index);  } else {
          return targetDetectionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public java.util.List<? extends zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
           getTargetDetectionOrBuilderList() {
        if (targetDetectionBuilder_ != null) {
          return targetDetectionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(targetDetection_);
        }
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder addTargetDetectionBuilder() {
        return getTargetDetectionFieldBuilder().addBuilder(
            zb.dcts.source.kh.KhContext.TargetDirection.getDefaultInstance());
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public zb.dcts.source.kh.KhContext.TargetDirection.Builder addTargetDetectionBuilder(
          int index) {
        return getTargetDetectionFieldBuilder().addBuilder(
            index, zb.dcts.source.kh.KhContext.TargetDirection.getDefaultInstance());
      }
      /**
       * <pre>
       *解耦后目标方位。
       * </pre>
       *
       * <code>repeated .zb.dcts.source.kh.TargetDirection target_detection = 10;</code>
       */
      public java.util.List<zb.dcts.source.kh.KhContext.TargetDirection.Builder> 
           getTargetDetectionBuilderList() {
        return getTargetDetectionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder> 
          getTargetDetectionFieldBuilder() {
        if (targetDetectionBuilder_ == null) {
          targetDetectionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              zb.dcts.source.kh.KhContext.TargetDirection, zb.dcts.source.kh.KhContext.TargetDirection.Builder, zb.dcts.source.kh.KhContext.TargetDirectionOrBuilder>(
                  targetDetection_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          targetDetection_ = null;
        }
        return targetDetectionBuilder_;
      }

      private com.google.protobuf.Internal.IntList lOFrequencykHzs_ = emptyIntList();
      private void ensureLOFrequencykHzsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          lOFrequencykHzs_ = mutableCopy(lOFrequencykHzs_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @return A list containing the lOFrequencykHzs.
       */
      public java.util.List<java.lang.Integer>
          getLOFrequencykHzsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(lOFrequencykHzs_) : lOFrequencykHzs_;
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @return The count of lOFrequencykHzs.
       */
      public int getLOFrequencykHzsCount() {
        return lOFrequencykHzs_.size();
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @param index The index of the element to return.
       * @return The lOFrequencykHzs at the given index.
       */
      public int getLOFrequencykHzs(int index) {
        return lOFrequencykHzs_.getInt(index);
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @param index The index to set the value at.
       * @param value The lOFrequencykHzs to set.
       * @return This builder for chaining.
       */
      public Builder setLOFrequencykHzs(
          int index, int value) {
        ensureLOFrequencykHzsIsMutable();
        lOFrequencykHzs_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @param value The lOFrequencykHzs to add.
       * @return This builder for chaining.
       */
      public Builder addLOFrequencykHzs(int value) {
        ensureLOFrequencykHzsIsMutable();
        lOFrequencykHzs_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @param values The lOFrequencykHzs to add.
       * @return This builder for chaining.
       */
      public Builder addAllLOFrequencykHzs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLOFrequencykHzsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, lOFrequencykHzs_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 LOFrequencykHzs = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearLOFrequencykHzs() {
        lOFrequencykHzs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList scanIndexs_ = emptyIntList();
      private void ensureScanIndexsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          scanIndexs_ = mutableCopy(scanIndexs_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @return A list containing the scanIndexs.
       */
      public java.util.List<java.lang.Integer>
          getScanIndexsList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(scanIndexs_) : scanIndexs_;
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @return The count of scanIndexs.
       */
      public int getScanIndexsCount() {
        return scanIndexs_.size();
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @param index The index of the element to return.
       * @return The scanIndexs at the given index.
       */
      public int getScanIndexs(int index) {
        return scanIndexs_.getInt(index);
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @param index The index to set the value at.
       * @param value The scanIndexs to set.
       * @return This builder for chaining.
       */
      public Builder setScanIndexs(
          int index, int value) {
        ensureScanIndexsIsMutable();
        scanIndexs_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @param value The scanIndexs to add.
       * @return This builder for chaining.
       */
      public Builder addScanIndexs(int value) {
        ensureScanIndexsIsMutable();
        scanIndexs_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @param values The scanIndexs to add.
       * @return This builder for chaining.
       */
      public Builder addAllScanIndexs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureScanIndexsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, scanIndexs_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 scanIndexs = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearScanIndexs() {
        scanIndexs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList targetIds_ = emptyIntList();
      private void ensureTargetIdsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          targetIds_ = mutableCopy(targetIds_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @return A list containing the targetIds.
       */
      public java.util.List<java.lang.Integer>
          getTargetIdsList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(targetIds_) : targetIds_;
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @return The count of targetIds.
       */
      public int getTargetIdsCount() {
        return targetIds_.size();
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @param index The index of the element to return.
       * @return The targetIds at the given index.
       */
      public int getTargetIds(int index) {
        return targetIds_.getInt(index);
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @param index The index to set the value at.
       * @param value The targetIds to set.
       * @return This builder for chaining.
       */
      public Builder setTargetIds(
          int index, int value) {
        ensureTargetIdsIsMutable();
        targetIds_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @param value The targetIds to add.
       * @return This builder for chaining.
       */
      public Builder addTargetIds(int value) {
        ensureTargetIdsIsMutable();
        targetIds_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @param values The targetIds to add.
       * @return This builder for chaining.
       */
      public Builder addAllTargetIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTargetIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, targetIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 target_ids = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearTargetIds() {
        targetIds_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList calDiff_ = emptyFloatList();
      private void ensureCalDiffIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          calDiff_ = mutableCopy(calDiff_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @return A list containing the calDiff.
       */
      public java.util.List<java.lang.Float>
          getCalDiffList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(calDiff_) : calDiff_;
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @return The count of calDiff.
       */
      public int getCalDiffCount() {
        return calDiff_.size();
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @param index The index of the element to return.
       * @return The calDiff at the given index.
       */
      public float getCalDiff(int index) {
        return calDiff_.getFloat(index);
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @param index The index to set the value at.
       * @param value The calDiff to set.
       * @return This builder for chaining.
       */
      public Builder setCalDiff(
          int index, float value) {
        ensureCalDiffIsMutable();
        calDiff_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @param value The calDiff to add.
       * @return This builder for chaining.
       */
      public Builder addCalDiff(float value) {
        ensureCalDiffIsMutable();
        calDiff_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @param values The calDiff to add.
       * @return This builder for chaining.
       */
      public Builder addAllCalDiff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureCalDiffIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, calDiff_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *以下几个结果用于标校
       * </pre>
       *
       * <code>repeated float cal_diff = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearCalDiff() {
        calDiff_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList antDiff_ = emptyFloatList();
      private void ensureAntDiffIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          antDiff_ = mutableCopy(antDiff_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @return A list containing the antDiff.
       */
      public java.util.List<java.lang.Float>
          getAntDiffList() {
        return ((bitField0_ & 0x00000040) != 0) ?
                 java.util.Collections.unmodifiableList(antDiff_) : antDiff_;
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @return The count of antDiff.
       */
      public int getAntDiffCount() {
        return antDiff_.size();
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @param index The index of the element to return.
       * @return The antDiff at the given index.
       */
      public float getAntDiff(int index) {
        return antDiff_.getFloat(index);
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @param index The index to set the value at.
       * @param value The antDiff to set.
       * @return This builder for chaining.
       */
      public Builder setAntDiff(
          int index, float value) {
        ensureAntDiffIsMutable();
        antDiff_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @param value The antDiff to add.
       * @return This builder for chaining.
       */
      public Builder addAntDiff(float value) {
        ensureAntDiffIsMutable();
        antDiff_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @param values The antDiff to add.
       * @return This builder for chaining.
       */
      public Builder addAllAntDiff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAntDiffIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, antDiff_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *8个天线信号相位差+10个幅度值
       * </pre>
       *
       * <code>repeated float ant_diff = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearAntDiff() {
        antDiff_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private double centerFreq_ ;
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 16;</code>
       * @return The centerFreq.
       */
      @java.lang.Override
      public double getCenterFreq() {
        return centerFreq_;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 16;</code>
       * @param value The centerFreq to set.
       * @return This builder for chaining.
       */
      public Builder setCenterFreq(double value) {
        
        centerFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double center_freq = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearCenterFreq() {
        
        centerFreq_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commDirection.CommDirectionResult)
    private static final zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult();
    }

    public static zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommDirectionResult>
        PARSER = new com.google.protobuf.AbstractParser<CommDirectionResult>() {
      @java.lang.Override
      public CommDirectionResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CommDirectionResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CommDirectionResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommDirectionResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commDirection.KhCommDirectionAcq.CommDirectionResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n$scenario/kh/KhCommDirectionAcq.proto\022!" +
      "zb.dcts.scenario.kh.commDirection\032\023sourc" +
      "e/source.proto\032\031source/kh/KhContext.prot" +
      "o\032\027scenario/scenario.proto\032\027scenario/spe" +
      "ctrum.proto\"\304\001\n\026CommDirectionAcqSource\022$" +
      "\n\002id\030\001 \001(\0132\030.zb.dcts.source.SourceId\022U\n\006" +
      "params\030\006 \003(\0132E.zb.dcts.scenario.kh.commD" +
      "irection.CommDirectionAcqSource.ParamsEn" +
      "try\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value" +
      "\030\002 \001(\t:\0028\001\"\327\006\n\025CommDirectionAcqParam\022>\n\004" +
      "mode\030\001 \001(\01620.zb.dcts.scenario.kh.commDir" +
      "ection.DirectionMode\022;\n\tfreq_span\030\002 \001(\0132" +
      "(.zb.dcts.scenario.spectrum.FrequencySpa" +
      "n\022\013\n\003rbw\030\004 \001(\001\022\024\n\014df_bandwidth\030\005 \001(\001\0222\n\013" +
      "detect_mode\030\006 \001(\0162\035.zb.dcts.source.kh.De" +
      "tectMode\0224\n\014channel_mode\030\007 \001(\0162\036.zb.dcts" +
      ".source.kh.ChannelMode\022\030\n\020attenuation_ga" +
      "in\030\010 \001(\001\022;\n\014antenna_mode\030\t \001(\0162%.zb.dcts" +
      ".source.kh.AntennaControlMode\0223\n\007gc_mode" +
      "\030\n \001(\0162\".zb.dcts.source.kh.GainControlMo" +
      "de\0227\n\ngain_param\030\013 \001(\0132#.zb.dcts.source." +
      "kh.GainControlParam\022J\n\016threshold_mode\030\014 " +
      "\001(\01622.zb.dcts.scenario.kh.commDirection." +
      "DFThresholdMode\022\027\n\017threshold_value\030\r \001(\005" +
      "\022\022\n\noutput_pow\030\016 \001(\005\0223\n\nwin_params\030\017 \001(\013" +
      "2\037.zb.dcts.source.kh.WindowParams\022\024\n\014ave" +
      "rage_time\030\020 \001(\005\022\020\n\010rf_limit\030\021 \001(\001\022\023\n\013sea" +
      "rch_step\030\022 \001(\001\022\026\n\016residence_time\030\023 \001(\005\022\027" +
      "\n\017sample_interval\030\024 \001(\005\022\027\n\017result_interv" +
      "al\030\025 \001(\005\022\027\n\017expected_points\030\026 \001(\005\022\017\n\007ant" +
      "enna\030\027 \001(\005\022\020\n\010df_times\030\030 \001(\005\"\363\001\n\026Directi" +
      "onChangeRequest\0221\n\007task_id\030\001 \001(\0132 .zb.dc" +
      "ts.scenario.ScenarioTaskId\022B\n\013param_inde" +
      "x\030\002 \001(\0162-.zb.dcts.scenario.kh.commDirect" +
      "ion.ParamIndex\022M\n\013task_params\030\003 \001(\01328.zb" +
      ".dcts.scenario.kh.commDirection.CommDire" +
      "ctionAcqParam\022\023\n\013center_freq\030\004 \001(\001\"\365\004\n\023C" +
      "ommDirectionResult\0221\n\006header\030\001 \001(\0132!.zb." +
      "dcts.scenario.spectrum.Header\0222\n\006status\030" +
      "\002 \001(\0132\".zb.dcts.source.kh.OperationStatu" +
      "s\022<\n\nseg_header\030\004 \001(\0132(.zb.dcts.scenario" +
      ".spectrum.SegmentHeader\0226\n\004band\030\005 \001(\0132(." +
      "zb.dcts.scenario.spectrum.FrequencyBand\022" +
      "6\n\rpanorama_view\030\006 \001(\0132\037.zb.dcts.scenari" +
      "o.spectrum.View\0227\n\016closeshot_view\030\007 \001(\0132" +
      "\037.zb.dcts.scenario.spectrum.View\022\023\n\013cour" +
      "seAngle\030\010 \001(\001\022C\n\027target_detection_before" +
      "\030\t \003(\0132\".zb.dcts.source.kh.TargetDirecti" +
      "on\022<\n\020target_detection\030\n \003(\0132\".zb.dcts.s" +
      "ource.kh.TargetDirection\022\027\n\017LOFrequencyk" +
      "Hzs\030\013 \003(\r\022\022\n\nscanIndexs\030\014 \003(\r\022\022\n\ntarget_" +
      "ids\030\r \003(\r\022\020\n\010cal_diff\030\016 \003(\002\022\020\n\010ant_diff\030" +
      "\017 \003(\002\022\023\n\013center_freq\030\020 \001(\001*?\n\rDirectionM" +
      "ode\022\n\n\006SINGLE\020\000\022\014\n\010MULTIPLE\020\001\022\010\n\004SCAN\020\002\022" +
      "\n\n\006SEARCH\020\003*3\n\017DFThresholdMode\022\010\n\004AUTO\020\000" +
      "\022\n\n\006MANUAL\020\001\022\n\n\006NORMAL\020\002*\251\001\n\nParamIndex\022" +
      "\023\n\017THRESHOLD_VALUE\020\000\022\022\n\016THRESHOLD_MODE\020\001" +
      "\022\020\n\014AVERAGE_TIME\020\002\022\017\n\013CENTER_FREQ\020\003\022\020\n\014A" +
      "NTENNA_MODE\020\004\022\020\n\014CHANNEL_MODE\020\005\022\r\n\tGIAN_" +
      "MODE\020\006\022\014\n\010ATT_GAIN\020\007\022\016\n\nGAIN_PARAM\020\010b\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          zb.dcts.source.Source.getDescriptor(),
          zb.dcts.source.kh.KhContext.getDescriptor(),
          zb.dcts.scenario.Scenario.getDescriptor(),
          zb.dcts.scenario.spectrum.Spectrum.getDescriptor(),
        });
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor,
        new java.lang.String[] { "Id", "Params", });
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_descriptor =
      internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_descriptor.getNestedTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqSource_ParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionAcqParam_descriptor,
        new java.lang.String[] { "Mode", "FreqSpan", "Rbw", "DfBandwidth", "DetectMode", "ChannelMode", "AttenuationGain", "AntennaMode", "GcMode", "GainParam", "ThresholdMode", "ThresholdValue", "OutputPow", "WinParams", "AverageTime", "RfLimit", "SearchStep", "ResidenceTime", "SampleInterval", "ResultInterval", "ExpectedPoints", "Antenna", "DfTimes", });
    internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commDirection_DirectionChangeRequest_descriptor,
        new java.lang.String[] { "TaskId", "ParamIndex", "TaskParams", "CenterFreq", });
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commDirection_CommDirectionResult_descriptor,
        new java.lang.String[] { "Header", "Status", "SegHeader", "Band", "PanoramaView", "CloseshotView", "CourseAngle", "TargetDetectionBefore", "TargetDetection", "LOFrequencykHzs", "ScanIndexs", "TargetIds", "CalDiff", "AntDiff", "CenterFreq", });
    zb.dcts.source.Source.getDescriptor();
    zb.dcts.source.kh.KhContext.getDescriptor();
    zb.dcts.scenario.Scenario.getDescriptor();
    zb.dcts.scenario.spectrum.Spectrum.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
