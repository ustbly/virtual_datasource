// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhSpectrumAcq.proto

package zb.dcts.scenario.kh.commSpectrum;

public final class KhSpectrumAcq {
  private KhSpectrumAcq() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code zb.dcts.scenario.kh.commSpectrum.RunMode}
   */
  public enum RunMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *实时模式，无间隔传输数据，带宽可选，分辨率联动，点数有上限。
     * </pre>
     *
     * <code>REALTIME = 0;</code>
     */
    REALTIME(0),
    /**
     * <pre>
     *全景扫频模式，大带宽，本振移动，点数带宽无限制。
     * </pre>
     *
     * <code>SWEEP = 1;</code>
     */
    SWEEP(1),
    /**
     * <pre>
     *无缝频谱（跳频）。
     * </pre>
     *
     * <code>SEAMLESS = 2;</code>
     */
    SEAMLESS(2),
    /**
     * <pre>
     *硬件全景扫频模式，由硬件完成扫频过程，并检波。(桂林项目和空工大三期项目全景使用这种方式)
     * </pre>
     *
     * <code>HSCAN = 3;</code>
     */
    HSCAN(3),
    /**
     * <pre>
     *频段扫描模式。
     * </pre>
     *
     * <code>SEARCH = 4;</code>
     */
    SEARCH(4),
    /**
     * <pre>
     *离散扫描模式。给出频点列表。
     * </pre>
     *
     * <code>DISCRETE = 5;</code>
     */
    DISCRETE(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *实时模式，无间隔传输数据，带宽可选，分辨率联动，点数有上限。
     * </pre>
     *
     * <code>REALTIME = 0;</code>
     */
    public static final int REALTIME_VALUE = 0;
    /**
     * <pre>
     *全景扫频模式，大带宽，本振移动，点数带宽无限制。
     * </pre>
     *
     * <code>SWEEP = 1;</code>
     */
    public static final int SWEEP_VALUE = 1;
    /**
     * <pre>
     *无缝频谱（跳频）。
     * </pre>
     *
     * <code>SEAMLESS = 2;</code>
     */
    public static final int SEAMLESS_VALUE = 2;
    /**
     * <pre>
     *硬件全景扫频模式，由硬件完成扫频过程，并检波。(桂林项目和空工大三期项目全景使用这种方式)
     * </pre>
     *
     * <code>HSCAN = 3;</code>
     */
    public static final int HSCAN_VALUE = 3;
    /**
     * <pre>
     *频段扫描模式。
     * </pre>
     *
     * <code>SEARCH = 4;</code>
     */
    public static final int SEARCH_VALUE = 4;
    /**
     * <pre>
     *离散扫描模式。给出频点列表。
     * </pre>
     *
     * <code>DISCRETE = 5;</code>
     */
    public static final int DISCRETE_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RunMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RunMode forNumber(int value) {
      switch (value) {
        case 0: return REALTIME;
        case 1: return SWEEP;
        case 2: return SEAMLESS;
        case 3: return HSCAN;
        case 4: return SEARCH;
        case 5: return DISCRETE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RunMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RunMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RunMode>() {
            public RunMode findValueByNumber(int number) {
              return RunMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.getDescriptor().getEnumTypes().get(0);
    }

    private static final RunMode[] VALUES = values();

    public static RunMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RunMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.scenario.kh.commSpectrum.RunMode)
  }

  public interface SpectrumAcqSourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return The id.
     */
    zb.dcts.source.Source.SourceId getId();
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     */
    zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder();

    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    int getParamsCount();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    boolean containsParams(
        java.lang.String key);
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getParams();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getParamsMap();
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    java.lang.String getParamsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource}
   */
  public static final class SpectrumAcqSource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
      SpectrumAcqSourceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpectrumAcqSource.newBuilder() to construct.
    private SpectrumAcqSource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpectrumAcqSource() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpectrumAcqSource();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SpectrumAcqSource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.source.Source.SourceId.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(zb.dcts.source.Source.SourceId.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                params_ = com.google.protobuf.MapField.newMapField(
                    ParamsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              params__ = input.readMessage(
                  ParamsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              params_.getMutableMap().put(
                  params__.getKey(), params__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetParams();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private zb.dcts.source.Source.SourceId id_;
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public zb.dcts.source.Source.SourceId getId() {
      return id_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
    }
    /**
     * <code>.zb.dcts.source.SourceId id = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int PARAMS_FIELD_NUMBER = 6;
    private static final class ParamsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> params_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetParams() {
      if (params_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParamsDefaultEntryHolder.defaultEntry);
      }
      return params_;
    }

    public int getParamsCount() {
      return internalGetParams().getMap().size();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */

    @java.lang.Override
    public boolean containsParams(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParams().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParamsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParams() {
      return getParamsMap();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
      return internalGetParams().getMap();
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *其它可选参数，例如文件路径或网络地址等
     * </pre>
     *
     * <code>map&lt;string, string&gt; params = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParamsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParams().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetParams(),
          ParamsDefaultEntryHolder.defaultEntry,
          6);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParams().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        params__ = ParamsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, params__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource other = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (!internalGetParams().equals(
          other.internalGetParams())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (!internalGetParams().getMap().isEmpty()) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetParams().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableParams();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        internalGetMutableParams().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource build() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource buildPartial() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource result = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource(this);
        int from_bitField0_ = bitField0_;
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        result.params_ = internalGetParams();
        result.params_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource) {
          return mergeFrom((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource other) {
        if (other == zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        internalGetMutableParams().mergeFrom(
            other.internalGetParams());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.source.Source.SourceId id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> idBuilder_;
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       * @return The id.
       */
      public zb.dcts.source.Source.SourceId getId() {
        if (idBuilder_ == null) {
          return id_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder setId(zb.dcts.source.Source.SourceId value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder setId(
          zb.dcts.source.Source.SourceId.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder mergeId(zb.dcts.source.Source.SourceId value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              zb.dcts.source.Source.SourceId.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public zb.dcts.source.Source.SourceId.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      public zb.dcts.source.Source.SourceIdOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              zb.dcts.source.Source.SourceId.getDefaultInstance() : id_;
        }
      }
      /**
       * <code>.zb.dcts.source.SourceId id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> params_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetParams() {
        if (params_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        return params_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableParams() {
        onChanged();;
        if (params_ == null) {
          params_ = com.google.protobuf.MapField.newMapField(
              ParamsDefaultEntryHolder.defaultEntry);
        }
        if (!params_.isMutable()) {
          params_ = params_.copy();
        }
        return params_;
      }

      public int getParamsCount() {
        return internalGetParams().getMap().size();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      @java.lang.Override
      public boolean containsParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetParams().getMap().containsKey(key);
      }
      /**
       * Use {@link #getParamsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getParams() {
        return getParamsMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getParamsMap() {
        return internalGetParams().getMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      @java.lang.Override

      public java.lang.String getParamsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetParams().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearParams() {
        internalGetMutableParams().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder removeParams(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableParams() {
        return internalGetMutableParams().getMutableMap();
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */
      public Builder putParams(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableParams().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *其它可选参数，例如文件路径或网络地址等
       * </pre>
       *
       * <code>map&lt;string, string&gt; params = 6;</code>
       */

      public Builder putAllParams(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableParams().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqSource)
    private static final zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource();
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SpectrumAcqSource>
        PARSER = new com.google.protobuf.AbstractParser<SpectrumAcqSource>() {
      @java.lang.Override
      public SpectrumAcqSource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpectrumAcqSource(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SpectrumAcqSource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpectrumAcqSource> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqSource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FequecyPointsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @return A list containing the freqPoints.
     */
    java.util.List<java.lang.Double> getFreqPointsList();
    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @return The count of freqPoints.
     */
    int getFreqPointsCount();
    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @param index The index of the element to return.
     * @return The freqPoints at the given index.
     */
    double getFreqPoints(int index);
  }
  /**
   * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.FequecyPoints}
   */
  public static final class FequecyPoints extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
      FequecyPointsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FequecyPoints.newBuilder() to construct.
    private FequecyPoints(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FequecyPoints() {
      freqPoints_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FequecyPoints();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FequecyPoints(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                freqPoints_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              freqPoints_.addDouble(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                freqPoints_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                freqPoints_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          freqPoints_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder.class);
    }

    public static final int FREQ_POINTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.DoubleList freqPoints_;
    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @return A list containing the freqPoints.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getFreqPointsList() {
      return freqPoints_;
    }
    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @return The count of freqPoints.
     */
    public int getFreqPointsCount() {
      return freqPoints_.size();
    }
    /**
     * <pre>
     *频点列表。单位Hz。
     * </pre>
     *
     * <code>repeated double freq_points = 1;</code>
     * @param index The index of the element to return.
     * @return The freqPoints at the given index.
     */
    public double getFreqPoints(int index) {
      return freqPoints_.getDouble(index);
    }
    private int freqPointsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getFreqPointsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(freqPointsMemoizedSerializedSize);
      }
      for (int i = 0; i < freqPoints_.size(); i++) {
        output.writeDoubleNoTag(freqPoints_.getDouble(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getFreqPointsList().size();
        size += dataSize;
        if (!getFreqPointsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        freqPointsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints other = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) obj;

      if (!getFreqPointsList()
          .equals(other.getFreqPointsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFreqPointsCount() > 0) {
        hash = (37 * hash) + FREQ_POINTS_FIELD_NUMBER;
        hash = (53 * hash) + getFreqPointsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.FequecyPoints}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        freqPoints_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints build() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints buildPartial() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints result = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          freqPoints_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.freqPoints_ = freqPoints_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) {
          return mergeFrom((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints other) {
        if (other == zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance()) return this;
        if (!other.freqPoints_.isEmpty()) {
          if (freqPoints_.isEmpty()) {
            freqPoints_ = other.freqPoints_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureFreqPointsIsMutable();
            freqPoints_.addAll(other.freqPoints_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.DoubleList freqPoints_ = emptyDoubleList();
      private void ensureFreqPointsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          freqPoints_ = mutableCopy(freqPoints_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @return A list containing the freqPoints.
       */
      public java.util.List<java.lang.Double>
          getFreqPointsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(freqPoints_) : freqPoints_;
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @return The count of freqPoints.
       */
      public int getFreqPointsCount() {
        return freqPoints_.size();
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @param index The index of the element to return.
       * @return The freqPoints at the given index.
       */
      public double getFreqPoints(int index) {
        return freqPoints_.getDouble(index);
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @param index The index to set the value at.
       * @param value The freqPoints to set.
       * @return This builder for chaining.
       */
      public Builder setFreqPoints(
          int index, double value) {
        ensureFreqPointsIsMutable();
        freqPoints_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @param value The freqPoints to add.
       * @return This builder for chaining.
       */
      public Builder addFreqPoints(double value) {
        ensureFreqPointsIsMutable();
        freqPoints_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @param values The freqPoints to add.
       * @return This builder for chaining.
       */
      public Builder addAllFreqPoints(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureFreqPointsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, freqPoints_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频点列表。单位Hz。
       * </pre>
       *
       * <code>repeated double freq_points = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFreqPoints() {
        freqPoints_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.FequecyPoints)
    private static final zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints();
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FequecyPoints>
        PARSER = new com.google.protobuf.AbstractParser<FequecyPoints>() {
      @java.lang.Override
      public FequecyPoints parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FequecyPoints(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FequecyPoints> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FequecyPoints> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SpectrumAcqParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *频谱模式。
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
     * @return The enum numeric value on the wire for mode.
     */
    int getModeValue();
    /**
     * <pre>
     *频谱模式。
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
     * @return The mode.
     */
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode getMode();

    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return Whether the freqSpan field is set.
     */
    boolean hasFreqSpan();
    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return The freqSpan.
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan();
    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder();

    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     * @return Whether the freqPoints field is set.
     */
    boolean hasFreqPoints();
    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     * @return The freqPoints.
     */
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getFreqPoints();
    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     */
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder getFreqPointsOrBuilder();

    /**
     * <pre>
     *分辨率,单位Hz
     * </pre>
     *
     * <code>double rbw = 4;</code>
     * @return The rbw.
     */
    double getRbw();

    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
     * @return The enum numeric value on the wire for detectMode.
     */
    int getDetectModeValue();
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
     * @return The detectMode.
     */
    zb.dcts.source.kh.KhContext.DetectMode getDetectMode();

    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
     * @return The enum numeric value on the wire for channelMode.
     */
    int getChannelModeValue();
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
     * @return The channelMode.
     */
    zb.dcts.source.kh.KhContext.ChannelMode getChannelMode();

    /**
     * <pre>
     *衰减增益[0, 50]，按1递增
     * </pre>
     *
     * <code>double attenuation_gain = 7;</code>
     * @return The attenuationGain.
     */
    double getAttenuationGain();

    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     * @return Whether the winParams field is set.
     */
    boolean hasWinParams();
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     * @return The winParams.
     */
    zb.dcts.source.kh.KhContext.WindowParams getWinParams();
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     */
    zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder();

    /**
     * <pre>
     *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
     * </pre>
     *
     * <code>double rf_limit = 9;</code>
     * @return The rfLimit.
     */
    double getRfLimit();

    /**
     * <pre>
     *频段扫描模式时中心频率的步进值（单位：Hz）
     * </pre>
     *
     * <code>double search_step = 10;</code>
     * @return The searchStep.
     */
    double getSearchStep();

    /**
     * <pre>
     *频段扫描、离散扫描模式时每个频点的驻留时间ms。目前固定为5000ms
     * </pre>
     *
     * <code>int32 residence_time = 11;</code>
     * @return The residenceTime.
     */
    int getResidenceTime();

    /**
     * <pre>
     *设备采样间隔
     * </pre>
     *
     * <code>int32 sample_interval = 12;</code>
     * @return The sampleInterval.
     */
    int getSampleInterval();

    /**
     * <pre>
     *监测结果回传间隔,单位ms，0代表每次扫描均上传
     * </pre>
     *
     * <code>int32 result_interval = 13;</code>
     * @return The resultInterval.
     */
    int getResultInterval();

    /**
     * <pre>
     *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
     * </pre>
     *
     * <code>int32 expected_points = 15;</code>
     * @return The expectedPoints.
     */
    int getExpectedPoints();

    /**
     * <pre>
     *平均次数[0,128] 
     * </pre>
     *
     * <code>int32 average_count = 16;</code>
     * @return The averageCount.
     */
    int getAverageCount();

    /**
     * <pre>
     *天线选择[0,1]，暂时不用
     * </pre>
     *
     * <code>int32 antenna = 17;</code>
     * @return The antenna.
     */
    int getAntenna();

    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
     * @return The enum numeric value on the wire for antennaMode.
     */
    int getAntennaModeValue();
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
     * @return The antennaMode.
     */
    zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode();

    /**
     * <pre>
     *FFT检波模式.HSCAN模式使用
     * </pre>
     *
     * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
     * @return The enum numeric value on the wire for fftDetectMode.
     */
    int getFftDetectModeValue();
    /**
     * <pre>
     *FFT检波模式.HSCAN模式使用
     * </pre>
     *
     * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
     * @return The fftDetectMode.
     */
    zb.dcts.source.kh.KhContext.FFTDetectMode getFftDetectMode();

    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    int getOthersCount();
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    boolean containsOthers(
        java.lang.String key);
    /**
     * Use {@link #getOthersMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getOthers();
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getOthersMap();
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */

    java.lang.String getOthersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */

    java.lang.String getOthersOrThrow(
        java.lang.String key);

    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.FrequencyCase getFrequencyCase();
  }
  /**
   * <pre>
   *采集参数
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam}
   */
  public static final class SpectrumAcqParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
      SpectrumAcqParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpectrumAcqParam.newBuilder() to construct.
    private SpectrumAcqParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpectrumAcqParam() {
      mode_ = 0;
      detectMode_ = 0;
      channelMode_ = 0;
      antennaMode_ = 0;
      fftDetectMode_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpectrumAcqParam();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SpectrumAcqParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              mode_ = rawValue;
              break;
            }
            case 18: {
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder subBuilder = null;
              if (frequencyCase_ == 2) {
                subBuilder = ((zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_).toBuilder();
              }
              frequency_ =
                  input.readMessage(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_);
                frequency_ = subBuilder.buildPartial();
              }
              frequencyCase_ = 2;
              break;
            }
            case 26: {
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder subBuilder = null;
              if (frequencyCase_ == 3) {
                subBuilder = ((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_).toBuilder();
              }
              frequency_ =
                  input.readMessage(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_);
                frequency_ = subBuilder.buildPartial();
              }
              frequencyCase_ = 3;
              break;
            }
            case 33: {

              rbw_ = input.readDouble();
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              detectMode_ = rawValue;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              channelMode_ = rawValue;
              break;
            }
            case 57: {

              attenuationGain_ = input.readDouble();
              break;
            }
            case 66: {
              zb.dcts.source.kh.KhContext.WindowParams.Builder subBuilder = null;
              if (winParams_ != null) {
                subBuilder = winParams_.toBuilder();
              }
              winParams_ = input.readMessage(zb.dcts.source.kh.KhContext.WindowParams.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(winParams_);
                winParams_ = subBuilder.buildPartial();
              }

              break;
            }
            case 73: {

              rfLimit_ = input.readDouble();
              break;
            }
            case 81: {

              searchStep_ = input.readDouble();
              break;
            }
            case 88: {

              residenceTime_ = input.readInt32();
              break;
            }
            case 96: {

              sampleInterval_ = input.readInt32();
              break;
            }
            case 104: {

              resultInterval_ = input.readInt32();
              break;
            }
            case 120: {

              expectedPoints_ = input.readInt32();
              break;
            }
            case 128: {

              averageCount_ = input.readInt32();
              break;
            }
            case 136: {

              antenna_ = input.readInt32();
              break;
            }
            case 144: {
              int rawValue = input.readEnum();

              antennaMode_ = rawValue;
              break;
            }
            case 152: {
              int rawValue = input.readEnum();

              fftDetectMode_ = rawValue;
              break;
            }
            case 162: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                others_ = com.google.protobuf.MapField.newMapField(
                    OthersDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              others__ = input.readMessage(
                  OthersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              others_.getMutableMap().put(
                  others__.getKey(), others__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 20:
          return internalGetOthers();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder.class);
    }

    private int frequencyCase_ = 0;
    private java.lang.Object frequency_;
    public enum FrequencyCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      FREQ_SPAN(2),
      FREQ_POINTS(3),
      FREQUENCY_NOT_SET(0);
      private final int value;
      private FrequencyCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FrequencyCase valueOf(int value) {
        return forNumber(value);
      }

      public static FrequencyCase forNumber(int value) {
        switch (value) {
          case 2: return FREQ_SPAN;
          case 3: return FREQ_POINTS;
          case 0: return FREQUENCY_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public FrequencyCase
    getFrequencyCase() {
      return FrequencyCase.forNumber(
          frequencyCase_);
    }

    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_;
    /**
     * <pre>
     *频谱模式。
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     *频谱模式。
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
     * @return The mode.
     */
    @java.lang.Override public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode getMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode result = zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.valueOf(mode_);
      return result == null ? zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.UNRECOGNIZED : result;
    }

    public static final int FREQ_SPAN_FIELD_NUMBER = 2;
    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return Whether the freqSpan field is set.
     */
    @java.lang.Override
    public boolean hasFreqSpan() {
      return frequencyCase_ == 2;
    }
    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     * @return The freqSpan.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan() {
      if (frequencyCase_ == 2) {
         return (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_;
      }
      return zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
    }
    /**
     * <pre>
     *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder() {
      if (frequencyCase_ == 2) {
         return (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_;
      }
      return zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
    }

    public static final int FREQ_POINTS_FIELD_NUMBER = 3;
    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     * @return Whether the freqPoints field is set.
     */
    @java.lang.Override
    public boolean hasFreqPoints() {
      return frequencyCase_ == 3;
    }
    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     * @return The freqPoints.
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getFreqPoints() {
      if (frequencyCase_ == 3) {
         return (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_;
      }
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
    }
    /**
     * <pre>
     *频点列表。离散扫描模式
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder getFreqPointsOrBuilder() {
      if (frequencyCase_ == 3) {
         return (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_;
      }
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
    }

    public static final int RBW_FIELD_NUMBER = 4;
    private double rbw_;
    /**
     * <pre>
     *分辨率,单位Hz
     * </pre>
     *
     * <code>double rbw = 4;</code>
     * @return The rbw.
     */
    @java.lang.Override
    public double getRbw() {
      return rbw_;
    }

    public static final int DETECT_MODE_FIELD_NUMBER = 5;
    private int detectMode_;
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
     * @return The enum numeric value on the wire for detectMode.
     */
    @java.lang.Override public int getDetectModeValue() {
      return detectMode_;
    }
    /**
     * <pre>
     *轨迹检波模式       
     * </pre>
     *
     * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
     * @return The detectMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.DetectMode getDetectMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.DetectMode result = zb.dcts.source.kh.KhContext.DetectMode.valueOf(detectMode_);
      return result == null ? zb.dcts.source.kh.KhContext.DetectMode.UNRECOGNIZED : result;
    }

    public static final int CHANNEL_MODE_FIELD_NUMBER = 6;
    private int channelMode_;
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
     * @return The enum numeric value on the wire for channelMode.
     */
    @java.lang.Override public int getChannelModeValue() {
      return channelMode_;
    }
    /**
     * <pre>
     *通道模式
     * </pre>
     *
     * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
     * @return The channelMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.ChannelMode getChannelMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.ChannelMode result = zb.dcts.source.kh.KhContext.ChannelMode.valueOf(channelMode_);
      return result == null ? zb.dcts.source.kh.KhContext.ChannelMode.UNRECOGNIZED : result;
    }

    public static final int ATTENUATION_GAIN_FIELD_NUMBER = 7;
    private double attenuationGain_;
    /**
     * <pre>
     *衰减增益[0, 50]，按1递增
     * </pre>
     *
     * <code>double attenuation_gain = 7;</code>
     * @return The attenuationGain.
     */
    @java.lang.Override
    public double getAttenuationGain() {
      return attenuationGain_;
    }

    public static final int WIN_PARAMS_FIELD_NUMBER = 8;
    private zb.dcts.source.kh.KhContext.WindowParams winParams_;
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     * @return Whether the winParams field is set.
     */
    @java.lang.Override
    public boolean hasWinParams() {
      return winParams_ != null;
    }
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     * @return The winParams.
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.WindowParams getWinParams() {
      return winParams_ == null ? zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
    }
    /**
     * <pre>
     *窗口参数
     * </pre>
     *
     * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
     */
    @java.lang.Override
    public zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder() {
      return getWinParams();
    }

    public static final int RF_LIMIT_FIELD_NUMBER = 9;
    private double rfLimit_;
    /**
     * <pre>
     *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
     * </pre>
     *
     * <code>double rf_limit = 9;</code>
     * @return The rfLimit.
     */
    @java.lang.Override
    public double getRfLimit() {
      return rfLimit_;
    }

    public static final int SEARCH_STEP_FIELD_NUMBER = 10;
    private double searchStep_;
    /**
     * <pre>
     *频段扫描模式时中心频率的步进值（单位：Hz）
     * </pre>
     *
     * <code>double search_step = 10;</code>
     * @return The searchStep.
     */
    @java.lang.Override
    public double getSearchStep() {
      return searchStep_;
    }

    public static final int RESIDENCE_TIME_FIELD_NUMBER = 11;
    private int residenceTime_;
    /**
     * <pre>
     *频段扫描、离散扫描模式时每个频点的驻留时间ms。目前固定为5000ms
     * </pre>
     *
     * <code>int32 residence_time = 11;</code>
     * @return The residenceTime.
     */
    @java.lang.Override
    public int getResidenceTime() {
      return residenceTime_;
    }

    public static final int SAMPLE_INTERVAL_FIELD_NUMBER = 12;
    private int sampleInterval_;
    /**
     * <pre>
     *设备采样间隔
     * </pre>
     *
     * <code>int32 sample_interval = 12;</code>
     * @return The sampleInterval.
     */
    @java.lang.Override
    public int getSampleInterval() {
      return sampleInterval_;
    }

    public static final int RESULT_INTERVAL_FIELD_NUMBER = 13;
    private int resultInterval_;
    /**
     * <pre>
     *监测结果回传间隔,单位ms，0代表每次扫描均上传
     * </pre>
     *
     * <code>int32 result_interval = 13;</code>
     * @return The resultInterval.
     */
    @java.lang.Override
    public int getResultInterval() {
      return resultInterval_;
    }

    public static final int EXPECTED_POINTS_FIELD_NUMBER = 15;
    private int expectedPoints_;
    /**
     * <pre>
     *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
     * </pre>
     *
     * <code>int32 expected_points = 15;</code>
     * @return The expectedPoints.
     */
    @java.lang.Override
    public int getExpectedPoints() {
      return expectedPoints_;
    }

    public static final int AVERAGE_COUNT_FIELD_NUMBER = 16;
    private int averageCount_;
    /**
     * <pre>
     *平均次数[0,128] 
     * </pre>
     *
     * <code>int32 average_count = 16;</code>
     * @return The averageCount.
     */
    @java.lang.Override
    public int getAverageCount() {
      return averageCount_;
    }

    public static final int ANTENNA_FIELD_NUMBER = 17;
    private int antenna_;
    /**
     * <pre>
     *天线选择[0,1]，暂时不用
     * </pre>
     *
     * <code>int32 antenna = 17;</code>
     * @return The antenna.
     */
    @java.lang.Override
    public int getAntenna() {
      return antenna_;
    }

    public static final int ANTENNA_MODE_FIELD_NUMBER = 18;
    private int antennaMode_;
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
     * @return The enum numeric value on the wire for antennaMode.
     */
    @java.lang.Override public int getAntennaModeValue() {
      return antennaMode_;
    }
    /**
     * <pre>
     *天线模式，只支持： 2 一级放大 3 二级放大
     * </pre>
     *
     * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
     * @return The antennaMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.AntennaControlMode result = zb.dcts.source.kh.KhContext.AntennaControlMode.valueOf(antennaMode_);
      return result == null ? zb.dcts.source.kh.KhContext.AntennaControlMode.UNRECOGNIZED : result;
    }

    public static final int FFT_DETECT_MODE_FIELD_NUMBER = 19;
    private int fftDetectMode_;
    /**
     * <pre>
     *FFT检波模式.HSCAN模式使用
     * </pre>
     *
     * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
     * @return The enum numeric value on the wire for fftDetectMode.
     */
    @java.lang.Override public int getFftDetectModeValue() {
      return fftDetectMode_;
    }
    /**
     * <pre>
     *FFT检波模式.HSCAN模式使用
     * </pre>
     *
     * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
     * @return The fftDetectMode.
     */
    @java.lang.Override public zb.dcts.source.kh.KhContext.FFTDetectMode getFftDetectMode() {
      @SuppressWarnings("deprecation")
      zb.dcts.source.kh.KhContext.FFTDetectMode result = zb.dcts.source.kh.KhContext.FFTDetectMode.valueOf(fftDetectMode_);
      return result == null ? zb.dcts.source.kh.KhContext.FFTDetectMode.UNRECOGNIZED : result;
    }

    public static final int OTHERS_FIELD_NUMBER = 20;
    private static final class OthersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> others_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetOthers() {
      if (others_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OthersDefaultEntryHolder.defaultEntry);
      }
      return others_;
    }

    public int getOthersCount() {
      return internalGetOthers().getMap().size();
    }
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */

    @java.lang.Override
    public boolean containsOthers(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetOthers().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOthersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOthers() {
      return getOthersMap();
    }
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getOthersMap() {
      return internalGetOthers().getMap();
    }
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    @java.lang.Override

    public java.lang.String getOthersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOthers().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *根据功能自定义其他参数
     * </pre>
     *
     * <code>map&lt;string, string&gt; others = 20;</code>
     */
    @java.lang.Override

    public java.lang.String getOthersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOthers().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (mode_ != zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.REALTIME.getNumber()) {
        output.writeEnum(1, mode_);
      }
      if (frequencyCase_ == 2) {
        output.writeMessage(2, (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_);
      }
      if (frequencyCase_ == 3) {
        output.writeMessage(3, (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_);
      }
      if (rbw_ != 0D) {
        output.writeDouble(4, rbw_);
      }
      if (detectMode_ != zb.dcts.source.kh.KhContext.DetectMode.MAXHOLD.getNumber()) {
        output.writeEnum(5, detectMode_);
      }
      if (channelMode_ != zb.dcts.source.kh.KhContext.ChannelMode.NORMAL.getNumber()) {
        output.writeEnum(6, channelMode_);
      }
      if (attenuationGain_ != 0D) {
        output.writeDouble(7, attenuationGain_);
      }
      if (winParams_ != null) {
        output.writeMessage(8, getWinParams());
      }
      if (rfLimit_ != 0D) {
        output.writeDouble(9, rfLimit_);
      }
      if (searchStep_ != 0D) {
        output.writeDouble(10, searchStep_);
      }
      if (residenceTime_ != 0) {
        output.writeInt32(11, residenceTime_);
      }
      if (sampleInterval_ != 0) {
        output.writeInt32(12, sampleInterval_);
      }
      if (resultInterval_ != 0) {
        output.writeInt32(13, resultInterval_);
      }
      if (expectedPoints_ != 0) {
        output.writeInt32(15, expectedPoints_);
      }
      if (averageCount_ != 0) {
        output.writeInt32(16, averageCount_);
      }
      if (antenna_ != 0) {
        output.writeInt32(17, antenna_);
      }
      if (antennaMode_ != zb.dcts.source.kh.KhContext.AntennaControlMode.ANT_INVALID.getNumber()) {
        output.writeEnum(18, antennaMode_);
      }
      if (fftDetectMode_ != zb.dcts.source.kh.KhContext.FFTDetectMode.POSITIVE.getNumber()) {
        output.writeEnum(19, fftDetectMode_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetOthers(),
          OthersDefaultEntryHolder.defaultEntry,
          20);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (mode_ != zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.REALTIME.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, mode_);
      }
      if (frequencyCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_);
      }
      if (frequencyCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_);
      }
      if (rbw_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, rbw_);
      }
      if (detectMode_ != zb.dcts.source.kh.KhContext.DetectMode.MAXHOLD.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, detectMode_);
      }
      if (channelMode_ != zb.dcts.source.kh.KhContext.ChannelMode.NORMAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, channelMode_);
      }
      if (attenuationGain_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, attenuationGain_);
      }
      if (winParams_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getWinParams());
      }
      if (rfLimit_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, rfLimit_);
      }
      if (searchStep_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, searchStep_);
      }
      if (residenceTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, residenceTime_);
      }
      if (sampleInterval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, sampleInterval_);
      }
      if (resultInterval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, resultInterval_);
      }
      if (expectedPoints_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, expectedPoints_);
      }
      if (averageCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, averageCount_);
      }
      if (antenna_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, antenna_);
      }
      if (antennaMode_ != zb.dcts.source.kh.KhContext.AntennaControlMode.ANT_INVALID.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(18, antennaMode_);
      }
      if (fftDetectMode_ != zb.dcts.source.kh.KhContext.FFTDetectMode.POSITIVE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, fftDetectMode_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetOthers().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        others__ = OthersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20, others__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam other = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam) obj;

      if (mode_ != other.mode_) return false;
      if (java.lang.Double.doubleToLongBits(getRbw())
          != java.lang.Double.doubleToLongBits(
              other.getRbw())) return false;
      if (detectMode_ != other.detectMode_) return false;
      if (channelMode_ != other.channelMode_) return false;
      if (java.lang.Double.doubleToLongBits(getAttenuationGain())
          != java.lang.Double.doubleToLongBits(
              other.getAttenuationGain())) return false;
      if (hasWinParams() != other.hasWinParams()) return false;
      if (hasWinParams()) {
        if (!getWinParams()
            .equals(other.getWinParams())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getRfLimit())
          != java.lang.Double.doubleToLongBits(
              other.getRfLimit())) return false;
      if (java.lang.Double.doubleToLongBits(getSearchStep())
          != java.lang.Double.doubleToLongBits(
              other.getSearchStep())) return false;
      if (getResidenceTime()
          != other.getResidenceTime()) return false;
      if (getSampleInterval()
          != other.getSampleInterval()) return false;
      if (getResultInterval()
          != other.getResultInterval()) return false;
      if (getExpectedPoints()
          != other.getExpectedPoints()) return false;
      if (getAverageCount()
          != other.getAverageCount()) return false;
      if (getAntenna()
          != other.getAntenna()) return false;
      if (antennaMode_ != other.antennaMode_) return false;
      if (fftDetectMode_ != other.fftDetectMode_) return false;
      if (!internalGetOthers().equals(
          other.internalGetOthers())) return false;
      if (!getFrequencyCase().equals(other.getFrequencyCase())) return false;
      switch (frequencyCase_) {
        case 2:
          if (!getFreqSpan()
              .equals(other.getFreqSpan())) return false;
          break;
        case 3:
          if (!getFreqPoints()
              .equals(other.getFreqPoints())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MODE_FIELD_NUMBER;
      hash = (53 * hash) + mode_;
      hash = (37 * hash) + RBW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRbw()));
      hash = (37 * hash) + DETECT_MODE_FIELD_NUMBER;
      hash = (53 * hash) + detectMode_;
      hash = (37 * hash) + CHANNEL_MODE_FIELD_NUMBER;
      hash = (53 * hash) + channelMode_;
      hash = (37 * hash) + ATTENUATION_GAIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAttenuationGain()));
      if (hasWinParams()) {
        hash = (37 * hash) + WIN_PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getWinParams().hashCode();
      }
      hash = (37 * hash) + RF_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRfLimit()));
      hash = (37 * hash) + SEARCH_STEP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSearchStep()));
      hash = (37 * hash) + RESIDENCE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getResidenceTime();
      hash = (37 * hash) + SAMPLE_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getSampleInterval();
      hash = (37 * hash) + RESULT_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getResultInterval();
      hash = (37 * hash) + EXPECTED_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getExpectedPoints();
      hash = (37 * hash) + AVERAGE_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getAverageCount();
      hash = (37 * hash) + ANTENNA_FIELD_NUMBER;
      hash = (53 * hash) + getAntenna();
      hash = (37 * hash) + ANTENNA_MODE_FIELD_NUMBER;
      hash = (53 * hash) + antennaMode_;
      hash = (37 * hash) + FFT_DETECT_MODE_FIELD_NUMBER;
      hash = (53 * hash) + fftDetectMode_;
      if (!internalGetOthers().getMap().isEmpty()) {
        hash = (37 * hash) + OTHERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetOthers().hashCode();
      }
      switch (frequencyCase_) {
        case 2:
          hash = (37 * hash) + FREQ_SPAN_FIELD_NUMBER;
          hash = (53 * hash) + getFreqSpan().hashCode();
          break;
        case 3:
          hash = (37 * hash) + FREQ_POINTS_FIELD_NUMBER;
          hash = (53 * hash) + getFreqPoints().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *采集参数
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 20:
            return internalGetOthers();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 20:
            return internalGetMutableOthers();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        mode_ = 0;

        rbw_ = 0D;

        detectMode_ = 0;

        channelMode_ = 0;

        attenuationGain_ = 0D;

        if (winParamsBuilder_ == null) {
          winParams_ = null;
        } else {
          winParams_ = null;
          winParamsBuilder_ = null;
        }
        rfLimit_ = 0D;

        searchStep_ = 0D;

        residenceTime_ = 0;

        sampleInterval_ = 0;

        resultInterval_ = 0;

        expectedPoints_ = 0;

        averageCount_ = 0;

        antenna_ = 0;

        antennaMode_ = 0;

        fftDetectMode_ = 0;

        internalGetMutableOthers().clear();
        frequencyCase_ = 0;
        frequency_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam build() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam buildPartial() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam result = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam(this);
        int from_bitField0_ = bitField0_;
        result.mode_ = mode_;
        if (frequencyCase_ == 2) {
          if (freqSpanBuilder_ == null) {
            result.frequency_ = frequency_;
          } else {
            result.frequency_ = freqSpanBuilder_.build();
          }
        }
        if (frequencyCase_ == 3) {
          if (freqPointsBuilder_ == null) {
            result.frequency_ = frequency_;
          } else {
            result.frequency_ = freqPointsBuilder_.build();
          }
        }
        result.rbw_ = rbw_;
        result.detectMode_ = detectMode_;
        result.channelMode_ = channelMode_;
        result.attenuationGain_ = attenuationGain_;
        if (winParamsBuilder_ == null) {
          result.winParams_ = winParams_;
        } else {
          result.winParams_ = winParamsBuilder_.build();
        }
        result.rfLimit_ = rfLimit_;
        result.searchStep_ = searchStep_;
        result.residenceTime_ = residenceTime_;
        result.sampleInterval_ = sampleInterval_;
        result.resultInterval_ = resultInterval_;
        result.expectedPoints_ = expectedPoints_;
        result.averageCount_ = averageCount_;
        result.antenna_ = antenna_;
        result.antennaMode_ = antennaMode_;
        result.fftDetectMode_ = fftDetectMode_;
        result.others_ = internalGetOthers();
        result.others_.makeImmutable();
        result.frequencyCase_ = frequencyCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam) {
          return mergeFrom((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam other) {
        if (other == zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.getDefaultInstance()) return this;
        if (other.mode_ != 0) {
          setModeValue(other.getModeValue());
        }
        if (other.getRbw() != 0D) {
          setRbw(other.getRbw());
        }
        if (other.detectMode_ != 0) {
          setDetectModeValue(other.getDetectModeValue());
        }
        if (other.channelMode_ != 0) {
          setChannelModeValue(other.getChannelModeValue());
        }
        if (other.getAttenuationGain() != 0D) {
          setAttenuationGain(other.getAttenuationGain());
        }
        if (other.hasWinParams()) {
          mergeWinParams(other.getWinParams());
        }
        if (other.getRfLimit() != 0D) {
          setRfLimit(other.getRfLimit());
        }
        if (other.getSearchStep() != 0D) {
          setSearchStep(other.getSearchStep());
        }
        if (other.getResidenceTime() != 0) {
          setResidenceTime(other.getResidenceTime());
        }
        if (other.getSampleInterval() != 0) {
          setSampleInterval(other.getSampleInterval());
        }
        if (other.getResultInterval() != 0) {
          setResultInterval(other.getResultInterval());
        }
        if (other.getExpectedPoints() != 0) {
          setExpectedPoints(other.getExpectedPoints());
        }
        if (other.getAverageCount() != 0) {
          setAverageCount(other.getAverageCount());
        }
        if (other.getAntenna() != 0) {
          setAntenna(other.getAntenna());
        }
        if (other.antennaMode_ != 0) {
          setAntennaModeValue(other.getAntennaModeValue());
        }
        if (other.fftDetectMode_ != 0) {
          setFftDetectModeValue(other.getFftDetectModeValue());
        }
        internalGetMutableOthers().mergeFrom(
            other.internalGetOthers());
        switch (other.getFrequencyCase()) {
          case FREQ_SPAN: {
            mergeFreqSpan(other.getFreqSpan());
            break;
          }
          case FREQ_POINTS: {
            mergeFreqPoints(other.getFreqPoints());
            break;
          }
          case FREQUENCY_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int frequencyCase_ = 0;
      private java.lang.Object frequency_;
      public FrequencyCase
          getFrequencyCase() {
        return FrequencyCase.forNumber(
            frequencyCase_);
      }

      public Builder clearFrequency() {
        frequencyCase_ = 0;
        frequency_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int mode_ = 0;
      /**
       * <pre>
       *频谱模式。
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
       * @return The enum numeric value on the wire for mode.
       */
      @java.lang.Override public int getModeValue() {
        return mode_;
      }
      /**
       * <pre>
       *频谱模式。
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
       * @param value The enum numeric value on the wire for mode to set.
       * @return This builder for chaining.
       */
      public Builder setModeValue(int value) {
        
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频谱模式。
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
       * @return The mode.
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode getMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode result = zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.valueOf(mode_);
        return result == null ? zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *频谱模式。
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
       * @param value The mode to set.
       * @return This builder for chaining.
       */
      public Builder setMode(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.RunMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频谱模式。
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.RunMode mode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMode() {
        
        mode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder> freqSpanBuilder_;
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       * @return Whether the freqSpan field is set.
       */
      @java.lang.Override
      public boolean hasFreqSpan() {
        return frequencyCase_ == 2;
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       * @return The freqSpan.
       */
      @java.lang.Override
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan getFreqSpan() {
        if (freqSpanBuilder_ == null) {
          if (frequencyCase_ == 2) {
            return (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_;
          }
          return zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
        } else {
          if (frequencyCase_ == 2) {
            return freqSpanBuilder_.getMessage();
          }
          return zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
        }
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder setFreqSpan(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan value) {
        if (freqSpanBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          frequency_ = value;
          onChanged();
        } else {
          freqSpanBuilder_.setMessage(value);
        }
        frequencyCase_ = 2;
        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder setFreqSpan(
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder builderForValue) {
        if (freqSpanBuilder_ == null) {
          frequency_ = builderForValue.build();
          onChanged();
        } else {
          freqSpanBuilder_.setMessage(builderForValue.build());
        }
        frequencyCase_ = 2;
        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder mergeFreqSpan(zb.dcts.scenario.spectrum.Spectrum.FrequencySpan value) {
        if (freqSpanBuilder_ == null) {
          if (frequencyCase_ == 2 &&
              frequency_ != zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance()) {
            frequency_ = zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.newBuilder((zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_)
                .mergeFrom(value).buildPartial();
          } else {
            frequency_ = value;
          }
          onChanged();
        } else {
          if (frequencyCase_ == 2) {
            freqSpanBuilder_.mergeFrom(value);
          }
          freqSpanBuilder_.setMessage(value);
        }
        frequencyCase_ = 2;
        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public Builder clearFreqSpan() {
        if (freqSpanBuilder_ == null) {
          if (frequencyCase_ == 2) {
            frequencyCase_ = 0;
            frequency_ = null;
            onChanged();
          }
        } else {
          if (frequencyCase_ == 2) {
            frequencyCase_ = 0;
            frequency_ = null;
          }
          freqSpanBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder getFreqSpanBuilder() {
        return getFreqSpanFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      @java.lang.Override
      public zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder getFreqSpanOrBuilder() {
        if ((frequencyCase_ == 2) && (freqSpanBuilder_ != null)) {
          return freqSpanBuilder_.getMessageOrBuilder();
        } else {
          if (frequencyCase_ == 2) {
            return (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_;
          }
          return zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
        }
      }
      /**
       * <pre>
       *频率范围,单位Hz。实时模式、无缝频谱、硬件全景扫频、频段扫描、离散扫描
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencySpan freq_span = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder> 
          getFreqSpanFieldBuilder() {
        if (freqSpanBuilder_ == null) {
          if (!(frequencyCase_ == 2)) {
            frequency_ = zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.getDefaultInstance();
          }
          freqSpanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.FrequencySpan, zb.dcts.scenario.spectrum.Spectrum.FrequencySpan.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencySpanOrBuilder>(
                  (zb.dcts.scenario.spectrum.Spectrum.FrequencySpan) frequency_,
                  getParentForChildren(),
                  isClean());
          frequency_ = null;
        }
        frequencyCase_ = 2;
        onChanged();;
        return freqSpanBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder> freqPointsBuilder_;
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       * @return Whether the freqPoints field is set.
       */
      @java.lang.Override
      public boolean hasFreqPoints() {
        return frequencyCase_ == 3;
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       * @return The freqPoints.
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints getFreqPoints() {
        if (freqPointsBuilder_ == null) {
          if (frequencyCase_ == 3) {
            return (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_;
          }
          return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
        } else {
          if (frequencyCase_ == 3) {
            return freqPointsBuilder_.getMessage();
          }
          return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
        }
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      public Builder setFreqPoints(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints value) {
        if (freqPointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          frequency_ = value;
          onChanged();
        } else {
          freqPointsBuilder_.setMessage(value);
        }
        frequencyCase_ = 3;
        return this;
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      public Builder setFreqPoints(
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder builderForValue) {
        if (freqPointsBuilder_ == null) {
          frequency_ = builderForValue.build();
          onChanged();
        } else {
          freqPointsBuilder_.setMessage(builderForValue.build());
        }
        frequencyCase_ = 3;
        return this;
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      public Builder mergeFreqPoints(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints value) {
        if (freqPointsBuilder_ == null) {
          if (frequencyCase_ == 3 &&
              frequency_ != zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance()) {
            frequency_ = zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.newBuilder((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_)
                .mergeFrom(value).buildPartial();
          } else {
            frequency_ = value;
          }
          onChanged();
        } else {
          if (frequencyCase_ == 3) {
            freqPointsBuilder_.mergeFrom(value);
          }
          freqPointsBuilder_.setMessage(value);
        }
        frequencyCase_ = 3;
        return this;
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      public Builder clearFreqPoints() {
        if (freqPointsBuilder_ == null) {
          if (frequencyCase_ == 3) {
            frequencyCase_ = 0;
            frequency_ = null;
            onChanged();
          }
        } else {
          if (frequencyCase_ == 3) {
            frequencyCase_ = 0;
            frequency_ = null;
          }
          freqPointsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder getFreqPointsBuilder() {
        return getFreqPointsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder getFreqPointsOrBuilder() {
        if ((frequencyCase_ == 3) && (freqPointsBuilder_ != null)) {
          return freqPointsBuilder_.getMessageOrBuilder();
        } else {
          if (frequencyCase_ == 3) {
            return (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_;
          }
          return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
        }
      }
      /**
       * <pre>
       *频点列表。离散扫描模式
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.FequecyPoints freq_points = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder> 
          getFreqPointsFieldBuilder() {
        if (freqPointsBuilder_ == null) {
          if (!(frequencyCase_ == 3)) {
            frequency_ = zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.getDefaultInstance();
          }
          freqPointsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPointsOrBuilder>(
                  (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.FequecyPoints) frequency_,
                  getParentForChildren(),
                  isClean());
          frequency_ = null;
        }
        frequencyCase_ = 3;
        onChanged();;
        return freqPointsBuilder_;
      }

      private double rbw_ ;
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @return The rbw.
       */
      @java.lang.Override
      public double getRbw() {
        return rbw_;
      }
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @param value The rbw to set.
       * @return This builder for chaining.
       */
      public Builder setRbw(double value) {
        
        rbw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *分辨率,单位Hz
       * </pre>
       *
       * <code>double rbw = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRbw() {
        
        rbw_ = 0D;
        onChanged();
        return this;
      }

      private int detectMode_ = 0;
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
       * @return The enum numeric value on the wire for detectMode.
       */
      @java.lang.Override public int getDetectModeValue() {
        return detectMode_;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
       * @param value The enum numeric value on the wire for detectMode to set.
       * @return This builder for chaining.
       */
      public Builder setDetectModeValue(int value) {
        
        detectMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
       * @return The detectMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.DetectMode getDetectMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.DetectMode result = zb.dcts.source.kh.KhContext.DetectMode.valueOf(detectMode_);
        return result == null ? zb.dcts.source.kh.KhContext.DetectMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
       * @param value The detectMode to set.
       * @return This builder for chaining.
       */
      public Builder setDetectMode(zb.dcts.source.kh.KhContext.DetectMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        detectMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *轨迹检波模式       
       * </pre>
       *
       * <code>.zb.dcts.source.kh.DetectMode detect_mode = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDetectMode() {
        
        detectMode_ = 0;
        onChanged();
        return this;
      }

      private int channelMode_ = 0;
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
       * @return The enum numeric value on the wire for channelMode.
       */
      @java.lang.Override public int getChannelModeValue() {
        return channelMode_;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
       * @param value The enum numeric value on the wire for channelMode to set.
       * @return This builder for chaining.
       */
      public Builder setChannelModeValue(int value) {
        
        channelMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
       * @return The channelMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.ChannelMode getChannelMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.ChannelMode result = zb.dcts.source.kh.KhContext.ChannelMode.valueOf(channelMode_);
        return result == null ? zb.dcts.source.kh.KhContext.ChannelMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
       * @param value The channelMode to set.
       * @return This builder for chaining.
       */
      public Builder setChannelMode(zb.dcts.source.kh.KhContext.ChannelMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        channelMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通道模式
       * </pre>
       *
       * <code>.zb.dcts.source.kh.ChannelMode channel_mode = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelMode() {
        
        channelMode_ = 0;
        onChanged();
        return this;
      }

      private double attenuationGain_ ;
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 7;</code>
       * @return The attenuationGain.
       */
      @java.lang.Override
      public double getAttenuationGain() {
        return attenuationGain_;
      }
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 7;</code>
       * @param value The attenuationGain to set.
       * @return This builder for chaining.
       */
      public Builder setAttenuationGain(double value) {
        
        attenuationGain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *衰减增益[0, 50]，按1递增
       * </pre>
       *
       * <code>double attenuation_gain = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearAttenuationGain() {
        
        attenuationGain_ = 0D;
        onChanged();
        return this;
      }

      private zb.dcts.source.kh.KhContext.WindowParams winParams_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder> winParamsBuilder_;
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       * @return Whether the winParams field is set.
       */
      public boolean hasWinParams() {
        return winParamsBuilder_ != null || winParams_ != null;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       * @return The winParams.
       */
      public zb.dcts.source.kh.KhContext.WindowParams getWinParams() {
        if (winParamsBuilder_ == null) {
          return winParams_ == null ? zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
        } else {
          return winParamsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public Builder setWinParams(zb.dcts.source.kh.KhContext.WindowParams value) {
        if (winParamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          winParams_ = value;
          onChanged();
        } else {
          winParamsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public Builder setWinParams(
          zb.dcts.source.kh.KhContext.WindowParams.Builder builderForValue) {
        if (winParamsBuilder_ == null) {
          winParams_ = builderForValue.build();
          onChanged();
        } else {
          winParamsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public Builder mergeWinParams(zb.dcts.source.kh.KhContext.WindowParams value) {
        if (winParamsBuilder_ == null) {
          if (winParams_ != null) {
            winParams_ =
              zb.dcts.source.kh.KhContext.WindowParams.newBuilder(winParams_).mergeFrom(value).buildPartial();
          } else {
            winParams_ = value;
          }
          onChanged();
        } else {
          winParamsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public Builder clearWinParams() {
        if (winParamsBuilder_ == null) {
          winParams_ = null;
          onChanged();
        } else {
          winParams_ = null;
          winParamsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public zb.dcts.source.kh.KhContext.WindowParams.Builder getWinParamsBuilder() {
        
        onChanged();
        return getWinParamsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      public zb.dcts.source.kh.KhContext.WindowParamsOrBuilder getWinParamsOrBuilder() {
        if (winParamsBuilder_ != null) {
          return winParamsBuilder_.getMessageOrBuilder();
        } else {
          return winParams_ == null ?
              zb.dcts.source.kh.KhContext.WindowParams.getDefaultInstance() : winParams_;
        }
      }
      /**
       * <pre>
       *窗口参数
       * </pre>
       *
       * <code>.zb.dcts.source.kh.WindowParams win_params = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder> 
          getWinParamsFieldBuilder() {
        if (winParamsBuilder_ == null) {
          winParamsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.source.kh.KhContext.WindowParams, zb.dcts.source.kh.KhContext.WindowParams.Builder, zb.dcts.source.kh.KhContext.WindowParamsOrBuilder>(
                  getWinParams(),
                  getParentForChildren(),
                  isClean());
          winParams_ = null;
        }
        return winParamsBuilder_;
      }

      private double rfLimit_ ;
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 9;</code>
       * @return The rfLimit.
       */
      @java.lang.Override
      public double getRfLimit() {
        return rfLimit_;
      }
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 9;</code>
       * @param value The rfLimit to set.
       * @return This builder for chaining.
       */
      public Builder setRfLimit(double value) {
        
        rfLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *射频直采最大频率值，单位Hz，1000000~30000000，暂时不用，请固定为30000000
       * </pre>
       *
       * <code>double rf_limit = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearRfLimit() {
        
        rfLimit_ = 0D;
        onChanged();
        return this;
      }

      private double searchStep_ ;
      /**
       * <pre>
       *频段扫描模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 10;</code>
       * @return The searchStep.
       */
      @java.lang.Override
      public double getSearchStep() {
        return searchStep_;
      }
      /**
       * <pre>
       *频段扫描模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 10;</code>
       * @param value The searchStep to set.
       * @return This builder for chaining.
       */
      public Builder setSearchStep(double value) {
        
        searchStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频段扫描模式时中心频率的步进值（单位：Hz）
       * </pre>
       *
       * <code>double search_step = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearSearchStep() {
        
        searchStep_ = 0D;
        onChanged();
        return this;
      }

      private int residenceTime_ ;
      /**
       * <pre>
       *频段扫描、离散扫描模式时每个频点的驻留时间ms。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 11;</code>
       * @return The residenceTime.
       */
      @java.lang.Override
      public int getResidenceTime() {
        return residenceTime_;
      }
      /**
       * <pre>
       *频段扫描、离散扫描模式时每个频点的驻留时间ms。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 11;</code>
       * @param value The residenceTime to set.
       * @return This builder for chaining.
       */
      public Builder setResidenceTime(int value) {
        
        residenceTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频段扫描、离散扫描模式时每个频点的驻留时间ms。目前固定为5000ms
       * </pre>
       *
       * <code>int32 residence_time = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearResidenceTime() {
        
        residenceTime_ = 0;
        onChanged();
        return this;
      }

      private int sampleInterval_ ;
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 12;</code>
       * @return The sampleInterval.
       */
      @java.lang.Override
      public int getSampleInterval() {
        return sampleInterval_;
      }
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 12;</code>
       * @param value The sampleInterval to set.
       * @return This builder for chaining.
       */
      public Builder setSampleInterval(int value) {
        
        sampleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *设备采样间隔
       * </pre>
       *
       * <code>int32 sample_interval = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampleInterval() {
        
        sampleInterval_ = 0;
        onChanged();
        return this;
      }

      private int resultInterval_ ;
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 13;</code>
       * @return The resultInterval.
       */
      @java.lang.Override
      public int getResultInterval() {
        return resultInterval_;
      }
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 13;</code>
       * @param value The resultInterval to set.
       * @return This builder for chaining.
       */
      public Builder setResultInterval(int value) {
        
        resultInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *监测结果回传间隔,单位ms，0代表每次扫描均上传
       * </pre>
       *
       * <code>int32 result_interval = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearResultInterval() {
        
        resultInterval_ = 0;
        onChanged();
        return this;
      }

      private int expectedPoints_ ;
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 15;</code>
       * @return The expectedPoints.
       */
      @java.lang.Override
      public int getExpectedPoints() {
        return expectedPoints_;
      }
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 15;</code>
       * @param value The expectedPoints to set.
       * @return This builder for chaining.
       */
      public Builder setExpectedPoints(int value) {
        
        expectedPoints_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *希望显示的点数，0代表按原始点数上传，非零时应为偶数。对HSCAN，范围为100~8000
       * </pre>
       *
       * <code>int32 expected_points = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpectedPoints() {
        
        expectedPoints_ = 0;
        onChanged();
        return this;
      }

      private int averageCount_ ;
      /**
       * <pre>
       *平均次数[0,128] 
       * </pre>
       *
       * <code>int32 average_count = 16;</code>
       * @return The averageCount.
       */
      @java.lang.Override
      public int getAverageCount() {
        return averageCount_;
      }
      /**
       * <pre>
       *平均次数[0,128] 
       * </pre>
       *
       * <code>int32 average_count = 16;</code>
       * @param value The averageCount to set.
       * @return This builder for chaining.
       */
      public Builder setAverageCount(int value) {
        
        averageCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *平均次数[0,128] 
       * </pre>
       *
       * <code>int32 average_count = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearAverageCount() {
        
        averageCount_ = 0;
        onChanged();
        return this;
      }

      private int antenna_ ;
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 17;</code>
       * @return The antenna.
       */
      @java.lang.Override
      public int getAntenna() {
        return antenna_;
      }
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 17;</code>
       * @param value The antenna to set.
       * @return This builder for chaining.
       */
      public Builder setAntenna(int value) {
        
        antenna_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线选择[0,1]，暂时不用
       * </pre>
       *
       * <code>int32 antenna = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearAntenna() {
        
        antenna_ = 0;
        onChanged();
        return this;
      }

      private int antennaMode_ = 0;
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
       * @return The enum numeric value on the wire for antennaMode.
       */
      @java.lang.Override public int getAntennaModeValue() {
        return antennaMode_;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
       * @param value The enum numeric value on the wire for antennaMode to set.
       * @return This builder for chaining.
       */
      public Builder setAntennaModeValue(int value) {
        
        antennaMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
       * @return The antennaMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.AntennaControlMode getAntennaMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.AntennaControlMode result = zb.dcts.source.kh.KhContext.AntennaControlMode.valueOf(antennaMode_);
        return result == null ? zb.dcts.source.kh.KhContext.AntennaControlMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
       * @param value The antennaMode to set.
       * @return This builder for chaining.
       */
      public Builder setAntennaMode(zb.dcts.source.kh.KhContext.AntennaControlMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        antennaMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *天线模式，只支持： 2 一级放大 3 二级放大
       * </pre>
       *
       * <code>.zb.dcts.source.kh.AntennaControlMode antenna_mode = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearAntennaMode() {
        
        antennaMode_ = 0;
        onChanged();
        return this;
      }

      private int fftDetectMode_ = 0;
      /**
       * <pre>
       *FFT检波模式.HSCAN模式使用
       * </pre>
       *
       * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
       * @return The enum numeric value on the wire for fftDetectMode.
       */
      @java.lang.Override public int getFftDetectModeValue() {
        return fftDetectMode_;
      }
      /**
       * <pre>
       *FFT检波模式.HSCAN模式使用
       * </pre>
       *
       * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
       * @param value The enum numeric value on the wire for fftDetectMode to set.
       * @return This builder for chaining.
       */
      public Builder setFftDetectModeValue(int value) {
        
        fftDetectMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *FFT检波模式.HSCAN模式使用
       * </pre>
       *
       * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
       * @return The fftDetectMode.
       */
      @java.lang.Override
      public zb.dcts.source.kh.KhContext.FFTDetectMode getFftDetectMode() {
        @SuppressWarnings("deprecation")
        zb.dcts.source.kh.KhContext.FFTDetectMode result = zb.dcts.source.kh.KhContext.FFTDetectMode.valueOf(fftDetectMode_);
        return result == null ? zb.dcts.source.kh.KhContext.FFTDetectMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *FFT检波模式.HSCAN模式使用
       * </pre>
       *
       * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
       * @param value The fftDetectMode to set.
       * @return This builder for chaining.
       */
      public Builder setFftDetectMode(zb.dcts.source.kh.KhContext.FFTDetectMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        fftDetectMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *FFT检波模式.HSCAN模式使用
       * </pre>
       *
       * <code>.zb.dcts.source.kh.FFTDetectMode fft_detect_mode = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearFftDetectMode() {
        
        fftDetectMode_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> others_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetOthers() {
        if (others_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              OthersDefaultEntryHolder.defaultEntry);
        }
        return others_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableOthers() {
        onChanged();;
        if (others_ == null) {
          others_ = com.google.protobuf.MapField.newMapField(
              OthersDefaultEntryHolder.defaultEntry);
        }
        if (!others_.isMutable()) {
          others_ = others_.copy();
        }
        return others_;
      }

      public int getOthersCount() {
        return internalGetOthers().getMap().size();
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */

      @java.lang.Override
      public boolean containsOthers(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetOthers().getMap().containsKey(key);
      }
      /**
       * Use {@link #getOthersMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getOthers() {
        return getOthersMap();
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getOthersMap() {
        return internalGetOthers().getMap();
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */
      @java.lang.Override

      public java.lang.String getOthersOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetOthers().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */
      @java.lang.Override

      public java.lang.String getOthersOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetOthers().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearOthers() {
        internalGetMutableOthers().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */

      public Builder removeOthers(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableOthers().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableOthers() {
        return internalGetMutableOthers().getMutableMap();
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */
      public Builder putOthers(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableOthers().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *根据功能自定义其他参数
       * </pre>
       *
       * <code>map&lt;string, string&gt; others = 20;</code>
       */

      public Builder putAllOthers(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableOthers().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam)
    private static final zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam();
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SpectrumAcqParam>
        PARSER = new com.google.protobuf.AbstractParser<SpectrumAcqParam>() {
      @java.lang.Override
      public SpectrumAcqParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpectrumAcqParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SpectrumAcqParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpectrumAcqParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SpectrumAcqResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return The header.
     */
    zb.dcts.scenario.spectrum.Spectrum.Header getHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return Whether the segHeader field is set.
     */
    boolean hasSegHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return The segHeader.
     */
    zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader();
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder();

    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return Whether the band field is set.
     */
    boolean hasBand();
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return The band.
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand();
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     */
    zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder();

    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @return A list containing the spectrumView.
     */
    java.util.List<java.lang.Float> getSpectrumViewList();
    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @return The count of spectrumView.
     */
    int getSpectrumViewCount();
    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @param index The index of the element to return.
     * @return The spectrumView at the given index.
     */
    float getSpectrumView(int index);
  }
  /**
   * <pre>
   *设备产生的原始数据
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult}
   */
  public static final class SpectrumAcqResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
      SpectrumAcqResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SpectrumAcqResult.newBuilder() to construct.
    private SpectrumAcqResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SpectrumAcqResult() {
      spectrumView_ = emptyFloatList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SpectrumAcqResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SpectrumAcqResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.scenario.spectrum.Spectrum.Header.Builder subBuilder = null;
              if (header_ != null) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.Header.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder subBuilder = null;
              if (segHeader_ != null) {
                subBuilder = segHeader_.toBuilder();
              }
              segHeader_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(segHeader_);
                segHeader_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder subBuilder = null;
              if (band_ != null) {
                subBuilder = band_.toBuilder();
              }
              band_ = input.readMessage(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(band_);
                band_ = subBuilder.buildPartial();
              }

              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                spectrumView_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              spectrumView_.addFloat(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                spectrumView_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                spectrumView_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          spectrumView_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private zb.dcts.scenario.spectrum.Spectrum.Header header_;
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.Header getHeader() {
      return header_ == null ? zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder() {
      return getHeader();
    }

    public static final int SEG_HEADER_FIELD_NUMBER = 4;
    private zb.dcts.scenario.spectrum.Spectrum.SegmentHeader segHeader_;
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return Whether the segHeader field is set.
     */
    @java.lang.Override
    public boolean hasSegHeader() {
      return segHeader_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     * @return The segHeader.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader() {
      return segHeader_ == null ? zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
    }
    /**
     * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder() {
      return getSegHeader();
    }

    public static final int BAND_FIELD_NUMBER = 5;
    private zb.dcts.scenario.spectrum.Spectrum.FrequencyBand band_;
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return Whether the band field is set.
     */
    @java.lang.Override
    public boolean hasBand() {
      return band_ != null;
    }
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     * @return The band.
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand() {
      return band_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
    }
    /**
     * <pre>
     *频段划分
     * </pre>
     *
     * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder() {
      return getBand();
    }

    public static final int SPECTRUM_VIEW_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.FloatList spectrumView_;
    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @return A list containing the spectrumView.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getSpectrumViewList() {
      return spectrumView_;
    }
    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @return The count of spectrumView.
     */
    public int getSpectrumViewCount() {
      return spectrumView_.size();
    }
    /**
     * <pre>
     *频谱数据
     * </pre>
     *
     * <code>repeated float spectrum_view = 6;</code>
     * @param index The index of the element to return.
     * @return The spectrumView at the given index.
     */
    public float getSpectrumView(int index) {
      return spectrumView_.getFloat(index);
    }
    private int spectrumViewMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (segHeader_ != null) {
        output.writeMessage(4, getSegHeader());
      }
      if (band_ != null) {
        output.writeMessage(5, getBand());
      }
      if (getSpectrumViewList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(spectrumViewMemoizedSerializedSize);
      }
      for (int i = 0; i < spectrumView_.size(); i++) {
        output.writeFloatNoTag(spectrumView_.getFloat(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (segHeader_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSegHeader());
      }
      if (band_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getBand());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSpectrumViewList().size();
        size += dataSize;
        if (!getSpectrumViewList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        spectrumViewMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult other = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (hasSegHeader() != other.hasSegHeader()) return false;
      if (hasSegHeader()) {
        if (!getSegHeader()
            .equals(other.getSegHeader())) return false;
      }
      if (hasBand() != other.hasBand()) return false;
      if (hasBand()) {
        if (!getBand()
            .equals(other.getBand())) return false;
      }
      if (!getSpectrumViewList()
          .equals(other.getSpectrumViewList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (hasSegHeader()) {
        hash = (37 * hash) + SEG_HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getSegHeader().hashCode();
      }
      if (hasBand()) {
        hash = (37 * hash) + BAND_FIELD_NUMBER;
        hash = (53 * hash) + getBand().hashCode();
      }
      if (getSpectrumViewCount() > 0) {
        hash = (37 * hash) + SPECTRUM_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + getSpectrumViewList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *设备产生的原始数据
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.class, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          header_ = null;
          headerBuilder_ = null;
        }
        if (segHeaderBuilder_ == null) {
          segHeader_ = null;
        } else {
          segHeader_ = null;
          segHeaderBuilder_ = null;
        }
        if (bandBuilder_ == null) {
          band_ = null;
        } else {
          band_ = null;
          bandBuilder_ = null;
        }
        spectrumView_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult build() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult buildPartial() {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult result = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult(this);
        int from_bitField0_ = bitField0_;
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (segHeaderBuilder_ == null) {
          result.segHeader_ = segHeader_;
        } else {
          result.segHeader_ = segHeaderBuilder_.build();
        }
        if (bandBuilder_ == null) {
          result.band_ = band_;
        } else {
          result.band_ = bandBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          spectrumView_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.spectrumView_ = spectrumView_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult) {
          return mergeFrom((zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult other) {
        if (other == zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.hasSegHeader()) {
          mergeSegHeader(other.getSegHeader());
        }
        if (other.hasBand()) {
          mergeBand(other.getBand());
        }
        if (!other.spectrumView_.isEmpty()) {
          if (spectrumView_.isEmpty()) {
            spectrumView_ = other.spectrumView_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSpectrumViewIsMutable();
            spectrumView_.addAll(other.spectrumView_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.scenario.spectrum.Spectrum.Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return headerBuilder_ != null || header_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       * @return The header.
       */
      public zb.dcts.scenario.spectrum.Spectrum.Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder setHeader(zb.dcts.scenario.spectrum.Spectrum.Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder setHeader(
          zb.dcts.scenario.spectrum.Spectrum.Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder mergeHeader(zb.dcts.scenario.spectrum.Spectrum.Header value) {
        if (headerBuilder_ == null) {
          if (header_ != null) {
            header_ =
              zb.dcts.scenario.spectrum.Spectrum.Header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          header_ = null;
          headerBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.Header.Builder getHeaderBuilder() {
        
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.Header, zb.dcts.scenario.spectrum.Spectrum.Header.Builder, zb.dcts.scenario.spectrum.Spectrum.HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.SegmentHeader segHeader_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder> segHeaderBuilder_;
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       * @return Whether the segHeader field is set.
       */
      public boolean hasSegHeader() {
        return segHeaderBuilder_ != null || segHeader_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       * @return The segHeader.
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader getSegHeader() {
        if (segHeaderBuilder_ == null) {
          return segHeader_ == null ? zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
        } else {
          return segHeaderBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder setSegHeader(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader value) {
        if (segHeaderBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          segHeader_ = value;
          onChanged();
        } else {
          segHeaderBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder setSegHeader(
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder builderForValue) {
        if (segHeaderBuilder_ == null) {
          segHeader_ = builderForValue.build();
          onChanged();
        } else {
          segHeaderBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder mergeSegHeader(zb.dcts.scenario.spectrum.Spectrum.SegmentHeader value) {
        if (segHeaderBuilder_ == null) {
          if (segHeader_ != null) {
            segHeader_ =
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.newBuilder(segHeader_).mergeFrom(value).buildPartial();
          } else {
            segHeader_ = value;
          }
          onChanged();
        } else {
          segHeaderBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public Builder clearSegHeader() {
        if (segHeaderBuilder_ == null) {
          segHeader_ = null;
          onChanged();
        } else {
          segHeader_ = null;
          segHeaderBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder getSegHeaderBuilder() {
        
        onChanged();
        return getSegHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder getSegHeaderOrBuilder() {
        if (segHeaderBuilder_ != null) {
          return segHeaderBuilder_.getMessageOrBuilder();
        } else {
          return segHeader_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.getDefaultInstance() : segHeader_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.spectrum.SegmentHeader seg_header = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder> 
          getSegHeaderFieldBuilder() {
        if (segHeaderBuilder_ == null) {
          segHeaderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.SegmentHeader, zb.dcts.scenario.spectrum.Spectrum.SegmentHeader.Builder, zb.dcts.scenario.spectrum.Spectrum.SegmentHeaderOrBuilder>(
                  getSegHeader(),
                  getParentForChildren(),
                  isClean());
          segHeader_ = null;
        }
        return segHeaderBuilder_;
      }

      private zb.dcts.scenario.spectrum.Spectrum.FrequencyBand band_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder> bandBuilder_;
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       * @return Whether the band field is set.
       */
      public boolean hasBand() {
        return bandBuilder_ != null || band_ != null;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       * @return The band.
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand getBand() {
        if (bandBuilder_ == null) {
          return band_ == null ? zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
        } else {
          return bandBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder setBand(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand value) {
        if (bandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          band_ = value;
          onChanged();
        } else {
          bandBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder setBand(
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder builderForValue) {
        if (bandBuilder_ == null) {
          band_ = builderForValue.build();
          onChanged();
        } else {
          bandBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder mergeBand(zb.dcts.scenario.spectrum.Spectrum.FrequencyBand value) {
        if (bandBuilder_ == null) {
          if (band_ != null) {
            band_ =
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.newBuilder(band_).mergeFrom(value).buildPartial();
          } else {
            band_ = value;
          }
          onChanged();
        } else {
          bandBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public Builder clearBand() {
        if (bandBuilder_ == null) {
          band_ = null;
          onChanged();
        } else {
          band_ = null;
          bandBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder getBandBuilder() {
        
        onChanged();
        return getBandFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      public zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder getBandOrBuilder() {
        if (bandBuilder_ != null) {
          return bandBuilder_.getMessageOrBuilder();
        } else {
          return band_ == null ?
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.getDefaultInstance() : band_;
        }
      }
      /**
       * <pre>
       *频段划分
       * </pre>
       *
       * <code>.zb.dcts.scenario.spectrum.FrequencyBand band = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder> 
          getBandFieldBuilder() {
        if (bandBuilder_ == null) {
          bandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.spectrum.Spectrum.FrequencyBand, zb.dcts.scenario.spectrum.Spectrum.FrequencyBand.Builder, zb.dcts.scenario.spectrum.Spectrum.FrequencyBandOrBuilder>(
                  getBand(),
                  getParentForChildren(),
                  isClean());
          band_ = null;
        }
        return bandBuilder_;
      }

      private com.google.protobuf.Internal.FloatList spectrumView_ = emptyFloatList();
      private void ensureSpectrumViewIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          spectrumView_ = mutableCopy(spectrumView_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @return A list containing the spectrumView.
       */
      public java.util.List<java.lang.Float>
          getSpectrumViewList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(spectrumView_) : spectrumView_;
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @return The count of spectrumView.
       */
      public int getSpectrumViewCount() {
        return spectrumView_.size();
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @param index The index of the element to return.
       * @return The spectrumView at the given index.
       */
      public float getSpectrumView(int index) {
        return spectrumView_.getFloat(index);
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @param index The index to set the value at.
       * @param value The spectrumView to set.
       * @return This builder for chaining.
       */
      public Builder setSpectrumView(
          int index, float value) {
        ensureSpectrumViewIsMutable();
        spectrumView_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @param value The spectrumView to add.
       * @return This builder for chaining.
       */
      public Builder addSpectrumView(float value) {
        ensureSpectrumViewIsMutable();
        spectrumView_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @param values The spectrumView to add.
       * @return This builder for chaining.
       */
      public Builder addAllSpectrumView(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureSpectrumViewIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spectrumView_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *频谱数据
       * </pre>
       *
       * <code>repeated float spectrum_view = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpectrumView() {
        spectrumView_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commSpectrum.SpectrumAcqResult)
    private static final zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult();
    }

    public static zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SpectrumAcqResult>
        PARSER = new com.google.protobuf.AbstractParser<SpectrumAcqResult>() {
      @java.lang.Override
      public SpectrumAcqResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpectrumAcqResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SpectrumAcqResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SpectrumAcqResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037scenario/kh/KhSpectrumAcq.proto\022 zb.dc" +
      "ts.scenario.kh.commSpectrum\032\023source/sour" +
      "ce.proto\032\031source/kh/KhContext.proto\032\027sce" +
      "nario/spectrum.proto\"\271\001\n\021SpectrumAcqSour" +
      "ce\022$\n\002id\030\001 \001(\0132\030.zb.dcts.source.SourceId" +
      "\022O\n\006params\030\006 \003(\0132?.zb.dcts.scenario.kh.c" +
      "ommSpectrum.SpectrumAcqSource.ParamsEntr" +
      "y\032-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002" +
      " \001(\t:\0028\001\"$\n\rFequecyPoints\022\023\n\013freq_points" +
      "\030\001 \003(\001\"\316\006\n\020SpectrumAcqParam\0227\n\004mode\030\001 \001(" +
      "\0162).zb.dcts.scenario.kh.commSpectrum.Run" +
      "Mode\022=\n\tfreq_span\030\002 \001(\0132(.zb.dcts.scenar" +
      "io.spectrum.FrequencySpanH\000\022F\n\013freq_poin" +
      "ts\030\003 \001(\0132/.zb.dcts.scenario.kh.commSpect" +
      "rum.FequecyPointsH\000\022\013\n\003rbw\030\004 \001(\001\0222\n\013dete" +
      "ct_mode\030\005 \001(\0162\035.zb.dcts.source.kh.Detect" +
      "Mode\0224\n\014channel_mode\030\006 \001(\0162\036.zb.dcts.sou" +
      "rce.kh.ChannelMode\022\030\n\020attenuation_gain\030\007" +
      " \001(\001\0223\n\nwin_params\030\010 \001(\0132\037.zb.dcts.sourc" +
      "e.kh.WindowParams\022\020\n\010rf_limit\030\t \001(\001\022\023\n\013s" +
      "earch_step\030\n \001(\001\022\026\n\016residence_time\030\013 \001(\005" +
      "\022\027\n\017sample_interval\030\014 \001(\005\022\027\n\017result_inte" +
      "rval\030\r \001(\005\022\027\n\017expected_points\030\017 \001(\005\022\025\n\ra" +
      "verage_count\030\020 \001(\005\022\017\n\007antenna\030\021 \001(\005\022;\n\014a" +
      "ntenna_mode\030\022 \001(\0162%.zb.dcts.source.kh.An" +
      "tennaControlMode\0229\n\017fft_detect_mode\030\023 \001(" +
      "\0162 .zb.dcts.source.kh.FFTDetectMode\022N\n\006o" +
      "thers\030\024 \003(\0132>.zb.dcts.scenario.kh.commSp" +
      "ectrum.SpectrumAcqParam.OthersEntry\032-\n\013O" +
      "thersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002" +
      "8\001B\013\n\tfrequency\"\323\001\n\021SpectrumAcqResult\0221\n" +
      "\006header\030\001 \001(\0132!.zb.dcts.scenario.spectru" +
      "m.Header\022<\n\nseg_header\030\004 \001(\0132(.zb.dcts.s" +
      "cenario.spectrum.SegmentHeader\0226\n\004band\030\005" +
      " \001(\0132(.zb.dcts.scenario.spectrum.Frequen" +
      "cyBand\022\025\n\rspectrum_view\030\006 \003(\002*U\n\007RunMode" +
      "\022\014\n\010REALTIME\020\000\022\t\n\005SWEEP\020\001\022\014\n\010SEAMLESS\020\002\022" +
      "\t\n\005HSCAN\020\003\022\n\n\006SEARCH\020\004\022\014\n\010DISCRETE\020\005b\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          zb.dcts.source.Source.getDescriptor(),
          zb.dcts.source.kh.KhContext.getDescriptor(),
          zb.dcts.scenario.spectrum.Spectrum.getDescriptor(),
        });
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor,
        new java.lang.String[] { "Id", "Params", });
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_descriptor =
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_descriptor.getNestedTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqSource_ParamsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_FequecyPoints_descriptor,
        new java.lang.String[] { "FreqPoints", });
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor,
        new java.lang.String[] { "Mode", "FreqSpan", "FreqPoints", "Rbw", "DetectMode", "ChannelMode", "AttenuationGain", "WinParams", "RfLimit", "SearchStep", "ResidenceTime", "SampleInterval", "ResultInterval", "ExpectedPoints", "AverageCount", "Antenna", "AntennaMode", "FftDetectMode", "Others", "Frequency", });
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_descriptor =
      internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_descriptor.getNestedTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqParam_OthersEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commSpectrum_SpectrumAcqResult_descriptor,
        new java.lang.String[] { "Header", "SegHeader", "Band", "SpectrumView", });
    zb.dcts.source.Source.getDescriptor();
    zb.dcts.source.kh.KhContext.getDescriptor();
    zb.dcts.scenario.spectrum.Spectrum.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
