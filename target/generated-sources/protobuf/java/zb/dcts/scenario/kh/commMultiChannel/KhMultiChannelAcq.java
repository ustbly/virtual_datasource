// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenario/kh/KhMultiChannelAcq.proto

package zb.dcts.scenario.kh.commMultiChannel;

public final class KhMultiChannelAcq {
  private KhMultiChannelAcq() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface NarrowChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *0~16
     * </pre>
     *
     * <code>int32 channel_id = 1;</code>
     * @return The channelId.
     */
    int getChannelId();

    /**
     * <pre>
     *多路DDC带宽：1kHz/3kHz/10kHz/30kHz/300kHz
     * </pre>
     *
     * <code>double width = 2;</code>
     * @return The width.
     */
    double getWidth();

    /**
     * <pre>
     *中心频率，Hz
     * </pre>
     *
     * <code>double cent_freq = 3;</code>
     * @return The centFreq.
     */
    double getCentFreq();

    /**
     * <pre>
     *窄带任务运行控制：true，启动；false，停止
     * </pre>
     *
     * <code>bool run = 4;</code>
     * @return The run.
     */
    boolean getRun();

    /**
     * <pre>
     *需要经FFT变换生成频谱
     * </pre>
     *
     * <code>bool fft = 5;</code>
     * @return The fft.
     */
    boolean getFft();

    /**
     * <pre>
     *是否需要进行模拟解调
     * </pre>
     *
     * <code>bool demod = 6;</code>
     * @return The demod.
     */
    boolean getDemod();

    /**
     * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
     * @return The type.
     */
    zb.dcts.scenario.FFP.Demodulate.AnalogModType getType();

    /**
     * <pre>
     *音频采样率
     * </pre>
     *
     * <code>double audio_sr = 8;</code>
     * @return The audioSr.
     */
    double getAudioSr();
  }
  /**
   * <pre>
   *多路窄带参数
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.NarrowChannel}
   */
  public static final class NarrowChannel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
      NarrowChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NarrowChannel.newBuilder() to construct.
    private NarrowChannel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NarrowChannel() {
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NarrowChannel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NarrowChannel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              channelId_ = input.readInt32();
              break;
            }
            case 17: {

              width_ = input.readDouble();
              break;
            }
            case 25: {

              centFreq_ = input.readDouble();
              break;
            }
            case 32: {

              run_ = input.readBool();
              break;
            }
            case 40: {

              fft_ = input.readBool();
              break;
            }
            case 48: {

              demod_ = input.readBool();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 65: {

              audioSr_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder.class);
    }

    public static final int CHANNEL_ID_FIELD_NUMBER = 1;
    private int channelId_;
    /**
     * <pre>
     *0~16
     * </pre>
     *
     * <code>int32 channel_id = 1;</code>
     * @return The channelId.
     */
    @java.lang.Override
    public int getChannelId() {
      return channelId_;
    }

    public static final int WIDTH_FIELD_NUMBER = 2;
    private double width_;
    /**
     * <pre>
     *多路DDC带宽：1kHz/3kHz/10kHz/30kHz/300kHz
     * </pre>
     *
     * <code>double width = 2;</code>
     * @return The width.
     */
    @java.lang.Override
    public double getWidth() {
      return width_;
    }

    public static final int CENT_FREQ_FIELD_NUMBER = 3;
    private double centFreq_;
    /**
     * <pre>
     *中心频率，Hz
     * </pre>
     *
     * <code>double cent_freq = 3;</code>
     * @return The centFreq.
     */
    @java.lang.Override
    public double getCentFreq() {
      return centFreq_;
    }

    public static final int RUN_FIELD_NUMBER = 4;
    private boolean run_;
    /**
     * <pre>
     *窄带任务运行控制：true，启动；false，停止
     * </pre>
     *
     * <code>bool run = 4;</code>
     * @return The run.
     */
    @java.lang.Override
    public boolean getRun() {
      return run_;
    }

    public static final int FFT_FIELD_NUMBER = 5;
    private boolean fft_;
    /**
     * <pre>
     *需要经FFT变换生成频谱
     * </pre>
     *
     * <code>bool fft = 5;</code>
     * @return The fft.
     */
    @java.lang.Override
    public boolean getFft() {
      return fft_;
    }

    public static final int DEMOD_FIELD_NUMBER = 6;
    private boolean demod_;
    /**
     * <pre>
     *是否需要进行模拟解调
     * </pre>
     *
     * <code>bool demod = 6;</code>
     * @return The demod.
     */
    @java.lang.Override
    public boolean getDemod() {
      return demod_;
    }

    public static final int TYPE_FIELD_NUMBER = 7;
    private int type_;
    /**
     * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
     * @return The type.
     */
    @java.lang.Override public zb.dcts.scenario.FFP.Demodulate.AnalogModType getType() {
      @SuppressWarnings("deprecation")
      zb.dcts.scenario.FFP.Demodulate.AnalogModType result = zb.dcts.scenario.FFP.Demodulate.AnalogModType.valueOf(type_);
      return result == null ? zb.dcts.scenario.FFP.Demodulate.AnalogModType.UNRECOGNIZED : result;
    }

    public static final int AUDIO_SR_FIELD_NUMBER = 8;
    private double audioSr_;
    /**
     * <pre>
     *音频采样率
     * </pre>
     *
     * <code>double audio_sr = 8;</code>
     * @return The audioSr.
     */
    @java.lang.Override
    public double getAudioSr() {
      return audioSr_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelId_ != 0) {
        output.writeInt32(1, channelId_);
      }
      if (width_ != 0D) {
        output.writeDouble(2, width_);
      }
      if (centFreq_ != 0D) {
        output.writeDouble(3, centFreq_);
      }
      if (run_ != false) {
        output.writeBool(4, run_);
      }
      if (fft_ != false) {
        output.writeBool(5, fft_);
      }
      if (demod_ != false) {
        output.writeBool(6, demod_);
      }
      if (type_ != zb.dcts.scenario.FFP.Demodulate.AnalogModType.AM.getNumber()) {
        output.writeEnum(7, type_);
      }
      if (audioSr_ != 0D) {
        output.writeDouble(8, audioSr_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (channelId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, channelId_);
      }
      if (width_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, width_);
      }
      if (centFreq_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, centFreq_);
      }
      if (run_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, run_);
      }
      if (fft_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, fft_);
      }
      if (demod_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, demod_);
      }
      if (type_ != zb.dcts.scenario.FFP.Demodulate.AnalogModType.AM.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, type_);
      }
      if (audioSr_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, audioSr_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel other = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel) obj;

      if (getChannelId()
          != other.getChannelId()) return false;
      if (java.lang.Double.doubleToLongBits(getWidth())
          != java.lang.Double.doubleToLongBits(
              other.getWidth())) return false;
      if (java.lang.Double.doubleToLongBits(getCentFreq())
          != java.lang.Double.doubleToLongBits(
              other.getCentFreq())) return false;
      if (getRun()
          != other.getRun()) return false;
      if (getFft()
          != other.getFft()) return false;
      if (getDemod()
          != other.getDemod()) return false;
      if (type_ != other.type_) return false;
      if (java.lang.Double.doubleToLongBits(getAudioSr())
          != java.lang.Double.doubleToLongBits(
              other.getAudioSr())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CHANNEL_ID_FIELD_NUMBER;
      hash = (53 * hash) + getChannelId();
      hash = (37 * hash) + WIDTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getWidth()));
      hash = (37 * hash) + CENT_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCentFreq()));
      hash = (37 * hash) + RUN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRun());
      hash = (37 * hash) + FFT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getFft());
      hash = (37 * hash) + DEMOD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDemod());
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + AUDIO_SR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAudioSr()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *多路窄带参数
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.NarrowChannel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        channelId_ = 0;

        width_ = 0D;

        centFreq_ = 0D;

        run_ = false;

        fft_ = false;

        demod_ = false;

        type_ = 0;

        audioSr_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel build() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel buildPartial() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel result = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel(this);
        result.channelId_ = channelId_;
        result.width_ = width_;
        result.centFreq_ = centFreq_;
        result.run_ = run_;
        result.fft_ = fft_;
        result.demod_ = demod_;
        result.type_ = type_;
        result.audioSr_ = audioSr_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel) {
          return mergeFrom((zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel other) {
        if (other == zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.getDefaultInstance()) return this;
        if (other.getChannelId() != 0) {
          setChannelId(other.getChannelId());
        }
        if (other.getWidth() != 0D) {
          setWidth(other.getWidth());
        }
        if (other.getCentFreq() != 0D) {
          setCentFreq(other.getCentFreq());
        }
        if (other.getRun() != false) {
          setRun(other.getRun());
        }
        if (other.getFft() != false) {
          setFft(other.getFft());
        }
        if (other.getDemod() != false) {
          setDemod(other.getDemod());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.getAudioSr() != 0D) {
          setAudioSr(other.getAudioSr());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int channelId_ ;
      /**
       * <pre>
       *0~16
       * </pre>
       *
       * <code>int32 channel_id = 1;</code>
       * @return The channelId.
       */
      @java.lang.Override
      public int getChannelId() {
        return channelId_;
      }
      /**
       * <pre>
       *0~16
       * </pre>
       *
       * <code>int32 channel_id = 1;</code>
       * @param value The channelId to set.
       * @return This builder for chaining.
       */
      public Builder setChannelId(int value) {
        
        channelId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *0~16
       * </pre>
       *
       * <code>int32 channel_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelId() {
        
        channelId_ = 0;
        onChanged();
        return this;
      }

      private double width_ ;
      /**
       * <pre>
       *多路DDC带宽：1kHz/3kHz/10kHz/30kHz/300kHz
       * </pre>
       *
       * <code>double width = 2;</code>
       * @return The width.
       */
      @java.lang.Override
      public double getWidth() {
        return width_;
      }
      /**
       * <pre>
       *多路DDC带宽：1kHz/3kHz/10kHz/30kHz/300kHz
       * </pre>
       *
       * <code>double width = 2;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(double value) {
        
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *多路DDC带宽：1kHz/3kHz/10kHz/30kHz/300kHz
       * </pre>
       *
       * <code>double width = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        
        width_ = 0D;
        onChanged();
        return this;
      }

      private double centFreq_ ;
      /**
       * <pre>
       *中心频率，Hz
       * </pre>
       *
       * <code>double cent_freq = 3;</code>
       * @return The centFreq.
       */
      @java.lang.Override
      public double getCentFreq() {
        return centFreq_;
      }
      /**
       * <pre>
       *中心频率，Hz
       * </pre>
       *
       * <code>double cent_freq = 3;</code>
       * @param value The centFreq to set.
       * @return This builder for chaining.
       */
      public Builder setCentFreq(double value) {
        
        centFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中心频率，Hz
       * </pre>
       *
       * <code>double cent_freq = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearCentFreq() {
        
        centFreq_ = 0D;
        onChanged();
        return this;
      }

      private boolean run_ ;
      /**
       * <pre>
       *窄带任务运行控制：true，启动；false，停止
       * </pre>
       *
       * <code>bool run = 4;</code>
       * @return The run.
       */
      @java.lang.Override
      public boolean getRun() {
        return run_;
      }
      /**
       * <pre>
       *窄带任务运行控制：true，启动；false，停止
       * </pre>
       *
       * <code>bool run = 4;</code>
       * @param value The run to set.
       * @return This builder for chaining.
       */
      public Builder setRun(boolean value) {
        
        run_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *窄带任务运行控制：true，启动；false，停止
       * </pre>
       *
       * <code>bool run = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRun() {
        
        run_ = false;
        onChanged();
        return this;
      }

      private boolean fft_ ;
      /**
       * <pre>
       *需要经FFT变换生成频谱
       * </pre>
       *
       * <code>bool fft = 5;</code>
       * @return The fft.
       */
      @java.lang.Override
      public boolean getFft() {
        return fft_;
      }
      /**
       * <pre>
       *需要经FFT变换生成频谱
       * </pre>
       *
       * <code>bool fft = 5;</code>
       * @param value The fft to set.
       * @return This builder for chaining.
       */
      public Builder setFft(boolean value) {
        
        fft_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *需要经FFT变换生成频谱
       * </pre>
       *
       * <code>bool fft = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFft() {
        
        fft_ = false;
        onChanged();
        return this;
      }

      private boolean demod_ ;
      /**
       * <pre>
       *是否需要进行模拟解调
       * </pre>
       *
       * <code>bool demod = 6;</code>
       * @return The demod.
       */
      @java.lang.Override
      public boolean getDemod() {
        return demod_;
      }
      /**
       * <pre>
       *是否需要进行模拟解调
       * </pre>
       *
       * <code>bool demod = 6;</code>
       * @param value The demod to set.
       * @return This builder for chaining.
       */
      public Builder setDemod(boolean value) {
        
        demod_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *是否需要进行模拟解调
       * </pre>
       *
       * <code>bool demod = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDemod() {
        
        demod_ = false;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
       * @return The type.
       */
      @java.lang.Override
      public zb.dcts.scenario.FFP.Demodulate.AnalogModType getType() {
        @SuppressWarnings("deprecation")
        zb.dcts.scenario.FFP.Demodulate.AnalogModType result = zb.dcts.scenario.FFP.Demodulate.AnalogModType.valueOf(type_);
        return result == null ? zb.dcts.scenario.FFP.Demodulate.AnalogModType.UNRECOGNIZED : result;
      }
      /**
       * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(zb.dcts.scenario.FFP.Demodulate.AnalogModType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.zb.dcts.scenario.FFP.AnalogModType type = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private double audioSr_ ;
      /**
       * <pre>
       *音频采样率
       * </pre>
       *
       * <code>double audio_sr = 8;</code>
       * @return The audioSr.
       */
      @java.lang.Override
      public double getAudioSr() {
        return audioSr_;
      }
      /**
       * <pre>
       *音频采样率
       * </pre>
       *
       * <code>double audio_sr = 8;</code>
       * @param value The audioSr to set.
       * @return This builder for chaining.
       */
      public Builder setAudioSr(double value) {
        
        audioSr_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *音频采样率
       * </pre>
       *
       * <code>double audio_sr = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearAudioSr() {
        
        audioSr_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.NarrowChannel)
    private static final zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel();
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NarrowChannel>
        PARSER = new com.google.protobuf.AbstractParser<NarrowChannel>() {
      @java.lang.Override
      public NarrowChannel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NarrowChannel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NarrowChannel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NarrowChannel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiAcqParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     * @return Whether the broad field is set.
     */
    boolean hasBroad();
    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     * @return The broad.
     */
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getBroad();
    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     */
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder getBroadOrBuilder();

    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> 
        getChannelsList();
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getChannels(int index);
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    int getChannelsCount();
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder> 
        getChannelsOrBuilderList();
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder getChannelsOrBuilder(
        int index);
  }
  /**
   * <pre>
   *采集参数
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam}
   */
  public static final class MultiAcqParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
      MultiAcqParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MultiAcqParam.newBuilder() to construct.
    private MultiAcqParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MultiAcqParam() {
      channels_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MultiAcqParam();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MultiAcqParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder subBuilder = null;
              if (broad_ != null) {
                subBuilder = broad_.toBuilder();
              }
              broad_ = input.readMessage(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(broad_);
                broad_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                channels_ = new java.util.ArrayList<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel>();
                mutable_bitField0_ |= 0x00000001;
              }
              channels_.add(
                  input.readMessage(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          channels_ = java.util.Collections.unmodifiableList(channels_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.Builder.class);
    }

    public static final int BROAD_FIELD_NUMBER = 1;
    private zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam broad_;
    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     * @return Whether the broad field is set.
     */
    @java.lang.Override
    public boolean hasBroad() {
      return broad_ != null;
    }
    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     * @return The broad.
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getBroad() {
      return broad_ == null ? zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.getDefaultInstance() : broad_;
    }
    /**
     * <pre>
     *单路宽带频谱参数
     * </pre>
     *
     * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder getBroadOrBuilder() {
      return getBroad();
    }

    public static final int CHANNELS_FIELD_NUMBER = 2;
    private java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> channels_;
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    @java.lang.Override
    public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> getChannelsList() {
      return channels_;
    }
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder> 
        getChannelsOrBuilderList() {
      return channels_;
    }
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    @java.lang.Override
    public int getChannelsCount() {
      return channels_.size();
    }
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getChannels(int index) {
      return channels_.get(index);
    }
    /**
     * <pre>
     *窄带通道参数
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder getChannelsOrBuilder(
        int index) {
      return channels_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (broad_ != null) {
        output.writeMessage(1, getBroad());
      }
      for (int i = 0; i < channels_.size(); i++) {
        output.writeMessage(2, channels_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (broad_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBroad());
      }
      for (int i = 0; i < channels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, channels_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam other = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam) obj;

      if (hasBroad() != other.hasBroad()) return false;
      if (hasBroad()) {
        if (!getBroad()
            .equals(other.getBroad())) return false;
      }
      if (!getChannelsList()
          .equals(other.getChannelsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBroad()) {
        hash = (37 * hash) + BROAD_FIELD_NUMBER;
        hash = (53 * hash) + getBroad().hashCode();
      }
      if (getChannelsCount() > 0) {
        hash = (37 * hash) + CHANNELS_FIELD_NUMBER;
        hash = (53 * hash) + getChannelsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *采集参数
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getChannelsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (broadBuilder_ == null) {
          broad_ = null;
        } else {
          broad_ = null;
          broadBuilder_ = null;
        }
        if (channelsBuilder_ == null) {
          channels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          channelsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam build() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam buildPartial() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam result = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam(this);
        int from_bitField0_ = bitField0_;
        if (broadBuilder_ == null) {
          result.broad_ = broad_;
        } else {
          result.broad_ = broadBuilder_.build();
        }
        if (channelsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            channels_ = java.util.Collections.unmodifiableList(channels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.channels_ = channels_;
        } else {
          result.channels_ = channelsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam) {
          return mergeFrom((zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam other) {
        if (other == zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam.getDefaultInstance()) return this;
        if (other.hasBroad()) {
          mergeBroad(other.getBroad());
        }
        if (channelsBuilder_ == null) {
          if (!other.channels_.isEmpty()) {
            if (channels_.isEmpty()) {
              channels_ = other.channels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureChannelsIsMutable();
              channels_.addAll(other.channels_);
            }
            onChanged();
          }
        } else {
          if (!other.channels_.isEmpty()) {
            if (channelsBuilder_.isEmpty()) {
              channelsBuilder_.dispose();
              channelsBuilder_ = null;
              channels_ = other.channels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              channelsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChannelsFieldBuilder() : null;
            } else {
              channelsBuilder_.addAllMessages(other.channels_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam broad_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder> broadBuilder_;
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       * @return Whether the broad field is set.
       */
      public boolean hasBroad() {
        return broadBuilder_ != null || broad_ != null;
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       * @return The broad.
       */
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam getBroad() {
        if (broadBuilder_ == null) {
          return broad_ == null ? zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.getDefaultInstance() : broad_;
        } else {
          return broadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public Builder setBroad(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam value) {
        if (broadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          broad_ = value;
          onChanged();
        } else {
          broadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public Builder setBroad(
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder builderForValue) {
        if (broadBuilder_ == null) {
          broad_ = builderForValue.build();
          onChanged();
        } else {
          broadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public Builder mergeBroad(zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam value) {
        if (broadBuilder_ == null) {
          if (broad_ != null) {
            broad_ =
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.newBuilder(broad_).mergeFrom(value).buildPartial();
          } else {
            broad_ = value;
          }
          onChanged();
        } else {
          broadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public Builder clearBroad() {
        if (broadBuilder_ == null) {
          broad_ = null;
          onChanged();
        } else {
          broad_ = null;
          broadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder getBroadBuilder() {
        
        onChanged();
        return getBroadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      public zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder getBroadOrBuilder() {
        if (broadBuilder_ != null) {
          return broadBuilder_.getMessageOrBuilder();
        } else {
          return broad_ == null ?
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.getDefaultInstance() : broad_;
        }
      }
      /**
       * <pre>
       *单路宽带频谱参数
       * </pre>
       *
       * <code>.zb.dcts.scenario.kh.commSpectrum.SpectrumAcqParam broad = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder> 
          getBroadFieldBuilder() {
        if (broadBuilder_ == null) {
          broadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParam.Builder, zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.SpectrumAcqParamOrBuilder>(
                  getBroad(),
                  getParentForChildren(),
                  isClean());
          broad_ = null;
        }
        return broadBuilder_;
      }

      private java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> channels_ =
        java.util.Collections.emptyList();
      private void ensureChannelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          channels_ = new java.util.ArrayList<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel>(channels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder> channelsBuilder_;

      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> getChannelsList() {
        if (channelsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(channels_);
        } else {
          return channelsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public int getChannelsCount() {
        if (channelsBuilder_ == null) {
          return channels_.size();
        } else {
          return channelsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel getChannels(int index) {
        if (channelsBuilder_ == null) {
          return channels_.get(index);
        } else {
          return channelsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder setChannels(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.set(index, value);
          onChanged();
        } else {
          channelsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder setChannels(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.set(index, builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder addChannels(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.add(value);
          onChanged();
        } else {
          channelsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder addChannels(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel value) {
        if (channelsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelsIsMutable();
          channels_.add(index, value);
          onChanged();
        } else {
          channelsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder addChannels(
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.add(builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder addChannels(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder builderForValue) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.add(index, builderForValue.build());
          onChanged();
        } else {
          channelsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder addAllChannels(
          java.lang.Iterable<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel> values) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, channels_);
          onChanged();
        } else {
          channelsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder clearChannels() {
        if (channelsBuilder_ == null) {
          channels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          channelsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public Builder removeChannels(int index) {
        if (channelsBuilder_ == null) {
          ensureChannelsIsMutable();
          channels_.remove(index);
          onChanged();
        } else {
          channelsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder getChannelsBuilder(
          int index) {
        return getChannelsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder getChannelsOrBuilder(
          int index) {
        if (channelsBuilder_ == null) {
          return channels_.get(index);  } else {
          return channelsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder> 
           getChannelsOrBuilderList() {
        if (channelsBuilder_ != null) {
          return channelsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(channels_);
        }
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder addChannelsBuilder() {
        return getChannelsFieldBuilder().addBuilder(
            zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.getDefaultInstance());
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder addChannelsBuilder(
          int index) {
        return getChannelsFieldBuilder().addBuilder(
            index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.getDefaultInstance());
      }
      /**
       * <pre>
       *窄带通道参数
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.NarrowChannel channels = 2;</code>
       */
      public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder> 
           getChannelsBuilderList() {
        return getChannelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder> 
          getChannelsFieldBuilder() {
        if (channelsBuilder_ == null) {
          channelsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannel.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.NarrowChannelOrBuilder>(
                  channels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          channels_ = null;
        }
        return channelsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqParam)
    private static final zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam();
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultiAcqParam>
        PARSER = new com.google.protobuf.AbstractParser<MultiAcqParam>() {
      @java.lang.Override
      public MultiAcqParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiAcqParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MultiAcqParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultiAcqParam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChannelIQDataDevOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *通道号（0-127）For 跳频序列检测器
     * </pre>
     *
     * <code>int32 channel_id = 2;</code>
     * @return The channelId.
     */
    int getChannelId();

    /**
     * <pre>
     *突发信号ID(0-262143)，与HoppingData中的signal_id对应，暂时不用
     * </pre>
     *
     * <code>int32 signal_id = 3;</code>
     * @return The signalId.
     */
    int getSignalId();

    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double cent_freq = 4;</code>
     * @return The centFreq.
     */
    double getCentFreq();

    /**
     * <pre>
     *1 当前突发信号的最后一帧，暂时不用
     * </pre>
     *
     * <code>int32 status = 5;</code>
     * @return The status.
     */
    int getStatus();

    /**
     * <pre>
     *IQ采样率 单位为Hz
     * </pre>
     *
     * <code>double samp_rate = 6;</code>
     * @return The sampRate.
     */
    double getSampRate();

    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     * @return Whether the timeStamp field is set.
     */
    boolean hasTimeStamp();
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     * @return The timeStamp.
     */
    zb.dcts.Dcts.Timestamp getTimeStamp();
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     */
    zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder();

    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @return A list containing the dataIq.
     */
    java.util.List<java.lang.Integer> getDataIqList();
    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @return The count of dataIq.
     */
    int getDataIqCount();
    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @param index The index of the element to return.
     * @return The dataIq at the given index.
     */
    int getDataIq(int index);

    /**
     * <pre>
     *跳频中心频率，暂时不用
     * </pre>
     *
     * <code>double hopping_freq = 10;</code>
     * @return The hoppingFreq.
     */
    double getHoppingFreq();
  }
  /**
   * <pre>
   *设备窄带通路数据
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev}
   */
  public static final class ChannelIQDataDev extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
      ChannelIQDataDevOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChannelIQDataDev.newBuilder() to construct.
    private ChannelIQDataDev(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChannelIQDataDev() {
      dataIq_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChannelIQDataDev();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChannelIQDataDev(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 16: {

              channelId_ = input.readInt32();
              break;
            }
            case 24: {

              signalId_ = input.readInt32();
              break;
            }
            case 33: {

              centFreq_ = input.readDouble();
              break;
            }
            case 40: {

              status_ = input.readInt32();
              break;
            }
            case 49: {

              sampRate_ = input.readDouble();
              break;
            }
            case 58: {
              zb.dcts.Dcts.Timestamp.Builder subBuilder = null;
              if (timeStamp_ != null) {
                subBuilder = timeStamp_.toBuilder();
              }
              timeStamp_ = input.readMessage(zb.dcts.Dcts.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timeStamp_);
                timeStamp_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dataIq_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              dataIq_.addInt(input.readUInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                dataIq_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                dataIq_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 81: {

              hoppingFreq_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dataIq_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder.class);
    }

    public static final int CHANNEL_ID_FIELD_NUMBER = 2;
    private int channelId_;
    /**
     * <pre>
     *通道号（0-127）For 跳频序列检测器
     * </pre>
     *
     * <code>int32 channel_id = 2;</code>
     * @return The channelId.
     */
    @java.lang.Override
    public int getChannelId() {
      return channelId_;
    }

    public static final int SIGNAL_ID_FIELD_NUMBER = 3;
    private int signalId_;
    /**
     * <pre>
     *突发信号ID(0-262143)，与HoppingData中的signal_id对应，暂时不用
     * </pre>
     *
     * <code>int32 signal_id = 3;</code>
     * @return The signalId.
     */
    @java.lang.Override
    public int getSignalId() {
      return signalId_;
    }

    public static final int CENT_FREQ_FIELD_NUMBER = 4;
    private double centFreq_;
    /**
     * <pre>
     *中心频率
     * </pre>
     *
     * <code>double cent_freq = 4;</code>
     * @return The centFreq.
     */
    @java.lang.Override
    public double getCentFreq() {
      return centFreq_;
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private int status_;
    /**
     * <pre>
     *1 当前突发信号的最后一帧，暂时不用
     * </pre>
     *
     * <code>int32 status = 5;</code>
     * @return The status.
     */
    @java.lang.Override
    public int getStatus() {
      return status_;
    }

    public static final int SAMP_RATE_FIELD_NUMBER = 6;
    private double sampRate_;
    /**
     * <pre>
     *IQ采样率 单位为Hz
     * </pre>
     *
     * <code>double samp_rate = 6;</code>
     * @return The sampRate.
     */
    @java.lang.Override
    public double getSampRate() {
      return sampRate_;
    }

    public static final int TIME_STAMP_FIELD_NUMBER = 7;
    private zb.dcts.Dcts.Timestamp timeStamp_;
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     * @return Whether the timeStamp field is set.
     */
    @java.lang.Override
    public boolean hasTimeStamp() {
      return timeStamp_ != null;
    }
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     * @return The timeStamp.
     */
    @java.lang.Override
    public zb.dcts.Dcts.Timestamp getTimeStamp() {
      return timeStamp_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
    }
    /**
     * <pre>
     *时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
     */
    @java.lang.Override
    public zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder() {
      return getTimeStamp();
    }

    public static final int DATA_IQ_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.IntList dataIq_;
    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @return A list containing the dataIq.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getDataIqList() {
      return dataIq_;
    }
    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @return The count of dataIq.
     */
    public int getDataIqCount() {
      return dataIq_.size();
    }
    /**
     * <pre>
     *IQ路数据
     * </pre>
     *
     * <code>repeated uint32 data_iq = 8;</code>
     * @param index The index of the element to return.
     * @return The dataIq at the given index.
     */
    public int getDataIq(int index) {
      return dataIq_.getInt(index);
    }
    private int dataIqMemoizedSerializedSize = -1;

    public static final int HOPPING_FREQ_FIELD_NUMBER = 10;
    private double hoppingFreq_;
    /**
     * <pre>
     *跳频中心频率，暂时不用
     * </pre>
     *
     * <code>double hopping_freq = 10;</code>
     * @return The hoppingFreq.
     */
    @java.lang.Override
    public double getHoppingFreq() {
      return hoppingFreq_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (channelId_ != 0) {
        output.writeInt32(2, channelId_);
      }
      if (signalId_ != 0) {
        output.writeInt32(3, signalId_);
      }
      if (centFreq_ != 0D) {
        output.writeDouble(4, centFreq_);
      }
      if (status_ != 0) {
        output.writeInt32(5, status_);
      }
      if (sampRate_ != 0D) {
        output.writeDouble(6, sampRate_);
      }
      if (timeStamp_ != null) {
        output.writeMessage(7, getTimeStamp());
      }
      if (getDataIqList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(dataIqMemoizedSerializedSize);
      }
      for (int i = 0; i < dataIq_.size(); i++) {
        output.writeUInt32NoTag(dataIq_.getInt(i));
      }
      if (hoppingFreq_ != 0D) {
        output.writeDouble(10, hoppingFreq_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (channelId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, channelId_);
      }
      if (signalId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, signalId_);
      }
      if (centFreq_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, centFreq_);
      }
      if (status_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, status_);
      }
      if (sampRate_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, sampRate_);
      }
      if (timeStamp_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getTimeStamp());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dataIq_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataIq_.getInt(i));
        }
        size += dataSize;
        if (!getDataIqList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataIqMemoizedSerializedSize = dataSize;
      }
      if (hoppingFreq_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, hoppingFreq_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev other = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev) obj;

      if (getChannelId()
          != other.getChannelId()) return false;
      if (getSignalId()
          != other.getSignalId()) return false;
      if (java.lang.Double.doubleToLongBits(getCentFreq())
          != java.lang.Double.doubleToLongBits(
              other.getCentFreq())) return false;
      if (getStatus()
          != other.getStatus()) return false;
      if (java.lang.Double.doubleToLongBits(getSampRate())
          != java.lang.Double.doubleToLongBits(
              other.getSampRate())) return false;
      if (hasTimeStamp() != other.hasTimeStamp()) return false;
      if (hasTimeStamp()) {
        if (!getTimeStamp()
            .equals(other.getTimeStamp())) return false;
      }
      if (!getDataIqList()
          .equals(other.getDataIqList())) return false;
      if (java.lang.Double.doubleToLongBits(getHoppingFreq())
          != java.lang.Double.doubleToLongBits(
              other.getHoppingFreq())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CHANNEL_ID_FIELD_NUMBER;
      hash = (53 * hash) + getChannelId();
      hash = (37 * hash) + SIGNAL_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSignalId();
      hash = (37 * hash) + CENT_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCentFreq()));
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus();
      hash = (37 * hash) + SAMP_RATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSampRate()));
      if (hasTimeStamp()) {
        hash = (37 * hash) + TIME_STAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimeStamp().hashCode();
      }
      if (getDataIqCount() > 0) {
        hash = (37 * hash) + DATA_IQ_FIELD_NUMBER;
        hash = (53 * hash) + getDataIqList().hashCode();
      }
      hash = (37 * hash) + HOPPING_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getHoppingFreq()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *设备窄带通路数据
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        channelId_ = 0;

        signalId_ = 0;

        centFreq_ = 0D;

        status_ = 0;

        sampRate_ = 0D;

        if (timeStampBuilder_ == null) {
          timeStamp_ = null;
        } else {
          timeStamp_ = null;
          timeStampBuilder_ = null;
        }
        dataIq_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        hoppingFreq_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev build() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev buildPartial() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev result = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev(this);
        int from_bitField0_ = bitField0_;
        result.channelId_ = channelId_;
        result.signalId_ = signalId_;
        result.centFreq_ = centFreq_;
        result.status_ = status_;
        result.sampRate_ = sampRate_;
        if (timeStampBuilder_ == null) {
          result.timeStamp_ = timeStamp_;
        } else {
          result.timeStamp_ = timeStampBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          dataIq_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.dataIq_ = dataIq_;
        result.hoppingFreq_ = hoppingFreq_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev) {
          return mergeFrom((zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev other) {
        if (other == zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.getDefaultInstance()) return this;
        if (other.getChannelId() != 0) {
          setChannelId(other.getChannelId());
        }
        if (other.getSignalId() != 0) {
          setSignalId(other.getSignalId());
        }
        if (other.getCentFreq() != 0D) {
          setCentFreq(other.getCentFreq());
        }
        if (other.getStatus() != 0) {
          setStatus(other.getStatus());
        }
        if (other.getSampRate() != 0D) {
          setSampRate(other.getSampRate());
        }
        if (other.hasTimeStamp()) {
          mergeTimeStamp(other.getTimeStamp());
        }
        if (!other.dataIq_.isEmpty()) {
          if (dataIq_.isEmpty()) {
            dataIq_ = other.dataIq_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDataIqIsMutable();
            dataIq_.addAll(other.dataIq_);
          }
          onChanged();
        }
        if (other.getHoppingFreq() != 0D) {
          setHoppingFreq(other.getHoppingFreq());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int channelId_ ;
      /**
       * <pre>
       *通道号（0-127）For 跳频序列检测器
       * </pre>
       *
       * <code>int32 channel_id = 2;</code>
       * @return The channelId.
       */
      @java.lang.Override
      public int getChannelId() {
        return channelId_;
      }
      /**
       * <pre>
       *通道号（0-127）For 跳频序列检测器
       * </pre>
       *
       * <code>int32 channel_id = 2;</code>
       * @param value The channelId to set.
       * @return This builder for chaining.
       */
      public Builder setChannelId(int value) {
        
        channelId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *通道号（0-127）For 跳频序列检测器
       * </pre>
       *
       * <code>int32 channel_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChannelId() {
        
        channelId_ = 0;
        onChanged();
        return this;
      }

      private int signalId_ ;
      /**
       * <pre>
       *突发信号ID(0-262143)，与HoppingData中的signal_id对应，暂时不用
       * </pre>
       *
       * <code>int32 signal_id = 3;</code>
       * @return The signalId.
       */
      @java.lang.Override
      public int getSignalId() {
        return signalId_;
      }
      /**
       * <pre>
       *突发信号ID(0-262143)，与HoppingData中的signal_id对应，暂时不用
       * </pre>
       *
       * <code>int32 signal_id = 3;</code>
       * @param value The signalId to set.
       * @return This builder for chaining.
       */
      public Builder setSignalId(int value) {
        
        signalId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *突发信号ID(0-262143)，与HoppingData中的signal_id对应，暂时不用
       * </pre>
       *
       * <code>int32 signal_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSignalId() {
        
        signalId_ = 0;
        onChanged();
        return this;
      }

      private double centFreq_ ;
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double cent_freq = 4;</code>
       * @return The centFreq.
       */
      @java.lang.Override
      public double getCentFreq() {
        return centFreq_;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double cent_freq = 4;</code>
       * @param value The centFreq to set.
       * @return This builder for chaining.
       */
      public Builder setCentFreq(double value) {
        
        centFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中心频率
       * </pre>
       *
       * <code>double cent_freq = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCentFreq() {
        
        centFreq_ = 0D;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <pre>
       *1 当前突发信号的最后一帧，暂时不用
       * </pre>
       *
       * <code>int32 status = 5;</code>
       * @return The status.
       */
      @java.lang.Override
      public int getStatus() {
        return status_;
      }
      /**
       * <pre>
       *1 当前突发信号的最后一帧，暂时不用
       * </pre>
       *
       * <code>int32 status = 5;</code>
       * @param value The status to set.
       * @return This builder for chaining.
       */
      public Builder setStatus(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *1 当前突发信号的最后一帧，暂时不用
       * </pre>
       *
       * <code>int32 status = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private double sampRate_ ;
      /**
       * <pre>
       *IQ采样率 单位为Hz
       * </pre>
       *
       * <code>double samp_rate = 6;</code>
       * @return The sampRate.
       */
      @java.lang.Override
      public double getSampRate() {
        return sampRate_;
      }
      /**
       * <pre>
       *IQ采样率 单位为Hz
       * </pre>
       *
       * <code>double samp_rate = 6;</code>
       * @param value The sampRate to set.
       * @return This builder for chaining.
       */
      public Builder setSampRate(double value) {
        
        sampRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *IQ采样率 单位为Hz
       * </pre>
       *
       * <code>double samp_rate = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSampRate() {
        
        sampRate_ = 0D;
        onChanged();
        return this;
      }

      private zb.dcts.Dcts.Timestamp timeStamp_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> timeStampBuilder_;
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       * @return Whether the timeStamp field is set.
       */
      public boolean hasTimeStamp() {
        return timeStampBuilder_ != null || timeStamp_ != null;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       * @return The timeStamp.
       */
      public zb.dcts.Dcts.Timestamp getTimeStamp() {
        if (timeStampBuilder_ == null) {
          return timeStamp_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
        } else {
          return timeStampBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public Builder setTimeStamp(zb.dcts.Dcts.Timestamp value) {
        if (timeStampBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeStamp_ = value;
          onChanged();
        } else {
          timeStampBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public Builder setTimeStamp(
          zb.dcts.Dcts.Timestamp.Builder builderForValue) {
        if (timeStampBuilder_ == null) {
          timeStamp_ = builderForValue.build();
          onChanged();
        } else {
          timeStampBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public Builder mergeTimeStamp(zb.dcts.Dcts.Timestamp value) {
        if (timeStampBuilder_ == null) {
          if (timeStamp_ != null) {
            timeStamp_ =
              zb.dcts.Dcts.Timestamp.newBuilder(timeStamp_).mergeFrom(value).buildPartial();
          } else {
            timeStamp_ = value;
          }
          onChanged();
        } else {
          timeStampBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public Builder clearTimeStamp() {
        if (timeStampBuilder_ == null) {
          timeStamp_ = null;
          onChanged();
        } else {
          timeStamp_ = null;
          timeStampBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public zb.dcts.Dcts.Timestamp.Builder getTimeStampBuilder() {
        
        onChanged();
        return getTimeStampFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      public zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder() {
        if (timeStampBuilder_ != null) {
          return timeStampBuilder_.getMessageOrBuilder();
        } else {
          return timeStamp_ == null ?
              zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
        }
      }
      /**
       * <pre>
       *时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time_stamp = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> 
          getTimeStampFieldBuilder() {
        if (timeStampBuilder_ == null) {
          timeStampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder>(
                  getTimeStamp(),
                  getParentForChildren(),
                  isClean());
          timeStamp_ = null;
        }
        return timeStampBuilder_;
      }

      private com.google.protobuf.Internal.IntList dataIq_ = emptyIntList();
      private void ensureDataIqIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dataIq_ = mutableCopy(dataIq_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @return A list containing the dataIq.
       */
      public java.util.List<java.lang.Integer>
          getDataIqList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(dataIq_) : dataIq_;
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @return The count of dataIq.
       */
      public int getDataIqCount() {
        return dataIq_.size();
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @param index The index of the element to return.
       * @return The dataIq at the given index.
       */
      public int getDataIq(int index) {
        return dataIq_.getInt(index);
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @param index The index to set the value at.
       * @param value The dataIq to set.
       * @return This builder for chaining.
       */
      public Builder setDataIq(
          int index, int value) {
        ensureDataIqIsMutable();
        dataIq_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @param value The dataIq to add.
       * @return This builder for chaining.
       */
      public Builder addDataIq(int value) {
        ensureDataIqIsMutable();
        dataIq_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @param values The dataIq to add.
       * @return This builder for chaining.
       */
      public Builder addAllDataIq(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDataIqIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dataIq_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *IQ路数据
       * </pre>
       *
       * <code>repeated uint32 data_iq = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataIq() {
        dataIq_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private double hoppingFreq_ ;
      /**
       * <pre>
       *跳频中心频率，暂时不用
       * </pre>
       *
       * <code>double hopping_freq = 10;</code>
       * @return The hoppingFreq.
       */
      @java.lang.Override
      public double getHoppingFreq() {
        return hoppingFreq_;
      }
      /**
       * <pre>
       *跳频中心频率，暂时不用
       * </pre>
       *
       * <code>double hopping_freq = 10;</code>
       * @param value The hoppingFreq to set.
       * @return This builder for chaining.
       */
      public Builder setHoppingFreq(double value) {
        
        hoppingFreq_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跳频中心频率，暂时不用
       * </pre>
       *
       * <code>double hopping_freq = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearHoppingFreq() {
        
        hoppingFreq_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev)
    private static final zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev();
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChannelIQDataDev>
        PARSER = new com.google.protobuf.AbstractParser<ChannelIQDataDev>() {
      @java.lang.Override
      public ChannelIQDataDev parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChannelIQDataDev(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChannelIQDataDev> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChannelIQDataDev> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiAcqResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     * @return The header.
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getHeader();
    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder getHeaderOrBuilder();

    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @return A list containing the spectrum.
     */
    java.util.List<java.lang.Float> getSpectrumList();
    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @return The count of spectrum.
     */
    int getSpectrumCount();
    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @param index The index of the element to return.
     * @return The spectrum at the given index.
     */
    float getSpectrum(int index);

    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> 
        getChannelDataList();
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getChannelData(int index);
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    int getChannelDataCount();
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder> 
        getChannelDataOrBuilderList();
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder getChannelDataOrBuilder(
        int index);
  }
  /**
   * <pre>
   *设备产生的原始数据
   * </pre>
   *
   * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult}
   */
  public static final class MultiAcqResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
      MultiAcqResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MultiAcqResult.newBuilder() to construct.
    private MultiAcqResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MultiAcqResult() {
      spectrum_ = emptyFloatList();
      channelData_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MultiAcqResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MultiAcqResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder subBuilder = null;
              if (header_ != null) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }

              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                spectrum_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              spectrum_.addFloat(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                spectrum_ = newFloatList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                spectrum_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                channelData_ = new java.util.ArrayList<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev>();
                mutable_bitField0_ |= 0x00000002;
              }
              channelData_.add(
                  input.readMessage(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          spectrum_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          channelData_ = java.util.Collections.unmodifiableList(channelData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.Builder.class);
    }

    public interface ResultHeaderOrBuilder extends
        // @@protoc_insertion_point(interface_extends:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       * @return Whether the resultFrom field is set.
       */
      boolean hasResultFrom();
      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       * @return The resultFrom.
       */
      zb.dcts.source.Source.SourceId getResultFrom();
      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       */
      zb.dcts.source.Source.SourceIdOrBuilder getResultFromOrBuilder();

      /**
       * <code>uint32 sequence_number = 2;</code>
       * @return The sequenceNumber.
       */
      int getSequenceNumber();

      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       * @return Whether the timeStamp field is set.
       */
      boolean hasTimeStamp();
      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       * @return The timeStamp.
       */
      zb.dcts.Dcts.Timestamp getTimeStamp();
      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       */
      zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder();

      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       * @return Whether the devicePosition field is set.
       */
      boolean hasDevicePosition();
      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       * @return The devicePosition.
       */
      zb.dcts.Dcts.Position getDevicePosition();
      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       */
      zb.dcts.Dcts.PositionOrBuilder getDevicePositionOrBuilder();

      /**
       * <pre>
       *宽带中心频率
       * </pre>
       *
       * <code>double cent_freq = 5;</code>
       * @return The centFreq.
       */
      double getCentFreq();

      /**
       * <pre>
       *宽带IQ采样率 单位为Hz
       * </pre>
       *
       * <code>double samp_rate = 6;</code>
       * @return The sampRate.
       */
      double getSampRate();

      /**
       * <pre>
       *量化幅度校准值
       * </pre>
       *
       * <code>double qtz = 8;</code>
       * @return The qtz.
       */
      double getQtz();

      /**
       * <pre>
       *带宽幅度校准值
       * </pre>
       *
       * <code>double spanIF = 9;</code>
       * @return The spanIF.
       */
      double getSpanIF();
    }
    /**
     * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader}
     */
    public static final class ResultHeader extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
        ResultHeaderOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use ResultHeader.newBuilder() to construct.
      private ResultHeader(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private ResultHeader() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new ResultHeader();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private ResultHeader(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                zb.dcts.source.Source.SourceId.Builder subBuilder = null;
                if (resultFrom_ != null) {
                  subBuilder = resultFrom_.toBuilder();
                }
                resultFrom_ = input.readMessage(zb.dcts.source.Source.SourceId.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(resultFrom_);
                  resultFrom_ = subBuilder.buildPartial();
                }

                break;
              }
              case 16: {

                sequenceNumber_ = input.readUInt32();
                break;
              }
              case 26: {
                zb.dcts.Dcts.Timestamp.Builder subBuilder = null;
                if (timeStamp_ != null) {
                  subBuilder = timeStamp_.toBuilder();
                }
                timeStamp_ = input.readMessage(zb.dcts.Dcts.Timestamp.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(timeStamp_);
                  timeStamp_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                zb.dcts.Dcts.Position.Builder subBuilder = null;
                if (devicePosition_ != null) {
                  subBuilder = devicePosition_.toBuilder();
                }
                devicePosition_ = input.readMessage(zb.dcts.Dcts.Position.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(devicePosition_);
                  devicePosition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 41: {

                centFreq_ = input.readDouble();
                break;
              }
              case 49: {

                sampRate_ = input.readDouble();
                break;
              }
              case 65: {

                qtz_ = input.readDouble();
                break;
              }
              case 73: {

                spanIF_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder.class);
      }

      public static final int RESULT_FROM_FIELD_NUMBER = 1;
      private zb.dcts.source.Source.SourceId resultFrom_;
      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       * @return Whether the resultFrom field is set.
       */
      @java.lang.Override
      public boolean hasResultFrom() {
        return resultFrom_ != null;
      }
      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       * @return The resultFrom.
       */
      @java.lang.Override
      public zb.dcts.source.Source.SourceId getResultFrom() {
        return resultFrom_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : resultFrom_;
      }
      /**
       * <code>.zb.dcts.source.SourceId result_from = 1;</code>
       */
      @java.lang.Override
      public zb.dcts.source.Source.SourceIdOrBuilder getResultFromOrBuilder() {
        return getResultFrom();
      }

      public static final int SEQUENCE_NUMBER_FIELD_NUMBER = 2;
      private int sequenceNumber_;
      /**
       * <code>uint32 sequence_number = 2;</code>
       * @return The sequenceNumber.
       */
      @java.lang.Override
      public int getSequenceNumber() {
        return sequenceNumber_;
      }

      public static final int TIME_STAMP_FIELD_NUMBER = 3;
      private zb.dcts.Dcts.Timestamp timeStamp_;
      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       * @return Whether the timeStamp field is set.
       */
      @java.lang.Override
      public boolean hasTimeStamp() {
        return timeStamp_ != null;
      }
      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       * @return The timeStamp.
       */
      @java.lang.Override
      public zb.dcts.Dcts.Timestamp getTimeStamp() {
        return timeStamp_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
      }
      /**
       * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
       */
      @java.lang.Override
      public zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder() {
        return getTimeStamp();
      }

      public static final int DEVICE_POSITION_FIELD_NUMBER = 4;
      private zb.dcts.Dcts.Position devicePosition_;
      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       * @return Whether the devicePosition field is set.
       */
      @java.lang.Override
      public boolean hasDevicePosition() {
        return devicePosition_ != null;
      }
      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       * @return The devicePosition.
       */
      @java.lang.Override
      public zb.dcts.Dcts.Position getDevicePosition() {
        return devicePosition_ == null ? zb.dcts.Dcts.Position.getDefaultInstance() : devicePosition_;
      }
      /**
       * <pre>
       *设备位置 
       * </pre>
       *
       * <code>.zb.dcts.Position device_position = 4;</code>
       */
      @java.lang.Override
      public zb.dcts.Dcts.PositionOrBuilder getDevicePositionOrBuilder() {
        return getDevicePosition();
      }

      public static final int CENT_FREQ_FIELD_NUMBER = 5;
      private double centFreq_;
      /**
       * <pre>
       *宽带中心频率
       * </pre>
       *
       * <code>double cent_freq = 5;</code>
       * @return The centFreq.
       */
      @java.lang.Override
      public double getCentFreq() {
        return centFreq_;
      }

      public static final int SAMP_RATE_FIELD_NUMBER = 6;
      private double sampRate_;
      /**
       * <pre>
       *宽带IQ采样率 单位为Hz
       * </pre>
       *
       * <code>double samp_rate = 6;</code>
       * @return The sampRate.
       */
      @java.lang.Override
      public double getSampRate() {
        return sampRate_;
      }

      public static final int QTZ_FIELD_NUMBER = 8;
      private double qtz_;
      /**
       * <pre>
       *量化幅度校准值
       * </pre>
       *
       * <code>double qtz = 8;</code>
       * @return The qtz.
       */
      @java.lang.Override
      public double getQtz() {
        return qtz_;
      }

      public static final int SPANIF_FIELD_NUMBER = 9;
      private double spanIF_;
      /**
       * <pre>
       *带宽幅度校准值
       * </pre>
       *
       * <code>double spanIF = 9;</code>
       * @return The spanIF.
       */
      @java.lang.Override
      public double getSpanIF() {
        return spanIF_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (resultFrom_ != null) {
          output.writeMessage(1, getResultFrom());
        }
        if (sequenceNumber_ != 0) {
          output.writeUInt32(2, sequenceNumber_);
        }
        if (timeStamp_ != null) {
          output.writeMessage(3, getTimeStamp());
        }
        if (devicePosition_ != null) {
          output.writeMessage(4, getDevicePosition());
        }
        if (centFreq_ != 0D) {
          output.writeDouble(5, centFreq_);
        }
        if (sampRate_ != 0D) {
          output.writeDouble(6, sampRate_);
        }
        if (qtz_ != 0D) {
          output.writeDouble(8, qtz_);
        }
        if (spanIF_ != 0D) {
          output.writeDouble(9, spanIF_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (resultFrom_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getResultFrom());
        }
        if (sequenceNumber_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, sequenceNumber_);
        }
        if (timeStamp_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getTimeStamp());
        }
        if (devicePosition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, getDevicePosition());
        }
        if (centFreq_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(5, centFreq_);
        }
        if (sampRate_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(6, sampRate_);
        }
        if (qtz_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(8, qtz_);
        }
        if (spanIF_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(9, spanIF_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader)) {
          return super.equals(obj);
        }
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader other = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader) obj;

        if (hasResultFrom() != other.hasResultFrom()) return false;
        if (hasResultFrom()) {
          if (!getResultFrom()
              .equals(other.getResultFrom())) return false;
        }
        if (getSequenceNumber()
            != other.getSequenceNumber()) return false;
        if (hasTimeStamp() != other.hasTimeStamp()) return false;
        if (hasTimeStamp()) {
          if (!getTimeStamp()
              .equals(other.getTimeStamp())) return false;
        }
        if (hasDevicePosition() != other.hasDevicePosition()) return false;
        if (hasDevicePosition()) {
          if (!getDevicePosition()
              .equals(other.getDevicePosition())) return false;
        }
        if (java.lang.Double.doubleToLongBits(getCentFreq())
            != java.lang.Double.doubleToLongBits(
                other.getCentFreq())) return false;
        if (java.lang.Double.doubleToLongBits(getSampRate())
            != java.lang.Double.doubleToLongBits(
                other.getSampRate())) return false;
        if (java.lang.Double.doubleToLongBits(getQtz())
            != java.lang.Double.doubleToLongBits(
                other.getQtz())) return false;
        if (java.lang.Double.doubleToLongBits(getSpanIF())
            != java.lang.Double.doubleToLongBits(
                other.getSpanIF())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasResultFrom()) {
          hash = (37 * hash) + RESULT_FROM_FIELD_NUMBER;
          hash = (53 * hash) + getResultFrom().hashCode();
        }
        hash = (37 * hash) + SEQUENCE_NUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getSequenceNumber();
        if (hasTimeStamp()) {
          hash = (37 * hash) + TIME_STAMP_FIELD_NUMBER;
          hash = (53 * hash) + getTimeStamp().hashCode();
        }
        if (hasDevicePosition()) {
          hash = (37 * hash) + DEVICE_POSITION_FIELD_NUMBER;
          hash = (53 * hash) + getDevicePosition().hashCode();
        }
        hash = (37 * hash) + CENT_FREQ_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCentFreq()));
        hash = (37 * hash) + SAMP_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSampRate()));
        hash = (37 * hash) + QTZ_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getQtz()));
        hash = (37 * hash) + SPANIF_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSpanIF()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder.class);
        }

        // Construct using zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (resultFromBuilder_ == null) {
            resultFrom_ = null;
          } else {
            resultFrom_ = null;
            resultFromBuilder_ = null;
          }
          sequenceNumber_ = 0;

          if (timeStampBuilder_ == null) {
            timeStamp_ = null;
          } else {
            timeStamp_ = null;
            timeStampBuilder_ = null;
          }
          if (devicePositionBuilder_ == null) {
            devicePosition_ = null;
          } else {
            devicePosition_ = null;
            devicePositionBuilder_ = null;
          }
          centFreq_ = 0D;

          sampRate_ = 0D;

          qtz_ = 0D;

          spanIF_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor;
        }

        @java.lang.Override
        public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getDefaultInstanceForType() {
          return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.getDefaultInstance();
        }

        @java.lang.Override
        public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader build() {
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader buildPartial() {
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader result = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader(this);
          if (resultFromBuilder_ == null) {
            result.resultFrom_ = resultFrom_;
          } else {
            result.resultFrom_ = resultFromBuilder_.build();
          }
          result.sequenceNumber_ = sequenceNumber_;
          if (timeStampBuilder_ == null) {
            result.timeStamp_ = timeStamp_;
          } else {
            result.timeStamp_ = timeStampBuilder_.build();
          }
          if (devicePositionBuilder_ == null) {
            result.devicePosition_ = devicePosition_;
          } else {
            result.devicePosition_ = devicePositionBuilder_.build();
          }
          result.centFreq_ = centFreq_;
          result.sampRate_ = sampRate_;
          result.qtz_ = qtz_;
          result.spanIF_ = spanIF_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader) {
            return mergeFrom((zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader other) {
          if (other == zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.getDefaultInstance()) return this;
          if (other.hasResultFrom()) {
            mergeResultFrom(other.getResultFrom());
          }
          if (other.getSequenceNumber() != 0) {
            setSequenceNumber(other.getSequenceNumber());
          }
          if (other.hasTimeStamp()) {
            mergeTimeStamp(other.getTimeStamp());
          }
          if (other.hasDevicePosition()) {
            mergeDevicePosition(other.getDevicePosition());
          }
          if (other.getCentFreq() != 0D) {
            setCentFreq(other.getCentFreq());
          }
          if (other.getSampRate() != 0D) {
            setSampRate(other.getSampRate());
          }
          if (other.getQtz() != 0D) {
            setQtz(other.getQtz());
          }
          if (other.getSpanIF() != 0D) {
            setSpanIF(other.getSpanIF());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private zb.dcts.source.Source.SourceId resultFrom_;
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> resultFromBuilder_;
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         * @return Whether the resultFrom field is set.
         */
        public boolean hasResultFrom() {
          return resultFromBuilder_ != null || resultFrom_ != null;
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         * @return The resultFrom.
         */
        public zb.dcts.source.Source.SourceId getResultFrom() {
          if (resultFromBuilder_ == null) {
            return resultFrom_ == null ? zb.dcts.source.Source.SourceId.getDefaultInstance() : resultFrom_;
          } else {
            return resultFromBuilder_.getMessage();
          }
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public Builder setResultFrom(zb.dcts.source.Source.SourceId value) {
          if (resultFromBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            resultFrom_ = value;
            onChanged();
          } else {
            resultFromBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public Builder setResultFrom(
            zb.dcts.source.Source.SourceId.Builder builderForValue) {
          if (resultFromBuilder_ == null) {
            resultFrom_ = builderForValue.build();
            onChanged();
          } else {
            resultFromBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public Builder mergeResultFrom(zb.dcts.source.Source.SourceId value) {
          if (resultFromBuilder_ == null) {
            if (resultFrom_ != null) {
              resultFrom_ =
                zb.dcts.source.Source.SourceId.newBuilder(resultFrom_).mergeFrom(value).buildPartial();
            } else {
              resultFrom_ = value;
            }
            onChanged();
          } else {
            resultFromBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public Builder clearResultFrom() {
          if (resultFromBuilder_ == null) {
            resultFrom_ = null;
            onChanged();
          } else {
            resultFrom_ = null;
            resultFromBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public zb.dcts.source.Source.SourceId.Builder getResultFromBuilder() {
          
          onChanged();
          return getResultFromFieldBuilder().getBuilder();
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        public zb.dcts.source.Source.SourceIdOrBuilder getResultFromOrBuilder() {
          if (resultFromBuilder_ != null) {
            return resultFromBuilder_.getMessageOrBuilder();
          } else {
            return resultFrom_ == null ?
                zb.dcts.source.Source.SourceId.getDefaultInstance() : resultFrom_;
          }
        }
        /**
         * <code>.zb.dcts.source.SourceId result_from = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder> 
            getResultFromFieldBuilder() {
          if (resultFromBuilder_ == null) {
            resultFromBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                zb.dcts.source.Source.SourceId, zb.dcts.source.Source.SourceId.Builder, zb.dcts.source.Source.SourceIdOrBuilder>(
                    getResultFrom(),
                    getParentForChildren(),
                    isClean());
            resultFrom_ = null;
          }
          return resultFromBuilder_;
        }

        private int sequenceNumber_ ;
        /**
         * <code>uint32 sequence_number = 2;</code>
         * @return The sequenceNumber.
         */
        @java.lang.Override
        public int getSequenceNumber() {
          return sequenceNumber_;
        }
        /**
         * <code>uint32 sequence_number = 2;</code>
         * @param value The sequenceNumber to set.
         * @return This builder for chaining.
         */
        public Builder setSequenceNumber(int value) {
          
          sequenceNumber_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint32 sequence_number = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearSequenceNumber() {
          
          sequenceNumber_ = 0;
          onChanged();
          return this;
        }

        private zb.dcts.Dcts.Timestamp timeStamp_;
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> timeStampBuilder_;
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         * @return Whether the timeStamp field is set.
         */
        public boolean hasTimeStamp() {
          return timeStampBuilder_ != null || timeStamp_ != null;
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         * @return The timeStamp.
         */
        public zb.dcts.Dcts.Timestamp getTimeStamp() {
          if (timeStampBuilder_ == null) {
            return timeStamp_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
          } else {
            return timeStampBuilder_.getMessage();
          }
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public Builder setTimeStamp(zb.dcts.Dcts.Timestamp value) {
          if (timeStampBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            timeStamp_ = value;
            onChanged();
          } else {
            timeStampBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public Builder setTimeStamp(
            zb.dcts.Dcts.Timestamp.Builder builderForValue) {
          if (timeStampBuilder_ == null) {
            timeStamp_ = builderForValue.build();
            onChanged();
          } else {
            timeStampBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public Builder mergeTimeStamp(zb.dcts.Dcts.Timestamp value) {
          if (timeStampBuilder_ == null) {
            if (timeStamp_ != null) {
              timeStamp_ =
                zb.dcts.Dcts.Timestamp.newBuilder(timeStamp_).mergeFrom(value).buildPartial();
            } else {
              timeStamp_ = value;
            }
            onChanged();
          } else {
            timeStampBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public Builder clearTimeStamp() {
          if (timeStampBuilder_ == null) {
            timeStamp_ = null;
            onChanged();
          } else {
            timeStamp_ = null;
            timeStampBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public zb.dcts.Dcts.Timestamp.Builder getTimeStampBuilder() {
          
          onChanged();
          return getTimeStampFieldBuilder().getBuilder();
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        public zb.dcts.Dcts.TimestampOrBuilder getTimeStampOrBuilder() {
          if (timeStampBuilder_ != null) {
            return timeStampBuilder_.getMessageOrBuilder();
          } else {
            return timeStamp_ == null ?
                zb.dcts.Dcts.Timestamp.getDefaultInstance() : timeStamp_;
          }
        }
        /**
         * <code>.zb.dcts.Timestamp time_stamp = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> 
            getTimeStampFieldBuilder() {
          if (timeStampBuilder_ == null) {
            timeStampBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder>(
                    getTimeStamp(),
                    getParentForChildren(),
                    isClean());
            timeStamp_ = null;
          }
          return timeStampBuilder_;
        }

        private zb.dcts.Dcts.Position devicePosition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder> devicePositionBuilder_;
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         * @return Whether the devicePosition field is set.
         */
        public boolean hasDevicePosition() {
          return devicePositionBuilder_ != null || devicePosition_ != null;
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         * @return The devicePosition.
         */
        public zb.dcts.Dcts.Position getDevicePosition() {
          if (devicePositionBuilder_ == null) {
            return devicePosition_ == null ? zb.dcts.Dcts.Position.getDefaultInstance() : devicePosition_;
          } else {
            return devicePositionBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public Builder setDevicePosition(zb.dcts.Dcts.Position value) {
          if (devicePositionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            devicePosition_ = value;
            onChanged();
          } else {
            devicePositionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public Builder setDevicePosition(
            zb.dcts.Dcts.Position.Builder builderForValue) {
          if (devicePositionBuilder_ == null) {
            devicePosition_ = builderForValue.build();
            onChanged();
          } else {
            devicePositionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public Builder mergeDevicePosition(zb.dcts.Dcts.Position value) {
          if (devicePositionBuilder_ == null) {
            if (devicePosition_ != null) {
              devicePosition_ =
                zb.dcts.Dcts.Position.newBuilder(devicePosition_).mergeFrom(value).buildPartial();
            } else {
              devicePosition_ = value;
            }
            onChanged();
          } else {
            devicePositionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public Builder clearDevicePosition() {
          if (devicePositionBuilder_ == null) {
            devicePosition_ = null;
            onChanged();
          } else {
            devicePosition_ = null;
            devicePositionBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public zb.dcts.Dcts.Position.Builder getDevicePositionBuilder() {
          
          onChanged();
          return getDevicePositionFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        public zb.dcts.Dcts.PositionOrBuilder getDevicePositionOrBuilder() {
          if (devicePositionBuilder_ != null) {
            return devicePositionBuilder_.getMessageOrBuilder();
          } else {
            return devicePosition_ == null ?
                zb.dcts.Dcts.Position.getDefaultInstance() : devicePosition_;
          }
        }
        /**
         * <pre>
         *设备位置 
         * </pre>
         *
         * <code>.zb.dcts.Position device_position = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder> 
            getDevicePositionFieldBuilder() {
          if (devicePositionBuilder_ == null) {
            devicePositionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder>(
                    getDevicePosition(),
                    getParentForChildren(),
                    isClean());
            devicePosition_ = null;
          }
          return devicePositionBuilder_;
        }

        private double centFreq_ ;
        /**
         * <pre>
         *宽带中心频率
         * </pre>
         *
         * <code>double cent_freq = 5;</code>
         * @return The centFreq.
         */
        @java.lang.Override
        public double getCentFreq() {
          return centFreq_;
        }
        /**
         * <pre>
         *宽带中心频率
         * </pre>
         *
         * <code>double cent_freq = 5;</code>
         * @param value The centFreq to set.
         * @return This builder for chaining.
         */
        public Builder setCentFreq(double value) {
          
          centFreq_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *宽带中心频率
         * </pre>
         *
         * <code>double cent_freq = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearCentFreq() {
          
          centFreq_ = 0D;
          onChanged();
          return this;
        }

        private double sampRate_ ;
        /**
         * <pre>
         *宽带IQ采样率 单位为Hz
         * </pre>
         *
         * <code>double samp_rate = 6;</code>
         * @return The sampRate.
         */
        @java.lang.Override
        public double getSampRate() {
          return sampRate_;
        }
        /**
         * <pre>
         *宽带IQ采样率 单位为Hz
         * </pre>
         *
         * <code>double samp_rate = 6;</code>
         * @param value The sampRate to set.
         * @return This builder for chaining.
         */
        public Builder setSampRate(double value) {
          
          sampRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *宽带IQ采样率 单位为Hz
         * </pre>
         *
         * <code>double samp_rate = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearSampRate() {
          
          sampRate_ = 0D;
          onChanged();
          return this;
        }

        private double qtz_ ;
        /**
         * <pre>
         *量化幅度校准值
         * </pre>
         *
         * <code>double qtz = 8;</code>
         * @return The qtz.
         */
        @java.lang.Override
        public double getQtz() {
          return qtz_;
        }
        /**
         * <pre>
         *量化幅度校准值
         * </pre>
         *
         * <code>double qtz = 8;</code>
         * @param value The qtz to set.
         * @return This builder for chaining.
         */
        public Builder setQtz(double value) {
          
          qtz_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *量化幅度校准值
         * </pre>
         *
         * <code>double qtz = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearQtz() {
          
          qtz_ = 0D;
          onChanged();
          return this;
        }

        private double spanIF_ ;
        /**
         * <pre>
         *带宽幅度校准值
         * </pre>
         *
         * <code>double spanIF = 9;</code>
         * @return The spanIF.
         */
        @java.lang.Override
        public double getSpanIF() {
          return spanIF_;
        }
        /**
         * <pre>
         *带宽幅度校准值
         * </pre>
         *
         * <code>double spanIF = 9;</code>
         * @param value The spanIF to set.
         * @return This builder for chaining.
         */
        public Builder setSpanIF(double value) {
          
          spanIF_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *带宽幅度校准值
         * </pre>
         *
         * <code>double spanIF = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearSpanIF() {
          
          spanIF_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
      }

      // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader)
      private static final zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader();
      }

      public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<ResultHeader>
          PARSER = new com.google.protobuf.AbstractParser<ResultHeader>() {
        @java.lang.Override
        public ResultHeader parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ResultHeader(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<ResultHeader> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<ResultHeader> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader header_;
    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getHeader() {
      return header_ == null ? zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.getDefaultInstance() : header_;
    }
    /**
     * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder getHeaderOrBuilder() {
      return getHeader();
    }

    public static final int SPECTRUM_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.FloatList spectrum_;
    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @return A list containing the spectrum.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getSpectrumList() {
      return spectrum_;
    }
    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @return The count of spectrum.
     */
    public int getSpectrumCount() {
      return spectrum_.size();
    }
    /**
     * <pre>
     *宽带频谱数据
     * </pre>
     *
     * <code>repeated float spectrum = 2;</code>
     * @param index The index of the element to return.
     * @return The spectrum at the given index.
     */
    public float getSpectrum(int index) {
      return spectrum_.getFloat(index);
    }
    private int spectrumMemoizedSerializedSize = -1;

    public static final int CHANNEL_DATA_FIELD_NUMBER = 3;
    private java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> channelData_;
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    @java.lang.Override
    public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> getChannelDataList() {
      return channelData_;
    }
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder> 
        getChannelDataOrBuilderList() {
      return channelData_;
    }
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    @java.lang.Override
    public int getChannelDataCount() {
      return channelData_.size();
    }
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getChannelData(int index) {
      return channelData_.get(index);
    }
    /**
     * <pre>
     *DDCE IQ数据   
     * </pre>
     *
     * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
     */
    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder getChannelDataOrBuilder(
        int index) {
      return channelData_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (getSpectrumList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(spectrumMemoizedSerializedSize);
      }
      for (int i = 0; i < spectrum_.size(); i++) {
        output.writeFloatNoTag(spectrum_.getFloat(i));
      }
      for (int i = 0; i < channelData_.size(); i++) {
        output.writeMessage(3, channelData_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getSpectrumList().size();
        size += dataSize;
        if (!getSpectrumList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        spectrumMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < channelData_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, channelData_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult)) {
        return super.equals(obj);
      }
      zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult other = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getSpectrumList()
          .equals(other.getSpectrumList())) return false;
      if (!getChannelDataList()
          .equals(other.getChannelDataList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getSpectrumCount() > 0) {
        hash = (37 * hash) + SPECTRUM_FIELD_NUMBER;
        hash = (53 * hash) + getSpectrumList().hashCode();
      }
      if (getChannelDataCount() > 0) {
        hash = (37 * hash) + CHANNEL_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getChannelDataList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *设备产生的原始数据
     * </pre>
     *
     * Protobuf type {@code zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.class, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.Builder.class);
      }

      // Construct using zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getChannelDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = null;
        } else {
          header_ = null;
          headerBuilder_ = null;
        }
        spectrum_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (channelDataBuilder_ == null) {
          channelData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          channelDataBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult getDefaultInstanceForType() {
        return zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult build() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult buildPartial() {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult result = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult(this);
        int from_bitField0_ = bitField0_;
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          spectrum_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.spectrum_ = spectrum_;
        if (channelDataBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            channelData_ = java.util.Collections.unmodifiableList(channelData_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.channelData_ = channelData_;
        } else {
          result.channelData_ = channelDataBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult) {
          return mergeFrom((zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult other) {
        if (other == zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (!other.spectrum_.isEmpty()) {
          if (spectrum_.isEmpty()) {
            spectrum_ = other.spectrum_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSpectrumIsMutable();
            spectrum_.addAll(other.spectrum_);
          }
          onChanged();
        }
        if (channelDataBuilder_ == null) {
          if (!other.channelData_.isEmpty()) {
            if (channelData_.isEmpty()) {
              channelData_ = other.channelData_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureChannelDataIsMutable();
              channelData_.addAll(other.channelData_);
            }
            onChanged();
          }
        } else {
          if (!other.channelData_.isEmpty()) {
            if (channelDataBuilder_.isEmpty()) {
              channelDataBuilder_.dispose();
              channelDataBuilder_ = null;
              channelData_ = other.channelData_;
              bitField0_ = (bitField0_ & ~0x00000002);
              channelDataBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChannelDataFieldBuilder() : null;
            } else {
              channelDataBuilder_.addAllMessages(other.channelData_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder> headerBuilder_;
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return headerBuilder_ != null || header_ != null;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       * @return The header.
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public Builder setHeader(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public Builder setHeader(
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public Builder mergeHeader(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader value) {
        if (headerBuilder_ == null) {
          if (header_ != null) {
            header_ =
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = null;
          onChanged();
        } else {
          header_ = null;
          headerBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder getHeaderBuilder() {
        
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult.ResultHeader header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeader.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult.ResultHeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private com.google.protobuf.Internal.FloatList spectrum_ = emptyFloatList();
      private void ensureSpectrumIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          spectrum_ = mutableCopy(spectrum_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @return A list containing the spectrum.
       */
      public java.util.List<java.lang.Float>
          getSpectrumList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(spectrum_) : spectrum_;
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @return The count of spectrum.
       */
      public int getSpectrumCount() {
        return spectrum_.size();
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @param index The index of the element to return.
       * @return The spectrum at the given index.
       */
      public float getSpectrum(int index) {
        return spectrum_.getFloat(index);
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @param index The index to set the value at.
       * @param value The spectrum to set.
       * @return This builder for chaining.
       */
      public Builder setSpectrum(
          int index, float value) {
        ensureSpectrumIsMutable();
        spectrum_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @param value The spectrum to add.
       * @return This builder for chaining.
       */
      public Builder addSpectrum(float value) {
        ensureSpectrumIsMutable();
        spectrum_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @param values The spectrum to add.
       * @return This builder for chaining.
       */
      public Builder addAllSpectrum(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureSpectrumIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, spectrum_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *宽带频谱数据
       * </pre>
       *
       * <code>repeated float spectrum = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpectrum() {
        spectrum_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> channelData_ =
        java.util.Collections.emptyList();
      private void ensureChannelDataIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          channelData_ = new java.util.ArrayList<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev>(channelData_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder> channelDataBuilder_;

      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> getChannelDataList() {
        if (channelDataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(channelData_);
        } else {
          return channelDataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public int getChannelDataCount() {
        if (channelDataBuilder_ == null) {
          return channelData_.size();
        } else {
          return channelDataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev getChannelData(int index) {
        if (channelDataBuilder_ == null) {
          return channelData_.get(index);
        } else {
          return channelDataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder setChannelData(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev value) {
        if (channelDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelDataIsMutable();
          channelData_.set(index, value);
          onChanged();
        } else {
          channelDataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder setChannelData(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder builderForValue) {
        if (channelDataBuilder_ == null) {
          ensureChannelDataIsMutable();
          channelData_.set(index, builderForValue.build());
          onChanged();
        } else {
          channelDataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder addChannelData(zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev value) {
        if (channelDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelDataIsMutable();
          channelData_.add(value);
          onChanged();
        } else {
          channelDataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder addChannelData(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev value) {
        if (channelDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChannelDataIsMutable();
          channelData_.add(index, value);
          onChanged();
        } else {
          channelDataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder addChannelData(
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder builderForValue) {
        if (channelDataBuilder_ == null) {
          ensureChannelDataIsMutable();
          channelData_.add(builderForValue.build());
          onChanged();
        } else {
          channelDataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder addChannelData(
          int index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder builderForValue) {
        if (channelDataBuilder_ == null) {
          ensureChannelDataIsMutable();
          channelData_.add(index, builderForValue.build());
          onChanged();
        } else {
          channelDataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder addAllChannelData(
          java.lang.Iterable<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev> values) {
        if (channelDataBuilder_ == null) {
          ensureChannelDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, channelData_);
          onChanged();
        } else {
          channelDataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder clearChannelData() {
        if (channelDataBuilder_ == null) {
          channelData_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          channelDataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public Builder removeChannelData(int index) {
        if (channelDataBuilder_ == null) {
          ensureChannelDataIsMutable();
          channelData_.remove(index);
          onChanged();
        } else {
          channelDataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder getChannelDataBuilder(
          int index) {
        return getChannelDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder getChannelDataOrBuilder(
          int index) {
        if (channelDataBuilder_ == null) {
          return channelData_.get(index);  } else {
          return channelDataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public java.util.List<? extends zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder> 
           getChannelDataOrBuilderList() {
        if (channelDataBuilder_ != null) {
          return channelDataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(channelData_);
        }
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder addChannelDataBuilder() {
        return getChannelDataFieldBuilder().addBuilder(
            zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.getDefaultInstance());
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder addChannelDataBuilder(
          int index) {
        return getChannelDataFieldBuilder().addBuilder(
            index, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.getDefaultInstance());
      }
      /**
       * <pre>
       *DDCE IQ数据   
       * </pre>
       *
       * <code>repeated .zb.dcts.scenario.kh.commMultiChannel.ChannelIQDataDev channel_data = 3;</code>
       */
      public java.util.List<zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder> 
           getChannelDataBuilderList() {
        return getChannelDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder> 
          getChannelDataFieldBuilder() {
        if (channelDataBuilder_ == null) {
          channelDataBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDev.Builder, zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.ChannelIQDataDevOrBuilder>(
                  channelData_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          channelData_ = null;
        }
        return channelDataBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.scenario.kh.commMultiChannel.MultiAcqResult)
    private static final zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult();
    }

    public static zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultiAcqResult>
        PARSER = new com.google.protobuf.AbstractParser<MultiAcqResult>() {
      @java.lang.Override
      public MultiAcqResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiAcqResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MultiAcqResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultiAcqResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.scenario.kh.commMultiChannel.KhMultiChannelAcq.MultiAcqResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#scenario/kh/KhMultiChannelAcq.proto\022$z" +
      "b.dcts.scenario.kh.commMultiChannel\032\ndct" +
      "s.proto\032\023source/source.proto\032\037scenario/k" +
      "h/KhSpectrumAcq.proto\032\035scenario/FFP/demo" +
      "dulate.proto\"\263\001\n\rNarrowChannel\022\022\n\nchanne" +
      "l_id\030\001 \001(\005\022\r\n\005width\030\002 \001(\001\022\021\n\tcent_freq\030\003" +
      " \001(\001\022\013\n\003run\030\004 \001(\010\022\013\n\003fft\030\005 \001(\010\022\r\n\005demod\030" +
      "\006 \001(\010\0221\n\004type\030\007 \001(\0162#.zb.dcts.scenario.F" +
      "FP.AnalogModType\022\020\n\010audio_sr\030\010 \001(\001\"\231\001\n\rM" +
      "ultiAcqParam\022A\n\005broad\030\001 \001(\01322.zb.dcts.sc" +
      "enario.kh.commSpectrum.SpectrumAcqParam\022" +
      "E\n\010channels\030\002 \003(\01323.zb.dcts.scenario.kh." +
      "commMultiChannel.NarrowChannel\"\276\001\n\020Chann" +
      "elIQDataDev\022\022\n\nchannel_id\030\002 \001(\005\022\021\n\tsigna" +
      "l_id\030\003 \001(\005\022\021\n\tcent_freq\030\004 \001(\001\022\016\n\006status\030" +
      "\005 \001(\005\022\021\n\tsamp_rate\030\006 \001(\001\022&\n\ntime_stamp\030\007" +
      " \001(\0132\022.zb.dcts.Timestamp\022\017\n\007data_iq\030\010 \003(" +
      "\r\022\024\n\014hopping_freq\030\n \001(\001\"\263\003\n\016MultiAcqResu" +
      "lt\022Q\n\006header\030\001 \001(\0132A.zb.dcts.scenario.kh" +
      ".commMultiChannel.MultiAcqResult.ResultH" +
      "eader\022\020\n\010spectrum\030\002 \003(\002\022L\n\014channel_data\030" +
      "\003 \003(\01326.zb.dcts.scenario.kh.commMultiCha" +
      "nnel.ChannelIQDataDev\032\355\001\n\014ResultHeader\022-" +
      "\n\013result_from\030\001 \001(\0132\030.zb.dcts.source.Sou" +
      "rceId\022\027\n\017sequence_number\030\002 \001(\r\022&\n\ntime_s" +
      "tamp\030\003 \001(\0132\022.zb.dcts.Timestamp\022*\n\017device" +
      "_position\030\004 \001(\0132\021.zb.dcts.Position\022\021\n\tce" +
      "nt_freq\030\005 \001(\001\022\021\n\tsamp_rate\030\006 \001(\001\022\013\n\003qtz\030" +
      "\010 \001(\001\022\016\n\006spanIF\030\t \001(\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          zb.dcts.Dcts.getDescriptor(),
          zb.dcts.source.Source.getDescriptor(),
          zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.getDescriptor(),
          zb.dcts.scenario.FFP.Demodulate.getDescriptor(),
        });
    internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commMultiChannel_NarrowChannel_descriptor,
        new java.lang.String[] { "ChannelId", "Width", "CentFreq", "Run", "Fft", "Demod", "Type", "AudioSr", });
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqParam_descriptor,
        new java.lang.String[] { "Broad", "Channels", });
    internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commMultiChannel_ChannelIQDataDev_descriptor,
        new java.lang.String[] { "ChannelId", "SignalId", "CentFreq", "Status", "SampRate", "TimeStamp", "DataIq", "HoppingFreq", });
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor,
        new java.lang.String[] { "Header", "Spectrum", "ChannelData", });
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor =
      internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_descriptor.getNestedTypes().get(0);
    internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_scenario_kh_commMultiChannel_MultiAcqResult_ResultHeader_descriptor,
        new java.lang.String[] { "ResultFrom", "SequenceNumber", "TimeStamp", "DevicePosition", "CentFreq", "SampRate", "Qtz", "SpanIF", });
    zb.dcts.Dcts.getDescriptor();
    zb.dcts.source.Source.getDescriptor();
    zb.dcts.scenario.kh.commSpectrum.KhSpectrumAcq.getDescriptor();
    zb.dcts.scenario.FFP.Demodulate.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
