// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aeronaval/aeronaval.proto

package zb.dcts.aeronaval;

public final class Aeronaval {
  private Aeronaval() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 阵营
   * </pre>
   *
   * Protobuf enum {@code zb.dcts.aeronaval.Camp}
   */
  public enum Camp
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知阵营
     * </pre>
     *
     * <code>UNKNOWN_CAMP = 0;</code>
     */
    UNKNOWN_CAMP(0),
    /**
     * <pre>
     * 红方阵营
     * </pre>
     *
     * <code>RED_CAMP = 1;</code>
     */
    RED_CAMP(1),
    /**
     * <pre>
     * 蓝方阵营
     * </pre>
     *
     * <code>BLUE_CAMP = 2;</code>
     */
    BLUE_CAMP(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知阵营
     * </pre>
     *
     * <code>UNKNOWN_CAMP = 0;</code>
     */
    public static final int UNKNOWN_CAMP_VALUE = 0;
    /**
     * <pre>
     * 红方阵营
     * </pre>
     *
     * <code>RED_CAMP = 1;</code>
     */
    public static final int RED_CAMP_VALUE = 1;
    /**
     * <pre>
     * 蓝方阵营
     * </pre>
     *
     * <code>BLUE_CAMP = 2;</code>
     */
    public static final int BLUE_CAMP_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Camp valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Camp forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_CAMP;
        case 1: return RED_CAMP;
        case 2: return BLUE_CAMP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Camp>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Camp> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Camp>() {
            public Camp findValueByNumber(int number) {
              return Camp.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.aeronaval.Aeronaval.getDescriptor().getEnumTypes().get(0);
    }

    private static final Camp[] VALUES = values();

    public static Camp valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Camp(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.aeronaval.Camp)
  }

  /**
   * <pre>
   * 空域
   * </pre>
   *
   * Protobuf enum {@code zb.dcts.aeronaval.AirSpace}
   */
  public enum AirSpace
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_SPACE = 0;</code>
     */
    UNKNOWN_SPACE(0),
    /**
     * <pre>
     * 海
     * </pre>
     *
     * <code>SEA_SPACE = 1;</code>
     */
    SEA_SPACE(1),
    /**
     * <pre>
     * 陆
     * </pre>
     *
     * <code>GROUND_SPACE = 2;</code>
     */
    GROUND_SPACE(2),
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>AIR_SPACE = 3;</code>
     */
    AIR_SPACE(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOWN_SPACE = 0;</code>
     */
    public static final int UNKNOWN_SPACE_VALUE = 0;
    /**
     * <pre>
     * 海
     * </pre>
     *
     * <code>SEA_SPACE = 1;</code>
     */
    public static final int SEA_SPACE_VALUE = 1;
    /**
     * <pre>
     * 陆
     * </pre>
     *
     * <code>GROUND_SPACE = 2;</code>
     */
    public static final int GROUND_SPACE_VALUE = 2;
    /**
     * <pre>
     * 空
     * </pre>
     *
     * <code>AIR_SPACE = 3;</code>
     */
    public static final int AIR_SPACE_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AirSpace valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AirSpace forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_SPACE;
        case 1: return SEA_SPACE;
        case 2: return GROUND_SPACE;
        case 3: return AIR_SPACE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AirSpace>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AirSpace> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AirSpace>() {
            public AirSpace findValueByNumber(int number) {
              return AirSpace.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.aeronaval.Aeronaval.getDescriptor().getEnumTypes().get(1);
    }

    private static final AirSpace[] VALUES = values();

    public static AirSpace valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AirSpace(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.aeronaval.AirSpace)
  }

  /**
   * <pre>
   * 兵力类型
   * </pre>
   *
   * Protobuf enum {@code zb.dcts.aeronaval.EquType}
   */
  public enum EquType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_EUT = 0;</code>
     */
    UNKNOWN_EUT(0),
    /**
     * <code>AIRCAFT_EUT = 1;</code>
     */
    AIRCAFT_EUT(1),
    /**
     * <code>TANK_EUT = 2;</code>
     */
    TANK_EUT(2),
    /**
     * <code>MISSILE_VECHICLE_EUT = 3;</code>
     */
    MISSILE_VECHICLE_EUT(3),
    /**
     * <code>MISSILE_EUT = 4;</code>
     */
    MISSILE_EUT(4),
    /**
     * <code>CARRIER_EUT = 5;</code>
     */
    CARRIER_EUT(5),
    /**
     * <code>FRIGATE_EUT = 6;</code>
     */
    FRIGATE_EUT(6),
    /**
     * <code>COPTER_EUT = 7;</code>
     */
    COPTER_EUT(7),
    /**
     * <code>KJ500_EUT = 8;</code>
     */
    KJ500_EUT(8),
    /**
     * <code>YL10_WRJ_EUT = 9;</code>
     */
    YL10_WRJ_EUT(9),
    /**
     * <code>J16D_EUT = 10;</code>
     */
    J16D_EUT(10),
    /**
     * <code>YTG9_EUT = 11;</code>
     */
    YTG9_EUT(11),
    /**
     * <code>YTG8_EUT = 12;</code>
     */
    YTG8_EUT(12),
    /**
     * <code>GSBJ_EUT = 13;</code>
     */
    GSBJ_EUT(13),
    /**
     * <code>XY_WRJ_EUT = 14;</code>
     */
    XY_WRJ_EUT(14),
    /**
     * <code>JC_054A_EUT = 15;</code>
     */
    JC_054A_EUT(15),
    /**
     * <code>JC_052D_EUT = 16;</code>
     */
    JC_052D_EUT(16),
    /**
     * <code>JC_891BZ_EUT = 17;</code>
     */
    JC_891BZ_EUT(17),
    /**
     * <code>JC_CFBZ_EUT = 18;</code>
     */
    JC_CFBZ_EUT(18),
    /**
     * <code>VEHICLE_LAND_EUT = 19;</code>
     */
    VEHICLE_LAND_EUT(19),
    /**
     * <code>GYYSBJ_EUT = 20;</code>
     */
    GYYSBJ_EUT(20),
    /**
     * <code>FSYSBJ_EUT = 21;</code>
     */
    FSYSBJ_EUT(21),
    /**
     * <pre>
     * 201 舰船
     * </pre>
     *
     * <code>JC_201_EUT = 22;</code>
     */
    JC_201_EUT(22),
    /**
     * <pre>
     * 722保障舰
     * </pre>
     *
     * <code>JC_BZJ722_EUT = 23;</code>
     */
    JC_BZJ722_EUT(23),
    /**
     * <pre>
     * 扫海警戒船
     * </pre>
     *
     * <code>JC_SHJJ_EUT = 24;</code>
     */
    JC_SHJJ_EUT(24),
    /**
     * <pre>
     * 波音737
     * </pre>
     *
     * <code>BY737_EUT = 25;</code>
     */
    BY737_EUT(25),
    /**
     * <pre>
     * bo105直升机
     * </pre>
     *
     * <code>BO105_EUT = 26;</code>
     */
    BO105_EUT(26),
    /**
     * <pre>
     * E2-C
     * </pre>
     *
     * <code>E2C_EUT = 27;</code>
     */
    E2C_EUT(27),
    /**
     * <pre>
     * E3-B
     * </pre>
     *
     * <code>E3B_EUT = 28;</code>
     */
    E3B_EUT(28),
    /**
     * <pre>
     * F-4E
     * </pre>
     *
     * <code>F4E_EUT = 29;</code>
     */
    F4E_EUT(29),
    /**
     * <pre>
     * F-14
     * </pre>
     *
     * <code>F14_EUT = 30;</code>
     */
    F14_EUT(30),
    /**
     * <pre>
     * F-16
     * </pre>
     *
     * <code>F16_EUT = 31;</code>
     */
    F16_EUT(31),
    /**
     * <pre>
     * F-18
     * </pre>
     *
     * <code>F18_EUT = 32;</code>
     */
    F18_EUT(32),
    /**
     * <pre>
     * J10
     * </pre>
     *
     * <code>J10_EUT = 33;</code>
     */
    J10_EUT(33),
    /**
     * <pre>
     *武装直升机9
     * </pre>
     *
     * <code>WZ9_EUT = 34;</code>
     */
    WZ9_EUT(34),
    /**
     * <pre>
     *F15
     * </pre>
     *
     * <code>F15_EUT = 35;</code>
     */
    F15_EUT(35),
    /**
     * <pre>
     * su-27
     * </pre>
     *
     * <code>SU27_EUT = 36;</code>
     */
    SU27_EUT(36),
    /**
     * <pre>
     * 雷达
     * </pre>
     *
     * <code>LEIDA_EUT = 37;</code>
     */
    LEIDA_EUT(37),
    /**
     * <pre>
     * 055
     * </pre>
     *
     * <code>JC_055_EUT = 38;</code>
     */
    JC_055_EUT(38),
    /**
     * <pre>
     * 053H3
     * </pre>
     *
     * <code>JC_053H3_EUT = 39;</code>
     */
    JC_053H3_EUT(39),
    /**
     * <pre>
     * 056A
     * </pre>
     *
     * <code>JC_056A_EUT = 40;</code>
     */
    JC_056A_EUT(40),
    /**
     * <pre>
     * 海冰723
     * </pre>
     *
     * <code>JC_HB723_EUT = 41;</code>
     */
    JC_HB723_EUT(41),
    /**
     * <pre>
     * 歼15D
     * </pre>
     *
     * <code>J15D_EUT = 42;</code>
     */
    J15D_EUT(42),
    /**
     * <pre>
     * 歼20
     * </pre>
     *
     * <code>J20_EUT = 43;</code>
     */
    J20_EUT(43),
    /**
     * <pre>
     * 轰7A
     * </pre>
     *
     * <code>H7A_EUT = 44;</code>
     */
    H7A_EUT(44),
    /**
     * <pre>
     * 电子侦察856
     * </pre>
     *
     * <code>JC_DZZC856_EUT = 45;</code>
     */
    JC_DZZC856_EUT(45),
    /**
     * <pre>
     * 137现代级
     * </pre>
     *
     * <code>JC_137_EUT = 46;</code>
     */
    JC_137_EUT(46),
    /**
     * <pre>
     * 波音747
     * </pre>
     *
     * <code>BY747_EUT = 47;</code>
     */
    BY747_EUT(47),
    /**
     * <pre>
     * A320
     * </pre>
     *
     * <code>A320_EUT = 48;</code>
     */
    A320_EUT(48),
    /**
     * <pre>
     * A380
     * </pre>
     *
     * <code>A380_EUT = 49;</code>
     */
    A380_EUT(49),
    /**
     * <pre>
     * 渔船
     * </pre>
     *
     * <code>HOOKER_EUT = 50;</code>
     */
    HOOKER_EUT(50),
    /**
     * <pre>
     * MG18直升机
     * </pre>
     *
     * <code>COPTER_MG18_EUT = 51;</code>
     */
    COPTER_MG18_EUT(51),
    /**
     * <pre>
     * EA18G电子战机
     * </pre>
     *
     * <code>EA18G_EUT = 52;</code>
     */
    EA18G_EUT(52),
    /**
     * <pre>
     * 运20
     * </pre>
     *
     * <code>Y20_EUT = 53;</code>
     */
    Y20_EUT(53),
    /**
     * <pre>
     * 运输车
     * </pre>
     *
     * <code>DF_EQ1141_EUT = 54;</code>
     */
    DF_EQ1141_EUT(54),
    /**
     * <pre>
     * 指挥车
     * </pre>
     *
     * <code>COMMAND_VEHICLE_EUT = 55;</code>
     */
    COMMAND_VEHICLE_EUT(55),
    /**
     * <pre>
     * 海事公务船
     * </pre>
     *
     * <code>JC_MARINE_EUT = 56;</code>
     */
    JC_MARINE_EUT(56),
    /**
     * <pre>
     * 伊利莎白女王号战列舰
     * </pre>
     *
     * <code>JC_YLSB_EUT = 57;</code>
     */
    JC_YLSB_EUT(57),
    /**
     * <pre>
     * 兴登堡级战列舰
     * </pre>
     *
     * <code>JC_XDB_EUT = 58;</code>
     */
    JC_XDB_EUT(58),
    /**
     * <pre>
     * 黑天鹅级护卫舰
     * </pre>
     *
     * <code>JC_BLACKSWAN_EUT = 59;</code>
     */
    JC_BLACKSWAN_EUT(59),
    /**
     * <pre>
     * AGM88导弹
     * </pre>
     *
     * <code>MISSILE_AGM88 = 60;</code>
     */
    MISSILE_AGM88(60),
    /**
     * <pre>
     * AGM154导弹
     * </pre>
     *
     * <code>MISSILE_AGM154 = 61;</code>
     */
    MISSILE_AGM154(61),
    /**
     * <pre>
     * MALD导弹
     * </pre>
     *
     * <code>MISSILE_MALD = 62;</code>
     */
    MISSILE_MALD(62),
    /**
     * <pre>
     * 虎鲸潜艇器
     * </pre>
     *
     * <code>MISSILE_HJQTQ = 63;</code>
     */
    MISSILE_HJQTQ(63),
    /**
     * <pre>
     * 直升机Z20
     * </pre>
     *
     * <code>COPTER_Z20_EUT = 64;</code>
     */
    COPTER_Z20_EUT(64),
    /**
     * <pre>
     * 直升机Z9
     * </pre>
     *
     * <code>COPTER_Z9_EUT = 65;</code>
     */
    COPTER_Z9_EUT(65),
    /**
     * <pre>
     * 无人直升机WZ-2
     * </pre>
     *
     * <code>COPTER_WZ2_EUT = 66;</code>
     */
    COPTER_WZ2_EUT(66),
    /**
     * <pre>
     * 空警200
     * </pre>
     *
     * <code>KJ200_EUT = 67;</code>
     */
    KJ200_EUT(67),
    /**
     * <pre>
     * E-2D预警机
     * </pre>
     *
     * <code>E2D_EUT = 68;</code>
     */
    E2D_EUT(68),
    /**
     * <pre>
     * F-35飞机
     * </pre>
     *
     * <code>F35_EUT = 69;</code>
     */
    F35_EUT(69),
    /**
     * <pre>
     * EC-130H电子战飞机
     * </pre>
     *
     * <code>EC130H_EUT = 70;</code>
     */
    EC130H_EUT(70),
    /**
     * <pre>
     * EP-3E电子战飞机
     * </pre>
     *
     * <code>EP3E_EUT = 71;</code>
     */
    EP3E_EUT(71),
    /**
     * <pre>
     * J-11
     * </pre>
     *
     * <code>J11_EUT = 72;</code>
     */
    J11_EUT(72),
    /**
     * <pre>
     * F/A-18E/F飞机
     * </pre>
     *
     * <code>FA18EF_EUT = 73;</code>
     */
    FA18EF_EUT(73),
    /**
     * <pre>
     * P-8A反潜巡逻机
     * </pre>
     *
     * <code>P8A_EUT = 74;</code>
     */
    P8A_EUT(74),
    /**
     * <pre>
     * 小精灵
     * </pre>
     *
     * <code>XJL_WRJ_EUT = 75;</code>
     */
    XJL_WRJ_EUT(75),
    /**
     * <pre>
     * 全球鹰
     * </pre>
     *
     * <code>QQY_WRJ_EUT = 76;</code>
     */
    QQY_WRJ_EUT(76),
    /**
     * <pre>
     * XQ-58A无人机
     * </pre>
     *
     * <code>XQ58A_WRJ_EUT = 77;</code>
     */
    XQ58A_WRJ_EUT(77),
    /**
     * <pre>
     * ALTIUS-600无人机/巡飞弹
     * </pre>
     *
     * <code>ALTIUS600_WRJ_EUT = 78;</code>
     */
    ALTIUS600_WRJ_EUT(78),
    /**
     * <pre>
     * RIM-162鱼叉反舰导弹
     * </pre>
     *
     * <code>MISSILE_RIM162_EUT = 79;</code>
     */
    MISSILE_RIM162_EUT(79),
    /**
     * <pre>
     * MK-48鱼雷
     * </pre>
     *
     * <code>MISSILE_MK48_EUT = 80;</code>
     */
    MISSILE_MK48_EUT(80),
    /**
     * <pre>
     * MK-67潜射自航水雷
     * </pre>
     *
     * <code>MISSILE_MK67_EUT = 81;</code>
     */
    MISSILE_MK67_EUT(81),
    /**
     * <pre>
     * GBU-39
     * </pre>
     *
     * <code>MISSILE_GBU39_EUT = 82;</code>
     */
    MISSILE_GBU39_EUT(82),
    /**
     * <pre>
     * LRASM导弹
     * </pre>
     *
     * <code>MISSILE_LRASM_EUT = 83;</code>
     */
    MISSILE_LRASM_EUT(83),
    /**
     * <pre>
     * 霸主无人舰
     * </pre>
     *
     * <code>JC_BZBRJ_EUT = 84;</code>
     */
    JC_BZBRJ_EUT(84),
    /**
     * <pre>
     * 海魔无人艇
     * </pre>
     *
     * <code>JC_HMWRT_EUT = 85;</code>
     */
    JC_HMWRT_EUT(85),
    /**
     * <pre>
     * 弗吉尼亚核潜艇
     * </pre>
     *
     * <code>JC_FJNY_EUT = 86;</code>
     */
    JC_FJNY_EUT(86),
    /**
     * <pre>
     * 货轮
     * </pre>
     *
     * <code>JC_HUOLUN1_EUT = 87;</code>
     */
    JC_HUOLUN1_EUT(87),
    /**
     * <code>JC_HUOLUN2_EUT = 88;</code>
     */
    JC_HUOLUN2_EUT(88),
    /**
     * <code>JC_HUOLUN3_EUT = 89;</code>
     */
    JC_HUOLUN3_EUT(89),
    /**
     * <code>JC_HUOLUN4_EUT = 90;</code>
     */
    JC_HUOLUN4_EUT(90),
    /**
     * <pre>
     * 游轮
     * </pre>
     *
     * <code>JC_YOULUN1_EUT = 91;</code>
     */
    JC_YOULUN1_EUT(91),
    /**
     * <code>JC_YOULUN2_EUT = 92;</code>
     */
    JC_YOULUN2_EUT(92),
    /**
     * <code>JC_YOULUN3_EUT = 93;</code>
     */
    JC_YOULUN3_EUT(93),
    /**
     * <code>JC_YOULUN4_EUT = 94;</code>
     */
    JC_YOULUN4_EUT(94),
    /**
     * <pre>
     * 渔船
     * </pre>
     *
     * <code>JC_YUCHUAN1_EUT = 95;</code>
     */
    JC_YUCHUAN1_EUT(95),
    /**
     * <code>JC_YUCHUAN2_EUT = 96;</code>
     */
    JC_YUCHUAN2_EUT(96),
    /**
     * <code>JC_YUCHUAN3_EUT = 97;</code>
     */
    JC_YUCHUAN3_EUT(97),
    /**
     * <pre>
     * 临时蓝方导弹(因虚兵纹理问题添加)
     * </pre>
     *
     * <code>MISSILE_AGM88_BLUE = 98;</code>
     */
    MISSILE_AGM88_BLUE(98),
    /**
     * <pre>
     * HHQ-9B导弹
     * </pre>
     *
     * <code>MISSILE_HHQ9B_EUT = 99;</code>
     */
    MISSILE_HHQ9B_EUT(99),
    /**
     * <pre>
     * HQ-10导弹
     * </pre>
     *
     * <code>MISSILE_HQ10_EUT = 100;</code>
     */
    MISSILE_HQ10_EUT(100),
    /**
     * <pre>
     * 侦扰无人艇
     * </pre>
     *
     * <code>JC_ZRWRT_EUT = 101;</code>
     */
    JC_ZRWRT_EUT(101),
    /**
     * <pre>
     * 雷达
     * </pre>
     *
     * <code>RADAR_EUT = 102;</code>
     */
    RADAR_EUT(102),
    /**
     * <pre>
     * 辽宁舰
     * </pre>
     *
     * <code>JC_LIAONING_EUT = 103;</code>
     */
    JC_LIAONING_EUT(103),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN_EUT = 0;</code>
     */
    public static final int UNKNOWN_EUT_VALUE = 0;
    /**
     * <code>AIRCAFT_EUT = 1;</code>
     */
    public static final int AIRCAFT_EUT_VALUE = 1;
    /**
     * <code>TANK_EUT = 2;</code>
     */
    public static final int TANK_EUT_VALUE = 2;
    /**
     * <code>MISSILE_VECHICLE_EUT = 3;</code>
     */
    public static final int MISSILE_VECHICLE_EUT_VALUE = 3;
    /**
     * <code>MISSILE_EUT = 4;</code>
     */
    public static final int MISSILE_EUT_VALUE = 4;
    /**
     * <code>CARRIER_EUT = 5;</code>
     */
    public static final int CARRIER_EUT_VALUE = 5;
    /**
     * <code>FRIGATE_EUT = 6;</code>
     */
    public static final int FRIGATE_EUT_VALUE = 6;
    /**
     * <code>COPTER_EUT = 7;</code>
     */
    public static final int COPTER_EUT_VALUE = 7;
    /**
     * <code>KJ500_EUT = 8;</code>
     */
    public static final int KJ500_EUT_VALUE = 8;
    /**
     * <code>YL10_WRJ_EUT = 9;</code>
     */
    public static final int YL10_WRJ_EUT_VALUE = 9;
    /**
     * <code>J16D_EUT = 10;</code>
     */
    public static final int J16D_EUT_VALUE = 10;
    /**
     * <code>YTG9_EUT = 11;</code>
     */
    public static final int YTG9_EUT_VALUE = 11;
    /**
     * <code>YTG8_EUT = 12;</code>
     */
    public static final int YTG8_EUT_VALUE = 12;
    /**
     * <code>GSBJ_EUT = 13;</code>
     */
    public static final int GSBJ_EUT_VALUE = 13;
    /**
     * <code>XY_WRJ_EUT = 14;</code>
     */
    public static final int XY_WRJ_EUT_VALUE = 14;
    /**
     * <code>JC_054A_EUT = 15;</code>
     */
    public static final int JC_054A_EUT_VALUE = 15;
    /**
     * <code>JC_052D_EUT = 16;</code>
     */
    public static final int JC_052D_EUT_VALUE = 16;
    /**
     * <code>JC_891BZ_EUT = 17;</code>
     */
    public static final int JC_891BZ_EUT_VALUE = 17;
    /**
     * <code>JC_CFBZ_EUT = 18;</code>
     */
    public static final int JC_CFBZ_EUT_VALUE = 18;
    /**
     * <code>VEHICLE_LAND_EUT = 19;</code>
     */
    public static final int VEHICLE_LAND_EUT_VALUE = 19;
    /**
     * <code>GYYSBJ_EUT = 20;</code>
     */
    public static final int GYYSBJ_EUT_VALUE = 20;
    /**
     * <code>FSYSBJ_EUT = 21;</code>
     */
    public static final int FSYSBJ_EUT_VALUE = 21;
    /**
     * <pre>
     * 201 舰船
     * </pre>
     *
     * <code>JC_201_EUT = 22;</code>
     */
    public static final int JC_201_EUT_VALUE = 22;
    /**
     * <pre>
     * 722保障舰
     * </pre>
     *
     * <code>JC_BZJ722_EUT = 23;</code>
     */
    public static final int JC_BZJ722_EUT_VALUE = 23;
    /**
     * <pre>
     * 扫海警戒船
     * </pre>
     *
     * <code>JC_SHJJ_EUT = 24;</code>
     */
    public static final int JC_SHJJ_EUT_VALUE = 24;
    /**
     * <pre>
     * 波音737
     * </pre>
     *
     * <code>BY737_EUT = 25;</code>
     */
    public static final int BY737_EUT_VALUE = 25;
    /**
     * <pre>
     * bo105直升机
     * </pre>
     *
     * <code>BO105_EUT = 26;</code>
     */
    public static final int BO105_EUT_VALUE = 26;
    /**
     * <pre>
     * E2-C
     * </pre>
     *
     * <code>E2C_EUT = 27;</code>
     */
    public static final int E2C_EUT_VALUE = 27;
    /**
     * <pre>
     * E3-B
     * </pre>
     *
     * <code>E3B_EUT = 28;</code>
     */
    public static final int E3B_EUT_VALUE = 28;
    /**
     * <pre>
     * F-4E
     * </pre>
     *
     * <code>F4E_EUT = 29;</code>
     */
    public static final int F4E_EUT_VALUE = 29;
    /**
     * <pre>
     * F-14
     * </pre>
     *
     * <code>F14_EUT = 30;</code>
     */
    public static final int F14_EUT_VALUE = 30;
    /**
     * <pre>
     * F-16
     * </pre>
     *
     * <code>F16_EUT = 31;</code>
     */
    public static final int F16_EUT_VALUE = 31;
    /**
     * <pre>
     * F-18
     * </pre>
     *
     * <code>F18_EUT = 32;</code>
     */
    public static final int F18_EUT_VALUE = 32;
    /**
     * <pre>
     * J10
     * </pre>
     *
     * <code>J10_EUT = 33;</code>
     */
    public static final int J10_EUT_VALUE = 33;
    /**
     * <pre>
     *武装直升机9
     * </pre>
     *
     * <code>WZ9_EUT = 34;</code>
     */
    public static final int WZ9_EUT_VALUE = 34;
    /**
     * <pre>
     *F15
     * </pre>
     *
     * <code>F15_EUT = 35;</code>
     */
    public static final int F15_EUT_VALUE = 35;
    /**
     * <pre>
     * su-27
     * </pre>
     *
     * <code>SU27_EUT = 36;</code>
     */
    public static final int SU27_EUT_VALUE = 36;
    /**
     * <pre>
     * 雷达
     * </pre>
     *
     * <code>LEIDA_EUT = 37;</code>
     */
    public static final int LEIDA_EUT_VALUE = 37;
    /**
     * <pre>
     * 055
     * </pre>
     *
     * <code>JC_055_EUT = 38;</code>
     */
    public static final int JC_055_EUT_VALUE = 38;
    /**
     * <pre>
     * 053H3
     * </pre>
     *
     * <code>JC_053H3_EUT = 39;</code>
     */
    public static final int JC_053H3_EUT_VALUE = 39;
    /**
     * <pre>
     * 056A
     * </pre>
     *
     * <code>JC_056A_EUT = 40;</code>
     */
    public static final int JC_056A_EUT_VALUE = 40;
    /**
     * <pre>
     * 海冰723
     * </pre>
     *
     * <code>JC_HB723_EUT = 41;</code>
     */
    public static final int JC_HB723_EUT_VALUE = 41;
    /**
     * <pre>
     * 歼15D
     * </pre>
     *
     * <code>J15D_EUT = 42;</code>
     */
    public static final int J15D_EUT_VALUE = 42;
    /**
     * <pre>
     * 歼20
     * </pre>
     *
     * <code>J20_EUT = 43;</code>
     */
    public static final int J20_EUT_VALUE = 43;
    /**
     * <pre>
     * 轰7A
     * </pre>
     *
     * <code>H7A_EUT = 44;</code>
     */
    public static final int H7A_EUT_VALUE = 44;
    /**
     * <pre>
     * 电子侦察856
     * </pre>
     *
     * <code>JC_DZZC856_EUT = 45;</code>
     */
    public static final int JC_DZZC856_EUT_VALUE = 45;
    /**
     * <pre>
     * 137现代级
     * </pre>
     *
     * <code>JC_137_EUT = 46;</code>
     */
    public static final int JC_137_EUT_VALUE = 46;
    /**
     * <pre>
     * 波音747
     * </pre>
     *
     * <code>BY747_EUT = 47;</code>
     */
    public static final int BY747_EUT_VALUE = 47;
    /**
     * <pre>
     * A320
     * </pre>
     *
     * <code>A320_EUT = 48;</code>
     */
    public static final int A320_EUT_VALUE = 48;
    /**
     * <pre>
     * A380
     * </pre>
     *
     * <code>A380_EUT = 49;</code>
     */
    public static final int A380_EUT_VALUE = 49;
    /**
     * <pre>
     * 渔船
     * </pre>
     *
     * <code>HOOKER_EUT = 50;</code>
     */
    public static final int HOOKER_EUT_VALUE = 50;
    /**
     * <pre>
     * MG18直升机
     * </pre>
     *
     * <code>COPTER_MG18_EUT = 51;</code>
     */
    public static final int COPTER_MG18_EUT_VALUE = 51;
    /**
     * <pre>
     * EA18G电子战机
     * </pre>
     *
     * <code>EA18G_EUT = 52;</code>
     */
    public static final int EA18G_EUT_VALUE = 52;
    /**
     * <pre>
     * 运20
     * </pre>
     *
     * <code>Y20_EUT = 53;</code>
     */
    public static final int Y20_EUT_VALUE = 53;
    /**
     * <pre>
     * 运输车
     * </pre>
     *
     * <code>DF_EQ1141_EUT = 54;</code>
     */
    public static final int DF_EQ1141_EUT_VALUE = 54;
    /**
     * <pre>
     * 指挥车
     * </pre>
     *
     * <code>COMMAND_VEHICLE_EUT = 55;</code>
     */
    public static final int COMMAND_VEHICLE_EUT_VALUE = 55;
    /**
     * <pre>
     * 海事公务船
     * </pre>
     *
     * <code>JC_MARINE_EUT = 56;</code>
     */
    public static final int JC_MARINE_EUT_VALUE = 56;
    /**
     * <pre>
     * 伊利莎白女王号战列舰
     * </pre>
     *
     * <code>JC_YLSB_EUT = 57;</code>
     */
    public static final int JC_YLSB_EUT_VALUE = 57;
    /**
     * <pre>
     * 兴登堡级战列舰
     * </pre>
     *
     * <code>JC_XDB_EUT = 58;</code>
     */
    public static final int JC_XDB_EUT_VALUE = 58;
    /**
     * <pre>
     * 黑天鹅级护卫舰
     * </pre>
     *
     * <code>JC_BLACKSWAN_EUT = 59;</code>
     */
    public static final int JC_BLACKSWAN_EUT_VALUE = 59;
    /**
     * <pre>
     * AGM88导弹
     * </pre>
     *
     * <code>MISSILE_AGM88 = 60;</code>
     */
    public static final int MISSILE_AGM88_VALUE = 60;
    /**
     * <pre>
     * AGM154导弹
     * </pre>
     *
     * <code>MISSILE_AGM154 = 61;</code>
     */
    public static final int MISSILE_AGM154_VALUE = 61;
    /**
     * <pre>
     * MALD导弹
     * </pre>
     *
     * <code>MISSILE_MALD = 62;</code>
     */
    public static final int MISSILE_MALD_VALUE = 62;
    /**
     * <pre>
     * 虎鲸潜艇器
     * </pre>
     *
     * <code>MISSILE_HJQTQ = 63;</code>
     */
    public static final int MISSILE_HJQTQ_VALUE = 63;
    /**
     * <pre>
     * 直升机Z20
     * </pre>
     *
     * <code>COPTER_Z20_EUT = 64;</code>
     */
    public static final int COPTER_Z20_EUT_VALUE = 64;
    /**
     * <pre>
     * 直升机Z9
     * </pre>
     *
     * <code>COPTER_Z9_EUT = 65;</code>
     */
    public static final int COPTER_Z9_EUT_VALUE = 65;
    /**
     * <pre>
     * 无人直升机WZ-2
     * </pre>
     *
     * <code>COPTER_WZ2_EUT = 66;</code>
     */
    public static final int COPTER_WZ2_EUT_VALUE = 66;
    /**
     * <pre>
     * 空警200
     * </pre>
     *
     * <code>KJ200_EUT = 67;</code>
     */
    public static final int KJ200_EUT_VALUE = 67;
    /**
     * <pre>
     * E-2D预警机
     * </pre>
     *
     * <code>E2D_EUT = 68;</code>
     */
    public static final int E2D_EUT_VALUE = 68;
    /**
     * <pre>
     * F-35飞机
     * </pre>
     *
     * <code>F35_EUT = 69;</code>
     */
    public static final int F35_EUT_VALUE = 69;
    /**
     * <pre>
     * EC-130H电子战飞机
     * </pre>
     *
     * <code>EC130H_EUT = 70;</code>
     */
    public static final int EC130H_EUT_VALUE = 70;
    /**
     * <pre>
     * EP-3E电子战飞机
     * </pre>
     *
     * <code>EP3E_EUT = 71;</code>
     */
    public static final int EP3E_EUT_VALUE = 71;
    /**
     * <pre>
     * J-11
     * </pre>
     *
     * <code>J11_EUT = 72;</code>
     */
    public static final int J11_EUT_VALUE = 72;
    /**
     * <pre>
     * F/A-18E/F飞机
     * </pre>
     *
     * <code>FA18EF_EUT = 73;</code>
     */
    public static final int FA18EF_EUT_VALUE = 73;
    /**
     * <pre>
     * P-8A反潜巡逻机
     * </pre>
     *
     * <code>P8A_EUT = 74;</code>
     */
    public static final int P8A_EUT_VALUE = 74;
    /**
     * <pre>
     * 小精灵
     * </pre>
     *
     * <code>XJL_WRJ_EUT = 75;</code>
     */
    public static final int XJL_WRJ_EUT_VALUE = 75;
    /**
     * <pre>
     * 全球鹰
     * </pre>
     *
     * <code>QQY_WRJ_EUT = 76;</code>
     */
    public static final int QQY_WRJ_EUT_VALUE = 76;
    /**
     * <pre>
     * XQ-58A无人机
     * </pre>
     *
     * <code>XQ58A_WRJ_EUT = 77;</code>
     */
    public static final int XQ58A_WRJ_EUT_VALUE = 77;
    /**
     * <pre>
     * ALTIUS-600无人机/巡飞弹
     * </pre>
     *
     * <code>ALTIUS600_WRJ_EUT = 78;</code>
     */
    public static final int ALTIUS600_WRJ_EUT_VALUE = 78;
    /**
     * <pre>
     * RIM-162鱼叉反舰导弹
     * </pre>
     *
     * <code>MISSILE_RIM162_EUT = 79;</code>
     */
    public static final int MISSILE_RIM162_EUT_VALUE = 79;
    /**
     * <pre>
     * MK-48鱼雷
     * </pre>
     *
     * <code>MISSILE_MK48_EUT = 80;</code>
     */
    public static final int MISSILE_MK48_EUT_VALUE = 80;
    /**
     * <pre>
     * MK-67潜射自航水雷
     * </pre>
     *
     * <code>MISSILE_MK67_EUT = 81;</code>
     */
    public static final int MISSILE_MK67_EUT_VALUE = 81;
    /**
     * <pre>
     * GBU-39
     * </pre>
     *
     * <code>MISSILE_GBU39_EUT = 82;</code>
     */
    public static final int MISSILE_GBU39_EUT_VALUE = 82;
    /**
     * <pre>
     * LRASM导弹
     * </pre>
     *
     * <code>MISSILE_LRASM_EUT = 83;</code>
     */
    public static final int MISSILE_LRASM_EUT_VALUE = 83;
    /**
     * <pre>
     * 霸主无人舰
     * </pre>
     *
     * <code>JC_BZBRJ_EUT = 84;</code>
     */
    public static final int JC_BZBRJ_EUT_VALUE = 84;
    /**
     * <pre>
     * 海魔无人艇
     * </pre>
     *
     * <code>JC_HMWRT_EUT = 85;</code>
     */
    public static final int JC_HMWRT_EUT_VALUE = 85;
    /**
     * <pre>
     * 弗吉尼亚核潜艇
     * </pre>
     *
     * <code>JC_FJNY_EUT = 86;</code>
     */
    public static final int JC_FJNY_EUT_VALUE = 86;
    /**
     * <pre>
     * 货轮
     * </pre>
     *
     * <code>JC_HUOLUN1_EUT = 87;</code>
     */
    public static final int JC_HUOLUN1_EUT_VALUE = 87;
    /**
     * <code>JC_HUOLUN2_EUT = 88;</code>
     */
    public static final int JC_HUOLUN2_EUT_VALUE = 88;
    /**
     * <code>JC_HUOLUN3_EUT = 89;</code>
     */
    public static final int JC_HUOLUN3_EUT_VALUE = 89;
    /**
     * <code>JC_HUOLUN4_EUT = 90;</code>
     */
    public static final int JC_HUOLUN4_EUT_VALUE = 90;
    /**
     * <pre>
     * 游轮
     * </pre>
     *
     * <code>JC_YOULUN1_EUT = 91;</code>
     */
    public static final int JC_YOULUN1_EUT_VALUE = 91;
    /**
     * <code>JC_YOULUN2_EUT = 92;</code>
     */
    public static final int JC_YOULUN2_EUT_VALUE = 92;
    /**
     * <code>JC_YOULUN3_EUT = 93;</code>
     */
    public static final int JC_YOULUN3_EUT_VALUE = 93;
    /**
     * <code>JC_YOULUN4_EUT = 94;</code>
     */
    public static final int JC_YOULUN4_EUT_VALUE = 94;
    /**
     * <pre>
     * 渔船
     * </pre>
     *
     * <code>JC_YUCHUAN1_EUT = 95;</code>
     */
    public static final int JC_YUCHUAN1_EUT_VALUE = 95;
    /**
     * <code>JC_YUCHUAN2_EUT = 96;</code>
     */
    public static final int JC_YUCHUAN2_EUT_VALUE = 96;
    /**
     * <code>JC_YUCHUAN3_EUT = 97;</code>
     */
    public static final int JC_YUCHUAN3_EUT_VALUE = 97;
    /**
     * <pre>
     * 临时蓝方导弹(因虚兵纹理问题添加)
     * </pre>
     *
     * <code>MISSILE_AGM88_BLUE = 98;</code>
     */
    public static final int MISSILE_AGM88_BLUE_VALUE = 98;
    /**
     * <pre>
     * HHQ-9B导弹
     * </pre>
     *
     * <code>MISSILE_HHQ9B_EUT = 99;</code>
     */
    public static final int MISSILE_HHQ9B_EUT_VALUE = 99;
    /**
     * <pre>
     * HQ-10导弹
     * </pre>
     *
     * <code>MISSILE_HQ10_EUT = 100;</code>
     */
    public static final int MISSILE_HQ10_EUT_VALUE = 100;
    /**
     * <pre>
     * 侦扰无人艇
     * </pre>
     *
     * <code>JC_ZRWRT_EUT = 101;</code>
     */
    public static final int JC_ZRWRT_EUT_VALUE = 101;
    /**
     * <pre>
     * 雷达
     * </pre>
     *
     * <code>RADAR_EUT = 102;</code>
     */
    public static final int RADAR_EUT_VALUE = 102;
    /**
     * <pre>
     * 辽宁舰
     * </pre>
     *
     * <code>JC_LIAONING_EUT = 103;</code>
     */
    public static final int JC_LIAONING_EUT_VALUE = 103;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EquType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EquType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_EUT;
        case 1: return AIRCAFT_EUT;
        case 2: return TANK_EUT;
        case 3: return MISSILE_VECHICLE_EUT;
        case 4: return MISSILE_EUT;
        case 5: return CARRIER_EUT;
        case 6: return FRIGATE_EUT;
        case 7: return COPTER_EUT;
        case 8: return KJ500_EUT;
        case 9: return YL10_WRJ_EUT;
        case 10: return J16D_EUT;
        case 11: return YTG9_EUT;
        case 12: return YTG8_EUT;
        case 13: return GSBJ_EUT;
        case 14: return XY_WRJ_EUT;
        case 15: return JC_054A_EUT;
        case 16: return JC_052D_EUT;
        case 17: return JC_891BZ_EUT;
        case 18: return JC_CFBZ_EUT;
        case 19: return VEHICLE_LAND_EUT;
        case 20: return GYYSBJ_EUT;
        case 21: return FSYSBJ_EUT;
        case 22: return JC_201_EUT;
        case 23: return JC_BZJ722_EUT;
        case 24: return JC_SHJJ_EUT;
        case 25: return BY737_EUT;
        case 26: return BO105_EUT;
        case 27: return E2C_EUT;
        case 28: return E3B_EUT;
        case 29: return F4E_EUT;
        case 30: return F14_EUT;
        case 31: return F16_EUT;
        case 32: return F18_EUT;
        case 33: return J10_EUT;
        case 34: return WZ9_EUT;
        case 35: return F15_EUT;
        case 36: return SU27_EUT;
        case 37: return LEIDA_EUT;
        case 38: return JC_055_EUT;
        case 39: return JC_053H3_EUT;
        case 40: return JC_056A_EUT;
        case 41: return JC_HB723_EUT;
        case 42: return J15D_EUT;
        case 43: return J20_EUT;
        case 44: return H7A_EUT;
        case 45: return JC_DZZC856_EUT;
        case 46: return JC_137_EUT;
        case 47: return BY747_EUT;
        case 48: return A320_EUT;
        case 49: return A380_EUT;
        case 50: return HOOKER_EUT;
        case 51: return COPTER_MG18_EUT;
        case 52: return EA18G_EUT;
        case 53: return Y20_EUT;
        case 54: return DF_EQ1141_EUT;
        case 55: return COMMAND_VEHICLE_EUT;
        case 56: return JC_MARINE_EUT;
        case 57: return JC_YLSB_EUT;
        case 58: return JC_XDB_EUT;
        case 59: return JC_BLACKSWAN_EUT;
        case 60: return MISSILE_AGM88;
        case 61: return MISSILE_AGM154;
        case 62: return MISSILE_MALD;
        case 63: return MISSILE_HJQTQ;
        case 64: return COPTER_Z20_EUT;
        case 65: return COPTER_Z9_EUT;
        case 66: return COPTER_WZ2_EUT;
        case 67: return KJ200_EUT;
        case 68: return E2D_EUT;
        case 69: return F35_EUT;
        case 70: return EC130H_EUT;
        case 71: return EP3E_EUT;
        case 72: return J11_EUT;
        case 73: return FA18EF_EUT;
        case 74: return P8A_EUT;
        case 75: return XJL_WRJ_EUT;
        case 76: return QQY_WRJ_EUT;
        case 77: return XQ58A_WRJ_EUT;
        case 78: return ALTIUS600_WRJ_EUT;
        case 79: return MISSILE_RIM162_EUT;
        case 80: return MISSILE_MK48_EUT;
        case 81: return MISSILE_MK67_EUT;
        case 82: return MISSILE_GBU39_EUT;
        case 83: return MISSILE_LRASM_EUT;
        case 84: return JC_BZBRJ_EUT;
        case 85: return JC_HMWRT_EUT;
        case 86: return JC_FJNY_EUT;
        case 87: return JC_HUOLUN1_EUT;
        case 88: return JC_HUOLUN2_EUT;
        case 89: return JC_HUOLUN3_EUT;
        case 90: return JC_HUOLUN4_EUT;
        case 91: return JC_YOULUN1_EUT;
        case 92: return JC_YOULUN2_EUT;
        case 93: return JC_YOULUN3_EUT;
        case 94: return JC_YOULUN4_EUT;
        case 95: return JC_YUCHUAN1_EUT;
        case 96: return JC_YUCHUAN2_EUT;
        case 97: return JC_YUCHUAN3_EUT;
        case 98: return MISSILE_AGM88_BLUE;
        case 99: return MISSILE_HHQ9B_EUT;
        case 100: return MISSILE_HQ10_EUT;
        case 101: return JC_ZRWRT_EUT;
        case 102: return RADAR_EUT;
        case 103: return JC_LIAONING_EUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EquType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EquType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EquType>() {
            public EquType findValueByNumber(int number) {
              return EquType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return zb.dcts.aeronaval.Aeronaval.getDescriptor().getEnumTypes().get(2);
    }

    private static final EquType[] VALUES = values();

    public static EquType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EquType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zb.dcts.aeronaval.EquType)
  }

  public interface VelocityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.aeronaval.Velocity)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 东向速度
     * </pre>
     *
     * <code>double east_velocity = 1;</code>
     * @return The eastVelocity.
     */
    double getEastVelocity();

    /**
     * <pre>
     * 北向速度
     * </pre>
     *
     * <code>double north_velocity = 2;</code>
     * @return The northVelocity.
     */
    double getNorthVelocity();

    /**
     * <pre>
     * 垂直速度
     * </pre>
     *
     * <code>double vertical_velocity = 3;</code>
     * @return The verticalVelocity.
     */
    double getVerticalVelocity();
  }
  /**
   * Protobuf type {@code zb.dcts.aeronaval.Velocity}
   */
  public static final class Velocity extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.aeronaval.Velocity)
      VelocityOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Velocity.newBuilder() to construct.
    private Velocity(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Velocity() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Velocity();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Velocity(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              eastVelocity_ = input.readDouble();
              break;
            }
            case 17: {

              northVelocity_ = input.readDouble();
              break;
            }
            case 25: {

              verticalVelocity_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Velocity_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Velocity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.aeronaval.Aeronaval.Velocity.class, zb.dcts.aeronaval.Aeronaval.Velocity.Builder.class);
    }

    public static final int EAST_VELOCITY_FIELD_NUMBER = 1;
    private double eastVelocity_;
    /**
     * <pre>
     * 东向速度
     * </pre>
     *
     * <code>double east_velocity = 1;</code>
     * @return The eastVelocity.
     */
    @java.lang.Override
    public double getEastVelocity() {
      return eastVelocity_;
    }

    public static final int NORTH_VELOCITY_FIELD_NUMBER = 2;
    private double northVelocity_;
    /**
     * <pre>
     * 北向速度
     * </pre>
     *
     * <code>double north_velocity = 2;</code>
     * @return The northVelocity.
     */
    @java.lang.Override
    public double getNorthVelocity() {
      return northVelocity_;
    }

    public static final int VERTICAL_VELOCITY_FIELD_NUMBER = 3;
    private double verticalVelocity_;
    /**
     * <pre>
     * 垂直速度
     * </pre>
     *
     * <code>double vertical_velocity = 3;</code>
     * @return The verticalVelocity.
     */
    @java.lang.Override
    public double getVerticalVelocity() {
      return verticalVelocity_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (eastVelocity_ != 0D) {
        output.writeDouble(1, eastVelocity_);
      }
      if (northVelocity_ != 0D) {
        output.writeDouble(2, northVelocity_);
      }
      if (verticalVelocity_ != 0D) {
        output.writeDouble(3, verticalVelocity_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (eastVelocity_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, eastVelocity_);
      }
      if (northVelocity_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, northVelocity_);
      }
      if (verticalVelocity_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, verticalVelocity_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.aeronaval.Aeronaval.Velocity)) {
        return super.equals(obj);
      }
      zb.dcts.aeronaval.Aeronaval.Velocity other = (zb.dcts.aeronaval.Aeronaval.Velocity) obj;

      if (java.lang.Double.doubleToLongBits(getEastVelocity())
          != java.lang.Double.doubleToLongBits(
              other.getEastVelocity())) return false;
      if (java.lang.Double.doubleToLongBits(getNorthVelocity())
          != java.lang.Double.doubleToLongBits(
              other.getNorthVelocity())) return false;
      if (java.lang.Double.doubleToLongBits(getVerticalVelocity())
          != java.lang.Double.doubleToLongBits(
              other.getVerticalVelocity())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EAST_VELOCITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getEastVelocity()));
      hash = (37 * hash) + NORTH_VELOCITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNorthVelocity()));
      hash = (37 * hash) + VERTICAL_VELOCITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getVerticalVelocity()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Velocity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.aeronaval.Aeronaval.Velocity prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.aeronaval.Velocity}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.aeronaval.Velocity)
        zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Velocity_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Velocity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.aeronaval.Aeronaval.Velocity.class, zb.dcts.aeronaval.Aeronaval.Velocity.Builder.class);
      }

      // Construct using zb.dcts.aeronaval.Aeronaval.Velocity.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        eastVelocity_ = 0D;

        northVelocity_ = 0D;

        verticalVelocity_ = 0D;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Velocity_descriptor;
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Velocity getDefaultInstanceForType() {
        return zb.dcts.aeronaval.Aeronaval.Velocity.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Velocity build() {
        zb.dcts.aeronaval.Aeronaval.Velocity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Velocity buildPartial() {
        zb.dcts.aeronaval.Aeronaval.Velocity result = new zb.dcts.aeronaval.Aeronaval.Velocity(this);
        result.eastVelocity_ = eastVelocity_;
        result.northVelocity_ = northVelocity_;
        result.verticalVelocity_ = verticalVelocity_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.aeronaval.Aeronaval.Velocity) {
          return mergeFrom((zb.dcts.aeronaval.Aeronaval.Velocity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.aeronaval.Aeronaval.Velocity other) {
        if (other == zb.dcts.aeronaval.Aeronaval.Velocity.getDefaultInstance()) return this;
        if (other.getEastVelocity() != 0D) {
          setEastVelocity(other.getEastVelocity());
        }
        if (other.getNorthVelocity() != 0D) {
          setNorthVelocity(other.getNorthVelocity());
        }
        if (other.getVerticalVelocity() != 0D) {
          setVerticalVelocity(other.getVerticalVelocity());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.aeronaval.Aeronaval.Velocity parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.aeronaval.Aeronaval.Velocity) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double eastVelocity_ ;
      /**
       * <pre>
       * 东向速度
       * </pre>
       *
       * <code>double east_velocity = 1;</code>
       * @return The eastVelocity.
       */
      @java.lang.Override
      public double getEastVelocity() {
        return eastVelocity_;
      }
      /**
       * <pre>
       * 东向速度
       * </pre>
       *
       * <code>double east_velocity = 1;</code>
       * @param value The eastVelocity to set.
       * @return This builder for chaining.
       */
      public Builder setEastVelocity(double value) {
        
        eastVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 东向速度
       * </pre>
       *
       * <code>double east_velocity = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEastVelocity() {
        
        eastVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double northVelocity_ ;
      /**
       * <pre>
       * 北向速度
       * </pre>
       *
       * <code>double north_velocity = 2;</code>
       * @return The northVelocity.
       */
      @java.lang.Override
      public double getNorthVelocity() {
        return northVelocity_;
      }
      /**
       * <pre>
       * 北向速度
       * </pre>
       *
       * <code>double north_velocity = 2;</code>
       * @param value The northVelocity to set.
       * @return This builder for chaining.
       */
      public Builder setNorthVelocity(double value) {
        
        northVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 北向速度
       * </pre>
       *
       * <code>double north_velocity = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNorthVelocity() {
        
        northVelocity_ = 0D;
        onChanged();
        return this;
      }

      private double verticalVelocity_ ;
      /**
       * <pre>
       * 垂直速度
       * </pre>
       *
       * <code>double vertical_velocity = 3;</code>
       * @return The verticalVelocity.
       */
      @java.lang.Override
      public double getVerticalVelocity() {
        return verticalVelocity_;
      }
      /**
       * <pre>
       * 垂直速度
       * </pre>
       *
       * <code>double vertical_velocity = 3;</code>
       * @param value The verticalVelocity to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalVelocity(double value) {
        
        verticalVelocity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 垂直速度
       * </pre>
       *
       * <code>double vertical_velocity = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalVelocity() {
        
        verticalVelocity_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.aeronaval.Velocity)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.aeronaval.Velocity)
    private static final zb.dcts.aeronaval.Aeronaval.Velocity DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.aeronaval.Aeronaval.Velocity();
    }

    public static zb.dcts.aeronaval.Aeronaval.Velocity getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Velocity>
        PARSER = new com.google.protobuf.AbstractParser<Velocity>() {
      @java.lang.Override
      public Velocity parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Velocity(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Velocity> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Velocity> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.aeronaval.Aeronaval.Velocity getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TargetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:zb.dcts.aeronaval.Target)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     * @return Whether the time field is set.
     */
    boolean hasTime();
    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     * @return The time.
     */
    zb.dcts.Dcts.Timestamp getTime();
    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     */
    zb.dcts.Dcts.TimestampOrBuilder getTimeOrBuilder();

    /**
     * <pre>
     *目标ID
     * </pre>
     *
     * <code>uint32 id = 2;</code>
     * @return The id.
     */
    int getId();

    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     *阵营
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
     * @return The enum numeric value on the wire for camp.
     */
    int getCampValue();
    /**
     * <pre>
     *阵营
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
     * @return The camp.
     */
    zb.dcts.aeronaval.Aeronaval.Camp getCamp();

    /**
     * <pre>
     *空域
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
     * @return The enum numeric value on the wire for airSpace.
     */
    int getAirSpaceValue();
    /**
     * <pre>
     *空域
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
     * @return The airSpace.
     */
    zb.dcts.aeronaval.Aeronaval.AirSpace getAirSpace();

    /**
     * <pre>
     *目标类型
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
     * @return The enum numeric value on the wire for equType.
     */
    int getEquTypeValue();
    /**
     * <pre>
     *目标类型
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
     * @return The equType.
     */
    zb.dcts.aeronaval.Aeronaval.EquType getEquType();

    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     * @return Whether the position field is set.
     */
    boolean hasPosition();
    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     * @return The position.
     */
    zb.dcts.Dcts.Position getPosition();
    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     */
    zb.dcts.Dcts.PositionOrBuilder getPositionOrBuilder();

    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     * @return Whether the posture field is set.
     */
    boolean hasPosture();
    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     * @return The posture.
     */
    zb.dcts.Dcts.Posture getPosture();
    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     */
    zb.dcts.Dcts.PostureOrBuilder getPostureOrBuilder();

    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     * @return Whether the velocity field is set.
     */
    boolean hasVelocity();
    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     * @return The velocity.
     */
    zb.dcts.aeronaval.Aeronaval.Velocity getVelocity();
    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     */
    zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder getVelocityOrBuilder();
  }
  /**
   * Protobuf type {@code zb.dcts.aeronaval.Target}
   */
  public static final class Target extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:zb.dcts.aeronaval.Target)
      TargetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Target.newBuilder() to construct.
    private Target(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Target() {
      name_ = "";
      camp_ = 0;
      airSpace_ = 0;
      equType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Target();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Target(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              zb.dcts.Dcts.Timestamp.Builder subBuilder = null;
              if (time_ != null) {
                subBuilder = time_.toBuilder();
              }
              time_ = input.readMessage(zb.dcts.Dcts.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(time_);
                time_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              id_ = input.readUInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              camp_ = rawValue;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();

              airSpace_ = rawValue;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              equType_ = rawValue;
              break;
            }
            case 58: {
              zb.dcts.Dcts.Position.Builder subBuilder = null;
              if (position_ != null) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(zb.dcts.Dcts.Position.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              zb.dcts.Dcts.Posture.Builder subBuilder = null;
              if (posture_ != null) {
                subBuilder = posture_.toBuilder();
              }
              posture_ = input.readMessage(zb.dcts.Dcts.Posture.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(posture_);
                posture_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              zb.dcts.aeronaval.Aeronaval.Velocity.Builder subBuilder = null;
              if (velocity_ != null) {
                subBuilder = velocity_.toBuilder();
              }
              velocity_ = input.readMessage(zb.dcts.aeronaval.Aeronaval.Velocity.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(velocity_);
                velocity_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Target_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Target_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              zb.dcts.aeronaval.Aeronaval.Target.class, zb.dcts.aeronaval.Aeronaval.Target.Builder.class);
    }

    public static final int TIME_FIELD_NUMBER = 1;
    private zb.dcts.Dcts.Timestamp time_;
    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     * @return Whether the time field is set.
     */
    @java.lang.Override
    public boolean hasTime() {
      return time_ != null;
    }
    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     * @return The time.
     */
    @java.lang.Override
    public zb.dcts.Dcts.Timestamp getTime() {
      return time_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : time_;
    }
    /**
     * <pre>
     *消息时间
     * </pre>
     *
     * <code>.zb.dcts.Timestamp time = 1;</code>
     */
    @java.lang.Override
    public zb.dcts.Dcts.TimestampOrBuilder getTimeOrBuilder() {
      return getTime();
    }

    public static final int ID_FIELD_NUMBER = 2;
    private int id_;
    /**
     * <pre>
     *目标ID
     * </pre>
     *
     * <code>uint32 id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *名称
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CAMP_FIELD_NUMBER = 4;
    private int camp_;
    /**
     * <pre>
     *阵营
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
     * @return The enum numeric value on the wire for camp.
     */
    @java.lang.Override public int getCampValue() {
      return camp_;
    }
    /**
     * <pre>
     *阵营
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
     * @return The camp.
     */
    @java.lang.Override public zb.dcts.aeronaval.Aeronaval.Camp getCamp() {
      @SuppressWarnings("deprecation")
      zb.dcts.aeronaval.Aeronaval.Camp result = zb.dcts.aeronaval.Aeronaval.Camp.valueOf(camp_);
      return result == null ? zb.dcts.aeronaval.Aeronaval.Camp.UNRECOGNIZED : result;
    }

    public static final int AIR_SPACE_FIELD_NUMBER = 5;
    private int airSpace_;
    /**
     * <pre>
     *空域
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
     * @return The enum numeric value on the wire for airSpace.
     */
    @java.lang.Override public int getAirSpaceValue() {
      return airSpace_;
    }
    /**
     * <pre>
     *空域
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
     * @return The airSpace.
     */
    @java.lang.Override public zb.dcts.aeronaval.Aeronaval.AirSpace getAirSpace() {
      @SuppressWarnings("deprecation")
      zb.dcts.aeronaval.Aeronaval.AirSpace result = zb.dcts.aeronaval.Aeronaval.AirSpace.valueOf(airSpace_);
      return result == null ? zb.dcts.aeronaval.Aeronaval.AirSpace.UNRECOGNIZED : result;
    }

    public static final int EQU_TYPE_FIELD_NUMBER = 6;
    private int equType_;
    /**
     * <pre>
     *目标类型
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
     * @return The enum numeric value on the wire for equType.
     */
    @java.lang.Override public int getEquTypeValue() {
      return equType_;
    }
    /**
     * <pre>
     *目标类型
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
     * @return The equType.
     */
    @java.lang.Override public zb.dcts.aeronaval.Aeronaval.EquType getEquType() {
      @SuppressWarnings("deprecation")
      zb.dcts.aeronaval.Aeronaval.EquType result = zb.dcts.aeronaval.Aeronaval.EquType.valueOf(equType_);
      return result == null ? zb.dcts.aeronaval.Aeronaval.EquType.UNRECOGNIZED : result;
    }

    public static final int POSITION_FIELD_NUMBER = 7;
    private zb.dcts.Dcts.Position position_;
    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     * @return Whether the position field is set.
     */
    @java.lang.Override
    public boolean hasPosition() {
      return position_ != null;
    }
    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     * @return The position.
     */
    @java.lang.Override
    public zb.dcts.Dcts.Position getPosition() {
      return position_ == null ? zb.dcts.Dcts.Position.getDefaultInstance() : position_;
    }
    /**
     * <pre>
     *位置信息
     * </pre>
     *
     * <code>.zb.dcts.Position position = 7;</code>
     */
    @java.lang.Override
    public zb.dcts.Dcts.PositionOrBuilder getPositionOrBuilder() {
      return getPosition();
    }

    public static final int POSTURE_FIELD_NUMBER = 8;
    private zb.dcts.Dcts.Posture posture_;
    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     * @return Whether the posture field is set.
     */
    @java.lang.Override
    public boolean hasPosture() {
      return posture_ != null;
    }
    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     * @return The posture.
     */
    @java.lang.Override
    public zb.dcts.Dcts.Posture getPosture() {
      return posture_ == null ? zb.dcts.Dcts.Posture.getDefaultInstance() : posture_;
    }
    /**
     * <pre>
     *姿态信息
     * </pre>
     *
     * <code>.zb.dcts.Posture posture = 8;</code>
     */
    @java.lang.Override
    public zb.dcts.Dcts.PostureOrBuilder getPostureOrBuilder() {
      return getPosture();
    }

    public static final int VELOCITY_FIELD_NUMBER = 9;
    private zb.dcts.aeronaval.Aeronaval.Velocity velocity_;
    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     * @return Whether the velocity field is set.
     */
    @java.lang.Override
    public boolean hasVelocity() {
      return velocity_ != null;
    }
    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     * @return The velocity.
     */
    @java.lang.Override
    public zb.dcts.aeronaval.Aeronaval.Velocity getVelocity() {
      return velocity_ == null ? zb.dcts.aeronaval.Aeronaval.Velocity.getDefaultInstance() : velocity_;
    }
    /**
     * <pre>
     *速度信息
     * </pre>
     *
     * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
     */
    @java.lang.Override
    public zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder getVelocityOrBuilder() {
      return getVelocity();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (time_ != null) {
        output.writeMessage(1, getTime());
      }
      if (id_ != 0) {
        output.writeUInt32(2, id_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (camp_ != zb.dcts.aeronaval.Aeronaval.Camp.UNKNOWN_CAMP.getNumber()) {
        output.writeEnum(4, camp_);
      }
      if (airSpace_ != zb.dcts.aeronaval.Aeronaval.AirSpace.UNKNOWN_SPACE.getNumber()) {
        output.writeEnum(5, airSpace_);
      }
      if (equType_ != zb.dcts.aeronaval.Aeronaval.EquType.UNKNOWN_EUT.getNumber()) {
        output.writeEnum(6, equType_);
      }
      if (position_ != null) {
        output.writeMessage(7, getPosition());
      }
      if (posture_ != null) {
        output.writeMessage(8, getPosture());
      }
      if (velocity_ != null) {
        output.writeMessage(9, getVelocity());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (time_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTime());
      }
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, id_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (camp_ != zb.dcts.aeronaval.Aeronaval.Camp.UNKNOWN_CAMP.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, camp_);
      }
      if (airSpace_ != zb.dcts.aeronaval.Aeronaval.AirSpace.UNKNOWN_SPACE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, airSpace_);
      }
      if (equType_ != zb.dcts.aeronaval.Aeronaval.EquType.UNKNOWN_EUT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, equType_);
      }
      if (position_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getPosition());
      }
      if (posture_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getPosture());
      }
      if (velocity_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getVelocity());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof zb.dcts.aeronaval.Aeronaval.Target)) {
        return super.equals(obj);
      }
      zb.dcts.aeronaval.Aeronaval.Target other = (zb.dcts.aeronaval.Aeronaval.Target) obj;

      if (hasTime() != other.hasTime()) return false;
      if (hasTime()) {
        if (!getTime()
            .equals(other.getTime())) return false;
      }
      if (getId()
          != other.getId()) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (camp_ != other.camp_) return false;
      if (airSpace_ != other.airSpace_) return false;
      if (equType_ != other.equType_) return false;
      if (hasPosition() != other.hasPosition()) return false;
      if (hasPosition()) {
        if (!getPosition()
            .equals(other.getPosition())) return false;
      }
      if (hasPosture() != other.hasPosture()) return false;
      if (hasPosture()) {
        if (!getPosture()
            .equals(other.getPosture())) return false;
      }
      if (hasVelocity() != other.hasVelocity()) return false;
      if (hasVelocity()) {
        if (!getVelocity()
            .equals(other.getVelocity())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTime()) {
        hash = (37 * hash) + TIME_FIELD_NUMBER;
        hash = (53 * hash) + getTime().hashCode();
      }
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + CAMP_FIELD_NUMBER;
      hash = (53 * hash) + camp_;
      hash = (37 * hash) + AIR_SPACE_FIELD_NUMBER;
      hash = (53 * hash) + airSpace_;
      hash = (37 * hash) + EQU_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + equType_;
      if (hasPosition()) {
        hash = (37 * hash) + POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getPosition().hashCode();
      }
      if (hasPosture()) {
        hash = (37 * hash) + POSTURE_FIELD_NUMBER;
        hash = (53 * hash) + getPosture().hashCode();
      }
      if (hasVelocity()) {
        hash = (37 * hash) + VELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + getVelocity().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static zb.dcts.aeronaval.Aeronaval.Target parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(zb.dcts.aeronaval.Aeronaval.Target prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code zb.dcts.aeronaval.Target}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:zb.dcts.aeronaval.Target)
        zb.dcts.aeronaval.Aeronaval.TargetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Target_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Target_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                zb.dcts.aeronaval.Aeronaval.Target.class, zb.dcts.aeronaval.Aeronaval.Target.Builder.class);
      }

      // Construct using zb.dcts.aeronaval.Aeronaval.Target.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (timeBuilder_ == null) {
          time_ = null;
        } else {
          time_ = null;
          timeBuilder_ = null;
        }
        id_ = 0;

        name_ = "";

        camp_ = 0;

        airSpace_ = 0;

        equType_ = 0;

        if (positionBuilder_ == null) {
          position_ = null;
        } else {
          position_ = null;
          positionBuilder_ = null;
        }
        if (postureBuilder_ == null) {
          posture_ = null;
        } else {
          posture_ = null;
          postureBuilder_ = null;
        }
        if (velocityBuilder_ == null) {
          velocity_ = null;
        } else {
          velocity_ = null;
          velocityBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return zb.dcts.aeronaval.Aeronaval.internal_static_zb_dcts_aeronaval_Target_descriptor;
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Target getDefaultInstanceForType() {
        return zb.dcts.aeronaval.Aeronaval.Target.getDefaultInstance();
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Target build() {
        zb.dcts.aeronaval.Aeronaval.Target result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Target buildPartial() {
        zb.dcts.aeronaval.Aeronaval.Target result = new zb.dcts.aeronaval.Aeronaval.Target(this);
        if (timeBuilder_ == null) {
          result.time_ = time_;
        } else {
          result.time_ = timeBuilder_.build();
        }
        result.id_ = id_;
        result.name_ = name_;
        result.camp_ = camp_;
        result.airSpace_ = airSpace_;
        result.equType_ = equType_;
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (postureBuilder_ == null) {
          result.posture_ = posture_;
        } else {
          result.posture_ = postureBuilder_.build();
        }
        if (velocityBuilder_ == null) {
          result.velocity_ = velocity_;
        } else {
          result.velocity_ = velocityBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof zb.dcts.aeronaval.Aeronaval.Target) {
          return mergeFrom((zb.dcts.aeronaval.Aeronaval.Target)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(zb.dcts.aeronaval.Aeronaval.Target other) {
        if (other == zb.dcts.aeronaval.Aeronaval.Target.getDefaultInstance()) return this;
        if (other.hasTime()) {
          mergeTime(other.getTime());
        }
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.camp_ != 0) {
          setCampValue(other.getCampValue());
        }
        if (other.airSpace_ != 0) {
          setAirSpaceValue(other.getAirSpaceValue());
        }
        if (other.equType_ != 0) {
          setEquTypeValue(other.getEquTypeValue());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasPosture()) {
          mergePosture(other.getPosture());
        }
        if (other.hasVelocity()) {
          mergeVelocity(other.getVelocity());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        zb.dcts.aeronaval.Aeronaval.Target parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (zb.dcts.aeronaval.Aeronaval.Target) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private zb.dcts.Dcts.Timestamp time_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> timeBuilder_;
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       * @return Whether the time field is set.
       */
      public boolean hasTime() {
        return timeBuilder_ != null || time_ != null;
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       * @return The time.
       */
      public zb.dcts.Dcts.Timestamp getTime() {
        if (timeBuilder_ == null) {
          return time_ == null ? zb.dcts.Dcts.Timestamp.getDefaultInstance() : time_;
        } else {
          return timeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public Builder setTime(zb.dcts.Dcts.Timestamp value) {
        if (timeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          time_ = value;
          onChanged();
        } else {
          timeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public Builder setTime(
          zb.dcts.Dcts.Timestamp.Builder builderForValue) {
        if (timeBuilder_ == null) {
          time_ = builderForValue.build();
          onChanged();
        } else {
          timeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public Builder mergeTime(zb.dcts.Dcts.Timestamp value) {
        if (timeBuilder_ == null) {
          if (time_ != null) {
            time_ =
              zb.dcts.Dcts.Timestamp.newBuilder(time_).mergeFrom(value).buildPartial();
          } else {
            time_ = value;
          }
          onChanged();
        } else {
          timeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public Builder clearTime() {
        if (timeBuilder_ == null) {
          time_ = null;
          onChanged();
        } else {
          time_ = null;
          timeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public zb.dcts.Dcts.Timestamp.Builder getTimeBuilder() {
        
        onChanged();
        return getTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      public zb.dcts.Dcts.TimestampOrBuilder getTimeOrBuilder() {
        if (timeBuilder_ != null) {
          return timeBuilder_.getMessageOrBuilder();
        } else {
          return time_ == null ?
              zb.dcts.Dcts.Timestamp.getDefaultInstance() : time_;
        }
      }
      /**
       * <pre>
       *消息时间
       * </pre>
       *
       * <code>.zb.dcts.Timestamp time = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder> 
          getTimeFieldBuilder() {
        if (timeBuilder_ == null) {
          timeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.Dcts.Timestamp, zb.dcts.Dcts.Timestamp.Builder, zb.dcts.Dcts.TimestampOrBuilder>(
                  getTime(),
                  getParentForChildren(),
                  isClean());
          time_ = null;
        }
        return timeBuilder_;
      }

      private int id_ ;
      /**
       * <pre>
       *目标ID
       * </pre>
       *
       * <code>uint32 id = 2;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       *目标ID
       * </pre>
       *
       * <code>uint32 id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标ID
       * </pre>
       *
       * <code>uint32 id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *名称
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int camp_ = 0;
      /**
       * <pre>
       *阵营
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
       * @return The enum numeric value on the wire for camp.
       */
      @java.lang.Override public int getCampValue() {
        return camp_;
      }
      /**
       * <pre>
       *阵营
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
       * @param value The enum numeric value on the wire for camp to set.
       * @return This builder for chaining.
       */
      public Builder setCampValue(int value) {
        
        camp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *阵营
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
       * @return The camp.
       */
      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.Camp getCamp() {
        @SuppressWarnings("deprecation")
        zb.dcts.aeronaval.Aeronaval.Camp result = zb.dcts.aeronaval.Aeronaval.Camp.valueOf(camp_);
        return result == null ? zb.dcts.aeronaval.Aeronaval.Camp.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *阵营
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
       * @param value The camp to set.
       * @return This builder for chaining.
       */
      public Builder setCamp(zb.dcts.aeronaval.Aeronaval.Camp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        camp_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *阵营
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Camp camp = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCamp() {
        
        camp_ = 0;
        onChanged();
        return this;
      }

      private int airSpace_ = 0;
      /**
       * <pre>
       *空域
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
       * @return The enum numeric value on the wire for airSpace.
       */
      @java.lang.Override public int getAirSpaceValue() {
        return airSpace_;
      }
      /**
       * <pre>
       *空域
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
       * @param value The enum numeric value on the wire for airSpace to set.
       * @return This builder for chaining.
       */
      public Builder setAirSpaceValue(int value) {
        
        airSpace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *空域
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
       * @return The airSpace.
       */
      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.AirSpace getAirSpace() {
        @SuppressWarnings("deprecation")
        zb.dcts.aeronaval.Aeronaval.AirSpace result = zb.dcts.aeronaval.Aeronaval.AirSpace.valueOf(airSpace_);
        return result == null ? zb.dcts.aeronaval.Aeronaval.AirSpace.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *空域
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
       * @param value The airSpace to set.
       * @return This builder for chaining.
       */
      public Builder setAirSpace(zb.dcts.aeronaval.Aeronaval.AirSpace value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        airSpace_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *空域
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.AirSpace air_space = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAirSpace() {
        
        airSpace_ = 0;
        onChanged();
        return this;
      }

      private int equType_ = 0;
      /**
       * <pre>
       *目标类型
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
       * @return The enum numeric value on the wire for equType.
       */
      @java.lang.Override public int getEquTypeValue() {
        return equType_;
      }
      /**
       * <pre>
       *目标类型
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
       * @param value The enum numeric value on the wire for equType to set.
       * @return This builder for chaining.
       */
      public Builder setEquTypeValue(int value) {
        
        equType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标类型
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
       * @return The equType.
       */
      @java.lang.Override
      public zb.dcts.aeronaval.Aeronaval.EquType getEquType() {
        @SuppressWarnings("deprecation")
        zb.dcts.aeronaval.Aeronaval.EquType result = zb.dcts.aeronaval.Aeronaval.EquType.valueOf(equType_);
        return result == null ? zb.dcts.aeronaval.Aeronaval.EquType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *目标类型
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
       * @param value The equType to set.
       * @return This builder for chaining.
       */
      public Builder setEquType(zb.dcts.aeronaval.Aeronaval.EquType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        equType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *目标类型
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.EquType equ_type = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearEquType() {
        
        equType_ = 0;
        onChanged();
        return this;
      }

      private zb.dcts.Dcts.Position position_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder> positionBuilder_;
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       * @return Whether the position field is set.
       */
      public boolean hasPosition() {
        return positionBuilder_ != null || position_ != null;
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       * @return The position.
       */
      public zb.dcts.Dcts.Position getPosition() {
        if (positionBuilder_ == null) {
          return position_ == null ? zb.dcts.Dcts.Position.getDefaultInstance() : position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public Builder setPosition(zb.dcts.Dcts.Position value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public Builder setPosition(
          zb.dcts.Dcts.Position.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public Builder mergePosition(zb.dcts.Dcts.Position value) {
        if (positionBuilder_ == null) {
          if (position_ != null) {
            position_ =
              zb.dcts.Dcts.Position.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = null;
          onChanged();
        } else {
          position_ = null;
          positionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public zb.dcts.Dcts.Position.Builder getPositionBuilder() {
        
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      public zb.dcts.Dcts.PositionOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_ == null ?
              zb.dcts.Dcts.Position.getDefaultInstance() : position_;
        }
      }
      /**
       * <pre>
       *位置信息
       * </pre>
       *
       * <code>.zb.dcts.Position position = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.Dcts.Position, zb.dcts.Dcts.Position.Builder, zb.dcts.Dcts.PositionOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private zb.dcts.Dcts.Posture posture_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Posture, zb.dcts.Dcts.Posture.Builder, zb.dcts.Dcts.PostureOrBuilder> postureBuilder_;
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       * @return Whether the posture field is set.
       */
      public boolean hasPosture() {
        return postureBuilder_ != null || posture_ != null;
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       * @return The posture.
       */
      public zb.dcts.Dcts.Posture getPosture() {
        if (postureBuilder_ == null) {
          return posture_ == null ? zb.dcts.Dcts.Posture.getDefaultInstance() : posture_;
        } else {
          return postureBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public Builder setPosture(zb.dcts.Dcts.Posture value) {
        if (postureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          posture_ = value;
          onChanged();
        } else {
          postureBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public Builder setPosture(
          zb.dcts.Dcts.Posture.Builder builderForValue) {
        if (postureBuilder_ == null) {
          posture_ = builderForValue.build();
          onChanged();
        } else {
          postureBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public Builder mergePosture(zb.dcts.Dcts.Posture value) {
        if (postureBuilder_ == null) {
          if (posture_ != null) {
            posture_ =
              zb.dcts.Dcts.Posture.newBuilder(posture_).mergeFrom(value).buildPartial();
          } else {
            posture_ = value;
          }
          onChanged();
        } else {
          postureBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public Builder clearPosture() {
        if (postureBuilder_ == null) {
          posture_ = null;
          onChanged();
        } else {
          posture_ = null;
          postureBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public zb.dcts.Dcts.Posture.Builder getPostureBuilder() {
        
        onChanged();
        return getPostureFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      public zb.dcts.Dcts.PostureOrBuilder getPostureOrBuilder() {
        if (postureBuilder_ != null) {
          return postureBuilder_.getMessageOrBuilder();
        } else {
          return posture_ == null ?
              zb.dcts.Dcts.Posture.getDefaultInstance() : posture_;
        }
      }
      /**
       * <pre>
       *姿态信息
       * </pre>
       *
       * <code>.zb.dcts.Posture posture = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.Dcts.Posture, zb.dcts.Dcts.Posture.Builder, zb.dcts.Dcts.PostureOrBuilder> 
          getPostureFieldBuilder() {
        if (postureBuilder_ == null) {
          postureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.Dcts.Posture, zb.dcts.Dcts.Posture.Builder, zb.dcts.Dcts.PostureOrBuilder>(
                  getPosture(),
                  getParentForChildren(),
                  isClean());
          posture_ = null;
        }
        return postureBuilder_;
      }

      private zb.dcts.aeronaval.Aeronaval.Velocity velocity_;
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.aeronaval.Aeronaval.Velocity, zb.dcts.aeronaval.Aeronaval.Velocity.Builder, zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder> velocityBuilder_;
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       * @return Whether the velocity field is set.
       */
      public boolean hasVelocity() {
        return velocityBuilder_ != null || velocity_ != null;
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       * @return The velocity.
       */
      public zb.dcts.aeronaval.Aeronaval.Velocity getVelocity() {
        if (velocityBuilder_ == null) {
          return velocity_ == null ? zb.dcts.aeronaval.Aeronaval.Velocity.getDefaultInstance() : velocity_;
        } else {
          return velocityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public Builder setVelocity(zb.dcts.aeronaval.Aeronaval.Velocity value) {
        if (velocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          velocity_ = value;
          onChanged();
        } else {
          velocityBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public Builder setVelocity(
          zb.dcts.aeronaval.Aeronaval.Velocity.Builder builderForValue) {
        if (velocityBuilder_ == null) {
          velocity_ = builderForValue.build();
          onChanged();
        } else {
          velocityBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public Builder mergeVelocity(zb.dcts.aeronaval.Aeronaval.Velocity value) {
        if (velocityBuilder_ == null) {
          if (velocity_ != null) {
            velocity_ =
              zb.dcts.aeronaval.Aeronaval.Velocity.newBuilder(velocity_).mergeFrom(value).buildPartial();
          } else {
            velocity_ = value;
          }
          onChanged();
        } else {
          velocityBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public Builder clearVelocity() {
        if (velocityBuilder_ == null) {
          velocity_ = null;
          onChanged();
        } else {
          velocity_ = null;
          velocityBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public zb.dcts.aeronaval.Aeronaval.Velocity.Builder getVelocityBuilder() {
        
        onChanged();
        return getVelocityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      public zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder getVelocityOrBuilder() {
        if (velocityBuilder_ != null) {
          return velocityBuilder_.getMessageOrBuilder();
        } else {
          return velocity_ == null ?
              zb.dcts.aeronaval.Aeronaval.Velocity.getDefaultInstance() : velocity_;
        }
      }
      /**
       * <pre>
       *速度信息
       * </pre>
       *
       * <code>.zb.dcts.aeronaval.Velocity velocity = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          zb.dcts.aeronaval.Aeronaval.Velocity, zb.dcts.aeronaval.Aeronaval.Velocity.Builder, zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder> 
          getVelocityFieldBuilder() {
        if (velocityBuilder_ == null) {
          velocityBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              zb.dcts.aeronaval.Aeronaval.Velocity, zb.dcts.aeronaval.Aeronaval.Velocity.Builder, zb.dcts.aeronaval.Aeronaval.VelocityOrBuilder>(
                  getVelocity(),
                  getParentForChildren(),
                  isClean());
          velocity_ = null;
        }
        return velocityBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:zb.dcts.aeronaval.Target)
    }

    // @@protoc_insertion_point(class_scope:zb.dcts.aeronaval.Target)
    private static final zb.dcts.aeronaval.Aeronaval.Target DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new zb.dcts.aeronaval.Aeronaval.Target();
    }

    public static zb.dcts.aeronaval.Aeronaval.Target getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Target>
        PARSER = new com.google.protobuf.AbstractParser<Target>() {
      @java.lang.Override
      public Target parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Target(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Target> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Target> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public zb.dcts.aeronaval.Aeronaval.Target getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_aeronaval_Velocity_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_aeronaval_Velocity_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_zb_dcts_aeronaval_Target_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_zb_dcts_aeronaval_Target_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031aeronaval/aeronaval.proto\022\021zb.dcts.aer" +
      "onaval\032\ndcts.proto\"T\n\010Velocity\022\025\n\reast_v" +
      "elocity\030\001 \001(\001\022\026\n\016north_velocity\030\002 \001(\001\022\031\n" +
      "\021vertical_velocity\030\003 \001(\001\"\300\002\n\006Target\022 \n\004t" +
      "ime\030\001 \001(\0132\022.zb.dcts.Timestamp\022\n\n\002id\030\002 \001(" +
      "\r\022\014\n\004name\030\003 \001(\t\022%\n\004camp\030\004 \001(\0162\027.zb.dcts." +
      "aeronaval.Camp\022.\n\tair_space\030\005 \001(\0162\033.zb.d" +
      "cts.aeronaval.AirSpace\022,\n\010equ_type\030\006 \001(\016" +
      "2\032.zb.dcts.aeronaval.EquType\022#\n\010position" +
      "\030\007 \001(\0132\021.zb.dcts.Position\022!\n\007posture\030\010 \001" +
      "(\0132\020.zb.dcts.Posture\022-\n\010velocity\030\t \001(\0132\033" +
      ".zb.dcts.aeronaval.Velocity*5\n\004Camp\022\020\n\014U" +
      "NKNOWN_CAMP\020\000\022\014\n\010RED_CAMP\020\001\022\r\n\tBLUE_CAMP" +
      "\020\002*M\n\010AirSpace\022\021\n\rUNKNOWN_SPACE\020\000\022\r\n\tSEA" +
      "_SPACE\020\001\022\020\n\014GROUND_SPACE\020\002\022\r\n\tAIR_SPACE\020" +
      "\003*\226\016\n\007EquType\022\017\n\013UNKNOWN_EUT\020\000\022\017\n\013AIRCAF" +
      "T_EUT\020\001\022\014\n\010TANK_EUT\020\002\022\030\n\024MISSILE_VECHICL" +
      "E_EUT\020\003\022\017\n\013MISSILE_EUT\020\004\022\017\n\013CARRIER_EUT\020" +
      "\005\022\017\n\013FRIGATE_EUT\020\006\022\016\n\nCOPTER_EUT\020\007\022\r\n\tKJ" +
      "500_EUT\020\010\022\020\n\014YL10_WRJ_EUT\020\t\022\014\n\010J16D_EUT\020" +
      "\n\022\014\n\010YTG9_EUT\020\013\022\014\n\010YTG8_EUT\020\014\022\014\n\010GSBJ_EU" +
      "T\020\r\022\016\n\nXY_WRJ_EUT\020\016\022\017\n\013JC_054A_EUT\020\017\022\017\n\013" +
      "JC_052D_EUT\020\020\022\020\n\014JC_891BZ_EUT\020\021\022\017\n\013JC_CF" +
      "BZ_EUT\020\022\022\024\n\020VEHICLE_LAND_EUT\020\023\022\016\n\nGYYSBJ" +
      "_EUT\020\024\022\016\n\nFSYSBJ_EUT\020\025\022\016\n\nJC_201_EUT\020\026\022\021" +
      "\n\rJC_BZJ722_EUT\020\027\022\017\n\013JC_SHJJ_EUT\020\030\022\r\n\tBY" +
      "737_EUT\020\031\022\r\n\tBO105_EUT\020\032\022\013\n\007E2C_EUT\020\033\022\013\n" +
      "\007E3B_EUT\020\034\022\013\n\007F4E_EUT\020\035\022\013\n\007F14_EUT\020\036\022\013\n\007" +
      "F16_EUT\020\037\022\013\n\007F18_EUT\020 \022\013\n\007J10_EUT\020!\022\013\n\007W" +
      "Z9_EUT\020\"\022\013\n\007F15_EUT\020#\022\014\n\010SU27_EUT\020$\022\r\n\tL" +
      "EIDA_EUT\020%\022\016\n\nJC_055_EUT\020&\022\020\n\014JC_053H3_E" +
      "UT\020\'\022\017\n\013JC_056A_EUT\020(\022\020\n\014JC_HB723_EUT\020)\022" +
      "\014\n\010J15D_EUT\020*\022\013\n\007J20_EUT\020+\022\013\n\007H7A_EUT\020,\022" +
      "\022\n\016JC_DZZC856_EUT\020-\022\016\n\nJC_137_EUT\020.\022\r\n\tB" +
      "Y747_EUT\020/\022\014\n\010A320_EUT\0200\022\014\n\010A380_EUT\0201\022\016" +
      "\n\nHOOKER_EUT\0202\022\023\n\017COPTER_MG18_EUT\0203\022\r\n\tE" +
      "A18G_EUT\0204\022\013\n\007Y20_EUT\0205\022\021\n\rDF_EQ1141_EUT" +
      "\0206\022\027\n\023COMMAND_VEHICLE_EUT\0207\022\021\n\rJC_MARINE" +
      "_EUT\0208\022\017\n\013JC_YLSB_EUT\0209\022\016\n\nJC_XDB_EUT\020:\022" +
      "\024\n\020JC_BLACKSWAN_EUT\020;\022\021\n\rMISSILE_AGM88\020<" +
      "\022\022\n\016MISSILE_AGM154\020=\022\020\n\014MISSILE_MALD\020>\022\021" +
      "\n\rMISSILE_HJQTQ\020?\022\022\n\016COPTER_Z20_EUT\020@\022\021\n" +
      "\rCOPTER_Z9_EUT\020A\022\022\n\016COPTER_WZ2_EUT\020B\022\r\n\t" +
      "KJ200_EUT\020C\022\013\n\007E2D_EUT\020D\022\013\n\007F35_EUT\020E\022\016\n" +
      "\nEC130H_EUT\020F\022\014\n\010EP3E_EUT\020G\022\013\n\007J11_EUT\020H" +
      "\022\016\n\nFA18EF_EUT\020I\022\013\n\007P8A_EUT\020J\022\017\n\013XJL_WRJ" +
      "_EUT\020K\022\017\n\013QQY_WRJ_EUT\020L\022\021\n\rXQ58A_WRJ_EUT" +
      "\020M\022\025\n\021ALTIUS600_WRJ_EUT\020N\022\026\n\022MISSILE_RIM" +
      "162_EUT\020O\022\024\n\020MISSILE_MK48_EUT\020P\022\024\n\020MISSI" +
      "LE_MK67_EUT\020Q\022\025\n\021MISSILE_GBU39_EUT\020R\022\025\n\021" +
      "MISSILE_LRASM_EUT\020S\022\020\n\014JC_BZBRJ_EUT\020T\022\020\n" +
      "\014JC_HMWRT_EUT\020U\022\017\n\013JC_FJNY_EUT\020V\022\022\n\016JC_H" +
      "UOLUN1_EUT\020W\022\022\n\016JC_HUOLUN2_EUT\020X\022\022\n\016JC_H" +
      "UOLUN3_EUT\020Y\022\022\n\016JC_HUOLUN4_EUT\020Z\022\022\n\016JC_Y" +
      "OULUN1_EUT\020[\022\022\n\016JC_YOULUN2_EUT\020\\\022\022\n\016JC_Y" +
      "OULUN3_EUT\020]\022\022\n\016JC_YOULUN4_EUT\020^\022\023\n\017JC_Y" +
      "UCHUAN1_EUT\020_\022\023\n\017JC_YUCHUAN2_EUT\020`\022\023\n\017JC" +
      "_YUCHUAN3_EUT\020a\022\026\n\022MISSILE_AGM88_BLUE\020b\022" +
      "\025\n\021MISSILE_HHQ9B_EUT\020c\022\024\n\020MISSILE_HQ10_E" +
      "UT\020d\022\020\n\014JC_ZRWRT_EUT\020e\022\r\n\tRADAR_EUT\020f\022\023\n" +
      "\017JC_LIAONING_EUT\020gb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          zb.dcts.Dcts.getDescriptor(),
        });
    internal_static_zb_dcts_aeronaval_Velocity_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_zb_dcts_aeronaval_Velocity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_aeronaval_Velocity_descriptor,
        new java.lang.String[] { "EastVelocity", "NorthVelocity", "VerticalVelocity", });
    internal_static_zb_dcts_aeronaval_Target_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_zb_dcts_aeronaval_Target_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_zb_dcts_aeronaval_Target_descriptor,
        new java.lang.String[] { "Time", "Id", "Name", "Camp", "AirSpace", "EquType", "Position", "Posture", "Velocity", });
    zb.dcts.Dcts.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
